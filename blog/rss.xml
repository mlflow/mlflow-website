<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>MLflow Blog</title>
        <link>https://your-docusaurus-site.example.com/mlflow-website/blog</link>
        <description>MLflow Blog</description>
        <lastBuildDate>Tue, 06 Aug 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[LangGraph with Custom PyFunc]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow</guid>
            <pubDate>Tue, 06 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In this blog, we'll guide you through creating a LangGraph chatbot within an MLflow custom PyFunc. By combining MLflow with LangGraph's ability to create and manage cyclical graphs, you can create powerful stateful, multi-actor applications in a scalable fashion.]]></description>
            <content:encoded><![CDATA[<p>In this blog, we'll guide you through creating a LangGraph chatbot within an MLflow custom PyFunc. By combining MLflow with LangGraph's ability to create and manage cyclical graphs, you can create powerful stateful, multi-actor applications in a scalable fashion.</p>
<p>Throughout this post we will demonstrate how to leverage MLflow's ChatModel to create a serializable and servable MLflow model which can easily be tracked, versioned, and deployed on a variety of servers.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-custom-pyfunc">What is a Custom PyFunc?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#what-is-a-custom-pyfunc" class="hash-link" aria-label="Direct link to What is a Custom PyFunc?" title="Direct link to What is a Custom PyFunc?">​</a></h3>
<p>While MLflow strives to cover many popular machine learning libraries, there has been a proliferation of open source packages. If users want MLflow's myriad benefits paired with a package that doesn't have native support, users can create a [custom PyFunc model](<a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html</a> or <a href="https://mlflow.org/blog/custom-pyfunc" target="_blank" rel="noopener noreferrer">https://mlflow.org/blog/custom-pyfunc</a>).
Custom PyFunc models allow you to integrate any Python code, providing flexibility in defining GenAI apps and AI models. These models can be easily logged, managed, and deployed using the typical MLflow APIs, enhancing flexibility and portability in machine learning workflows.</p>
<p>Within the category of custom PyFunc models, MLflow supports a specialized model called <a href="https://mlflow.org/docs/latest/llms/transformers/tutorials/conversational/pyfunc-chat-model.html" target="_blank" rel="noopener noreferrer">ChatModel</a>. It extends the base PyFunc functionality to specifically support messages. For this demo, we will use ChatModel to create a LangGraph chatbot.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-langgraph">What is LangGraph?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#what-is-langgraph" class="hash-link" aria-label="Direct link to What is LangGraph?" title="Direct link to What is LangGraph?">​</a></h3>
<p><a href="https://langchain-ai.github.io/langgraph/" target="_blank" rel="noopener noreferrer">LangGraph</a> is a library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows. Compared to other LLM frameworks, it offers these core benefits:</p>
<ul>
<li><strong>Cycles and Branching</strong>: Implement loops and conditionals in your apps.</li>
<li><strong>Persistence</strong>: Automatically save state after each step in the graph. Pause and resume the graph execution at any point to support error recovery, human-in-the-loop workflows, time travel and more.</li>
<li><strong>Human-in-the-Loop</strong>: Interrupt graph execution to approve or edit next action planned by the agent.</li>
<li><strong>Streaming Support</strong>: Stream outputs as they are produced by each node (including token streaming).</li>
<li><strong>Integration with LangChain</strong>: LangGraph integrates seamlessly with LangChain and LangSmith (but does not require them).</li>
</ul>
<p>LangGraph allows you to define flows that involve cycles, essential for most agentic architectures, differentiating it from DAG-based solutions. As a very low-level framework, it provides fine-grained control over both the flow and state of your application, crucial for creating reliable agents. Additionally, LangGraph includes built-in persistence, enabling advanced human-in-the-loop and memory features.</p>
<p>LangGraph is inspired by Pregel and Apache Beam. The public interface draws inspiration from NetworkX. LangGraph is built by LangChain Inc, the creators of LangChain, but can be used without LangChain.</p>
<p>For a full walkthrough, check out the <a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/" target="_blank" rel="noopener noreferrer">LangGraph Quickstart</a> and for more on the fundamentals of design with LangGraph, check out the <a href="https://langchain-ai.github.io/langgraph/concepts/#human-in-the-loop" target="_blank" rel="noopener noreferrer">conceptual guides</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1---setup">1 - Setup<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#1---setup" class="hash-link" aria-label="Direct link to 1 - Setup" title="Direct link to 1 - Setup">​</a></h2>
<p>First, we must install the required dependencies. We will use OpenAI for our LLM in this example, but using LangChain with LangGraph makes it easy to substitute any alternative supported LLM or LLM provider.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">capture</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">pip install langgraph</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token number" style="color:rgb(181, 206, 168)">.3</span><span class="token plain"> langsmith</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token number" style="color:rgb(181, 206, 168)">.98</span><span class="token plain"> mlflow</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;=</span><span class="token number" style="color:rgb(181, 206, 168)">2.15</span><span class="token number" style="color:rgb(181, 206, 168)">.1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">pip install </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain">U typing_extensions</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">pip install langchain_openai</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token number" style="color:rgb(181, 206, 168)">.21</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, let's get our relevant secrets. <code>getpass</code>, as demonstrated in the <a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/#setup" target="_blank" rel="noopener noreferrer">LangGraph quickstart</a> is a great way to insert your keys into an interactive jupyter environment.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set required environment variables for authenticating to OpenAI and LangSmith</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Check additional MLflow tutorials for examples of authentication if needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># https://mlflow.org/docs/latest/llms/openai/guide/index.html#direct-openai-service-usage</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set the OPENAI_API_KEY environment variable."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"LANGSMITH_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set the LANGSMITH_API_KEY environment variable."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2---custom-utilities">2 - Custom Utilities<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#2---custom-utilities" class="hash-link" aria-label="Direct link to 2 - Custom Utilities" title="Direct link to 2 - Custom Utilities">​</a></h2>
<p>While this is a demo, it's good practice to separate reusable utilities into a separate file/directory. Below we create three general utilities that theoretically would valuable when building additional MLflow + LangGraph implementations.</p>
<p>Note that we use the magic <code>%%writefile</code> command to create a new file in a jupyter notebook context. If you're running this outside of an interactive notebook, simply create the file below, omitting the <code>%%writefile {FILE_NAME}.py</code> line.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">writefile langgraph_utils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">py</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># omit this line if directly creating this file; this command is purely for running within Jupyter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Union</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Dict</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain_core</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    AIMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    HumanMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    SystemMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    messages_from_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">types</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatMessage</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">validate_langgraph_environment_variables</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Ensure that required secrets and project environment variables are present."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Validate enviornment variable secrets are present</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    required_secrets </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"LANGSMITH_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> missing_keys </span><span class="token operator" style="color:rgb(212, 212, 212)">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">key </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> key </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> required_secrets </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"The following keys are missing: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">missing_keys</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add project environent variables if not present</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"LANCHAIN_TRACING_V2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"LANGCHAIN_TRACING_V2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"true"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"LANGCHAIN_PROJECT"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"LANGCHAIN_TRACING_V2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"LangGraph MLflow Tutorial"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_format_mlflow_chat_message_for_langraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    chat_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow_role_to_langgraph_type </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"human"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"assistant"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ai"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> role_clean </span><span class="token operator" style="color:rgb(212, 212, 212)">:=</span><span class="token plain"> mlflow_role_to_langgraph_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">chat_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">role</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> role_clean</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> chat_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Incorrect role specified: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">chat_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">role</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">mlflow_chat_message_to_langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    chat_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Union</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">AIMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> HumanMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> SystemMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Convert MLflow messages (list of mlflow.types.llm.ChatMessage) to LangGraph messages.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    This utility is required because LangGraph messages have a different structure and type</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    than MLflow ChatMessage. If we pass the payload coming into our `predict()` method directly</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    into the LangGraph graph, we'll get an error.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># NOTE: This is a simplified example for demonstration purposes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">chat_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        list_of_parsed_dicts </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _format_mlflow_chat_message_for_langraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">d</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> d </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> chat_message</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> messages_from_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">list_of_parsed_dicts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Invalid _dict type: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation builtin" style="color:rgb(86, 156, 214)">type</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation interpolation">chat_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By the end of this step, you should see a new file in your current directory with the name <code>langgraph_utils.py</code>.</p>
<p>Note that it's best practice to add unit tests and properly organize your project into logically structured directories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3---custom-pyfunc-chatmodel">3 - Custom PyFunc ChatModel<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#3---custom-pyfunc-chatmodel" class="hash-link" aria-label="Direct link to 3 - Custom PyFunc ChatModel" title="Direct link to 3 - Custom PyFunc ChatModel">​</a></h2>
<p>Great! Now that we have some reusable utilities located in <code>./langgraph_utils.py</code>, we are ready to declare a custom PyFunc and log the model. However, before writing more code, let's provide some quick background on the <strong>Model from Code</strong> feature.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="31---create-our-model-from-code-file">3.1 - Create our Model-From-Code File<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#31---create-our-model-from-code-file" class="hash-link" aria-label="Direct link to 3.1 - Create our Model-From-Code File" title="Direct link to 3.1 - Create our Model-From-Code File">​</a></h3>
<p>Historically, MLflow's process of saving a custom <code>pyfunc</code> model uses a mechanism that has some frustrating drawbacks: <code>cloudpickle</code>. Prior to the release of support for saving a model as a Python script in MLflow 2.12.2 (known as the <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">models from code</a> feature), logging a defined <code>pyfunc</code> involved pickling an instance of that model. Along with the pickled model artifact, MLflow will store the signature, which can be passed or inferred from the <code>model_input</code> parameter. It will also log inferred model dependencies to help you serve the model in a new environment.</p>
<p>Pickle is an easy-to-use serialization mechanism, but it has a variety of limitations:</p>
<ul>
<li><strong>Limited Support for Some Data Types</strong>: <code>cloudpickle</code> may struggle with serializing certain complex or low-level data types, such as file handles, sockets, or objects containing these types, which can lead to errors or incorrect deserialization.</li>
<li><strong>Version Compatibility Issues</strong>: Serialized objects with <code>cloudpickle</code> may not be deserializable across different versions of <code>cloudpickle</code> or Python, making long-term storage or sharing between different environments risky.</li>
<li><strong>Recursion Depth for Nested Dependencies</strong>: <code>cloudpickle</code> can serialize objects with nested dependencies (e.g., functions within functions, or objects that reference other objects). However, deeply nested dependencies can hit the recursion depth limit imposed by Python's interpreter.</li>
<li><strong>Mutable Object States that Cannot be Serialized</strong>: <code>cloudpickle</code> struggles to serialize certain mutable objects whose states change during runtime, especially if these objects contain non-serializable elements like open file handles, thread locks, or custom C extensions. Even if <code>cloudpickle</code> can serialize the object structure, it may fail to capture the exact state or may not be able to deserialize the state accurately, leading to potential data loss or incorrect behavior upon deserialization.</li>
</ul>
<p>To get around this issue, we must perform the following steps:</p>
<ol>
<li>Create an additional Python file in our directory.</li>
<li>In that file, create a function that creates a <a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/#part-1-build-a-basic-chatbot" target="_blank" rel="noopener noreferrer">CompiledStateGraph</a>, which is DAG-based stateful chatbot.</li>
<li>Also in that file, create a <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">MLflow custom PyFunc</a>. Note that in our case, we're using a <a href="https://mlflow.org/docs/latest/llms/transformers/tutorials/conversational/pyfunc-chat-model.html#Customizing-the-model" target="_blank" rel="noopener noreferrer">custom ChatModel</a>.</li>
<li>Also in that file, set the custom ChatModel to be accessible by <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">MLflow model from code</a> via the <a href="https://mlflow.org/docs/latest/python_api/mlflow.models.html#mlflow.models.set_model" target="_blank" rel="noopener noreferrer">mlflow.models.set_model()</a> command.</li>
<li>In a different file, log the <strong>path</strong> to the file created in steps 1-3 instead of the model object.</li>
</ol>
<p>By passing a Python file, we simply can load the model from that Python code, thereby bypassing all the headaches associated with serialization and <code>cloudpickle</code>.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">writefile graph_chain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">py</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># omit this line if directly creating this file; this command is purely for running within Jupyter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain_openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatOpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> StateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> START</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> END</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">message </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> add_messages</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">state </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> CompiledStateGraph</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Our custom utilities</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph_utils </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow_chat_message_to_langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    validate_langgraph_environment_variables</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">types</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ChatParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ChatResponse</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> random</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> List</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing_extensions </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> TypedDict</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> CompiledStateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Create example chatbot from LangGraph Quickstart."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">TypedDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> add_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> StateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ChatOpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">chatbot</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_node</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> chatbot</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_edge</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">START</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_edge</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> END</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">compile</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LangGraphChatModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ChatModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> load_graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> ChatParams</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> ChatResponse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Format mlflow ChatMessage as LangGraph messages</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow_chat_message_to_langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Query the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Extract the response text</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        text </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">content</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># NB: chat session ID should be handled on the client side. Here we</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># create a placeholder for demonstration purposes. Furthermore, if you</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># need persistance between model sessions, it's a good idea to</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># write your session history to a database.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">id</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"some_meaningful_id_</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">random</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">randint</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">0</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token string-interpolation interpolation"> </span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">100</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Format the response to be compatible with MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"id"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"MyChatModel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"choices"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"index"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"message"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"assistant"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"finish_reason"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"stop"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"usage"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> ChatResponse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set our model to be accessible by MLflow model from code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">LangGraphChatModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="32---log-our-model-from-code">3.2 - Log our Model-From-Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#32---log-our-model-from-code" class="hash-link" aria-label="Direct link to 3.2 - Log our Model-From-Code" title="Direct link to 3.2 - Log our Model-From-Code">​</a></h3>
<p>After creating this ChatModel implementation in we leverage the standard MLflow APIs to log the model. However, as noted above, instead of passing a model object, we pass the path <code>str</code> to the file containing our <code>mlflow.models.set_model()</code> command.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model to the mlflow tracking server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"graph_chain.py"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Path to our custom model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"langgraph_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Store the run id for later loading</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    run_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">run_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4---use-the-logged-model">4 - Use the Logged Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#4---use-the-logged-model" class="hash-link" aria-label="Direct link to 4 - Use the Logged Model" title="Direct link to 4 - Use the Logged Model">​</a></h2>
<p>Now that we have successfully logged a model, we can load it and leverage it for inference.</p>
<p>In the code below, we demonstrate that our chain has chatbot functionality!</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># NOTE: you need the run_id from the above step or another model URI format</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"runs:/</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">/langgraph_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Show inference and message history</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"-------- Message 1 -----------"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"What's my name?"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'choices'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">-</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">1</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'message'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'content'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># print("\n-------- Message 2 -----------")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"My name is Morpheus."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">choice</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'message'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> choice </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'choices'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'choices'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">-</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">1</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'message'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'content'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># # print("\n-------- Message 3 -----------")</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"What's my name?"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">choice</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'message'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> choice </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'choices'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'choices'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">-</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">1</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'message'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'content'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ouput:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 1 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: What's my name?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: I'm sorry, I don't know your name. Can you please tell me?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 2 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: My name is Morpheus.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: Nice to meet you, Morpheus! How can I assist you today?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 3 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: What's my name?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: Your name is Morpheus!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5---summary">5 - Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow#5---summary" class="hash-link" aria-label="Direct link to 5 - Summary" title="Direct link to 5 - Summary">​</a></h2>
<p>There are many logical extensions of the this tutorial, however the MLflow components can remain largely unchanged. Some examples include persisting chat history to a database, implementing a more complex langgraph object, productionizing this solution, and much more!</p>
<p>To summarize, here's what was covered in this tutorial:</p>
<ul>
<li>Creating a simple LangGraph chain.</li>
<li>Declaring a custom MLflow PyFunc ChatModel that wraps the above LangGraph chain with pre/post-processing logic.</li>
<li>Leveraging MLflow <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">model from code</a> functionality to log our Custom PyFunc.</li>
<li>Loading the Custom PyFunc via the standard MLflow APIs.</li>
</ul>
<p>Happy coding!</p>]]></content:encoded>
            <category>genai</category>
            <category>mlops</category>
        </item>
        <item>
            <title><![CDATA[PyFunc in Practice]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice</guid>
            <pubDate>Fri, 26 Jul 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Creative Applications of MLflow Pyfunc in Machine Learning Projects]]></description>
            <content:encoded><![CDATA[<p>If you're looking to fully leverage the capabilities of <code>mlflow.pyfunc</code> and understand how it can be utilized in a Machine Learning project, this blog post will guide you through the process. MLflow PyFunc offers creative freedom and flexibility, allowing the development of complex systems encapsulated as models in MLflow that follow the same lifecycle as traditional ones. This blog will showcase how to create multi-model setups, seamlessly connect to databases, and implement your own custom fit method in your MLflow PyFunc model.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>This blog post demonstrates the capabilities of <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html" target="_blank" rel="noopener noreferrer">MLflow PyFunc</a> and how it can be utilized to build a multi-model setup encapsulated as a PyFunc flavor model in MLflow. This approach allows ensemble models to follow the same lifecycle as traditional <a href="https://mlflow.org/docs/latest/models.html#built-in-model-flavors" target="_blank" rel="noopener noreferrer">Built-In Model Flavors</a> in MLflow.</p>
<p>But first, let's use an analogy to get you familiarized with the concept of ensemble models and why you should consider this solution in your next Machine Learning project.</p>
<p>Imagine you are in the market to buy a house. Would you make a decision based solely on the first house you visit and the advice of a single real estate agent? Of course not! The process of buying a house involves considering multiple factors and gathering information from various sources to make an informed decision.</p>
<p>The house buying process explained:</p>
<ul>
<li><strong>Identify Your Needs</strong>: Determine whether you want a new or used house, the type of house, the model, and the year of construction.</li>
<li><strong>Research</strong>: Look for a list of available houses, check for discounts and offers, read customer reviews, and seek opinions from friends and family.</li>
<li><strong>Evaluate</strong>: Consider the performance, location, neighborhood amenities, and price range.</li>
<li><strong>Compare</strong>: Compare multiple houses to find the best fit for your needs and budget.</li>
</ul>
<p>In short, you wouldn’t directly reach a conclusion but would instead make a decision considering all the aforementioned factors before deciding on the best choice.</p>
<p>Ensemble models in Machine Learning operate on a similar idea. Ensemble learning helps improve Machine Learning results by combining several models to improve predictive performance compared to a single model. The performance increase can be due to several factors such as the reduction in variance by averaging multiple models or reducing bias by focusing on errors of previous models. There are several types of ensemble learning techniques exists such as:</p>
<ul>
<li><strong>Averaging</strong></li>
<li><strong>Weighted Averaging</strong></li>
<li><strong>Bagging</strong></li>
<li><strong>Boosting</strong></li>
<li><strong>Stacking</strong></li>
</ul>
<p>However, developing such systems requires careful management of the lifecycle of ensemble models, as integrating diverse models can be highly complex. This is where MLflow PyFunc becomes invaluable. It offers the flexibility to build complex systems, treating the entire ensemble as a model that adheres to the same lifecycle processes as traditional models. Essentially, MLflow PyFunc allows the creation of custom methods tailored to ensemble models, serving as an alternative to the built-in MLflow flavors available for popular frameworks such as scikit-learn, PyTorch, and LangChain.</p>
<p>This blog utilizes the house price dataset from <a href="https://www.kaggle.com/" target="_blank" rel="noopener noreferrer">Kaggle</a> to demonstrate the development and management of ensemble models through MLflow.</p>
<p>We will leverage various tools and technologies to highlight the capabilities of MLflow PyFunc models. Before delving into the ensemble model itself, we will explore how these components integrate to create a robust and efficient Machine Learning pipeline.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="components-of-the-project">Components of the Project<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#components-of-the-project" class="hash-link" aria-label="Direct link to Components of the Project" title="Direct link to Components of the Project">​</a></h3>
<p><strong>DuckDB</strong><br>
<!-- -->DuckDB is a high-performance analytical database system designed to be fast, reliable, portable, and easy to use. In this project, it showcases the integration of a database connection within the model context, facilitating efficient data handling directly within the model. <a href="https://duckdb.org/" target="_blank" rel="noopener noreferrer">Learn more about DuckDB</a>.</p>
<p><strong>scikit-learn (sklearn)</strong><br>
<!-- -->scikit-learn is a Machine Learning library for Python that provides efficient tools for data analysis and modelling. In this project, it is used to develop and evaluate various Machine Learning models that are integrated into our ensemble model. <a href="https://scikit-learn.org/" target="_blank" rel="noopener noreferrer">Learn more about scikit-learn</a>.</p>
<p><strong>MLflow</strong><br>
<!-- -->MLflow is an open-source platform for managing the end-to-end Machine Learning lifecycle, including experimentation, reproducibility, and deployment. In this project, it tracks experiments, manages model versions, and facilitates the deployment of MLflow PyFunc models in a similar manner to how we are familiar with individual flavors. <a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">Learn more about MLflow</a>.</p>
<blockquote>
<p><strong>Note:</strong> To reproduce this project, please refer to the official MLflow documentation for more details on setting up a simple local <a href="https://mlflow.org/docs/latest/tracking/server.html" target="_blank" rel="noopener noreferrer">MLflow Tracking Server</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-the-ensemble-model">Creating the Ensemble Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#creating-the-ensemble-model" class="hash-link" aria-label="Direct link to Creating the Ensemble Model" title="Direct link to Creating the Ensemble Model">​</a></h2>
<p>Creating a MLflow PyFunc ensemble model requires additional steps compared to using the built-in flavors for logging and working with popular Machine Learning frameworks.</p>
<p>To implement an ensemble model, you need to define an <code>mlflow.pyfunc</code> model, which involves creating a Python class that inherits from the <code>PythonModel</code> class and implementing its constructor and class methods. While the basic creation of a PyFunc model only requires implementing the <code>predict</code> method, an ensemble model requires additional methods to manage the models and obtain multi-model predictions. After instantiating the ensemble model, you must use the custom <code>fit</code> method to train the ensemble model's sub-models. Similar to an out-of-the-box MLflow model, you need to log the model along with its artifacts during the training run and then register the model in the MLflow Model Registry. A model alias <code>production</code> will also be added to the model to streamline both model updates and inference. Model aliases allow you to assign a mutable, named reference to a specific version of a registered model. By assigning the alias to a particular model version, it can be easily referenced via a model URI or the model registry API. This setup allows for seamless updates to the model version used for inference without changing the serving workload code. For more details, refer to <a href="https://mlflow.org/docs/latest/model-registry.html#deploy-and-organize-models-with-aliases-and-tags" target="_blank" rel="noopener noreferrer">Deploy and Organize Models with Aliases and Tags</a>.</p>
<p>The following sections, as depicted in the diagram, detail the implementation of each method for the ensemble model, providing a comprehensive understanding of defining, managing, and utilizing an ensemble model with MLflow PyFunc.</p>
<p><img loading="lazy" alt="Ensemble Model Architecture" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-architecture-2b00df62594a4030a01d626d8d06d2be.png" width="1545" height="1200" class="img_ev3q"></p>
<p>Before delving into the detailed implementation of each method, let's first review the skeleton of our <code>EnsembleModel</code> class. This skeleton serves as a blueprint for understanding the structure of the ensemble model. The subsequent sections will provide an overview and code for both the default methods provided by MLflow PyFunc and the custom methods implemented for the ensemble model.</p>
<p>Here is the skeleton of the <code>EnsembleModel</code> class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Ensemble model class leveraging Pyfunc for multi-model integration in MLflow."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Initialize the EnsembleModel instance."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Add strategies to the DuckDB database."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Perform feature engineering on input data."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Initialize models and their hyperparameter grids."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Train the ensemble of models."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Predict using the ensemble of models."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Load the preprocessor and models from the MLflow context."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initializing-the-ensemblemodel">Initializing the EnsembleModel<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#initializing-the-ensemblemodel" class="hash-link" aria-label="Direct link to Initializing the EnsembleModel" title="Direct link to Initializing the EnsembleModel">​</a></h3>
<p>The constructor method in the ensemble model is crucial for setting up its essential elements. It establishes key attributes such as the preprocessor, a dictionary to store trained models, the path to a DuckDB database, and a pandas DataFrame for managing different ensemble strategies. Additionally, it takes advantage of the <code>initialize_models</code> method to define the sub-models integrated into the ensemble.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Initializes the EnsembleModel instance.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Sets up an empty preprocessing pipeline, a dictionary for fitted models,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    and a DataFrame to store strategies. Also calls the method to initialize sub-models.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-strategies-and-saving-to-the-database">Adding Strategies and Saving to the Database<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#adding-strategies-and-saving-to-the-database" class="hash-link" aria-label="Direct link to Adding Strategies and Saving to the Database" title="Direct link to Adding Strategies and Saving to the Database">​</a></h3>
<p>The custom-defined <code>add_strategy_and_save_to_db</code> method enables the addition of new ensemble strategies to the model and their storage in a DuckDB database. This method accepts a pandas DataFrame containing the strategies and the database path as inputs. It appends the new strategies to the existing ones and saves them in the database specified during the initialization of the ensemble model. This method facilitates the management of various ensemble strategies and ensures their persistent storage for future use.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> strategy_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Add strategies from a DataFrame and save them to the DuckDB database.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        strategy_df (pd.DataFrame): DataFrame containing strategies.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        db_path (str): Path to the DuckDB database.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Update the instance-level database path for the current object</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> db_path</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Attempt to concatenate new strategies with the existing DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">try</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">concat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> strategy_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ignore_index</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">except</span><span class="token plain"> Exception </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print an error message if any exceptions occur during concatenation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Error concatenating DataFrames: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">e</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Exit early to prevent further errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use context manager for the database connection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">try</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> duckdb</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Register the strategies DataFrame as a temporary table in DuckDB</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy_df"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Drop any existing strategies table and create a new one with updated strategies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"DROP TABLE IF EXISTS strategies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"CREATE TABLE strategies AS SELECT * FROM strategy_df"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">except</span><span class="token plain"> Exception </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print an error message if any exceptions occur during database operations</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Error executing database operations: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">e</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The following example demonstrates how to use this method to add strategies to the database.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define strategies for the ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategy_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a DataFrame to hold the strategy information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add strategies to the database</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategies_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The DataFrame <code>strategy_data</code> includes:</p>
<ul>
<li><strong>strategy</strong>: The name of the strategy for model predictions.</li>
<li><strong>model_list</strong>: A comma-separated list of model names included in the strategy.</li>
<li><strong>weights</strong>: A comma-separated list of weights assigned to each model in the <code>model_list</code>. If not provided, implies equal weights or default values.</li>
</ul>
<table><thead><tr><th>strategy</th><th>model_list</th><th>weights</th></tr></thead><tbody><tr><td>average_1</td><td>random_forest,xgboost,decision_tree,gradient_boosting,adaboost</td><td>1</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-engineering">Feature Engineering<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#feature-engineering" class="hash-link" aria-label="Direct link to Feature Engineering" title="Direct link to Feature Engineering">​</a></h3>
<p>The <code>feature_engineering</code> method preprocesses input data by handling missing values, scaling numerical features, and encoding categorical features. It applies different transformations to both numerical and categorical features, and returns the processed features as a NumPy array. This method is crucial for preparing data in a suitable format for model training, ensuring consistency and enhancing model performance.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">compose </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ColumnTransformer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">impute </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SimpleImputer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pipeline </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Pipeline</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> StandardScaler</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ndarray</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Applies feature engineering to the input data X, including imputation, scaling, and encoding.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        X (pd.DataFrame): Input features with potential categorical and numerical columns.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        np.ndarray: Processed feature array after transformations.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Convert columns with 'object' dtype to 'category' dtype for proper handling of categorical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">apply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">lambda</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">astype</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"category"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dtypes </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"object"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token plain"> col</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Identify categorical and numerical features from the DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    categorical_features </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">select_dtypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">include</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"category"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    numerical_features </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">select_dtypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">include</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"number"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the pipeline for numerical features: imputation followed by scaling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    numeric_transformer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Pipeline</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        steps</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"imputer"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                SimpleImputer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"median"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace missing values with the median</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"scaler"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                StandardScaler</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Standardize features by removing the mean and scaling to unit variance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the pipeline for categorical features: imputation followed by one-hot encoding</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    categorical_transformer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Pipeline</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        steps</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"imputer"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                SimpleImputer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"most_frequent"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace missing values with the most frequent value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"onehot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">handle_unknown</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ignore"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Encode categorical features as a one-hot numeric array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a ColumnTransformer to apply the appropriate pipelines to the respective feature types</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ColumnTransformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        transformers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"num"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                numeric_transformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                numerical_features</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the numeric pipeline to numerical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"cat"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                categorical_transformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                categorical_features</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the categorical pipeline to categorical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit and transform the input data using the preprocessor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit_transform</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Store the preprocessor for future use in the predict method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> preprocessor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> X_processed</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initializing-models">Initializing Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#initializing-models" class="hash-link" aria-label="Direct link to Initializing Models" title="Direct link to Initializing Models">​</a></h3>
<p>The <code>initialize_models</code> method sets up a dictionary of various Machine Learning models along with their hyperparameter grids. This includes models such as <code>RandomForest</code>, <code>XGBoost</code>, <code>DecisionTree</code>, <code>GradientBoosting</code>, and <code>AdaBoost</code>. This step is crucial for preparing the ensemble’s sub-models and specifying the hyperparameters to adjust during training, ensuring that each model is configured correctly and ready for training.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    AdaBoostRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    GradientBoostingRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">tree </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> DecisionTreeRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> xgboost </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> XGBRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Initializes a dictionary of models along with their hyperparameter grids for grid search.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define various regression models with their respective hyperparameter grids for tuning</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            XGBRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            DecisionTreeRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            GradientBoostingRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            AdaBoostRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"learning_rate"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0.01</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-fit-method-to-train-and-save-multi-models">Defining a Custom <code>fit</code> Method to Train and Save Multi-Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-custom-fit-method-to-train-and-save-multi-models" class="hash-link" aria-label="Direct link to defining-a-custom-fit-method-to-train-and-save-multi-models" title="Direct link to defining-a-custom-fit-method-to-train-and-save-multi-models">​</a></h3>
<p>As already highlighted in the previous method, a key feature of MLflow PyFunc models is the ability to define custom methods, providing significant flexibility and customization for various tasks. In the multi-model PyFunc setup, the <code>fit</code> method is essential for customizing and optimizing multiple sub-models. It manages the training and fine-tuning of algorithms such as <code>RandomForestRegressor</code>, <code>XGBRegressor</code>, <code>DecisionTreeRegressor</code>, <code>GradientBoostingRegressor</code>, and <code>AdaBoostRegressor</code>. For demonstration purposes, Grid Search is used, which, while straightforward, can be computationally intensive and time-consuming, especially for ensemble models. To enhance efficiency, advanced optimization methods such as Bayesian optimization are recommended. Tools like <a href="https://optuna.org/" target="_blank" rel="noopener noreferrer">Optuna</a> and <a href="https://hyperopt.github.io/hyperopt/" target="_blank" rel="noopener noreferrer">Hyperopt</a> leverage probabilistic models to intelligently navigate the search space, significantly reducing the number of evaluations needed to identify optimal configurations.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> GridSearchCV</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Series</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Trains the ensemble of models using the provided preprocessed training data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        X_train_processed (pd.DataFrame): Preprocessed feature matrix for training.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        y_train (pd.Series): Target variable for training.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        save_path (str): Directory path where trained models will be saved.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create the directory for saving models if it does not exist</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">makedirs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> exist_ok</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Iterate over each model and its parameter grid</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> param_grid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Perform GridSearchCV to find the best hyperparameters for the current model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        grid_search </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> GridSearchCV</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> param_grid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> cv</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n_jobs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> scoring</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"neg_mean_squared_error"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        grid_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the model with the training data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the best estimator from GridSearchCV</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        best_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> grid_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">best_estimator_</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> best_model</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the trained model to disk</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dump</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">best_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-predict-method-to-aggregate-multi-model-predictions">Defining a Custom <code>predict</code> Method to Aggregate Multi-model Predictions<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-custom-predict-method-to-aggregate-multi-model-predictions" class="hash-link" aria-label="Direct link to defining-a-custom-predict-method-to-aggregate-multi-model-predictions" title="Direct link to defining-a-custom-predict-method-to-aggregate-multi-model-predictions">​</a></h3>
<p>To streamline the inference process, every PyFunc model should define a custom <code>predict</code> method as the single entry point for inference. This approach abstracts the model's internal workings at inference time, whether dealing with a custom PyFunc model or an out-of-the-box MLflow built-in flavor for popular ML frameworks.</p>
<p>The custom <code>predict</code> method for the ensemble model is designed to collect and combine predictions from the sub-models, supporting various aggregation strategies (e.g., average, weighted). The process involves the following steps:</p>
<ol>
<li>Load the sub-model predictions aggregation strategy based on the user-defined approach.</li>
<li>Load the models to be used for inference.</li>
<li>Preprocess the input data.</li>
<li>Collect predictions from individual models.</li>
<li>Aggregate the model predictions according to the specified strategy.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">compose </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ColumnTransformer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">impute </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SimpleImputer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pipeline </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Pipeline</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> StandardScaler</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ndarray</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Predicts the target variable using the ensemble of models based on the selected strategy.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        context: MLflow context object.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        model_input (pd.DataFrame): Input features for prediction.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        np.ndarray: Array of predicted values.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Raises:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        ValueError: If the strategy is unknown or no models are fitted.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Check if the 'strategy' column is present in the input DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Extract the strategy and drop it from the input features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Strategy: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_input</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'strategy'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">iloc</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">0</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">drop</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> inplace</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Default to 'average' strategy if none is provided</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the strategy details from the pre-loaded strategies DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    loaded_strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">empty</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if the specified strategy is not found</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Strategy '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">' not found in the pre-loaded strategies."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Parse the list of models to be used for prediction</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_list </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">","</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Transform input features using the preprocessor, if available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Feature engineering is required if the preprocessor is not set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use the existing preprocessor to transform the features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">transform</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if no models are fitted</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"No fitted models found. Please fit the models first."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Collect predictions from all models specified in the strategy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    predictions </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> model_list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the specified strategy to combine the model predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate the average of predictions from all models</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">mean</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">elif</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Extract weights from the strategy and normalize them</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">w</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> w </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">","</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">/=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Ensure weights sum to 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Compute the weighted average of predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">average</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> weights</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if an unknown strategy is encountered</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Unknown strategy: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-load-context-custom-method-to-initialize-the-ensemble-model">Defining a <code>load context</code> custom method to initialize the Ensemble Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-load-context-custom-method-to-initialize-the-ensemble-model" class="hash-link" aria-label="Direct link to defining-a-load-context-custom-method-to-initialize-the-ensemble-model" title="Direct link to defining-a-load-context-custom-method-to-initialize-the-ensemble-model">​</a></h3>
<p>When loading the ensemble model using <code>mlflow.pyfunc.load_model</code>, the custom <code>load_context</code> method is executed to handle the required model initialization steps before inference.</p>
<p>This initialization process includes:</p>
<ol>
<li>Loading model artifacts, including both the pre-trained models and the preprocessor, using the context object that contains the artifacts references.</li>
<li>Fetching strategies definitions from DuckDB Database.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Loads the preprocessor and models from the MLflow context.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        context: MLflow context object which provides access to saved artifacts.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the preprocessor if its path is specified in the context artifacts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    preprocessor_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> preprocessor_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">preprocessor_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load each model from the context artifacts and store it in the fitted_models dictionary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">keys</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> model_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print a warning if a model is not found in the context artifacts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Warning: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> model not found in artifacts. Initialized but not fitted."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Reconnect to the DuckDB database to load the strategies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    conn </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> duckdb</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fetch strategies from the DuckDB database into the strategies DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"SELECT * FROM strategies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fetchdf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Close the database connection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    conn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bringing-it-all-together">Bringing It All Together<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#bringing-it-all-together" class="hash-link" aria-label="Direct link to Bringing It All Together" title="Direct link to Bringing It All Together">​</a></h3>
<p>Having explored each method in detail, the next step is to integrate them to observe the complete implementation in action. This will offer a comprehensive view of how the components interact to achieve the project's objectives.</p>
<p>You can use the skeleton provided in the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#creating-the-ensemble-model">Creating the Ensemble Model</a> section to assemble the entire <code>EnsembleModel</code> class. Each method was demonstrated with its specific dependencies included. Now, you just need to combine these methods into the class definition, following the outline given. Feel free to add any custom logic that fits your specific use case or enhances the functionality of the ensemble model.</p>
<p>After everything has been encapsulated in a PyFunc model, the lifecycle of the ensemble model closely mirrors that of a traditional MLflow model. The following diagram depicts the lifecycle of the model.</p>
<p><img loading="lazy" alt="Ensemble Model Lifecycle" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-lifecycle-f9bf951e52294104ffaaf1e91f473226.png" width="2471" height="215" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-tracking">MLflow Tracking<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#mlflow-tracking" class="hash-link" aria-label="Direct link to MLflow Tracking" title="Direct link to MLflow Tracking">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-the-fit-method-to-train-sub-models">Using the <code>fit</code> Method to Train Sub-Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#using-the-fit-method-to-train-sub-models" class="hash-link" aria-label="Direct link to using-the-fit-method-to-train-sub-models" title="Direct link to using-the-fit-method-to-train-sub-models">​</a></h3>
<p>Once the data is preprocessed, we use the custom <code>fit</code> method to train all the sub-models in our Ensemble Model. This method applies grid search to find the best hyperparameters for each sub-model, fits them to the training data, and saves the trained models for future use.</p>
<blockquote>
<p><strong>Note:</strong> For the following block of code, you might need to set the MLflow Tracking Server if you're not using Managed MLflow. In the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#components-of-the-project">Components of the Project</a>, there's a note about setting up a simple local MLflow Tracking Server. For this step of the project, you'll need to point MLflow to the server’s URI that has been configured and is currently running. Don't forget to set the server URI variable <code>remote_server_uri</code>. You can refer to the official MLflow documentation for more details on <a href="https://mlflow.org/docs/latest/tracking/server.html#logging-to-a-tracking-server" target="_blank" rel="noopener noreferrer">Logging to a Tracking Server</a>.</p>
</blockquote>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datetime</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">signature </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the MLflow client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">MlflowClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set the URI of your MLflow Tracking Server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">remote_server_uri </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"..."</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace with your server URI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Point MLflow to your MLflow Tracking Server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_tracking_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">remote_server_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set the experiment name for organizing runs in MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Ensemble Model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load dataset from the provided URL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">read_csv</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"https://github.com/zobi123/Machine-Learning-project-with-Python/blob/master/Housing.csv?raw=true"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Separate features and target variable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">drop</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"price"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">y </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"price"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Split dataset into training and test sets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> test_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a directory to save the models and related files</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">makedirs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> exist_ok</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize and train the EnsembleModel</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Preprocess the training data using the defined feature engineering method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the models with the preprocessed training data and save them</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> save_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Infer the model signature using a small example from the training data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use a single sample for signature inference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_output </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">example_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> example_output</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the preprocessing pipeline to disk</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dump</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/preprocessor.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define strategies for the ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategy_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"average_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost,gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.2,0.3,0.1,0.2,0.2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.4,0.4,0.2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.5,0.5"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.7,0.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a DataFrame to hold the strategy information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add strategies to the database</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategies_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the Conda environment configuration for the MLflow model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">conda_env </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"name"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow-env"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"channels"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"conda-forge"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"dependencies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"python=3.8"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"scikit-learn=1.3.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost=2.0.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"joblib=1.2.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"pandas=1.5.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"numpy=1.23.5"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"duckdb=1.0.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"pip"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow==2.14.1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Get current timestamp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">timestamp </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">now</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">isoformat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">run_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">timestamp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log parameters, artifacts, and model signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_param</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"model_type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"EnsembleModel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">keys</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategies_db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        conda_env</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">conda_env</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        signature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Model logged in run </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="registering-the-model-with-mlflow">Registering the Model with MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#registering-the-model-with-mlflow" class="hash-link" aria-label="Direct link to Registering the Model with MLflow" title="Direct link to Registering the Model with MLflow">​</a></h3>
<p>Following the completion of model training, the subsequent step involves registering the ensemble model with MLflow. This process entails logging the trained models, preprocessing pipelines, and associated strategies into the MLflow Tracking Server. This ensures that all components of the ensemble model are systematically saved and versioned, facilitating reproducibility and traceability.</p>
<p>Moreover, we will assign to this initial version of the model a production alias. This designation establishes a baseline model against which future iterations can be assessed. By marking this version as the <code>production</code> model, we can effectively benchmark improvements and confirm that subsequent versions yield measurable advancements over this established baseline.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Register the model in MLflow and assign a production alias</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_uri </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"runs:/</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">/ensemble_model"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_details </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_registered_model_alias</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> alias</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"production"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> version</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_details</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">version</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The following illustration demonstrates the complete lifecycle of our ensemble model within the MLflow UI up until this step.</p>
<p><img loading="lazy" alt="Ensemble Model within MLflow UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-mlflow-ui-241073e6b40b8f129f49f24f6e561102.gif" width="2918" height="1508" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-the-predict-method-to-perform-inference">Using the <code>predict</code> Method to Perform Inference<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#using-the-predict-method-to-perform-inference" class="hash-link" aria-label="Direct link to using-the-predict-method-to-perform-inference" title="Direct link to using-the-predict-method-to-perform-inference">​</a></h3>
<p>With the ensemble model registered in the MLflow Model Registry, it can now be utilized to predict house prices by aggregating the predictions from the various sub-models within the ensemble.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> r2_score</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the registered model using its alias</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"models:/ensemble_model@production"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the different strategies for evaluation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"average_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize a DataFrame to store the results of predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">results_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Iterate over each strategy, make predictions, and calculate R^2 scores</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> strategy </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a test DataFrame with the current strategy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_test_with_params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_test_with_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> strategy</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use the loaded model to make predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    y_pred </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_test_with_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate R^2 score for the predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    r2 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> r2_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">y_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_pred</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Store the results and R^2 score in the results DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_pred</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"r2_</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> r2</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add the actual target values to the results DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"y_test"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">values</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Similar to out-of-the-box MLflow models, you begin by loading the ensemble model using <code>mlflow.pyfunc.load_model</code> to generate the house price predictions. After defining the different strategies for aggregating sub-model predictions and creating the model input containing both the housing data features and aggregation strategy, simply call the ensemble model's <code>predict</code> method to get the aggregated house price prediction.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluating-model-performance-with-different-strategies">Evaluating Model Performance with Different Strategies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#evaluating-model-performance-with-different-strategies" class="hash-link" aria-label="Direct link to Evaluating Model Performance with Different Strategies" title="Direct link to Evaluating Model Performance with Different Strategies">​</a></h3>
<p>To evaluate the performance of our ensemble model, we calculated the average R² scores for different aggregation strategies. These strategies include both simple averaging and weighted combinations of sub-models, with varying configurations of models and their respective weights. By comparing the R² scores, we can assess which strategies provide the most accurate predictions.</p>
<p>The bar graph below illustrates the average R² scores for each strategy. Higher values indicate better predictive performance. As shown in the graph, the ensemble strategies generally outperform individual models as depicted in our second strategy that is relying on a single <code>DecisionTree</code> (average_2), demonstrating the effectiveness of aggregating predictions from multiple sub-models. This visual comparison highlights the benefits of using an ensemble approach, particularly with weighted strategies that optimize the contribution of each sub-model.</p>
<p><img loading="lazy" alt="Ensemble Model Evaluation" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-evaluation-19d41715d23f6288ea9d3074701fcd05.png" width="1585" height="1087" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>This blog post highlights the capabilities of mlflow.pyfunc and its application in a Machine Learning project. This powerful feature of MLflow provides creative freedom and flexibility, enabling teams to build complex systems encapsulated as models within MLflow, following the same lifecycle as traditional models. The post showcases the creation of ensemble model setups, seamless integration with DuckDB, and the implementation of custom methods using this versatile module.</p>
<p>Beyond offering a structured approach to achieving desired outcomes, this blog demonstrates practical possibilities based on hands-on experience, discussing potential challenges and their solutions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="additional-resources">Additional resources<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#additional-resources" class="hash-link" aria-label="Direct link to Additional resources" title="Direct link to Additional resources">​</a></h2>
<p>Explore the following resources for a deeper understanding of MLflow PyFunc models:</p>
<ul>
<li><a href="https://mlflow.org/blog/custom-pyfunc" target="_blank" rel="noopener noreferrer">Custom MLflow Models with mlflow.pyfunc</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/part2-pyfunc-components.html" target="_blank" rel="noopener noreferrer">Understanding PyFunc in MLflow</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">Building Custom Python Function Models with MLflow</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.html" target="_blank" rel="noopener noreferrer">Deploy an MLflow PyFunc model with Model Serving</a></li>
</ul>]]></content:encoded>
            <category>pyfunc</category>
            <category>mlflow</category>
            <category>ensemble-models</category>
        </item>
        <item>
            <title><![CDATA[Introducing MLflow Tracing]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing</guid>
            <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We're excited to announce the release of a powerful new feature in MLflow: MLflow Tracing.]]></description>
            <content:encoded><![CDATA[<p>We're excited to announce the release of a powerful new feature in MLflow: <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow Tracing</a>.
This feature brings comprehensive instrumentation capabilities to your GenAI applications, enabling you to gain deep insights into the execution of your
models and workflows, from simple chat interfaces to complex multi-stage Retrieval Augmented Generation (RAG) applications.</p>
<blockquote>
<p>NOTE: MLflow Tracing has been released in MLflow 2.14.0 and is not available in previous versions.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-mlflow-tracing">Introducing MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#introducing-mlflow-tracing" class="hash-link" aria-label="Direct link to Introducing MLflow Tracing" title="Direct link to Introducing MLflow Tracing">​</a></h2>
<p>Tracing is a critical aspect of understanding and optimizing complex applications, especially in the realm of machine learning and artificial intelligence.
With the release of MLflow Tracing, you can now easily capture, visualize, and analyze detailed execution traces of your GenAI applications.
This new feature aims to provide greater visibility and control over your applications' performance and behavior, aiding in everything from fine-tuning to debugging.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-mlflow-tracing">What is MLflow Tracing?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#what-is-mlflow-tracing" class="hash-link" aria-label="Direct link to What is MLflow Tracing?" title="Direct link to What is MLflow Tracing?">​</a></h2>
<p>MLflow Tracing offers a variety of methods to enable <a href="https://mlflow.org/docs/latest/llms/tracing/overview.html" target="_blank" rel="noopener noreferrer">tracing</a> in your applications:</p>
<ul>
<li><strong>Automated Tracing with LangChain</strong>: A fully automated integration with <a href="https://www.langchain.com/" target="_blank" rel="noopener noreferrer">LangChain</a> allows you to activate tracing simply by enabling <code>mlflow.langchain.autolog()</code>.</li>
<li><strong>Manual Trace Instrumentation with High-Level Fluent APIs</strong>: Use decorators, function wrappers, and context managers via the fluent API to add tracing functionality with minimal code modifications.</li>
<li><strong>Low-Level Client APIs for Tracing</strong>: The MLflow client API provides a thread-safe way to handle trace implementations for fine-grained control of what and when data is recorded.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-mlflow-tracing">Getting Started with MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#getting-started-with-mlflow-tracing" class="hash-link" aria-label="Direct link to Getting Started with MLflow Tracing" title="Direct link to Getting Started with MLflow Tracing">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="langchain-automatic-tracing">LangChain Automatic Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#langchain-automatic-tracing" class="hash-link" aria-label="Direct link to LangChain Automatic Tracing" title="Direct link to LangChain Automatic Tracing">​</a></h3>
<p>The easiest way to get started with MLflow Tracing is through the built-in integration with LangChain. By enabling autologging, traces are automatically logged to the active MLflow experiment when calling invocation APIs on chains. Here’s a quick example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">prompts </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PromptTemplate</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain_openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set your OPENAI_API_KEY environment variable."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"LangChain Tracing"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">log_models</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> log_input_examples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> OpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">temperature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_tokens</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">prompt_template </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Imagine you are {person}, and you are answering a question: {question}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> prompt_template </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> llm</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"person"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Richard Feynman"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"question"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Why should we colonize Mars?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"person"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Linus Torvalds"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"question"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Can I set everyone's access to sudo?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And this is what you will see after invoking the chains when navigating to the <strong>LangChain Tracing</strong> experiment in the MLflow UI:</p>
<p><img loading="lazy" alt="Traces in UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/tracing-ui-d5822d1e23426b65ff4008bf57d8cc83.gif" width="2048" height="1203" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fluent-apis-for-manual-tracing">Fluent APIs for Manual Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#fluent-apis-for-manual-tracing" class="hash-link" aria-label="Direct link to Fluent APIs for Manual Tracing" title="Direct link to Fluent APIs for Manual Tracing">​</a></h3>
<p>For more control, you can use MLflow’s fluent APIs to manually instrument your code. This approach allows you to capture detailed trace data with minimal changes to your existing code.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="trace-decorator">Trace Decorator<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#trace-decorator" class="hash-link" aria-label="Direct link to Trace Decorator" title="Direct link to Trace Decorator">​</a></h4>
<p>The trace decorator captures the inputs and outputs of a function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Tracing Demo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">some_function</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> z</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">y </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> z</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">some_function</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="context-handler">Context Handler<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#context-handler" class="hash-link" aria-label="Direct link to Context Handler" title="Direct link to Context Handler">​</a></h4>
<p>The context handler is ideal for supplementing span information with additional data at the point of information generation:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">first_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> y</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">second_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> a </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">do_math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> operation</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Math"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_inputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"a"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"x"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_attributes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"mode"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> operation</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        first </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> first_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        second </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> second_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        result </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> first </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> second </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> operation </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token plain"> first </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> second</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_outputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"result"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">do_math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="comprehensive-tracing-with-client-apis">Comprehensive Tracing with Client APIs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#comprehensive-tracing-with-client-apis" class="hash-link" aria-label="Direct link to Comprehensive Tracing with Client APIs" title="Direct link to Comprehensive Tracing with Client APIs">​</a></h3>
<p>For advanced use cases, the MLflow client API offers fine-grained control over trace management. These APIs allows you to create, manipulate, and retrieve traces programmatically, albeit with additional complexity throughout the implementation.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="starting-and-managing-traces-with-the-client-apis">Starting and Managing Traces with the Client APIs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#starting-and-managing-traces-with-the-client-apis" class="hash-link" aria-label="Direct link to Starting and Managing Traces with the Client APIs" title="Direct link to Starting and Managing Traces with the Client APIs">​</a></h4>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> MlflowClient</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> MlflowClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Start a new trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">root_span </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"my_trace"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">request_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> root_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">request_id</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a child span</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">child_span </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"child_span"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    parent_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">root_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">span_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    inputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"input_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"input_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"attribute_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"attribute_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># End the child span</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">child_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    span_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">child_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">span_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    outputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"output_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"output_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"custom_attribute"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># End the root span (trace)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    outputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"final_output_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"final_output_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"token_usage"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"1174"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="diving-deeper-into-tracing">Diving Deeper into Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#diving-deeper-into-tracing" class="hash-link" aria-label="Direct link to Diving Deeper into Tracing" title="Direct link to Diving Deeper into Tracing">​</a></h2>
<p>MLflow Tracing is designed to be flexible and powerful, supporting various use cases from simple function tracing to complex, asynchronous workflows.</p>
<p>To learn more about this feature, <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">read the guide</a>, <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow-tracing-fluent-python-apis" target="_blank" rel="noopener noreferrer">review the API Docs</a> and <a href="https://mlflow.org/docs/latest/llms/tracing/index.html#langchain-automatic-tracing" target="_blank" rel="noopener noreferrer">get started with the LangChain integration</a> today!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on This Journey<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on This Journey" title="Direct link to Join Us on This Journey">​</a></h2>
<p>The introduction of MLflow Tracing marks a significant milestone in our mission to provide comprehensive tools for managing machine learning workflows. We’re excited about the possibilities this new feature opens up and look forward to your <a href="https://github.com/mlflow/mlflow/issues" target="_blank" rel="noopener noreferrer">feedback</a> and <a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">contributions</a>.</p>
<p>For those in our community with a passion for sharing knowledge, we invite you to <a href="https://github.com/mlflow/mlflow-website/blob/main/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">collaborate</a>. Whether it’s writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community.</p>
<p>Stay tuned for more updates, and as always, happy coding!</p>]]></content:encoded>
            <category>tracing</category>
            <category>genai</category>
            <category>mlops</category>
        </item>
        <item>
            <title><![CDATA[Deep Learning with MLflow (Part 2)]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2</guid>
            <pubDate>Fri, 26 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Using MLflow's Deep Learning tracking features for fine tuning an LLM]]></description>
            <content:encoded><![CDATA[<p>In the realm of deep learning, finetuning of pre-trained Large Language Models (LLMs) on private datasets is an excellent customization
option to increase a model’s relevancy for a specific task. This practice is not only common, but also essential for developing specialized
models, particularly for tasks like text classification and summarization.</p>
<p>In such scenarios, tools like MLflow are invaluable. Tracking tools like MLflow help to ensure that every aspect of the training
process - metrics, parameters, and artifacts - are reproducibly tracked and logged, allowing for the analysis, comparison, and sharing of tuning iterations.</p>
<p>In this blog post, we are going to be using <a href="https://mlflow.org/releases/2.12.1" target="_blank" rel="noopener noreferrer">MLflow 2.12</a> and the
<a href="https://mlflow.org/blog/deep-learning-part-1" target="_blank" rel="noopener noreferrer">recently introduced MLflow Deep Learning features</a> to track all the important aspects of fine
tuning a large language model for text classification, including the use of automated logging of training checkpoints in order to simplify
the process of resumption of training.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-fine-tuning-a-transformer-model-for-text-classification">Use Case: Fine Tuning a Transformer Model for Text Classification<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#use-case-fine-tuning-a-transformer-model-for-text-classification" class="hash-link" aria-label="Direct link to Use Case: Fine Tuning a Transformer Model for Text Classification" title="Direct link to Use Case: Fine Tuning a Transformer Model for Text Classification">​</a></h2>
<p>The example scenario that we're using within this blog utilizes the <a href="https://huggingface.co/datasets/coastalcph/lex_glue/viewer/unfair_tos" target="_blank" rel="noopener noreferrer">unfair-TOS</a> dataset.</p>
<p>In today’s world, it’s hard to find a service, platform, or even a consumer good that doesn’t have a legally-binding terms of service connected
with it. These encyclopedic size agreements, filled with dense legal jargon and sometimes baffling levels of specificity, are so large that
most people simply accept them without reading them. However, reports have indicated over time that occasionally, some suspiciously unfair
terms are embedded within them.</p>
<p>Addressing unfair clauses in Terms of Service (TOS) agreements through machine learning (ML) is particularly relevant due to the pressing
need for transparency and fairness in legal agreements that affect consumers. Consider the following clause from an example TOS
agreement: <strong>"We may revise these Terms from time to time. The changes will not be retroactive, and the most current version of the Terms, which will always..."</strong>
This clause stipulates that the service provider may suspend or terminate the service at any time for any reason,
with or without notice. Most people would consider this to be quite unfair.</p>
<p>While this sentence is buried quite deeply within a fairly dense document, an ML algorithm is not burdened by the exhaustion that a human
would have for combing through the text and identifying clauses that might seem a bit unfair. By automatically identifying potentially
unfair clauses, a transformers-based Deep Learning (DL) model can help protect consumers from exploitative practices, ensure greater compliance with legal standards,
and foster trust between service providers and users.</p>
<p>A base pre-trained transformer model, without specialized fine-tuning, faces several challenges in accurately identifying unfair Terms of Service clauses.
Firstly, it lacks the domain-specific knowledge essential for understanding complex legal language. Secondly, its training objectives are
too general to capture the nuanced interpretation required for legal analysis. Lastly, it may not effectively recognize the subtle
contextual meanings that determine the fairness of contractual terms, making it less effective for this specialized task.</p>
<p>Using prompt engineering to address the identification of unfair Terms of Service clauses with a closed-source Large language model
can be prohibitively expensive. This approach requires extensive trial and error to refine prompts without the ability to tweak
the underlying model mechanics. Each iteration can consume significant computational resources , especially when using
<a href="https://www.promptingguide.ai/techniques/fewshot" target="_blank" rel="noopener noreferrer">few-shot prompting</a>, leading to escalating costs without guaranteeing a corresponding
increase in accuracy or effectiveness.</p>
<p>In this context, the use of the <strong>RoBERTa-base</strong> model is particularly effective, provided that it is fine-tuned. This model is robust
enough to handle complex tasks like discerning embedded instructions within texts, yet it is sufficiently compact to be fine-tuned
on modest hardware, such as an Nvidia T4 GPU.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-peft">What is PEFT?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#what-is-peft" class="hash-link" aria-label="Direct link to What is PEFT?" title="Direct link to What is PEFT?">​</a></h3>
<p><a href="https://huggingface.co/docs/peft/en/index" target="_blank" rel="noopener noreferrer">Parameter-Efficient Fine-Tuning (PEFT)</a> approaches are advantageous as they involve
keeping the bulk of the pre-trained model parameters fixed while either only training a few additional layers or modifying the parameters used
when interacting with the model's weights. This methodology not only conserves memory during training, but also significantly reduces the overall training time. When
compared with the alternative of fine-tuning a base model's weights in order to customize its performance for a specific targeted task, the PEFT
approach can save significant cost in both time and money, while providing an equivalent or better performance results with less data than is required
for a comprehensive fine-tuning training task.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-hugging-face-models-and-the-pytorch-lightning-framework">Integrating Hugging-Face models and the PyTorch Lightning framework<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#integrating-hugging-face-models-and-the-pytorch-lightning-framework" class="hash-link" aria-label="Direct link to Integrating Hugging-Face models and the PyTorch Lightning framework" title="Direct link to Integrating Hugging-Face models and the PyTorch Lightning framework">​</a></h2>
<p><a href="https://lightning.ai/docs/pytorch/stable/" target="_blank" rel="noopener noreferrer">PyTorch Lightning</a> integrates seamlessly with
<a href="https://huggingface.co/docs/transformers/en/index" target="_blank" rel="noopener noreferrer">Hugging Face's Transformers library</a>, enabling streamlined model training workflows
that capitalize on Lightning's easy-to-use Higher level API’s and HF's state-of-the-art pre-trained models. The combination of Lightning with transformers’
<a href="https://huggingface.co/blog/peft" target="_blank" rel="noopener noreferrer">PEFT module</a> enhances productivity and scalability by reducing code complexity and enabling the use of
high-quality pre-optimized models for a range of diverse NLP tasks.</p>
<p>Below is an example of configuring the PEFT-based fine tuning of a base model using PyTorch Lightning and HuggingFace's <code>peft</code> module.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> List</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> LightningModule</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> peft </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> get_peft_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> LoraConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> TaskType</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> transformers </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> AutoModelForSequenceClassification</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">LightningModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">32</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2e-4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">create_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">lr </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> lr</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save_hyperparameters</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"pretrained_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">create_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Create and return the PEFT model with the given configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            pretrained_model: The path or identifier for the pretrained model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            num_classes: The number of classes for the sequence classification.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            lora_alpha: The alpha parameter for LoRA.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            lora_dropout: The dropout rate for LoRA.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            r: The rank of LoRA adaptations.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            Model: A model configured with PEFT.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> AutoModelForSequenceClassification</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            pretrained_model_name_or_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            num_labels</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">num_classes</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        peft_config </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> LoraConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            task_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">TaskType</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">SEQ_CLS</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            inference_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            r</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            lora_alpha</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            lora_dropout</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">lora_dropout</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> get_peft_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> peft_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">forward</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> input_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> attention_mask</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> label</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Calculate the loss by passing inputs to the model and comparing against ground truth labels.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            input_ids: List of token indices to be fed to the model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            attention_mask: List to indicate to the model which tokens should be attended to, and which should not.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            label: List of ground truth labels associated with the input data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            torch.Tensor: The computed loss from the model as a tensor.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            input_ids</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">input_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            attention_mask</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">attention_mask</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            labels</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">label</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Additional references for the full implementation can be <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow/blob/master/custom_module/fine_tune_clsify_head.py" target="_blank" rel="noopener noreferrer">seen within the companion repository here</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-mlflow-for-peft-based-fine-tuning">Configuring MLflow for PEFT-based fine-tuning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#configuring-mlflow-for-peft-based-fine-tuning" class="hash-link" aria-label="Direct link to Configuring MLflow for PEFT-based fine-tuning" title="Direct link to Configuring MLflow for PEFT-based fine-tuning">​</a></h2>
<p>Before initiating the training process, it's crucial to configure MLFlow so that all system metrics, loss metrics, and parameters are logged for the training run.
As of MLFlow 2.12, auto-logging for TensorFlow and PyTorch now includes support for checkpointing model weights during training, giving a snapshot of the model
weights at defined epoch frequencies in order to provide for training resumption in the case of an error or loss of the compute environment.
Below is an example of how to enable this feature:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">enable_system_metrics_logging</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">checkpoint_save_best_only </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> checkpoint_save_freq</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">'epoch'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the code above we are doing the following:</p>
<ul>
<li><strong>Enabling System Metrics Logging</strong>: The system resources will be logged to MLflow in order to understand where bottlenecks in memory, CPU, GPU, disk usage, and network traffic are throughout the training process.</li>
</ul>
<p><img loading="lazy" alt="MLflow UI System Metrics" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/sys_metrics-9423a86b67b9aeeac27ee5aea7be01e2.png" width="1600" height="866" class="img_ev3q"></p>
<ul>
<li><strong>Configuring Auto Logging to log parameters, metrics and checkpoints for all epochs</strong>: Deep learning involves experimenting with various model architectures and hyperparameter settings. Auto logging plays a crucial role in systematically recording these experiments, making it easier to compare different runs and determine which configurations yield the best results. Checkpoints are logged at every epoch, enabling detailed evaluations of all intermediate epochs during the initial exploration phase of the project. However, it is generally not advisable to log all epochs during late-stage development to avoid excessive data writes and latency in the final training stages.</li>
</ul>
<p><img loading="lazy" alt="System Metrics Logged" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/epoch_logging-c21dd79a1004d20b4804923690472a18.png" width="1600" height="864" class="img_ev3q"></p>
<p>The auto-logged checkpoint metrics and model artifacts will be viewable in the MLflow UI as the model trains, as shown below:</p>
<p><img loading="lazy" alt="Metrics logged with each epoch" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/checkpoint_metrics-ad7d10db8f81555e3ab4d04c8fb63240.png" width="1600" height="731" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-importance-of-logging-and-early-stopping">The Importance of Logging and Early-stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#the-importance-of-logging-and-early-stopping" class="hash-link" aria-label="Direct link to The Importance of Logging and Early-stopping" title="Direct link to The Importance of Logging and Early-stopping">​</a></h2>
<p>The integration of the Pytorch Lightning <code>Trainer</code> callback with MLflow is crucial within this training exercise. The integration allows for comprehensive
tracking and logging of metrics, parameters, and artifacts during model finetuning without having to explicitly call MLflow logging APIs. Additionally,
the autologging API allows for modifying the default logging behavior, permitting changes to the logging frequency, allowing for logging to occur at each
epoch, after a specified number of epochs, or at explicitly defined steps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="early-stopping">Early stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#early-stopping" class="hash-link" aria-label="Direct link to Early stopping" title="Direct link to Early stopping">​</a></h3>
<p>Early stopping is a critical regularization technique in neural network training, designed to assist in preventing overfitting through the act of
halting training when validation performance plateaus. Pytorch Lightning includes APIs that allow for an easy high-level control of training cessation,
as demonstrated below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-pytorch-trainer-callback-with-early-stopping">Configuring Pytorch Trainer Callback with Early stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#configuring-pytorch-trainer-callback-with-early-stopping" class="hash-link" aria-label="Direct link to Configuring Pytorch Trainer Callback with Early stopping" title="Direct link to Configuring Pytorch Trainer Callback with Early stopping">​</a></h3>
<p>The example below shows the configuration of the <code>Trainer</code> object within <code>Lightning</code> to leverage early stopping to prevent overfitting. Once configured, the
training is executed by calling <code>fit</code> on the <code>Trainer</code> object. By providing the <code>EarlyStopping</code> callback, in conjunction with MLflow's autologging, the
appropriate number of epochs will be used, logged, and tracked without any additional effort.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> dataclasses </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> dataclass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> field</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> data </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> LexGlueDataModule</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Trainer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">callbacks </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> EarlyStopping</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TrainConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bert-base-uncased"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2e-4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    batch_size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">256</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    num_workers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">cpu_count</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_epochs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_time</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">default_factory</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token keyword" style="color:rgb(86, 156, 214)">lambda</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"hours"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_checkpoint_dir</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"/local_disk0/tmp/model-checkpoints"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    min_delta</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.005</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    patience</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_config </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> TrainConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Instantiate the custom Transformer class for PEFT training</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">nlp_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_classes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lr</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">datamodule </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> LexGlueDataModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        max_length</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        batch_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">batch_size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_workers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">num_workers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        debug_mode_sample</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log system metrics while training loop is running</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">enable_system_metrics_logging</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Automatically log per-epoch parameters, metrics, and checkpoint weights</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">checkpoint_save_best_only </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the Trainer configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">trainer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   callbacks</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">       EarlyStopping</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           monitor</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Val_F1_Score"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           min_delta</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">min_delta</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           patience</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">patience</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           verbose</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"max"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   default_root_dir</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_checkpoint_dir</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   fast_dev_run</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token builtin" style="color:rgb(86, 156, 214)">bool</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   max_epochs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_epochs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   max_time</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_time</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   precision</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"32-true"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Execute the training run</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">nlp_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> datamodule</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">datamodule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualization-and-sharing-capabilities-within-mlflow">Visualization and Sharing Capabilities within MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#visualization-and-sharing-capabilities-within-mlflow" class="hash-link" aria-label="Direct link to Visualization and Sharing Capabilities within MLflow" title="Direct link to Visualization and Sharing Capabilities within MLflow">​</a></h2>
<p>The newly introduced DL-specific visualization capabilities introduced in MLflow 2.12 enable you to make comparisons between different runs and artifacts over epochs.
When comparing training runs, MLflow is capable of generating useful visualization that can be integrated into dashboards, facilitating
easy sharing. Additionally, the centralized storage of metrics, in conjunction with parameters, allows for effective analysis of the training
efficacy, as shown in the image below.</p>
<p><img loading="lazy" alt="Epoch Run Compare" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/compare-ea0bead7c1244ca8868d1f039c791ac4.png" width="1600" height="820" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-stop-training">When to stop training?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#when-to-stop-training" class="hash-link" aria-label="Direct link to When to stop training?" title="Direct link to When to stop training?">​</a></h2>
<p>When training DL models, it is important to understand when to stop. Efficient training (for minimizing the overall cost incurred for
conducting training) and optimal model performance rely heavily on preventing a model from overfitting on the training data. A model
that trains for too long will invariably become quite good at effectively ‘memorizing’ the training data, resulting in a reduction in
the performance of the model when presented with novel data. A straightforward way to evaluate this behavior is to ensure that
validation data set metrics (scoring loss metrics on data that is not in the training data set) are captured during the training
loop. Integrating the MLflow callback into the PyTorch Lightning Trainer allows for iterative logging of loss metrics at
configurable iterations, enabling an easily debuggable evaluation of the training performance, ensuring that stopping criteria
can be enforced at the appropriate time to prevent overfitting.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluating-epoch-checkpoints-of-fine-tuned-models-with-mlflow">Evaluating epoch checkpoints of Fine Tuned Models with MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#evaluating-epoch-checkpoints-of-fine-tuned-models-with-mlflow" class="hash-link" aria-label="Direct link to Evaluating epoch checkpoints of Fine Tuned Models with MLflow" title="Direct link to Evaluating epoch checkpoints of Fine Tuned Models with MLflow">​</a></h3>
<p>With your training process meticulously tracked and logged by MLflow, you have the flexibility to retrieve and test your model at
any arbitrary checkpoint. To do this, you can use the mlflow.pytorch.load_model() API to load the model from a specific run
and use the <code>predict()</code> method for evaluation.</p>
<p>In the example below, we will load the model checkpoint from the 3rd epoch and use the <code>Lightning</code> train module to generate predictions based on the
checkpoint state of the saved training epoch.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">disable </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">run_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'&lt;Add the run ID&gt;'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_checkpoint</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> run_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">examples_to_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"We reserve the right to modify the service price at any time and retroactively apply the adjusted price to historical service usage."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_module </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tokenizer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> AutoTokenizer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tokens </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> tokenizer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">examples_to_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  max_length</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  padding</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"max_length"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  truncation</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ds </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Dataset</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_format</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"torch"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"input_ids"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"attention_mask"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_module</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> dataloaders </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> DataLoader</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>The integration of MLflow into the finetuning process of pre-trained language models, particularly for applications like custom
named entity recognition, text classification and instruction-following represents a significant advancement in managing and
optimizing deep learning workflows. Leveraging the autologging and tracking capabilities of MLflow in these workstreams not only
enhances the reproducibility and efficiency of model development, but also fosters a collaborative environment where insights
and improvements can be easily shared and implemented.</p>
<p>As we continue to push the boundaries of what these models can achieve, tools like MLflow will be instrumental in harnessing their full potential.</p>
<p>If you're interested in seeing the full example in its entirety, feel free to <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow" target="_blank" rel="noopener noreferrer">see the full example implementation</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="check-out-the-code">Check out the code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#check-out-the-code" class="hash-link" aria-label="Direct link to Check out the code" title="Direct link to Check out the code">​</a></h3>
<p>The code we provide will delve into additional aspects such as training from a checkpoint, integrating MLflow and TensorBoard, and utilizing Pyfunc for model wrapping, among others. These resources are specifically tailored for implementation on <a href="https://mlflow.org/blog/databricks-ce" target="_blank" rel="noopener noreferrer">Databricks Community Edition</a>. The main runner notebook
within the full example repository <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow/blob/master/train.ipynb" target="_blank" rel="noopener noreferrer">can be found here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-with-mlflow-212-today">Get Started with MLflow 2.12 Today<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#get-started-with-mlflow-212-today" class="hash-link" aria-label="Direct link to Get Started with MLflow 2.12 Today" title="Direct link to Get Started with MLflow 2.12 Today">​</a></h2>
<p>Dive into the latest MLflow updates today and enhance the way you manage your machine learning projects! With our newest enhancements,
including advanced metric aggregation, automatic capturing of system metrics, intuitive feature grouping, and streamlined search capabilities,
MLflow is here to elevate your ML workflow to new heights. <a href="https://mlflow.org/releases/2.12.1" target="_blank" rel="noopener noreferrer">Get started now with MLflow's cutting-edge tools and features</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feedback">Feedback<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#feedback" class="hash-link" aria-label="Direct link to Feedback" title="Direct link to Feedback">​</a></h2>
<p>We value your input! Our feature prioritization is guided by feedback from the MLflow late 2023 survey. Please fill out our
<a href="https://surveys.training.databricks.com/jfe/form/SV_3jGIliwGC0g5xTU" target="_blank" rel="noopener noreferrer">Spring 2024 survey</a>, and by participating, you can help ensure that the features
you want most are implemented in MLflow.</p>]]></content:encoded>
            <category>Deep Learning</category>
        </item>
        <item>
            <title><![CDATA[MLflow Release Candidates]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates</guid>
            <pubDate>Wed, 17 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We are excited to announce the implementation of a release candidate process for MLflow!]]></description>
            <content:encoded><![CDATA[<p>We are excited to announce the implementation of a release candidate process for MLflow!
The pace of feature development in MLflow is faster now than ever before and the core maintainer team has even more exciting things planned in the near future! However, with an increased velocity on major feature development comes with a risk of breaking things. As the maintainers of such a widely used project, we are cognizant of the disruptive nature of regressions and we strive to avoid them as much as we can. Aside from new feature development work, our primary goal is in ensuring the stability of production systems. While we do have the aspirational goal of moving fast(er), we certainly don't want to move fast and break things. With that goal in mind, we've decided to introduce a release candidate (RC) process. The RC process allows us to introduce new features and fixes in a controlled environment before they become part of the official release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-works">How It Works<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates#how-it-works" class="hash-link" aria-label="Direct link to How It Works" title="Direct link to How It Works">​</a></h2>
<p>Starting from MLflow 2.13.0, new MLflow major and minor releases will be tagged as release candidates (e.g., <code>2.13.0rc0</code>) in PyPI two weeks before they are officially released.</p>
<p>The release candidate process involves several key stages:</p>
<ul>
<li>Feature Development Freeze: Prior to cutting the RC branch and announcing its availability, we will freeze the RC branch from feature commits. Once the branch is cut, only bug fix and stability PRs will be permitted to be merged, ensuring that unexpected, late-arriving, potentially regression-causing merges are not permitted to destabilize the forthcoming release.</li>
<li>Pre-Release Announcement: We will announce upcoming features and improvements, providing our community with a roadmap of what to expect.</li>
<li>Release Candidate Rollout: A release candidate version will be made available for testing, accompanied by detailed release notes outlining the changes.</li>
<li>Community Testing and Feedback: We encourage our users to test the release candidate in their environments and share their feedback with us by filing issue reports on the MLflow Github repository. This feedback is invaluable for identifying issues and ensuring the final release aligns with user needs (i.e., we didn't break your workflows).</li>
<li>Final Release: After incorporating feedback and making necessary adjustments, we will proceed with the final release. This version will include all updates tested in the RC phase, offering a polished and stable experience for all users.</li>
</ul>
<p>This approach provides several benefits:</p>
<ul>
<li>Enhanced Stability: By rigorously testing release candidates, we can identify and address potential issues early, reducing the likelihood of disruptions in production environments.</li>
<li>Community Feedback: The RC phase offers you, a member of the MLflow community, the opportunity to provide feedback on upcoming changes. This collaborative approach ensures that the final release aligns with the needs and expectations of our users.</li>
<li>Gradual Adoption: Users can choose to experiment with new features in a release candidate without committing to a full upgrade. This flexibility supports cautious integration and thorough evaluation in various environments.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-involved">Get Involved<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates#get-involved" class="hash-link" aria-label="Direct link to Get Involved" title="Direct link to Get Involved">​</a></h2>
<p>Your participation is crucial to the success of this process. We invite you to join us in testing upcoming release candidates and sharing your insights. Together, we can ensure that MLflow continues to serve as a reliable foundation for your machine learning projects.
Stay tuned for announcements regarding our first release candidate. We look forward to your contributions and feedback as we take this important step toward a more stable and dependable MLflow.</p>]]></content:encoded>
            <category>mlflow</category>
        </item>
        <item>
            <title><![CDATA[Announcing MLflow Enhancements - Deep Learning with MLflow (Part 1)]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1</guid>
            <pubDate>Tue, 05 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Highlighting the recent improvements in MLflow for Deep Learning workflows]]></description>
            <content:encoded><![CDATA[<p>In the quickly evolving world of artificial intelligence, where generative AI has taken center stage, the landscape of machine learning is
evolving at an unprecedented pace. There has been a surge in the use of cutting-edge deep learning (DL) libraries like
<a href="https://huggingface.co/docs/transformers/index" target="_blank" rel="noopener noreferrer">Transformers</a>, <a href="https://www.tensorflow.org/" target="_blank" rel="noopener noreferrer">Tensorflow</a>,
and <a href="https://pytorch.org/" target="_blank" rel="noopener noreferrer">PyTorch</a> to fine-tune these generative AI models for enhanced performance.
As this trend accelerates, it's become clear that the tools used to build these models must rapidly evolve as well, particularly when it comes
to managing and optimizing these deep learning workloads. MLflow offers a practical solution for managing the complexities of these machine learning projects.</p>
<p>In collaboration with <a href="https://www.mosaicml.com/" target="_blank" rel="noopener noreferrer">MosaicML</a> and the broader ML community, MLflow is thrilled to unveil a set of eagerly awaited enhancements.
This latest release (<a href="https://www.mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">MLflow 2.11</a>) introduces updated tracking UI capabilities in direct response to
<a href="https://www.linkedin.com/posts/mlflow-org_qualtrics-survey-qualtrics-experience-management-activity-7128154257924513793-RCDG?utm_source=share&amp;utm_medium=member_desktop" target="_blank" rel="noopener noreferrer">the feedback</a>
and needs of MLflow enthusiasts. These updates are not just incremental; they represent a leap forward in addressing the needs of MLflow users doing Deep Learning.</p>
<p>The evolution of enhanced Deep Learning capabilities is a testament to MLflow's commitment to serving the open-source community, ensuring that its offerings
are not just keeping pace, but setting the pace in the rapidly evolving domain of machine learning.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deep-learning-api-improvements">Deep Learning API Improvements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#deep-learning-api-improvements" class="hash-link" aria-label="Direct link to Deep Learning API Improvements" title="Direct link to Deep Learning API Improvements">​</a></h2>
<p>Leveraging valuable insights from our user community, we've implemented critical enhancements to the effective scale of metrics logging and the inclusion of
system-related metric logging within our platform. These improvements encompass expanded scalability options, support for logging more iterations and the
logging of system metrics.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="system-metrics">System Metrics<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#system-metrics" class="hash-link" aria-label="Direct link to System Metrics" title="Direct link to System Metrics">​</a></h3>
<p>This feature allows you to <a href="https://mlflow.org/docs/latest/system-metrics/index.html?highlight=system" target="_blank" rel="noopener noreferrer">monitor system metrics</a> and identify any hardware issues that might be impacting performance.
Metrics such as CPU utilization, Memory usage, disk usage etc., from all nodes in your cluster can now be logged and visualized within the MLflow UI.</p>
<p><img loading="lazy" alt="System Metrics" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/system-metrics-b16140bd7099bca6362a3f04a6525a76.png" width="1600" height="823" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-logging-performance">Improved Logging Performance<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#improved-logging-performance" class="hash-link" aria-label="Direct link to Improved Logging Performance" title="Direct link to Improved Logging Performance">​</a></h3>
<p>We recently introduced both asynchronous and batch logging, making it easier to log both
<a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#parallel-runs" target="_blank" rel="noopener noreferrer">parallel and distributed</a> DL training sessions. Additionally, the MLflow Client
now supports up to <strong>1 million</strong> steps (iterations) when logging metrics, allowing users to log more steps during long-running DL jobs.</p>
<p><img loading="lazy" alt="Parallel Runs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/parallel-runs-d0e00c0275d69ccf3f879086d7f26e6f.png" width="1600" height="546" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="checkpointing-for-deep-learning">Checkpointing for Deep Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#checkpointing-for-deep-learning" class="hash-link" aria-label="Direct link to Checkpointing for Deep Learning" title="Direct link to Checkpointing for Deep Learning">​</a></h3>
<p><a href="https://mlflow.org/releases/2.11.0#autologging-for-tensorflow-and-pytorch-now-supports-checkpointing-of-model-weights:~:text=both%20PyTorch%20and-,TensorFlow,-for%20automatic%20model" target="_blank" rel="noopener noreferrer">TensorFlow</a>
and <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.pytorch.html#mlflow.pytorch.autolog" target="_blank" rel="noopener noreferrer">PyTorch</a> now support model weight checkpointing when
using autologging.</p>
<p><img loading="lazy" alt="DL Checkpointing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-checkpointing-b1f298b18bd0e09facca8751a5cd599a.png" width="1600" height="981" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-productivity-enhancements">User Experience and Productivity Enhancements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#user-experience-and-productivity-enhancements" class="hash-link" aria-label="Direct link to User Experience and Productivity Enhancements" title="Direct link to User Experience and Productivity Enhancements">​</a></h2>
<p>We have introduced substantial improvements to user experience and feature organization within our platform. These enhancements include more
sophisticated user interfaces and an intuitive redesign of the run details page, the addition of chart groups and metric aggregation, all
aimed at simplifying navigation and enhancing productivity especially for Deep Learning use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="metric-aggregation">Metric Aggregation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#metric-aggregation" class="hash-link" aria-label="Direct link to Metric Aggregation" title="Direct link to Metric Aggregation">​</a></h3>
<p>We've enhanced the UI with metric aggregation, enabling you to aggregate metrics across multiple runs based on
datasets, tags, or parameters. These improvements significantly improve the time it takes to understand training results when working
with large DL models, enabling more nuanced and comprehensive analysis of overarching trends in model performance across multiple dimensions.</p>
<p><img loading="lazy" alt="DL Metric Aggregation" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-metric-aggregation-a160faaae5aa4cee5b270ddc327fbda9.gif" width="960" height="549" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-grouping-functionality">Chart Grouping Functionality<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-grouping-functionality" class="hash-link" aria-label="Direct link to Chart Grouping Functionality" title="Direct link to Chart Grouping Functionality">​</a></h3>
<p>You can now easily categorize and organize your metrics, such as training, testing, and system metrics into
named groups within the MLflow UI. This organization allows for a comprehensive overview of all metrics, enabling quicker access and
better management, particularly when handling experiments with many metrics.</p>
<p><img loading="lazy" alt="DL Chart Grouping" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-grouping-f7f232a7f4048fdddde3338c5ed30902.gif" width="960" height="551" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slash--logging-syntax">Slash ("/") Logging Syntax<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#slash--logging-syntax" class="hash-link" aria-label="Direct link to Slash (&quot;/&quot;) Logging Syntax" title="Direct link to Slash (&quot;/&quot;) Logging Syntax">​</a></h3>
<p>To further streamline metric organization, we've implemented a new logging syntax that uses slashes
("/") to group metrics. For example, using mlflow.log_metric("x/y/score", 100) helps in structuring and segregating different types
of data or metrics into hierarchical groups, making it easier to navigate and interpret the logs, especially when dealing with complex
models and experiments.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'SVR/val_MAPE'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> mean_absolute_percentage_error</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">test_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> pred_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="DL Slash Logging" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-slash-logging-21f02b8e210f4dbb614f3025ae8248b4.png" width="1000" height="574" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-searching">Chart Searching<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-searching" class="hash-link" aria-label="Direct link to Chart Searching" title="Direct link to Chart Searching">​</a></h3>
<p>We've significantly enhanced the search functionality within our platform, enabling more robust and intuitive searching
across charts, parameters, and metrics. This upgrade allows for quicker and more precise retrieval of specific data points, streamlining the
process of analyzing and comparing different aspects of your experiments.</p>
<p><img loading="lazy" alt="DL Chart Searching" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-searching-a06459f5a16b9ad28e7571d592cea5bd.gif" width="999" height="472" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-details-redesign">Run Details Redesign<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#run-details-redesign" class="hash-link" aria-label="Direct link to Run Details Redesign" title="Direct link to Run Details Redesign">​</a></h3>
<p>We reorganized the Run Details UI to a modular tabbed layout, added new drag and drop UI functionality so that you can
can now render logged tables. This enhancement will make it easier to organize your runs and experiments.</p>
<p><img loading="lazy" alt="DL Run Details Redesign" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-run-details-d776f564ca6e435cdffbf070d5f02b0b.gif" width="1000" height="631" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-updates">Getting Started Updates<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#getting-started-updates" class="hash-link" aria-label="Direct link to Getting Started Updates" title="Direct link to Getting Started Updates">​</a></h2>
<p>Following extensive feedback from our user community, we've introduced significant updates to enhance the
<a href="https://www.mlflow.org/docs/latest/getting-started/index.html" target="_blank" rel="noopener noreferrer">getting started</a> documentation within MLflow. These updates include a
<a href="https://www.mlflow.org/docs/latest/deep-learning/index.html" target="_blank" rel="noopener noreferrer">comprehensive overhaul</a> of our documentation for easier navigation and
<a href="https://www.mlflow.org/docs/latest/deep-learning/pytorch/quickstart/pytorch_quickstart.html" target="_blank" rel="noopener noreferrer">enriched guidance</a>, along with a streamlined
<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">login API</a>. These enhancements, reflecting our commitment to improving the
user experience and workflow, aim to empower our users to achieve more with greater speed and ease.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-tutorials-and-docs">New Tutorials and Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#new-tutorials-and-docs" class="hash-link" aria-label="Direct link to New Tutorials and Docs" title="Direct link to New Tutorials and Docs">​</a></h3>
<p>We've overhauled our documentation to offer a more comprehensive, user-friendly experience with practical examples
to support both newcomers and experienced practitioners with the information they need to start a Deep Learning project.</p>
<p><img loading="lazy" alt="Deep Learning Docs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-docs-93b181a7480d0a38c003a4ba44012825.png" width="1021" height="558" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="seamless-login-with-mlflowlogin">Seamless login with mlflow.login()<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#seamless-login-with-mlflowlogin" class="hash-link" aria-label="Direct link to Seamless login with mlflow.login()" title="Direct link to Seamless login with mlflow.login()">​</a></h3>
<p>We've streamlined our authentication processes.
<a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#method-2-use-free-hosted-tracking-server-databricks-community-edition" target="_blank" rel="noopener noreferrer">This method</a>
provides a simple way to connect MLflow to your tracking server without having to leave your development environment.
<a href="https://mlflow.org/blog/databricks-ce" target="_blank" rel="noopener noreferrer">Try it out today</a></p>
<p><img loading="lazy" alt="Login Update" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/login-update-578121a523809b9c607c73f811975f41.png" width="1159" height="453" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-today">Get Started Today<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#get-started-today" class="hash-link" aria-label="Direct link to Get Started Today" title="Direct link to Get Started Today">​</a></h2>
<p>Dive into the latest MLflow updates today and enhance the way you manage your machine learning projects! With our newest enhancements,
including advanced metric aggregation, automatic capturing of system metrics, intuitive feature grouping, and streamlined search capabilities,
MLflow is here to elevate your data science workflow to new heights.
<a href="https://mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">Get started now with MLflow's cutting-edge tools and features</a>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">pip install mlflow==2.11</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow ui --port 8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">datasets </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> load_diabetes</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set our tracking server uri for logging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_tracking_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"http://127.0.0.1:8080"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">db </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> load_diabetes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_features</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># MLflow triggers logging automatically upon model fitting</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feedback">Feedback<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#feedback" class="hash-link" aria-label="Direct link to Feedback" title="Direct link to Feedback">​</a></h2>
<p>We value your input! Our <a href="https://github.com/orgs/mlflow/projects/4" target="_blank" rel="noopener noreferrer">feature roadmap</a> prioritization is guided by feedback from the <a href="https://www.linkedin.com/feed/update/urn:li:activity:7128154257924513793" target="_blank" rel="noopener noreferrer">MLflow late 2023 survey</a>, <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">GitHub Issues</a> and <a href="https://mlflow.org/slack" target="_blank" rel="noopener noreferrer">Slack</a>. Look out for our next survey later this year, by participating you can help ensure that the features you want are implemented in MLflow. You can also create an <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">issue on GitHub</a> or join our <a href="https://mlflow.org/slack" target="_blank" rel="noopener noreferrer">Slack</a>.</p>]]></content:encoded>
            <category>Deep Learning</category>
        </item>
        <item>
            <title><![CDATA[2023 Year in Review]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review</guid>
            <pubDate>Fri, 26 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[MLflow year-end recap]]></description>
            <content:encoded><![CDATA[<p>With more than <strong>16 million</strong> monthly downloads, MLflow has established itself as a leading open-source MLOps platform worldwide.
This achievement underscores the robustness of MLflow and the active community that consistently refines and improves it.</p>
<p>The past year marked a significant milestone for MLflow, particularly in Generative AI. Its integration and support for Large Language Models
(LLMs) stood out. This strategic decision has propelled MLflow to the forefront of the AI revolution, establishing itself as the premier GenAI
platform that enables users to create more intelligent, efficient, and adaptable AI models and applications.</p>
<p><img loading="lazy" alt="16 Million Downloads!" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/download-graph-6003d8547fa38dd5c3253b2a6211d9aa.png" width="1164" height="1241" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2023-a-year-of-genai-and-innovation">2023: A Year of GenAI and Innovation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-a-year-of-genai-and-innovation" class="hash-link" aria-label="Direct link to 2023: A Year of GenAI and Innovation" title="Direct link to 2023: A Year of GenAI and Innovation">​</a></h2>
<p>Last year was remarkable for MLflow, particularly in integrating LLMs and other generative AI tools. MLflow has evolved significantly by offering
a unified platform and workflow for traditional ML, deep learning, and GenAI applications. This integration ensures unparalleled efficiency and
innovation. MLflow's dedication to improving LLM support has revolutionized how users create and oversee AI workflows, establishing it as an
indispensable tool for building advanced machine learning applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrations-with-leading-ai-tools">Integrations with Leading AI Tools<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#integrations-with-leading-ai-tools" class="hash-link" aria-label="Direct link to Integrations with Leading AI Tools" title="Direct link to Integrations with Leading AI Tools">​</a></h3>
<p>MLflow has successfully incorporated support for popular AI services/frameworks such as <a href="https://huggingface.co/" target="_blank" rel="noopener noreferrer">Hugging Face</a>,
<a href="https://www.langchain.com/" target="_blank" rel="noopener noreferrer">LangChain</a>, and <a href="https://openai.com/" target="_blank" rel="noopener noreferrer">OpenAI</a>, while offering a unified and framework-agnostic interface for
packaging, evaluating, and deploying them. These integrations have opened new horizons for MLflow users, allowing them to leverage the capabilities
of these advanced AI tools seamlessly within their MLflow workflows.</p>
<p><img loading="lazy" alt="GenAI Integrations" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/integrations-5fa17d7f697fd95f91aefa520e6a2432.png" width="1544" height="735" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="model-packaging-for-llms">Model Packaging for LLMs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#model-packaging-for-llms" class="hash-link" aria-label="Direct link to Model Packaging for LLMs" title="Direct link to Model Packaging for LLMs">​</a></h4>
<p>Recognizing the surge in LLM popularity and utility, MLflow has focused on enhancing packaging support for these models. With MLflow’s new built-in
model flavors for <a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Hugging Face</a>, <a href="https://www.mlflow.org/docs/latest/llms/langchain/index.html" target="_blank" rel="noopener noreferrer">LangChain</a>
, and <a href="https://www.mlflow.org/docs/latest/llms/openai/index.html" target="_blank" rel="noopener noreferrer">OpenAI</a>, users can log and deploy their LLMs and generative AI applications within minutes.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="retrieval-augmented-generation-rag-and-mlflow-integration">Retrieval Augmented Generation (RAG) and MLflow Integration<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#retrieval-augmented-generation-rag-and-mlflow-integration" class="hash-link" aria-label="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration" title="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration">​</a></h4>
<p><a href="https://mlflow.org/docs/latest/llms/rag/index.html" target="_blank" rel="noopener noreferrer">Retrieval Augmented Generation (RAG)</a> represents an impactful method in natural language processing.
It combines pre-trained models with retrieval mechanisms to access a dataset of documents that fetch validated and curated content as opposed to relying
on pure generation. This approach significantly improves generated responses' contextual relevance and factual accuracy. With
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">mlflow.evaluate()</a>, users can compare RAG systems across prompts, models, vector
databases, and more. See further details in the blog post:
<a href="https://medium.com/@dliden/evaluating-retrieval-augmented-generation-rag-systems-with-mlflow-cf09a74faadb" target="_blank" rel="noopener noreferrer">"Evaluating Retrieval Augmented Generation (RAG) Systems with MLflow"</a>.</p>
<p><img loading="lazy" alt="RAG with MLflow" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/rag-3fd1206bbdf1c5f03b411304a4c683b9.webp" width="1600" height="1276" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-deployment-server-in-mlflow-290">MLflow Deployment Server in MLflow 2.9.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-deployment-server-in-mlflow-290" class="hash-link" aria-label="Direct link to MLflow Deployment Server in MLflow 2.9.0" title="Direct link to MLflow Deployment Server in MLflow 2.9.0">​</a></h4>
<p>The <a href="https://www.mlflow.org/docs/latest/llms/deployments/index.html" target="_blank" rel="noopener noreferrer">MLflow Deployment Server</a> simplifies LLM usage and management from various providers
like OpenAI, MosaicML, Anthropic, Hugging Face, Cohere, MLflow models, and more. Besides supporting popular SaaS LLM providers, the MLflow Deployment Server
integrates with MLflow model serving, enabling users to serve their own LLM or fine-tuned foundation models within their serving infrastructure.
The MLflow Deployment Server also provides a unified inference API across different providers and services, making it much easier to query and compose
them together. It uses securely stored keys from a centralized location, so users no longer need to share sensitive API keys with each member of their
organization. This simplifies how we interact with language models, adding an extra layer of security for managing API keys.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-mlflow-evaluate-api-in-mlflow-280">Enhanced MLflow Evaluate API in MLflow 2.8.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#enhanced-mlflow-evaluate-api-in-mlflow-280" class="hash-link" aria-label="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0" title="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0">​</a></h4>
<p>The <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">MLflow Evaluate API</a> underwent significant feature enhancements to support LLM
workflows better and incorporate multiple new evaluation modes, including support for
<a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#metrics-with-llm-as-the-judge" target="_blank" rel="noopener noreferrer">LLM-as-a-judge</a>. This upgraded API enables a more refined
and thorough analysis of LLM performance.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="prompt-engineering-ui-in-mlflow-270">Prompt Engineering UI in MLflow 2.7.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#prompt-engineering-ui-in-mlflow-270" class="hash-link" aria-label="Direct link to Prompt Engineering UI in MLflow 2.7.0" title="Direct link to Prompt Engineering UI in MLflow 2.7.0">​</a></h4>
<p>MLflow introduced the <a href="https://mlflow.org/docs/latest/llms/prompt-engineering/index.html" target="_blank" rel="noopener noreferrer">Prompt Engineering UI</a>, a tool specifically designed for efficient prompt
development, testing, and assessment in Large Language Models (LLMs). This user-friendly interface and comprehensive toolkit have notably improved the
accessibility and efficiency of prompt engineering within LLM workflows.</p>
<p><img loading="lazy" alt="Prompt Engineering UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/prompt-engineering-6863e45e95ed31ec42b84c688187b0d7.png" width="2870" height="1610" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-growth-and-engagement">Community Growth and Engagement<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#community-growth-and-engagement" class="hash-link" aria-label="Direct link to Community Growth and Engagement" title="Direct link to Community Growth and Engagement">​</a></h2>
<p>The introduction of the MLflow blog in 2023 was a new addition to the MLflow website. This fresh section signifies a crucial stride toward boosting
community involvement and fostering knowledge exchange within the MLflow ecosystem. The blog serves as a direct avenue for sharing updates about new
features, improvements, and the future trajectory of the MLflow project.</p>
<p>MLflow surpassed 45,000 followers in 2023! Not only this, across <a href="https://twitter.com/MLflow?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" target="_blank" rel="noopener noreferrer">X</a>
and <a href="https://www.linkedin.com/company/mlflow-org/" target="_blank" rel="noopener noreferrer">LinkedIn</a>, MLflow had over 1 million impressions, the number of times our
content was displayed to users. When it came to MLflow contributor growth, the MLflow contributor count grew from 530 to 690 in 2023.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-docs-overhaul">MLflow Docs Overhaul<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-docs-overhaul" class="hash-link" aria-label="Direct link to MLflow Docs Overhaul" title="Direct link to MLflow Docs Overhaul">​</a></h3>
<p>We have undertaken a massive initiative to reimagine how our users interact with our content. The primary goal is to enhance clarity, improve navigation,
and provide more in-depth resources for our community, in addition to refreshing the look and feel. The overhaul of the MLflow documentation is a significant
milestone, but it’s just the beginning. We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, sharing use cases,
or providing feedback, every contribution enriches the MLflow community.</p>
<p><img loading="lazy" alt="Docs Overhaul" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/docs-overhaul-c4502c290db228977c36909907249e77.png" width="2210" height="1418" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2023-events">2023 Events<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-events" class="hash-link" aria-label="Direct link to 2023 Events" title="Direct link to 2023 Events">​</a></h3>
<p>MLflow made a substantial impact at two significant events: <strong>NeurIPS 2023</strong> and the <strong>Data+AI Summit 2023</strong>. These events underscored MLflow's commitment
to contributing to the evolving discourse in machine learning and AI, emphasizing its pivotal role in shaping the future of these dynamic fields.
The Data+AI Summit occurred in June 2023 and featured various MLflow-related sessions. Notably, two sessions stood out:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=WpudXKAZQNI" target="_blank" rel="noopener noreferrer">Advancements in Open Source LLM Tooling, Including MLflow</a>: Explored MLflow's seamless integration
with leading generative AI tools like Hugging Face, LangChain, and OpenAI. It highlighted how these integrations enable effortless construction of AI workflows.</li>
<li><a href="https://www.youtube.com/watch?v=MYqXfMqEUq4" target="_blank" rel="noopener noreferrer">How the Texas Rangers Revolutionized Baseball Analytics with a Modern Data Lakehouse</a>: Offered a
comprehensive insight into how the Texas Rangers baseball team leveraged MLflow and Databricks to revolutionize their approach to data analytics.</li>
</ul>
<p><img loading="lazy" alt="Big Data Baseball" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/baseball-f47adc1879b65e6f0e2175f83b78f0c1.png" width="1692" height="906" class="img_ev3q"></p>
<p>In December 2023, MLflow participated in the 37th Annual Conference of Neural Information Processing Systems (NeurIPS) held in New Orleans, LA. NeurIPS
stands as one of the most prestigious conferences in machine learning and computational neuroscience.
For those seeking guidance on fine-tuning a Large Language Model for general-purpose instruction following, the session
<a href="https://arxiv.org/abs/2311.13133" target="_blank" rel="noopener noreferrer">"LIMIT: Less Is More for Instruction Tuning Across Evaluation Paradigms"</a> at NeurIPS presented valuable insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stay-plugged-in">Stay Plugged In<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#stay-plugged-in" class="hash-link" aria-label="Direct link to Stay Plugged In" title="Direct link to Stay Plugged In">​</a></h3>
<p>If you are interested in joining the MLflow community, we’d love to connect! Join us on
<a href="https://mlflow-users.slack.com/ssb/redirect" target="_blank" rel="noopener noreferrer">Slack</a>, <a href="https://groups.google.com/g/mlflow-users" target="_blank" rel="noopener noreferrer">Google Groups</a>, and <a href="https://github.com/mlflow/mlflow/" target="_blank" rel="noopener noreferrer">GitHub</a>.
We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, developing code, sharing use-cases, or providing feedback, let’s work together!
Are you already an MLflow contributor? The newly launched MLflow Ambassador Program is a great way to boost your involvement. As an MLflow Ambassador,
you will serve as one of our esteemed global ambassadors, pivotal in propelling the adoption and amplifying awareness of MLflow within the global data
community. We invite you to submit an application <a href="https://forms.gle/adAPNvH6aVq4diPF9" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p><img loading="lazy" alt="Ambassador Program" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ambassador-program-f6ebce80bb98bf364c13ed073ef7e796.png" width="1316" height="1294" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward">Looking Forward<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#looking-forward" class="hash-link" aria-label="Direct link to Looking Forward" title="Direct link to Looking Forward">​</a></h3>
<p>“In 2024, we're launching new initiatives to engage, support, and expand our community. MLflow is thrilled to broaden its horizons this year through strategic
collaboration and partnership”, says Ben Wilson, Software Engineer at Databricks. “This collaboration will unlock fresh opportunities for our users and
significantly contribute to MLflow's evolution. Stay tuned for an announcement about this exciting effort.”</p>
<p>The year 2023 marked a transformative period for MLflow. By embracing the latest ML and GenAI advancements, MLflow improved its platform and made substantial
contributions to the wider AI and machine learning community. To our MLflow community, we extend our deepest gratitude.</p>
<p>You have been instrumental in driving MLflow's success over the past year. Whether it's enhancing existing features, exploring new integrations, or sharing
your expertise, your contributions are the lifeblood of the MLflow community. If you're interested in contributing to MLflow,
<a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">this guide</a> is an excellent starting point. Looking ahead, we're excited about the myriad
possibilities and new frontiers we can explore together.</p>
<p>MLflow is poised to continue its path of growth and innovation, cementing its role as a leader in managing machine learning and GenAI workflows across the
entire lifecycle. We're eager to keep pushing the boundaries of what's achievable in AI and strive to create an innovative, inclusive, and open future.</p>]]></content:encoded>
            <category>MLflow</category>
            <category>2023</category>
            <category>Linux Foundation</category>
        </item>
        <item>
            <title><![CDATA[Streamline your MLflow Projects with Free Hosted MLflow]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce</guid>
            <pubDate>Thu, 25 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[A guide to using Databricks Community Edition with integrated managed MLflow]]></description>
            <content:encoded><![CDATA[<p>If you're new to MLflow and want to get started with a fully-managed and completely free deployment of MLflow, this blog will show you how to get started using MLflow in minutes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free">Streamline Your ML Projects: Get Started with Hosted MLflow for Free<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free" class="hash-link" aria-label="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free" title="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free">​</a></h2>
<p>Explore the world of big data and machine learning with <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks Community Edition (CE)</a>, a free, limited<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-1-1ef65d" id="user-content-fnref-1-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup> version of the Databricks platform.
Ideal for beginners and those new to Databricks and MLflow, this edition streamlines the learning curve by offering a managed environment. It eliminates the complexity of manually
setting up a tracking server. Databricks CE includes hosted MLflow, enabling efficient management and visualization of your MLflow experiments. This makes it a prime choice for
developing machine learning projects in a user-friendly interface, allowing you to connect from your favorite IDE, notebook environment, or even from within Databricks CE's notebooks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-using-databricks-ce-for-mlflow">Benefits of Using Databricks CE for MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#benefits-of-using-databricks-ce-for-mlflow" class="hash-link" aria-label="Direct link to Benefits of Using Databricks CE for MLflow" title="Direct link to Benefits of Using Databricks CE for MLflow">​</a></h3>
<p>MLflow is an open-source framework compatible with any platform, yet it offers distinct benefits when used on Databricks (including the Community Edition, CE) compared to other platforms. These advantages include:</p>
<ol>
<li>
<p><strong>Cost-Effective</strong>: Free of charge, MLflow on Databricks CE is perfect for educational purposes and small-scale projects.</p>
</li>
<li>
<p><strong>Simple Setup</strong>: Gain access to a fully managed tracking server and user interface from any location. To connect to Databricks CE, just execute <code>mlflow.login()</code>.</p>
</li>
<li>
<p><strong>Easy Sharing</strong>: In the Databricks ecosystem, sharing your notebooks is straightforward and hassle-free.</p>
</li>
<li>
<p><strong>Seamless Integration</strong>: Databricks CE allows for direct storage and visualization of MLflow experiments, runs, and models.</p>
</li>
<li>
<p><strong>Scalability</strong>: MLflow on Databricks CE provides an easy path to scale your projects. It also integrates seamlessly with a wide range of data tools available on the Databricks platform.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scenario">Scenario<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#scenario" class="hash-link" aria-label="Direct link to Scenario" title="Direct link to Scenario">​</a></h3>
<p>In this blog, we will walk through running ML experiments on your local device and tracking them on an <a href="https://mlflow.org/docs/latest/tracking.html#common-setups" target="_blank" rel="noopener noreferrer">MLflow tracking server hosted on Databricks CE</a></p>
<p>To give you an idea of the options available for running MLflow, the figure below shows what is possible for common setup configurations.</p>
<p><img loading="lazy" alt="Remote Tracking Server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/remote-tracking-server-7954737febd0bc4d6d0d209cc78aec6a.png" width="1582" height="1010" class="img_ev3q"></p>
<p>For this blog, we're showing #3, using a remote (fully managed) tracking server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-guide">Step-by-Step Guide<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#step-by-step-guide" class="hash-link" aria-label="Direct link to Step-by-Step Guide" title="Direct link to Step-by-Step Guide">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-creating-a-databricks-ce-account">1. Creating a Databricks CE Account<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#1-creating-a-databricks-ce-account" class="hash-link" aria-label="Direct link to 1. Creating a Databricks CE Account" title="Direct link to 1. Creating a Databricks CE Account">​</a></h4>
<p>If you haven't already, you can <a href="https://www.databricks.com/try-databricks#account" target="_blank" rel="noopener noreferrer">sign up for a free account</a>. The process is quick, typically taking no more than 3 minutes.</p>
<p>Fill out the signup form and select “Get started with Community Edition.”</p>
<p><img loading="lazy" alt="Databricks CE Signup Page" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ce-signup-8d3a74af80d917b0ab1d514d2b36d601.png" width="1163" height="552" class="img_ev3q"></p>
<p>Once signed up, you'll get information on how to set a password that you can use to login to CE with<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-2-1ef65d" id="user-content-fnref-2-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-installing-dependencies">2. Installing Dependencies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#2-installing-dependencies" class="hash-link" aria-label="Direct link to 2. Installing Dependencies" title="Direct link to 2. Installing Dependencies">​</a></h4>
<p>Before you start, ensure that you have the necessary packages installed. Run the following command in your favorite IDE or notebook from your device:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">%pip install -q mlflow databricks-sdk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-setting-up-databricks-ce-authentication">3. Setting Up Databricks CE Authentication<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#3-setting-up-databricks-ce-authentication" class="hash-link" aria-label="Direct link to 3. Setting Up Databricks CE Authentication" title="Direct link to 3. Setting Up Databricks CE Authentication">​</a></h4>
<p>The main advantage of Databricks Community Edition (CE) is its convenience: it offers an MLflow tracking server without requiring
<a href="https://mlflow.org/docs/latest/getting-started/logging-first-model/step1-tracking-server.html" target="_blank" rel="noopener noreferrer">local infrastructure setup</a>. You can easily access this server through the
<a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function after creating your CE account, streamlining the process for MLflow experiment tracking.</p>
<p>To authenticate with Databricks CE, use the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function. This will prompt you for:</p>
<ul>
<li>
<p><strong>Databricks Host</strong>: <code>https://community.cloud.databricks.com/</code></p>
</li>
<li>
<p><strong>Username</strong>: Your Databricks CE email address.</p>
</li>
<li>
<p><strong>Password</strong>: Your Databricks CE password.</p>
</li>
</ul>
<p>Upon successful authentication, you will see a confirmation message.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">login</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Follow the prompts for authentication</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce">4. Connect to Hosted MLflow and Track Experiments with Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce" class="hash-link" aria-label="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE" title="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE">​</a></h4>
<p>After you login from your local machine, start an experiment with <a href="https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=mlflow%20set_experiment#mlflow.set_experiment" target="_blank" rel="noopener noreferrer">mlflow.set_experiment()</a> and log some metrics. For instance:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"/Users/\&lt;email&gt;/check-databricks-ce-connection"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"foo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"bar"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p><strong>Note</strong>: The Databricks environment requires you to set experiments with the directory (from root)</p>
</blockquote>
<p><code>/Users/{your email address for your account}/{name of your experiment}</code>, which is different from the behavior in self-hosted MLflow (and when running MLFlow locally).</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-viewing-your-experiment-in-databricks-ce">5. Viewing Your Experiment in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#5-viewing-your-experiment-in-databricks-ce" class="hash-link" aria-label="Direct link to 5. Viewing Your Experiment in Databricks CE" title="Direct link to 5. Viewing Your Experiment in Databricks CE">​</a></h4>
<p>Now let’s navigate to Databricks CE to view the experiment result. Log in to your <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks CE</a>
account, and click on the top left to select machine learning in the drop down list. Finally, click on the experiment icon. See the screenshots below:</p>
<p>Navigate to the Machine Learning Section</p>
<p><img loading="lazy" alt="Navigate to ML Section of Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-experiments-43a3dba9c34a69026e401602f9b5eea7.png" width="1185" height="678" class="img_ev3q"></p>
<p>Navigate to the MLflow UI</p>
<p><img loading="lazy" alt="Navigate to the MLflow UI on Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-mlflow-ui-9153eefcaed934e7b4eb23ee237a47e7.png" width="1288" height="1009" class="img_ev3q"></p>
<p>In the “Experiments” view, you should be able to find the experiment <code>/Users/{your email}/check-databricks-ce-connection</code>, similar to:</p>
<p><img loading="lazy" alt="Experiment view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-experiment-7dc9705edc70510de92018420a83fbc1.png" width="1600" height="469" class="img_ev3q"></p>
<p>Clicking on the run name, which in this example is 'youthful-lamb-287' (note that you will see a different, randomly generated name in your CE console),
will take you to the run view that looks similar to the following:</p>
<p><img loading="lazy" alt="Run view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-run-558bde39743ec2b9babdc6f03b81d70f.png" width="1600" height="570" class="img_ev3q"></p>
<p>In the run view, you will see our dummy metrics <code>“foo”</code> and <code>“bar”</code> have been logged successfully.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="6-run-any-mlflow-tutorial-in-databricks-ce">6. Run any MLflow tutorial in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#6-run-any-mlflow-tutorial-in-databricks-ce" class="hash-link" aria-label="Direct link to 6. Run any MLflow tutorial in Databricks CE" title="Direct link to 6. Run any MLflow tutorial in Databricks CE">​</a></h4>
<p>If you want to try a tutorial from the MLflow website, you can use Databricks CE to quickly test (and modify, if you're inclined) the tutorial. For example, if you wanted to test
the <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.html" target="_blank" rel="noopener noreferrer">Creating Custom Pyfunc tutorial</a>:</p>
<ol>
<li>Click Workspace and&nbsp; select “Import notebook”</li>
</ol>
<p><img loading="lazy" alt="Import a Notebook" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-548588052cf7a796bdb1924c3727a578.png" width="1196" height="674" class="img_ev3q"></p>
<ol start="2">
<li>
<p>Use the <code>URL</code> option to import the notebook directly from the MLflow documentation website. For this example, to import, replace the last element of the url
from <code>html</code> to <code>ipynb</code>. This can be done with any of the tutorial or guide notebooks that are hosted on the MLflow website.</p>
<p>.../notebooks/basic-pyfunc.<del>html</del> → .../notebooks/basic-pyfunc.<strong>ipynb</strong><sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-3-1ef65d" id="user-content-fnref-3-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup></p>
</li>
</ol>
<p><img loading="lazy" alt="Select the Notebook for Importing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-2-589a74ce4c982cb92c494ab404814618.png" width="1519" height="1174" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Databricks Community Edition (CE) offers an accessible and collaborative platform for MLflow experiment tracking, presenting several advantages. Its setup process is effortless
and quick, providing a user-friendly experience. Additionally, it's free to use, making it an ideal choice for beginners, learners, and small-scale projects.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting started<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#getting-started" class="hash-link" aria-label="Direct link to Getting started" title="Direct link to Getting started">​</a></h3>
<p>Try out the notebook on <a href="https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/2830662238121329/3266358972198675/8538262732615206/latest.html" target="_blank" rel="noopener noreferrer">Databricks</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h3>
<ul>
<li>
<p>Learn more about <a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#minute-tracking-server-overv" target="_blank" rel="noopener noreferrer">different methods to setup your tracking server</a></p>
</li>
<li>
<p>Learn more about running <a href="https://mlflow.org/docs/latest/getting-started/running-notebooks/index.html" target="_blank" rel="noopener noreferrer">Tutorial Notebooks </a>with Databricks CE</p>
</li>
</ul>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-1ef65d">
<p>The Model Registry and Model Deployment features are not available in the Databricks Community Edition. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-1-1ef65d" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-1ef65d">
<p>Databricks CE only supports basic authorization signin (username / password). For more advanced and secure authorization setups, only the full Databricks product supports those. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-2-1ef65d" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-1ef65d">
<p>Or you can <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.ipynb" target="_blank" rel="noopener noreferrer">download the notebook</a> and manually load it in the UI by selecting <code>File</code> instead of <code>URL</code>. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-3-1ef65d" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <category>managed mlflow</category>
            <category>getting started</category>
        </item>
        <item>
            <title><![CDATA[Custom MLflow Models with mlflow.pyfunc]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc</guid>
            <pubDate>Tue, 23 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[A guide for creating custom MLflow models]]></description>
            <content:encoded><![CDATA[<p>If you're looking to learn about all of the flexibility and customization that is possible within
MLflow's custom models, this blog will help you on your journey in understanding more about how to
leverage this powerful and highly customizable model storage format.</p>
<p><img loading="lazy" alt="Welcome" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/header-63bc1d1400bae90d4022e288cb0c513d.png" width="1200" height="629" class="img_ev3q"></p>
<p>MLflow offers built-in methods for logging and working with models from many popular machine
learning and generative AI frameworks and model providers, such as scikit-learn, PyTorch,
HuggingFace transformers, and LangChain. For example,
<a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>
will log a scikit-learn model as an MLflow artifact without requiring you to define custom methods for
prediction or for handling artifacts.</p>
<p>In some cases, however, you might be working in a framework for which MLflow does not have
built-in methods, or you might want something different than the model’s default prediction
outputs. In those cases, MLflow allows you to create custom models to work with essentially
any framework and to integrate custom logic to existing supported frameworks.</p>
<p>In its simplest form, all that’s required is to define a custom predict method and log the model.
The following example defines a simple pyfunc model that just returns the square of its input:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define a custom model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Directly return the square of the input</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Predict</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let’s dig into how this works, starting with some basic concepts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="models-and-model-flavors">Models and Model Flavors<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#models-and-model-flavors" class="hash-link" aria-label="Direct link to Models and Model Flavors" title="Direct link to Models and Model Flavors">​</a></h2>
<p><img loading="lazy" alt="Models and Flavors" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-and-flavors-51143bf4059c2106bb267bc53daa31bb.png" width="2235" height="1332" class="img_ev3q"></p>
<p>An MLflow model is a directory that includes everything needed to reproduce a machine learning model
across different environments. Aside from the stored model itself, the most important component
stored is an <code>MLmodel</code> YAML file that specifies the model’s supported model flavors.
A <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/part1-named-flavors.html#components-of-a-model-in-mlflow" target="_blank" rel="noopener noreferrer">model flavor</a>
is a set of rules specifying how MLflow can interact with the model (i.e., save it, load it, and
get predictions from it).</p>
<p>When you create a custom model in MLflow, it has the <code>python_function</code> or pyfunc model flavor,
which is a kind of “universal translator” across formats in MLflow. When you save a model in MLflow
using a built-in model flavor, e.g. with <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>,
that model also has the pyfunc model flavor in addition to its framework-specific flavor.
Having both framework-specific and pyfunc model flavors allows you to use the model via the
framework’s native API (e.g., <code>scikit-learn</code>) or via the pyfunc flavor’s framework-agnostic inference API.</p>
<p>Models with the pyfunc flavor are loaded as instances of the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.PyFuncModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PyfuncModel</a>
class, which exposes a standardized predict method. This enables straightforward inference through a single
function call, regardless of the underlying model's implementation details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-mlflow-pyfunc-models">Defining Custom MLflow Pyfunc Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-mlflow-pyfunc-models" class="hash-link" aria-label="Direct link to Defining Custom MLflow Pyfunc Models" title="Direct link to Defining Custom MLflow Pyfunc Models">​</a></h2>
<p>Saving a model from any supported machine learning framework as an MLflow model results in the
creation of a pyfunc model flavor that provides a framework-agnostic interface for managing and
using the model. But what if you’re using a framework without an MLflow integration, or you’re
trying to elicit some custom behavior from a model? <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#creating-custom-pyfunc-models" target="_blank" rel="noopener noreferrer">Custom pyfunc models</a>
allow you to work with essentially any framework and to integrate custom logic.</p>
<p>To implement a custom pyfunc model, define a new Python class inheriting from the PythonModel class
and implement the necessary methods. Minimally, this will involve implementing a custom predict
method. Next, create an instance of your model and log or save the model. Once you’ve loaded the
saved or logged model, you can use it for predictions.</p>
<p><img loading="lazy" alt="Creating a custom model" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-model-creation-d615de1b07178eaeaa25b55443690d17.png" width="2235" height="1383" class="img_ev3q"></p>
<p>Let’s work through a few examples, each adding a little more complexity and highlighting different
aspects of defining a custom pyfunc model. We’ll cover four main techniques for implementing custom
behaviors in pyfunc models:</p>
<ol>
<li>Implementing a custom <code>predict</code> method</li>
<li>Implementing a custom <code>__init__</code> method</li>
<li>Implementing a custom <code>load_context</code> method</li>
<li>Implementing user-defined custom methods</li>
</ol>
<p><img loading="lazy" alt="Pyfunc model customization" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-pyfunc-types-5cd29c2ba155b783ed35f0231432922f.png" width="2239" height="1100" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-predict-method">Defining a custom <code>predict</code> method<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-a-custom-predict-method" class="hash-link" aria-label="Direct link to defining-a-custom-predict-method" title="Direct link to defining-a-custom-predict-method">​</a></h3>
<p>At a minimum, a pyfunc model should specify a custom predict method that defines what happens when
we call <code>model.predict</code>. Here’s an example of a custom model that applies a simple linear
transformation to the model inputs, multiplying each input by two and adding three:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"linear_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that you can (and should) also include a <a href="https://mlflow.org/docs/latest/models.html#model-signature" target="_blank" rel="noopener noreferrer">signature</a>
and an <a href="https://mlflow.org/docs/latest/models.html#model-input-example" target="_blank" rel="noopener noreferrer">input example</a> when saving/logging a
model. If you pass an input example, the signature will be inferred automatically. The model
signature provides a way for MLflow to enforce correct usage of your model.</p>
<p>Once we’ve defined the model path and saved an instance of the model, we can load the saved model
and use it to generate predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Now the model can be loaded and used for predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Which will return:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:    0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  5</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  7</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that if a custom <code>predict</code> method is all you need—that is, if your model does not have any
artifacts that require special handling—you can save or log the <code>predict</code> method directly without
needing to wrap it in a Python class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Pass predict method as python_model argument to save/log model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"simple_function"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that with this approach, we <strong>must include</strong> an input example along with the custom predict
method. We also have to modify the predict method such that it takes only one input (i.e., no self or context).
Running this example and then loading with the same code as the preceding code block will retain the same output as
the example using a class definiton.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="parameterizing-the-custom-model">Parameterizing the custom model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#parameterizing-the-custom-model" class="hash-link" aria-label="Direct link to Parameterizing the custom model" title="Direct link to Parameterizing the custom model">​</a></h3>
<p>Now suppose we want to parameterize the custom linear function model so that it can be used with
different slopes and intercepts. We can define the <code>__init__</code> method to set up custom parameters,
as in the following example. Note that the custom model class’s <code>__init__</code> method should not be used
to load external resources like data files or pretrained models; these are handled in the
<code>load_context</code> method, which we’ll discuss shortly.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> slope</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize the parameters of the model. Note that we are not loading</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        any external resources here, just setting up the parameters.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> slope</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> intercept</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">linear_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Saving the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"parameter_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">linear_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, we can load this model and make some predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  40</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  50</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are many cases where we might want to parameterize a model in this manner. We can define
variables in the <code>__init__</code> method to:</p>
<ul>
<li>Set model hyperparameters.</li>
<li>A/B test models with different parameter sets.</li>
<li>Set user-specific customizations.</li>
<li>Toggle features.</li>
<li>Set, e.g., access credentials and endpoints for models that access external APIs.</li>
</ul>
<p>In some cases, we may want to be able to pass parameters at inference time rather than when we
initialize the model. This can be accomplished with
<a href="https://mlflow.org/docs/latest/models.html#model-inference-params" target="_blank" rel="noopener noreferrer">model inference params</a>. To use
inference params, we must pass a valid model signature including <code>params</code>. Here’s how to adapt the
preceding example to use inference params:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set default params</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define model signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model_with_params"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        signature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After loading the model as before, you can now pass a <code>params</code> argument to the <code>predict</code> method,
enabling you to use the same loaded model for different combinations of parameters:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">parameterized_predictions </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">parameterized_predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  50</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  70</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="loading-external-resources-with-load_context">Loading external resources with <code>load_context</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#loading-external-resources-with-load_context" class="hash-link" aria-label="Direct link to loading-external-resources-with-load_context" title="Direct link to loading-external-resources-with-load_context">​</a></h3>
<p>Custom models often require external files such as model weights in order to perform inference.
These files, or artifacts, must be handled carefully to avoid unnecessarily loading files into
memory or errors during model serialization. When building custom pyfunc models in MLflow, you can
use the <code>load_context</code> method to handle model artifacts correctly.</p>
<p>The <code>load_context</code> method receives a <code>context</code> object containing artifacts the model can use during
inference. You can specify these artifacts using the <code>artifacts</code> argument when saving or logging
models, making them accessible to the <code>load_context</code> method via the <code>context.artifacts</code> dictionary.</p>
<p>In practice, the <code>load_context</code> method often initializes the model called by the <code>predict</code> method by
handling the loading of model artifacts.</p>
<p>This raises an important question: why do we load artifacts and define the model in the <code>load_context</code>
method and not in <code>__init__</code> or directly in <code>predict</code>? Correct usage of <code>load_context</code> is essential
for the maintainability, efficiency, scalability, and portability of MLflow pyfunc models. This is because:</p>
<ul>
<li>The <code>load_context</code> method is executed once when the model is loaded via <code>mlflow.pyfunc.load_model</code>.
This setup ensures that resource-intensive processes defined within this method, such as loading
large model files, are not repeated unnecessarily. If artifact loading is done in the predict
method, it will occur every single time a prediction is made. This is highly inefficient for
resource-intensive models.</li>
<li>Saving or logging an MLflow <code>pyfunc</code> model involves serializing the Python model class (the subclass
of <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.PythonModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PythonModel</a>
you created) and its attributes. Complex ML models are not always compatible with the methods used
to serialize the Python object, which can lead to errors if they are created as attributes of the Python object.</li>
</ul>
<p>As an example, suppose we want to load a large language model (LLM) in the <code>gguf</code> model format
(a file format designed for storing models for inference) and run it with the
<a href="https://pypi.org/project/ctransformers" target="_blank" rel="noopener noreferrer">ctransformers library</a>. At the time of writing, there is
no built-in model flavor that lets us use <code>gguf</code> models for inference, so we’ll create a custom
pyfunc model that loads the required libraries and model files in the <code>load_context</code> method.
Specifically, we’re going to load a quantized version of the <a href="https://huggingface.co/TheBloke/Mistral-7B-v0.1-AWQ" target="_blank" rel="noopener noreferrer">AWQ version of the Mistral 7B model</a>.</p>
<p>First, we’ll download the model snapshot using the huggingface hub cli:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">huggingface-cli download TheBloke/Mistral-7B-v0.1-GGUF \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                mistral-7b-v0.1.Q4_K_M.gguf \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir /path/to/mistralfiles/ \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir-use-symlinks False</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then we’ll define our custom <code>pyfunc</code> model. Note the addition of the <code>load_context</code> method:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"The model has not been loaded. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Ensure that 'load_context' is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There’s a lot going on here, so let’s break it down. Here are the key points:</p>
<ul>
<li>As before, we use the <code>__init__</code> method to parameterize the model (in this case, to set the
<code>gpu_layers</code> argument for the model).</li>
<li>The purpose of the <code>load_context</code> method is to load the artifacts required for use in the
<code>predict</code> method. In this case, we need to load the model and its weights.</li>
<li>You’ll notice that we reference <code>context.artifacts["model_file"]</code>. This comes from the artifacts
argument to <code>mlflow.pyfunc.save_model</code> or <code>mlflow.pyfunc.load_model</code>, as shown in the following
code snippet. This is an important part of working with <code>pyfunc</code> models. The <code>predict</code> and
<code>load_context</code> methods can access the artifacts defined in the artifacts argument to the
<code>save_model</code> or <code>log_model</code> method via the <code>context.artifacts</code> object. <code>load_context</code> is executed
when the model is loaded via <code>load_model</code>; as described earlier, this provides a way to ensure that
the potentially time-consuming initialization of a model does not occur each time the model is used
for prediction.</li>
</ul>
<p>Now we can initialize and save an instance of the model. Note the artifacts argument to the
<code>save_model</code> function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Create an instance of the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mistral_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistral_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the saved model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Make a prediction with the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is the MLflow Pyfunc model flavor?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To recap: correct use of the <code>load_context</code> method helps to ensure efficient handling of model
artifacts and prevents errors in serialization that could result from attempting to define artifacts
as model attributes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-methods">Defining custom methods<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-methods" class="hash-link" aria-label="Direct link to Defining custom methods" title="Direct link to Defining custom methods">​</a></h3>
<p>You can define your own methods in the custom <code>pyfunc</code> model to handle tasks like preprocessing
inputs or post-processing outputs. These custom methods can then be called by the predict method.
Keep in mind that these custom methods, just like <code>__init__</code> and <code>predict</code>, should <strong>not be used</strong> for
loading artifacts. Loading artifacts is the exclusive role of the <code>load_context</code> method.</p>
<p>For example, we can modify the <code>CTransformersModel</code> to incorporate some prompt formatting as follows:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@staticmethod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Formats the user's prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        formatted_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is an MLflow Model?\n\n"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Answer: An MLflow Model is a directory that includes "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"everything that is needed to reproduce a machine "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"learning model across different environments. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"It is essentially a container holding the trained model "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"files, dependencies, environment details, input examples, "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"and additional metadata. The directory also includes an "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"MLmodel YAML file, which describes the different "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"flavors of the model.\n\nQuestion: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">prompt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">\nAnswer: "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> formatted_prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Model was not loaded. Ensure that 'load_context' "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now the <code>predict</code> method can access the private <code>_format_prompt</code> static method to apply custom formatting to the prompts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependencies-and-source-code">Dependencies and Source Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#dependencies-and-source-code" class="hash-link" aria-label="Direct link to Dependencies and Source Code" title="Direct link to Dependencies and Source Code">​</a></h3>
<p>The custom <code>CTransformersModel</code> defined above uses the <code>ctransformers</code> library. There are a few
different approaches for making sure this library (and any other source code, including from your
local device) is correctly loaded with your model. Correctly specifying dependencies is essential
for ensuring that custom models work as expected across environments.</p>
<p>There are three main approaches to be aware of for specifying dependencies:</p>
<ul>
<li>Define pip requirements explicitly with the <code>pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Add extra pip requirements to an automatically generated set of requirements with the
<code>extra_pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Define a Conda environment with the <code>conda_env</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
</ul>
<p>Earlier, we used the first approach to specify that the <code>ctransformers</code> library was needed:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistralmodel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"path/to/mistral/model/on/local/filesystem"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you do not specify dependencies explicitly, MLflow will attempt to infer the correct set of
requirements and environment details. To enable greater accuracy, it is <strong>strongly recommended</strong> to
include an <code>input_example</code> when saving or logging your model due to the internal execution of a
sample inference step that will capture any loaded library references associated with the inference
execution, enabling a higher probability that the correct dependencies will be recorded.</p>
<p>You can also work with custom code on your own filesystem with the <code>code_path</code> argument.
<code>code_path</code> takes a list of paths to Python file dependencies and prepends them to the system
path before the model is loaded, so the custom pyfunc model can import from these modules.</p>
<p>See the documentation for the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.log_model" target="_blank" rel="noopener noreferrer">log_model</a> and
<a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.save_model" target="_blank" rel="noopener noreferrer">save_model</a>
functions for more details on the accepted formats for <code>pip</code>, <code>Conda</code>, and local code requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-custom-pyfunc-models-in-mlflow">Summary: Custom Pyfunc Models in MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#summary-custom-pyfunc-models-in-mlflow" class="hash-link" aria-label="Direct link to Summary: Custom Pyfunc Models in MLflow" title="Direct link to Summary: Custom Pyfunc Models in MLflow">​</a></h3>
<p>MLflow has built-in methods for working with models from many popular machine learning frameworks,
such as <a href="https://www.mlflow.org/docs/latest/models.html#scikit-learn-sklearn" target="_blank" rel="noopener noreferrer">scikit-learn</a>,
<a href="https://www.mlflow.org/docs/latest/models.html#pytorch-pytorch" target="_blank" rel="noopener noreferrer">PyTorch</a>, and
<a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Transformers</a>. You can define your own custom
<code>mlflow.pyfunc</code> model when you want to work with models that do not yet have built-in model
flavors, or when you want to implement a custom predict method for models with built-in model flavors.</p>
<p>There are several ways to customize <code>pyfunc</code> models to get the desired behavior. Minimally, you can
implement a custom <code>predict</code> method. If your model requires saving or loading artifacts, you should also
implement a <code>load_context</code> method. For further customization, you can use the <code>__init__</code> method for
setting custom attributes and define your own custom methods for pre- and post-processing.
Combining these approaches gives you the ability to flexibly define custom logic for your machine
learning models.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-learning">Further Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#further-learning" class="hash-link" aria-label="Direct link to Further Learning" title="Direct link to Further Learning">​</a></h3>
<p>Interested in learning more about custom <code>pyfunc</code> implementations? You can visit:</p>
<ul>
<li><a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom Pyfuncs for Advanced LLMs with MLflow</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">Build Custom Python Function Models for traditional ML</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom PyFunc notebook examples</a></li>
</ul>]]></content:encoded>
            <category>pyfunc</category>
            <category>models</category>
        </item>
        <item>
            <title><![CDATA[MLflow AI Gateway renamed to MLflow Deployments for LLMs]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename</guid>
            <pubDate>Fri, 01 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[If you are currently using the MLflow AI Gateway, please read this in full to get critically important information about this feature!]]></description>
            <content:encoded><![CDATA[<p>If you are currently using the MLflow AI Gateway, please read this in full to get critically important information about this feature!</p>
<p>Please note that the feature previously known as the <code>MLflow AI Gateway</code>, which was in an experimental phase, has undergone significant updates and improvements.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-mlflow-deployments-for-llms">Introducing "MLflow Deployments for LLMs"<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#introducing-mlflow-deployments-for-llms" class="hash-link" aria-label="Direct link to Introducing &quot;MLflow Deployments for LLMs&quot;" title="Direct link to Introducing &quot;MLflow Deployments for LLMs&quot;">​</a></h2>
<p>This feature, while still in experimental status, has been renamed and migrated to utilize the <code>deployments</code> API.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-key-changes">🔑 Key Changes<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#-key-changes" class="hash-link" aria-label="Direct link to 🔑 Key Changes" title="Direct link to 🔑 Key Changes">​</a></h2>
<p><strong>New Name, Enhanced Features</strong>: The transition from "MLflow AI Gateway" to "MLflow Deployments for LLMs" reflects not only a change in name but also substantial enhancements in usability and <strong>standardization</strong> for API endpoints for Large Language Models.</p>
<p><strong>API Changes</strong>: With this move, there are changes to the API endpoints and configurations. Users are encouraged to review the updated API documentation to familiarize themselves with the new structure.</p>
<p><strong>Migration Path</strong>: For existing projects using "MLflow AI Gateway", a migration guide is available to assist with the transition to "MLflow Deployments for LLMs". This guide provides step-by-step instructions and best practices to ensure a smooth migration.</p>
<p>⚠️ <strong>Action Required</strong>: Users who have been utilizing the experimental "MLflow AI Gateway" should plan to migrate to "MLflow Deployments for LLMs". While we aim to make this transition as seamless as possible, manual changes to your code and deployment configurations will be necessary. This new namespace for deploying the previously-known-as AI Gateway will be released in version 2.9.0. The old AI Gateway references will remain active but will enter a deprecated state. <em>We will be removing the entire AI Gateway namespace in a future release</em>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-resources-and-support">📚 Resources and Support<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/ai-gateway-rename#-resources-and-support" class="hash-link" aria-label="Direct link to 📚 Resources and Support" title="Direct link to 📚 Resources and Support">​</a></h2>
<p><strong>Updated Documentation</strong>: Detailed documentation for "MLflow Deployments for LLMs" is available <a href="https://your-docusaurus-site.example.com/mlflow-website/docs/latest/llms/deployments/index.html" target="_blank" rel="noopener noreferrer">here</a>. It includes comprehensive information about the modifications to API interfaces, updates to the input and output structures for queries and responses, API utilization, and the updated configuration options.</p>
<p><strong>Community and Support</strong>: If you have any questions or need assistance, please reach out to the maintainers <a href="https://github.com/mlflow/mlflow/issues" target="_blank" rel="noopener noreferrer">on GitHub</a>.</p>
<p>We are excited about these advancements and strongly believe that leveraging the deployments API will offer a more robust, efficient, and scalable solution for managing your Large Language Model deployments. Thank you for your continued support and collaboration!</p>]]></content:encoded>
            <category>ai</category>
        </item>
        <item>
            <title><![CDATA[Automatic Metric, Parameter, and Artifact Logging with mlflow.autolog]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog</guid>
            <pubDate>Thu, 30 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!]]></description>
            <content:encoded><![CDATA[<p>Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!</p>
<p>Robust logging practices are central to the iterative development and improvement of machine learning models. Carefully tracking metrics, parameters, and artifacts can be challenging when working with complex machine learning libraries or when experimenting with multiple different frameworks with varying APIs and selections of different objects and values to track.</p>
<p>MLflow’s <strong>automatic logging functionality</strong> offers a simple solution that is compatible with many widely-used machine learning libraries, such as <a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a>, <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a>, and <a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a>. Using <code>mlflow.autolog()</code> instructs MLflow to capture essential data without requiring the user to specify what to capture manually. It is an accessible and powerful entrypoint for MLflow’s logging capabilities.</p>
<p>To enable automatic logging, simply add the following line to your machine learning scripts/notebooks, before initiating activities like model training or evaluation that may include information or artifacts you would like to log:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="autolog-features">Autolog features<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#autolog-features" class="hash-link" aria-label="Direct link to Autolog features" title="Direct link to Autolog features">​</a></h2>
<p>When a data science workflow includes <code>mlflow.autolog()</code>, MLflow will automatically log:</p>
<ul>
<li><strong>Metrics</strong>: standard training and evaluation measures such as accuracy and F1 score;</li>
<li><strong>Parameters</strong>: hyperparameters, such as learning rate and number of estimators; and</li>
<li><strong>Artifacts</strong>: important files, such as trained models.</li>
</ul>
<p>MLflow’s automatic logging captures details tailored to the specific activities of the library being used: different libraries will result in different logged objects and data. In addition, MLflow logs key metadata such as software versions, a git commit hash, and the file name from which the run was initiated. By documenting the system's state during model training, MLflow aims to facilitate environment reproducibility and provide audit lineage, minimizing the possibility of inference issues that could arise from package regressions or deprecations in newer library versions.</p>
<p>The specifics of what is captured through automatic logging depend on the libraries used. Additionally, MLflow captures contextual metadata such as software versions, git commit hash, and the name of the file from which the run was launched. By logging as much detail as possible about the state of the system that trained the model, MLflow can offer environment reproducibility and audit lineage, minimizing the possibility of inference issues resulting from, for example, package regressions or deprecations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-usage-of-mlflowautolog">Basic Usage of <code>mlflow.autolog</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#basic-usage-of-mlflowautolog" class="hash-link" aria-label="Direct link to basic-usage-of-mlflowautolog" title="Direct link to basic-usage-of-mlflowautolog">​</a></h2>
<p>You can access auto logging functionality in two different ways:</p>
<ol>
<li>Via the <code>mlflow.autolog()</code> function, which enables and configures automatic logging across all supported libraries. This provides a broad, one-size-fits-all approach when working with multiple libraries and is ideal for prototyping and exploratory analysis of a machine learning pipeline.</li>
<li>Via the library-specific autolog functions, such as <code>mlflow.sklearn.autolog()</code>, which enable finer-grained logging configuration for individual libraries. For example, <code>mlflow.pytorch.autolog()</code> includes the <code>log_every_n_epoch</code> and <code>log_every_n_step</code> arguments for specifying how often to log metrics.</li>
</ol>
<p>Regardless of which of these two approaches you use, you do not need to manually initialize an MLflow run with <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.start_run" target="_blank" rel="noopener noreferrer">start_run()</a> in order to have a run created and for your model, parameters, and metrics to be captured in MLflow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datasets</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestClassifier</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Generate a 3-class classification problem</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datasets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">make_classification</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_samples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    class_sep</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_classes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_informative</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Split the data into training and validation sets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> test_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Enable autolog</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># or mlflow.sklearn.autolog()</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the classifier with n_estimators=200 and max_depth=10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestClassifier</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the classifier to the data.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The `fit` method is patched to perform autologging. When engaged in training, a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># run is created and the parameters are logged.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># After the fit is complete, the model artifact is logged to the run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Score the model on the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The current active run is retrieved during calling `score` and the loss metrics are logged</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># to the active MLflow run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Visualize the automatically logged run results to validate what we recorded</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">last_active_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The above logs model parameters, metrics, and the model to an MLflow run. The output result of the final statement (<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.last_active_run" target="_blank" rel="noopener noreferrer">mlflow.last_active_run()</a>) in the above example, which will return data from the run on model metrics, parameters, and logged artifacts (results truncated) is as shown below:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">&lt;Run: data=&lt;RunData:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">metrics={'RandomForestClassifier_score_X_val': 0.72,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_accuracy_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_f1_score': 0.9962547564333545,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_log_loss': 0.3354604497935824,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_precision_score': 0.9962921348314606,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_recall_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_roc_auc': 0.9998943433719795,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_score': 0.99625</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"> params={'bootstrap': 'True',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'ccp_alpha': '0.0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'class_weight': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'criterion': 'gini',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_depth': '10',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_features': 'sqrt',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_leaf_nodes': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         [...],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tags={'estimator_class': 'sklearn.ensemble._forest.RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'estimator_name': 'RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'mlflow.autologging': 'sklearn',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      [...]</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">}, [...]&gt;&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also access these in the mlflow ui by executing <a href="https://www.mlflow.org/docs/latest/tracking.html#tracking-ui" target="_blank" rel="noopener noreferrer">mlflow ui</a> on a command line terminal.</p>
<p><img loading="lazy" alt="The MLflow Tracking UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_in_ui-2a92179f1ef630da4f1357e3daaf5999.png" width="1687" height="1307" class="img_ev3q"></p>
<p>The MLflow UI also allows you to graphically compare different metrics and parameters across multiple runs, including those generated via <code>mlflow.autolog</code>.</p>
<p><img loading="lazy" alt="Run comparison of autologged runs in the MLflow UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_compare_runs-08773285a5af4ee8175c0ed1fc3c8c83.png" width="1685" height="1307" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuration-and-customization">Configuration and Customization<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#configuration-and-customization" class="hash-link" aria-label="Direct link to Configuration and Customization" title="Direct link to Configuration and Customization">​</a></h2>
<p>The automatic logging functions take many arguments that give the user greater control over logging behavior. For example, <code>mlflow.autolog()</code> includes <code>log_models</code> and <code>log_datasets</code> arguments (both <code>True</code> by default) that specify whether models and dataset information should be saved to the MLflow run, enabling you to specify what is actually logged. To disable automatic logging of datasets while continuing to log all the usual elements, simply disable the autologging of datasets feature by setting <code>mlflow.autolog(log_datasets=False)</code> before fitting a model. You can also adjust the behavior of library-specific autolog functions: for example, the <code>mlflow.sklearn.autolog()</code> function includes a <code>max_tuning_runs</code> argument that specifies how many nested runs to capture when performing hyperparameter searches.</p>
<p><code>mlflow.autolog()</code> can be used in combination with the library-specific autolog functions to control the logging behavior for specific libraries. The library-specific autolog call will always supersede <code>mlflow.autolog()</code>, regardless of the order in which they are called. For example, combining <code>mlflow.autolog()</code> with <code>mlflow.sklearn.autolog(disable=True)</code> will result in automatic logging for all supported libraries except for <code>scikit-learn</code>.</p>
<p>It is important to consult the documentation for the specific framework(s) you are using in order to understand what is logged automatically and what configuration options are available. See the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading">further reading section below</a> for links.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-and-next-steps">Conclusion and Next Steps<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#conclusion-and-next-steps" class="hash-link" aria-label="Direct link to Conclusion and Next Steps" title="Direct link to Conclusion and Next Steps">​</a></h2>
<p>MLflow's autologging capabilities and library-specific automatic logging functions provide a straightforward starting point for MLflow tracking with little or no required configuration. They log key metrics, parameters, and artifacts from many popular machine learning libraries, allowing users to track their machine learning workflows without writing custom tracking code.</p>
<p>They are not, however, the right solution for all use cases. If you only need to track a handful of specific metrics, enabling automatic logging may be inefficient, resulting in much more generated data and stored artifacts than needed. Furthermore, automatic logging is not available for every possible framework and custom values one might want to track. In such cases, it might be necessary to <a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#logging-functions" target="_blank" rel="noopener noreferrer">manually specify what to track</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h2>
<ul>
<li><a href="https://mlflow.org/docs/latest/tracking/autolog.html" target="_blank" rel="noopener noreferrer">MLflow Documentation on Automatic Logging</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.autolog" target="_blank" rel="noopener noreferrer">Python API reference for mlflow.autolog</a></li>
<li>Python API references for library-specific autolog functions<!-- -->
<ul>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.tensorflow.html#mlflow.tensorflow.autolog" target="_blank" rel="noopener noreferrer">Tensorflow</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pyspark.ml.html#mlflow.pyspark.ml.autolog" target="_blank" rel="noopener noreferrer">PySpark</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.statsmodels.html#mlflow.statsmodels.autolog" target="_blank" rel="noopener noreferrer">Statsmodels</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.lightgbm.html#mlflow.lightgbm.autolog" target="_blank" rel="noopener noreferrer">LightGBM</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.paddle.html#mlflow.paddle.autolog" target="_blank" rel="noopener noreferrer">Paddle</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.fastai.html#mlflow.fastai.autolog" target="_blank" rel="noopener noreferrer">Fastai</a></li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>autolog</category>
        </item>
        <item>
            <title><![CDATA[MLflow Docs Overhaul]]></title>
            <link>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul</link>
            <guid>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul</guid>
            <pubDate>Tue, 31 Oct 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[The MLflow Documentation is getting an upgrade.]]></description>
            <content:encoded><![CDATA[<p>The MLflow Documentation is getting an upgrade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overhauling-the-mlflow-docs">Overhauling the MLflow Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#overhauling-the-mlflow-docs" class="hash-link" aria-label="Direct link to Overhauling the MLflow Docs" title="Direct link to Overhauling the MLflow Docs">​</a></h2>
<p>We're thrilled to announce a comprehensive overhaul of the MLflow Docs. This initiative is not just about refreshing the look and feel but about reimagining how our users interact with our content. Our primary goal is to enhance clarity, improve navigation, and provide more in-depth resources for our community.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-renewed-focus-on-user-experience">A Renewed Focus on User Experience<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#a-renewed-focus-on-user-experience" class="hash-link" aria-label="Direct link to A Renewed Focus on User Experience" title="Direct link to A Renewed Focus on User Experience">​</a></h2>
<p>The MLflow documentation has always been an essential resource for our users. Over time, we've received invaluable feedback, and we've listened. The modernization effort is a direct response to the needs and preferences of our community.</p>
<p>Along with working on covering new cutting-edge features as part of this documentation overhaul, we're working on addressing the complexity of getting started. As the first part of a series of tutorials and guides focusing on the initial learning phase, we've created a new <a href="https://www.mlflow.org/docs/latest/getting-started/logging-first-model/index.html" target="_blank" rel="noopener noreferrer">getting started guide</a>, the first of many in a new series we're working on in an effort to teach the fundamentals of using MLflow. We feel that more in-depth instructional tutorials for learning the concepts and tools of MLflow will help to enhance the user experience for not only new users, but experienced users who need a refresher of how to do certain tasks.</p>
<p>There are more of these coming in the future!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="easier-navigation"><strong>Easier Navigation</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#easier-navigation" class="hash-link" aria-label="Direct link to easier-navigation" title="Direct link to easier-navigation">​</a></h3>
<p>Our first order of business is to declutter and reorganize. This is going to be a process, though. With some of the monolithic pages (<a href="https://www.mlflow.org/docs/2.7.1/models.html" target="_blank" rel="noopener noreferrer">Mlflow Models</a>), this will be more of a marathon than a sprint.</p>
<p>We've introduced a <a href="https://www.mlflow.org/docs/latest/index.html" target="_blank" rel="noopener noreferrer">new main navigation page</a> in an effort to help steer you to the content that you're looking for based on end-use domain, rather than component of MLflow. We're hoping that this helps to bring new feature content and useful examples to your awareness, limiting the amount of exploratory discovery needed to understand how to use these new features.</p>
<p>Another priority for us was to make major new features easier to discover. While the <a href="https://github.com/mlflow/mlflow/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer">release notes</a> are useful, particularly for Engineers who are maintaining integrations with, or are managing a deployment of, MLflow, they're not particularly user-friendly for an end-user of MLflow. We felt that a curated list of major new features would help to distill the information in our release notes, so we built the <a href="https://www.mlflow.org/docs/latest/new-features/index.html" target="_blank" rel="noopener noreferrer">new features</a> page. We sincerely hope it helps to reduce the amount of effort needed to know what new major features have been released.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interactive-learning-with-notebooks"><strong>Interactive Learning with Notebooks</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#interactive-learning-with-notebooks" class="hash-link" aria-label="Direct link to interactive-learning-with-notebooks" title="Direct link to interactive-learning-with-notebooks">​</a></h3>
<p>In today's fast-paced tech world, interactive learning is becoming the norm. Recognizing this trend, we're embedding viewable notebooks directly within the docs. But we're not stopping there. These notebooks are downloadable, allowing you to run, modify, and experiment with them locally. It's a hands-on approach to learning, bridging the gap between theory and practice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="in-depth-tutorials-and-guides"><strong>In-depth Tutorials and Guides</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#in-depth-tutorials-and-guides" class="hash-link" aria-label="Direct link to in-depth-tutorials-and-guides" title="Direct link to in-depth-tutorials-and-guides">​</a></h3>
<p>While our previous documentation provided a solid foundation, we felt there was room for more detailed explorations. We're introducing comprehensive <a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">tutorials</a> and <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">guides</a> that delve deep into MLflow's features, showing how to solve actual problems. These first new tutorials and guides are just the start. We're going to be spending a lot of time and effort on making much more of MLflow documented in this way, helping to dramatically reduce the amount of time you have to spend figuring out how to leverage features in MLflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="diving-deeper-expanding-on-guides-and-tutorials">Diving Deeper: Expanding on Guides and Tutorials<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#diving-deeper-expanding-on-guides-and-tutorials" class="hash-link" aria-label="Direct link to Diving Deeper: Expanding on Guides and Tutorials" title="Direct link to Diving Deeper: Expanding on Guides and Tutorials">​</a></h2>
<p>Our dedication to simplifying the usage of MLflow shines through in our revamped tutorials and guides. We're not just providing instructions; we're offering <a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">deep dives</a>, <a href="https://www.mlflow.org/docs/latest/traditional-ml/hyperparameter-tuning-with-child-runs/index.html" target="_blank" rel="noopener noreferrer">best practices</a>, and real-world applications. What you see in the MLflow 2.8.0 release is just the beginning. We're going to be heavily focusing on creating more content, showing the best way to leverage the many features and services within MLflow, all the while endeavoring to make it easier than ever to manage any ML project you're working on.</p>
<ul>
<li>
<p><strong>LLMs</strong>: With all of the <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation.html" target="_blank" rel="noopener noreferrer">new LLM-focused features</a> we've been releasing in the past year, we feel the need to create easier getting started guides,
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/question-answering-evaluation.html" target="_blank" rel="noopener noreferrer">in-depth tutorials</a>, runnable examples, and more teaching-oriented step-by-step introductions to these features.</p>
</li>
<li>
<p><strong>Tracking and the MLflow UI</strong>: Our expanded section on tracking will cover everything from setting up your first experiment to advanced tracking techniques. The MLflow UI, an integral part of the platform, will also get its spotlight, ensuring you can make the most of its features.</p>
</li>
<li>
<p><strong>Model Registry</strong>: The model registry is where MLflow truly shines, and our new guides will ensure you can harness its full power. From organizing models to version control, we'll cover it all.</p>
</li>
<li>
<p><strong>Recipes and LLM-focused Features</strong>: MLflow's versatility is one of its strengths. Our new content will explore the breadth of features available, from recipes to LLM-focused tools like the AI Gateway, LLM Evaluation, and the PromptLab UI.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-transformative-power-of-interactive-notebooks">The Transformative Power of Interactive Notebooks<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#the-transformative-power-of-interactive-notebooks" class="hash-link" aria-label="Direct link to The Transformative Power of Interactive Notebooks" title="Direct link to The Transformative Power of Interactive Notebooks">​</a></h2>
<p>Interactive notebooks have revolutionized data science and machine learning. By integrating them into our documentation, we aim to provide a holistic learning experience. You can see code in action, understand its impact, and then experiment on their own. It's a dynamic way to grasp complex concepts, ensuring that you not only understand but can also apply your knowledge in your actual project code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on This Journey<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on This Journey" title="Direct link to Join Us on This Journey">​</a></h2>
<p>The overhaul of the MLflow documentation is a significant milestone, but it's just the beginning. We have a roadmap full of exciting updates, new content, and features. And for those in our community with a passion for sharing knowledge, we have a message: We'd love to <a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">collaborate</a>! Whether it's writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community.</p>
<p>In conclusion, our commitment to providing top-notch documentation is a new primary focus of the maintainer group. We believe that well-documented features, combined with interactive learning tools, can significantly enhance the experience of using any tool. We want to put in the effort and time to make sure that your journey with using MLflow is as simple and powerful as it can be.</p>
<p>Stay tuned for more updates, and as always, happy coding!</p>]]></content:encoded>
            <category>docs</category>
        </item>
    </channel>
</rss>