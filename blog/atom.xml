<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://your-docusaurus-site.example.com/mlflow-website/blog</id>
    <title>MLflow Blog</title>
    <updated>2024-11-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://your-docusaurus-site.example.com/mlflow-website/blog"/>
    <subtitle>MLflow Blog</subtitle>
    <icon>https://your-docusaurus-site.example.com/mlflow-website/img/mlflow-favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Using Bedrock Agent as an MLflow ChatModel with Tracing]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1"/>
        <updated>2024-11-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide for using BedRock Runtime Agent with ChatModel and custom trace handling.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/bedrock_chatmodel-d0f0e66cc93ae5d58f3fcaafbb5e79b1.png" width="2282" height="1280" class="img_ev3q"></p>
<p><strong>In this blog post, we delve into the integration of AWS Bedrock Agent as a ChatModel within MLflow, focusing on
how to leverage Bedrock's <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-action-create.html" target="_blank" rel="noopener noreferrer">Action Groups</a>
and <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-kb-add.html" target="_blank" rel="noopener noreferrer">Knowledge Bases</a> to build a
conversational AI application. The blog will guide you through setting up the Bedrock Agent, configuring
Action Groups to enable custom actions with Lambda, and utilizing knowledge bases for context-aware interactions.
A special emphasis is placed on implementing tracing within MLflow.By the end of this article, you'll have a good
understanding of how to combine AWS Bedrock's advanced features with MLflow's capabilities such as agent request
tracing, model tracking and consistent signatures for input examples.</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-aws-bedrock">What is AWS Bedrock?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#what-is-aws-bedrock" class="hash-link" aria-label="Direct link to What is AWS Bedrock?" title="Direct link to What is AWS Bedrock?">​</a></h2>
<p>Amazon Bedrock is a managed service by AWS that simplifies the development of generative AI applications. It provides access to a variety of foundation models (FMs) from leading AI providers through a single API, enabling developers to build and scale AI solutions securely and efficiently.</p>
<p>Key Components Relevant to This Integration:</p>
<p><strong>Bedrock Agent</strong>: At a high level, a bedrock agent is an abstraction within bedrock that consists of a foundation model,
action groups and knowledge bases.</p>
<p><strong>Action Groups</strong>: These are customizable sets of actions that define what tasks the Bedrock Agent can perform.
Action Groups consist of an OpenAPI Schema and the corresponding Lambda functions that will be used to execute tool calls.
The OpenAPI Schema is used to define APIs available for the agent to invoke and complete tasks.</p>
<p><strong>Knowledge Bases</strong>: Amazon Bedrock supports the creation of Knowledge Bases to implement
Retrieval Augmented Generation workflows. It consists of data sources (on S3 or webpages)
and a vector store that contains the embedded references to this data.</p>
<p>Bedrock's Agent execution process and the corresponding tracing for Agent instrumentation is grouped as follows:</p>
<p><strong>Pre-processing</strong>
This step validates, contextualizes and categorizes user input.</p>
<p><strong>Orchestration</strong>
This step handles the interpretation of user inputs, deciding when to and which tasks to perform,
and iteratively refines responses</p>
<p><strong>Post-processing (Optional)</strong>
This step formats the final response before returning to the user.</p>
<p><strong>Traces</strong>
Each step above has an execution trace, which consists of rationale, actions, queries and observations at each step
of the agent's response. This includes both the inputs and outputs of action groups and knowledge base queries.</p>
<p>We will look at these traces in detail below.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-chatmodel-in-mlflow">What is a ChatModel in MLflow?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#what-is-a-chatmodel-in-mlflow" class="hash-link" aria-label="Direct link to What is a ChatModel in MLflow?" title="Direct link to What is a ChatModel in MLflow?">​</a></h2>
<p>The <a href="https://mlflow.org/docs/latest/llms/chat-model-guide/index.html" target="_blank" rel="noopener noreferrer">ChatModel class</a> is specifically
designed to make it easier to implement models that are compatible with
popular large language model (LLM) chat APIs. It enables you to seamlessly bring in your own models or agents and
leverage MLflow's functionality, even if those models aren't natively supported as a flavor in MLflow. Additionally,
It provides default signatures, which are static for ChatModel, unlike PythonModel.</p>
<p>In the following sections, we will use ChatModel to wrap the Bedrock Agent.</p>
<p>For more detailed information about ChatModel, you can read the MLflow documentation
<a href="https://mlflow.org/docs/latest/llms/chat-model-guide/index.html" target="_blank" rel="noopener noreferrer">here</a> and
<a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.ChatModel" target="_blank" rel="noopener noreferrer">here</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-aws-bedrock-agent-with-an-action-group">Setting up AWS Bedrock Agent with an Action group<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#setting-up-aws-bedrock-agent-with-an-action-group" class="hash-link" aria-label="Direct link to Setting up AWS Bedrock Agent with an Action group" title="Direct link to Setting up AWS Bedrock Agent with an Action group">​</a></h2>
<p>In this section, we will deploy all components of a bedrock agent so that we can invoke it as a <code>ChatModel</code> in MLflow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites">Prerequisites<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#prerequisites" class="hash-link" aria-label="Direct link to Prerequisites" title="Direct link to Prerequisites">​</a></h3>
<p>You will need to setup following items (either via the AWS console or SDKs):</p>
<ul>
<li>Setting up role for the agent and Lambda function. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L148" target="_blank" rel="noopener noreferrer">Example</a></li>
<li>Create/deploy the agent. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L191" target="_blank" rel="noopener noreferrer">Example</a>
<ul>
<li><strong>Important</strong>: Save the agent ID here as we will need this below.</li>
</ul>
</li>
<li>Creating a Lambda function. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L218" target="_blank" rel="noopener noreferrer">Example</a></li>
<li>Configuring IAM permissions for agent-Lambda interaction. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L283" target="_blank" rel="noopener noreferrer">Example</a> and <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L297" target="_blank" rel="noopener noreferrer">Example</a></li>
<li>Creating an action group to link the agent and Lambda. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L312" target="_blank" rel="noopener noreferrer">Example</a>
<ul>
<li><strong>Important</strong>:Save<!-- --> the agent alias ID here as we will need this below.</li>
</ul>
</li>
<li>Deploy Bedrock agent with an alias. <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/python/example_code/bedrock-agent/scenario_get_started_with_agents.py#L342" target="_blank" rel="noopener noreferrer">Example</a></li>
</ul>
<b>In our case, we are going to deploy the following example action group, which calculates the next optimal departure
date for a Hohmann transfer from Earth to Mars, based on the spacecraft's mass and specific impulse.</b>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="openapi-schema-for-action-groups">OpenAPI schema for Action Groups<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#openapi-schema-for-action-groups" class="hash-link" aria-label="Direct link to OpenAPI schema for Action Groups" title="Direct link to OpenAPI schema for Action Groups">​</a></h3>
<p>As described above, here is the OpenAPI Schema for our example action group:</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token key atrule">openapi</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> 3.0.0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token key atrule">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token key atrule">title</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Time API</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token key atrule">version</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> 1.0.0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> API to get the next optimal departure date for a Hohmann transfer from Earth to Mars.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token key atrule">paths</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token key atrule">/get-next-mars-launch-window</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token key atrule">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      </span><span class="token key atrule">summary</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Gets the next optimal launch window to Mars.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Gets the next optimal launch window to Mars.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      </span><span class="token key atrule">operationId</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> getNextMarsLaunchWindow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      </span><span class="token key atrule">parameters</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> total_mass</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">in</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> query</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Total mass of the spacecraft including fuel (kg)</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">required</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean important">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token key atrule">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> dry_mass</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">in</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> query</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Mass of the spacecraft without fuel (kg).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">required</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean important">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token key atrule">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> specific_impulse</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">in</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> query</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Specific impulse of the propulsion system (s).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">required</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean important">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token key atrule">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      </span><span class="token key atrule">responses</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token key atrule">"200"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> The next optimal departure date for a Hohmann transfer from Earth to Mars</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> based on the spacecraft's mass and specific impulse.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          </span><span class="token key atrule">content</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token key atrule">"application/json"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              </span><span class="token key atrule">schema</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token key atrule">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> object</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token key atrule">properties</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  </span><span class="token key atrule">next_launch_window</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token key atrule">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> string</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Next Mars Launch Window</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="action-groups---lamda-function">Action groups - Lamda function<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#action-groups---lamda-function" class="hash-link" aria-label="Direct link to Action groups - Lamda function" title="Direct link to Action groups - Lamda function">​</a></h3>
<p>Here is the code deployment for action group's example Lambda:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> json</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> math</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> datetime </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> timedelta</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">lambda_handler</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_calculate_optimal_departure_window</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        total_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> dry_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> specific_impulse</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Calculate the next optimal departure date for a Hohmann transfer from Earth to Mars,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        based on the spacecraft's mass and specific impulse.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Parameters:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        - total_mass (float): Total mass of the spacecraft including fuel (kg).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        - dry_mass (float): Mass of the spacecraft without fuel (kg).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        - specific_impulse (float): Specific impulse of the propulsion system (s).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        - dict: {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'next_launch_date': datetime,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'synodic_period_days': float,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'transfer_time_days': float,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'delta_v_available_m_s': float,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'delta_v_required_m_s': float,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            'is_feasible': bool</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        current_date </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Constants</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        G0 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">9.80665</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># m/s^2, standard gravity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        MU_SUN </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token number" style="color:rgb(181, 206, 168)">1.32712440018e20</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># m^3/s^2, standard gravitational parameter for the Sun</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        AU </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1.496e11</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># meters, astronomical unit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        EARTH_ORBITAL_PERIOD </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">365.25</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># days</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        MARS_ORBITAL_PERIOD </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">686.98</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># days</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        SYNODIC_PERIOD </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">abs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> EARTH_ORBITAL_PERIOD</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> MARS_ORBITAL_PERIOD</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        TRANSFER_TIME </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">259</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># days, approximate duration of Hohmann transfer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        BASE_LAUNCH_DATE </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2020</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># A reference past launch window date</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Orbital Radii (assuming circular orbits for simplicity)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        r1 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> AU  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Earth's orbital radius in meters</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        r2 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1.524</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> AU  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Mars' orbital radius in meters</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate Required Delta-V for Hohmann Transfer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Using vis-viva equation for Hohmann transfer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">calculate_hohmann_delta_v</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mu</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r_start</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r_end</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Velocity of departure orbit (Earth)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            v_start </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sqrt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mu </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> r_start</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Velocity of transfer orbit at departure</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            a_transfer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">r_start </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> r_end</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            v_transfer_start </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sqrt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mu </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> r_start </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> a_transfer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            delta_v1 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> v_transfer_start </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> v_start</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Velocity of arrival orbit (Mars)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            v_end </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sqrt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mu </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> r_end</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Velocity of transfer orbit at arrival</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            v_transfer_end </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">sqrt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mu </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> r_end </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> a_transfer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            delta_v2 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> v_end </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> v_transfer_end</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> delta_v1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> delta_v2</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        delta_v1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> delta_v2 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> calculate_hohmann_delta_v</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">MU_SUN</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        delta_v_required </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">abs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">delta_v1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">abs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">delta_v2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Total delta-v in m/s</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Delta-V using Tsiolkovsky Rocket Equation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> dry_mass </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">or</span><span class="token plain"> total_mass </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;=</span><span class="token plain"> dry_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Total mass must be greater than dry mass."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        delta_v_available </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            specific_impulse </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> G0 </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">total_mass </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> dry_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># m/s</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        is_feasible </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> delta_v_available </span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;=</span><span class="token plain"> delta_v_required</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> current_date </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            current_date </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">now</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        days_since_base </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">current_date </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> BASE_LAUNCH_DATE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">days</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> days_since_base </span><span class="token operator" style="color:rgb(212, 212, 212)">&lt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Current date is before the base launch date</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            next_launch_date </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> BASE_LAUNCH_DATE</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            synodic_periods_passed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> days_since_base </span><span class="token operator" style="color:rgb(212, 212, 212)">/</span><span class="token plain"> SYNODIC_PERIOD</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            synodic_periods_passed_int </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">floor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">synodic_periods_passed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            next_launch_date </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> BASE_LAUNCH_DATE </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> timedelta</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                days</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">synodic_periods_passed_int </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> SYNODIC_PERIOD</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        next_launch_date </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> next_launch_date</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            hour</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> minute</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> second</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> microsecond</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"next_launch_date"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> next_launch_date</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"synodic_period_days"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> SYNODIC_PERIOD</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"transfer_time_days"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> TRANSFER_TIME</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"delta_v_available_m_s"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> delta_v_available</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"delta_v_required_m_s"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> delta_v_required</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"is_feasible"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> is_feasible</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    query_params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"name"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> event </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"parameters"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    total_mass </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"total_mass"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    dry_mass </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"dry_mass"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    specific_impulse </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"specific_impulse"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"next_launch_window"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> _calculate_optimal_departure_window</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            total_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> dry_mass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> specific_impulse</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    response_body </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"application/json"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"body"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> json</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dumps</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    action_response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroup"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroup"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"apiPath"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"apiPath"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"httpMethod"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"httpMethod"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"httpStatusCode"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"responseBody"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> response_body</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    session_attributes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"sessionAttributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    prompt_session_attributes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"promptSessionAttributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"messageVersion"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"1.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"response"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action_response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"sessionAttributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> session_attributes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"promptSessionAttributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> prompt_session_attributes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, we are going to wrap Bedrock agent as a ChatModel so that we can register and load it for inference.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="writing-chatmodel-for-bedrock-agent">Writing ChatModel for Bedrock agent<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#writing-chatmodel-for-bedrock-agent" class="hash-link" aria-label="Direct link to Writing ChatModel for Bedrock agent" title="Direct link to Writing ChatModel for Bedrock agent">​</a></h2>
<p>Here are the top-level packages used for running the following example locally in <strong>Python 3.12.7</strong>:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">boto3==1.35.31</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow==2.16.2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementing-bedrock-agent-as-an-mlflow-chatmodel-with-tracing">Implementing Bedrock Agent as an MLflow ChatModel with Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#implementing-bedrock-agent-as-an-mlflow-chatmodel-with-tracing" class="hash-link" aria-label="Direct link to Implementing Bedrock Agent as an MLflow ChatModel with Tracing" title="Direct link to Implementing Bedrock Agent as an MLflow ChatModel with Tracing">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> copy</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> uuid</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Optional</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> boto3</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> botocore</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">config </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Config</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">entities </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SpanType</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">types</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatResponse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ChatParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ChatChoice</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">BedrockModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ChatModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initializes the BedrockModel instance with placeholder values.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Note:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            The `load_context` method cannot create new instance variables; it can only modify existing ones.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            Therefore, all instance variables should be defined in the `__init__` method with placeholder values.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">brt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_alias_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_inference_configuration </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_agent_instruction </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_aws_region </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__getstate__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Prepares the instance state for pickling.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        This method is needed because the `boto3` client (`self.brt`) cannot be pickled.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        By excluding `self.brt` from the state, we ensure that the model can be serialized and deserialized properly.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a dictionary of the instance's state, excluding the boto3 client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__dict__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">del</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"brt"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__setstate__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Restores the instance state during unpickling.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        This method is needed to reinitialize the `boto3` client (`self.brt`) after the instance is unpickled,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        because the client was excluded during pickling.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__dict__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">update</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">brt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initializes the Bedrock client with AWS credentials.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            context: The MLflow context containing model configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Note:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            Dependent secret variables must be in the execution environment prior to loading the model;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            else they will not be available during model initialization.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"agents"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"main"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock_agent_id"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_alias_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock_agent_alias_id"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_inference_configuration </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"inference_configuration"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_agent_instruction </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"instruction"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_aws_region </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_main_bedrock_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"aws_region"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the Bedrock client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">brt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> boto3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            service_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock-agent-runtime"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">Config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">region_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_aws_region</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            aws_access_key_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"AWS_ACCESS_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            aws_secret_access_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"AWS_SECRET_ACCESS_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            aws_session_token</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"AWS_SESSION_TOKEN"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            region_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_aws_region</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@staticmethod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_extract_trace_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">events</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Extracts trace groups from a list of events based on their trace IDs.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            events (list): A list of event dictionaries.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            dict: A dictionary where keys are trace IDs and values are lists of trace items.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> collections </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> defaultdict</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        trace_groups </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> defaultdict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">find_trace_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> original_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> parent_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> depth </span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Stop recursion after 5 levels if no traceId has been found</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                trace_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"traceId"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Include the parent key as the 'type'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    item </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> parent_key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"event_order"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> original_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"trace"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token string" style="color:rgb(206, 145, 120)">"event_order"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    trace_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">item</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> value </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        find_trace_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            value</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> original_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">depth </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> parent_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">key</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">elif</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> item </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> obj</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    find_trace_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">item</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> item</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">depth </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> parent_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">parent_key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        find_trace_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">events</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@staticmethod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_get_final_response_with_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Processes trace groups to extract the final response and create relevant MLflow spans.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            trace_id_groups (dict): A dictionary of trace groups keyed by trace IDs.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            str: The final response text extracted from the trace groups.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        trace_id_groups_copy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">deepcopy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_invocation_input_key </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"modelInvocationInput"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_create_trace_by_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            trace_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> optional_rationale_subtrace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">trace_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"trace_attributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">_trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_trace_agent_pre_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">inner_input_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> optional_rationale_subtrace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            trace_id_groups_copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">_trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">remove</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">context_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _trace_agent_pre_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">context_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_extract_action_group_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"action-group-invocation"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"trace_attributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">_trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_action_group_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">inner_trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> _trace </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    action_group_invocation_output </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroupInvocationOutput"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> action_group_invocation_output </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        action_group_response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"action_group_name"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroupName"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"api_path"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"apiPath"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"execution_type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"executionType"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"execution_output"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action_group_invocation_output</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">remove</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> action_group_response</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _action_group_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_extract_knowledge_base_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> knowledge_base_lookup_input</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"knowledge-base-lookup"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"trace_attributes"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">_trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_knowledge_base_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">inner_trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> _trace </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    knowledge_base_lookup_output </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"knowledgeBaseLookupOutput"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> knowledge_base_lookup_output </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        knowledge_base_response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"knowledge_base_id"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> knowledge_base_lookup_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"knowledgeBaseId"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> knowledge_base_lookup_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token string" style="color:rgb(206, 145, 120)">"retrieved_references"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> knowledge_base_lookup_output</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                    </span><span class="token string" style="color:rgb(206, 145, 120)">"retrievedReferences"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">remove</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> knowledge_base_response</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _knowledge_base_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_trace_group_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> optional_rationale_subtrace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            trace_name </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"observation"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            pre_processing_trace_id_suffix </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"-pre"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> pre_processing_trace_id_suffix </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                trace_name </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"agent-initial-context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> _inner_trace </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    action_group_invocation_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _inner_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroupInvocationInput"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> action_group_invocation_input </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        action_group_name </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> action_group_invocation_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token string" style="color:rgb(206, 145, 120)">"actionGroupName"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_name </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"ACTION-GROUP-</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">action_group_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        _create_trace_by_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            trace_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> optional_rationale_subtrace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        _extract_action_group_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action_group_invocation_input</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">remove</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    knowledge_base_lookup_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _inner_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token string" style="color:rgb(206, 145, 120)">"knowledgeBaseLookupInput"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> knowledge_base_lookup_input </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        knowledge_base_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> knowledge_base_lookup_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            </span><span class="token string" style="color:rgb(206, 145, 120)">"knowledgeBaseId"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_name </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"KNOWLEDGE_BASE_</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">knowledge_base_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        _create_trace_by_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            trace_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> optional_rationale_subtrace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        _extract_knowledge_base_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                            _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> knowledge_base_lookup_input</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">remove</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> trace_name</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> _trace_group </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> trace_id_groups_copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            trace_group </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">sorted</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token keyword" style="color:rgb(86, 156, 214)">lambda</span><span class="token plain"> tg</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> tg</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"event_order"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_invocation_input_subtrace </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            optional_rationale_subtrace </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> _trace </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> _trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> model_invocation_input_key </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">""</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    model_invocation_input_subtrace </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _trace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token keyword" style="color:rgb(86, 156, 214)">elif</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"rationale"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> _trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">""</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    optional_rationale_subtrace </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _trace</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            _trace_group_type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                _trace_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                trace_group</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                model_invocation_input_subtrace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                optional_rationale_subtrace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        final_response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_id_groups_copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">values</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"finalResponse"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> final_response</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Bedrock Input Prompt"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_get_agent_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> raw_input_question</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Constructs the agent prompt by combining the input question and the agent instruction.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            raw_input_question (str): The user's input question.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            str: The formatted agent prompt.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        Answer the following question and pay strong attention to the prompt:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        &lt;question&gt;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">raw_input_question</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        &lt;/question&gt;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        &lt;instruction&gt;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">self</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">_agent_instruction</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        &lt;/instruction&gt;</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock-agent"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> span_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">SpanType</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">CHAT_MODEL</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">ChatParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> ChatResponse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Makes a prediction using the Bedrock agent and processes the response.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            context: The MLflow context.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            messages (List[ChatMessage]): A list of chat messages.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            params (Optional[ChatParams]): Optional parameters for the chat.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            ChatResponse: The response from the Bedrock agent.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        formatted_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">content</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        session_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> uuid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">uuid4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">hex</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">brt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke_agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            agentId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            agentAliasId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_bedrock_agent_alias_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            inputText</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_get_agent_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">formatted_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            enableTrace</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            sessionId</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">session_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            endSession</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Since this provider's output doesn't match the OpenAI specification,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># we need to go through the returned trace data and map it appropriately</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># to create the MLflow span object.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        events </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> event </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">enumerate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"completion"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"trace"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"trace"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"event_order"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> index</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            events</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        trace_id_groups </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_extract_trace_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">events</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        final_response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_get_final_response_with_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">trace_id_groups</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"retrieved-response"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> span_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">SpanType</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AGENT</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_inputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_attributes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ChatResponse</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                choices</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    ChatChoice</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        index</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                        message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">ChatMessage</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">role</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> content</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">final_response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                usage</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_outputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">output</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> output</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Here are some important remarks about this <code>BedrockModel</code> implementation:</p>
<ul>
<li>AWS access key ID, secret key and the session token are externalized here. These need to be present in the environment before we can run inference.
You will need to generate it for your IAM user and set them as environment variables.</li>
</ul>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">aws sts get-session-token --duration-seconds 3600</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then set the following:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'AWS_ACCESS_KEY'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"&lt;AccessKeyId&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'AWS_SECRET_ACCESS_KEY'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"&lt;SecretAccessKey&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'AWS_SESSION_TOKEN'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"&lt;SessionToken&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As noticed in the code above, these do not get logged with the model and are only set inside <code>load_context</code>.
This method is called when ChatModel is constructed. Further details are <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.PythonModel.load_context" target="_blank" rel="noopener noreferrer">here</a></p>
<ul>
<li>
<p>Bedrock agent ID and agent alias ID are passed via <code>model_config</code> that we will use below.</p>
</li>
<li>
<p>boto3 module has been excluded from getting pickled. This is done via <code>__getstate__</code> and <code>__setstate__</code> where we exclude it and reset it respectively</p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="log-and-load-the-bedrockmodel">Log and load the BedrockModel<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#log-and-load-the-bedrockmodel" class="hash-link" aria-label="Direct link to Log and load the BedrockModel" title="Direct link to Log and load the BedrockModel">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">input_example </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"When is the next launch window for Mars?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">output_example </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"choices"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"index"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"finish_reason"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"stop"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"message"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"assistant"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"test content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">input_example</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> output_example</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_config </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"agents"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"main"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"anthropic.claude-v2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"aws_region"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"us-east-1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock_agent_id"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"O9KQSEVEFF"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"bedrock_agent_alias_id"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"3WHEEJKNUT"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"instruction"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"You have functions available at your disposal to use when anwering any questions about orbital mechanics."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"if you can't find a function to answer a question about orbital mechanics, simply reply "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"'I do not know'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"inference_configuration"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                    </span><span class="token string" style="color:rgb(206, 145, 120)">"maximumLength"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Input example for the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    input_example </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log and load the model using MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    logged_chain_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">BedrockModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"chain"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># This string is used as the path inside the MLflow model where artifacts are stored</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">input_example</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Must be a valid input to your chain</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">logged_chain_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Predict using the loaded model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<code class="language-text"></code>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mapping-bedrock-agent-trace-data-to-mlflow-span-objects">Mapping Bedrock Agent Trace Data to MLflow Span Objects<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#mapping-bedrock-agent-trace-data-to-mlflow-span-objects" class="hash-link" aria-label="Direct link to Mapping Bedrock Agent Trace Data to MLflow Span Objects" title="Direct link to Mapping Bedrock Agent Trace Data to MLflow Span Objects">​</a></h3>
<p>In this step, we need to iterate over the data that is returned within the bedrock agent's response trace
to provide relevant mappings to create the MLflow span object.
AWS Bedrock agent's response is a flat list with trace events connected by <code>traceId</code>.
Here is the raw trace sent in the bedrock agent's response:</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Expand to see AWS Bedrock agent's raw trace</summary><div><div class="collapsibleContent_i85q"><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">[</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'preProcessingTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'text': '\n\nHuman: You are a classifying agent that filters user inputs into categories. Your job is to sort these inputs before they...&lt;thinking&gt; XML tags before providing only the category letter to sort the input into within &lt;category&gt; XML tags.\n\nAssistant:',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-pre-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'type': 'PRE_PROCESSING'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'preProcessingTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationOutput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'parsedResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-pre-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 2,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'text': '\n\nHuman:\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;...\n\nAssistant: &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\n\n',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'type': 'ORCHESTRATION'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 3,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationOutput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'metadata': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'rawResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 4,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'rationale': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'text': 'To answer this question about the next Mars launch window, I will:\n\n1. Call the GET::optimal_departure_window_mars::getNext...lse values.\n\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 5,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'invocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'actionGroupInvocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'invocationType': 'ACTION_GROUP',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 6,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'observation': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'actionGroupInvocationOutput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'type': 'ACTION_GROUP'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 7,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'text': '\n\nHuman:\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;...lta_v_available_m_s": 39457.985759929674, "delta_v_required_m_s": 5595.997417810693, "is_feasible": true}}&lt;/function_result&gt;\n',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'type': 'ORCHESTRATION'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 8,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'modelInvocationOutput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'metadata': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'rawResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentAliasId': '3WHEEJKNUT',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentId': 'O9KQSEVEFF',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'agentVersion': '1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 9,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'sessionId': '9566a6d78551434fb0409578ffed63c1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'trace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'orchestrationTrace': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'observation': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'finalResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'type': 'FINISH'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    'chunk': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'bytes': b</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'Based on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the next optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<p>To fit this structure into MLflow's span, we first need to go through the raw response trace and group events by their <code>traceId</code>.
After grouping the trace events by <em><code>traceId</code></em>, the structure looks like this:</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Expand to see trace grouped by <em><code>traceId</code></em></summary><div><div class="collapsibleContent_i85q"><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">{</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'maximumLength': 2048,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'stopSequences': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/function_call&gt;',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/answer&gt;',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/error&gt;'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'temperature': 0.0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topK': 250,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topP': 1.0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'text': '\n\nHuman:\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;...\n\nAssistant: &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\n\n',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'type': 'ORCHESTRATION'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 2,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationInput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'metadata': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'usage': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'inputTokens': 5160,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'outputTokens': 135</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'rawResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'content': 'To answer this question about the next Mars launch window, I will:\n\n1. Call the GET::optimal_departure_window_mars::getNext...l&gt;\nGET::optimal_departure_window_mars::getNextMarsLaunchWindow(specific_impulse="2500", dry_mass="10000", total_mass="50000")'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 3,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationOutput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'text': 'To answer this question about the next Mars launch window, I will:\n\n1. Call the GET::optimal_departure_window_mars::getNext...lse values.\n\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 4,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'rationale'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'actionGroupInvocationInput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'actionGroupName': 'optimal_departure_window_mars',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'apiPath': '/get-next-mars-launch-window',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'executionType': 'LAMBDA',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'parameters': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">              ...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'verb': 'get'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'invocationType': 'ACTION_GROUP',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 5,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'invocationInput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'actionGroupInvocationOutput': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'text': '{"next_launch_window": {"next_launch_date": "2026-11-26 00:00:00", "synodic_period_days": 779.9068939794238, "transfer_time_days": 259, "delta_v_available_m_s": 39457.985759929674, "delta_v_required_m_s": 5595.997417810693, "is_feasible": true}}'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'type': 'ACTION_GROUP'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 6,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'observation'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'maximumLength': 2048,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'stopSequences': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/function_call&gt;',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/answer&gt;',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '&lt;/error&gt;'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'temperature': 0.0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topK': 250,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topP': 1.0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'text': '\n\nHuman:\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;...lta_v_available_m_s": 39457.985759929674, "delta_v_required_m_s": 5595.997417810693, "is_feasible": true}}&lt;/function_result&gt;\n',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'type': 'ORCHESTRATION'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 7,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationInput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'metadata': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'usage': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'inputTokens': 5405,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            'outputTokens': 64</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'rawResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'content': '&lt;answer&gt;\nBased on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the ... optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 8,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationOutput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'finalResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'text': 'Based on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the next optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-1',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'type': 'FINISH'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 9,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'observation'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-pre-0': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'inferenceConfiguration': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'maximumLength': 2048,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'stopSequences': [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            '\n\nHuman:'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'temperature': 0.0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topK': 250,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'topP': 1.0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'text': '\n\nHuman: You are a classifying agent that filters user inputs into categories. Your job is to sort these inputs before they...&lt;thinking&gt; XML tags before providing only the category letter to sort the input into within &lt;category&gt; XML tags.\n\nAssistant:',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-pre-0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'type': 'PRE_PROCESSING'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 0,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationInput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'data': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'parsedResponse': {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'isValid': True,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">          'rationale': 'Based on the provided instructions, this input appears to be a question about orbital mechanics that can be answered using th...equired arguments for that function - specific impulse, dry mass, and total mass. Therefore, this input should be sorted into:'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        'traceId': 'ca9880a2-dae7-46ac-a480-f38ca7e2d99f-pre-0'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'event_order': 1,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'type': 'modelInvocationOutput'</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<p>Each group of events with the same <em><code>traceId</code></em> will contain at least two events: one of type <em><code>modelInvocationInput</code></em> and
one of type <em><code>modelInvocationOutput</code></em>. Groups that involve action group traces will also include events of type
<em><code>actionGroupInvocationInput</code></em> and <em><code>actionGroupInvocationOutput</code></em>. Similarly, groups that use knowledge bases will have
additional events of type <em><code>knowledgeBaseLookupInput</code></em> and <em><code>knowledgeBaseLookupOutput</code></em>.
In the <em><code>BedrockModel</code></em> mentioned above, it implements an approach to parse these event groups into trace nodes.
This method allows the trace to display the reasoning behind selecting action groups/knowledge bases to answer queries and invoking
the corresponding Lambda function calls, as defined in our example OpenAPI spec above.
This structure helps to clearly show the flow of information and decision-making process that bedrock agent follows.</p>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Here is the final mlflow trace</summary><div><div class="collapsibleContent_i85q"><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">{</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  "spans": [</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "name": "Bedrock Agent Runtime",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "context": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "span_id": "0xb802165d133a33aa",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_id": "0x9b8bd0b2e018d77f936e48a09e54fd44"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "parent_id": null,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "start_time": 1731388531754725000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "end_time": 1731388550226771000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_code": "OK",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_message": "",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "attributes": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.traceRequestId": "\"1e036cc3a7f946ec995f7763b8dde51c\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanType": "\"CHAT_MODEL\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanFunctionName": "\"predict\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanInputs": "{\"context\": \"&lt;mlflow.pyfunc.model.PythonModelContext object at 0x13397c530&gt;\", \"messages\": [{\"role\": \"user\", \"content\": \"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\", \"name\": null}], \"params\": {\"temperature\": 1.0, \"max_tokens\": null, \"stop\": null, \"n\": 1, \"stream\": false, \"top_p\": null, \"top_k\": null, \"frequency_penalty\": null, \"presence_penalty\": null}}",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanOutputs": "{\"choices\": [{\"index\": 0, \"message\": {\"role\": \"user\", \"content\": \"Based on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the next optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.\", \"name\": null}, \"finish_reason\": \"stop\", \"logprobs\": null}], \"usage\": {\"prompt_tokens\": null, \"completion_tokens\": null, \"total_tokens\": null}, \"id\": null, \"model\": \"anthropic.claude-v2\", \"object\": \"chat.completion\", \"created\": 1731388550}"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "events": []</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "name": "Bedrock Input Prompt",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "context": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "span_id": "0x2e7cd730be70865b",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_id": "0x9b8bd0b2e018d77f936e48a09e54fd44"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "parent_id": "0xb802165d133a33aa",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "start_time": 1731388531755172000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "end_time": 1731388531755252000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_code": "OK",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_message": "",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "attributes": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.traceRequestId": "\"1e036cc3a7f946ec995f7763b8dde51c\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanType": "\"UNKNOWN\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanFunctionName": "\"_get_agent_prompt\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanInputs": "{\"raw_input_question\": \"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\"}",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanOutputs": "\"\\n        Answer the following question and pay strong attention to the prompt:\\n        &lt;question&gt;\\n        When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\\n        &lt;/question&gt;\\n        &lt;instruction&gt;\\n        You have functions available at your disposal to use when anwering any questions about orbital mechanics.if you can't find a function to answer a question about orbital mechanics, simply reply 'I do not know'\\n        &lt;/instruction&gt;\\n        \""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "events": []</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "name": "ACTION GROUP DECISION -optimal_departure_window_mars",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "context": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "span_id": "0x131e4e08cd5e95d9",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_id": "0x9b8bd0b2e018d77f936e48a09e54fd44"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "parent_id": "0xb802165d133a33aa",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "start_time": 1731388550223219000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "end_time": 1731388550224592000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_code": "OK",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_message": "",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "attributes": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.traceRequestId": "\"1e036cc3a7f946ec995f7763b8dde51c\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanType": "\"UNKNOWN\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_attributes": "[{\"type\": \"modelInvocationInput\", \"data\": {\"inferenceConfiguration\": {\"maximumLength\": 2048, \"stopSequences\": [\"&lt;/function_call&gt;\", \"&lt;/answer&gt;\", \"&lt;/error&gt;\"], \"temperature\": 0.0, \"topK\": 250, \"topP\": 1.0}, \"text\": \"\\n\\nHuman:\\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;. Your goal is to answer the user's question to the best of your ability, using the function(s) to gather more information if necessary to better answer the question. If you choose to call a function, the result of the function call will be added to the conversation history in &lt;function_results&gt; tags (if the call succeeded) or &lt;error&gt; tags (if the function failed). \\nYou were created with these instructions to consider as well:\\n&lt;auxiliary_instructions&gt;\\n            You are a friendly chat bot. You have access to a function called that returns\\n            information about the Mars launch window. When responding with Mars launch window,\\n            please make sure to add the timezone UTC.\\n            &lt;/auxiliary_instructions&gt;\\n\\nHere are some examples of correct action by other, different agents with access to functions that may or may not be similar to ones you are provided.\\n\\n&lt;examples&gt;\\n    &lt;example_docstring&gt; Here is an example of how you would correctly answer a question using a &lt;function_call&gt; and the corresponding &lt;function_result&gt;. Notice that you are free to think before deciding to make a &lt;function_call&gt; in the &lt;scratchpad&gt;.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;Can you show me my policy engine violation from 1st january 2023 to 1st february 2023? My alias is jsmith.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. I do not have knowledge to policy engine violations, so I should see if I can use any of the available functions to help. I have been equipped with get::policyengineactions::getpolicyviolations that gets the policy engine violations for a given alias, start date and end date. I will use this function to gather more information.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"jsmith\\\", startDate=\\\"1st January 2023\\\", endDate=\\\"1st February 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-06-01T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-06-02T14:45:00Z\\\", riskLevel: \\\"Medium\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;The policy engine violations between 1st january 2023 to 1st february 2023 for alias jsmith are - Policy ID: POL-001, Policy ID: POL-002&lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Here is another example that utilizes multiple function calls.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Can you check the policy engine violations under my manager between 2nd May to 5th May? My alias is john.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. Get the manager alias of the user using get::activedirectoryactions::getmanager function.\\n            2. Use the returned manager alias to get the policy engine violations using the get::policyengineactions::getpolicyviolations function.\\n\\n            I have double checked and made sure that I have been provided the get::activedirectoryactions::getmanager and the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::activedirectoryactions::getmanager(alias=\\\"john\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: {managerAlias: \\\"mark\\\", managerLevel: \\\"6\\\", teamName: \\\"Builder\\\", managerName: \\\"Mark Hunter\\\"}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            1. I have the managerAlias from the function results as mark and I have the start and end date from the user input. I can use the function result to call get::policyengineactions::getpolicyviolations function.\\n            2. I will then return the get::policyengineactions::getpolicyviolations function result to the user.\\n\\n            I have double checked and made sure that I have been provided the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"mark\\\", startDate=\\\"2nd May 2023\\\", endDate=\\\"5th May 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-05-02T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-05-04T14:45:00Z\\\", riskLevel: \\\"Low\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            The policy engine violations between 2nd May 2023 to 5th May 2023 for your manager's alias mark are - Policy ID: POL-001, Policy ID: POL-002\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Functions can also be search engine API's that issue a query to a knowledge base. Here is an example that utilizes regular function calls in combination with function calls to a search engine API. Please make sure to extract the source for the information within the final answer when using information returned from the search engine.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::benefitsaction::getbenefitplanname&lt;/function_name&gt;\\n                &lt;function_description&gt;Get's the benefit plan name for a user. The API takes in a userName and a benefit type and returns the benefit name to the user (i.e. Aetna, Premera, Fidelity, etc.).&lt;/function_description&gt;\\n                &lt;optional_argument&gt;userName (string): None&lt;/optional_argument&gt;\\n                &lt;optional_argument&gt;benefitType (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::benefitsaction::increase401klimit&lt;/function_name&gt;\\n                &lt;function_description&gt;Increases the 401k limit for a generic user. The API takes in only the current 401k limit and returns the new limit.&lt;/function_description&gt;\\n                &lt;optional_argument&gt;currentLimit (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_dentalinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Delta Dental benefits. It has information about covered dental benefits and other relevant information&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_401kplan::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Amazon 401k plan benefits. It can determine what a person's yearly 401k contribution limit is, based on their age.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_healthinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Aetna and Premera health benefits. It has information about the savings plan and shared deductible plan, as well as others.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;What is my deductible? My username is Bob and my benefitType is Dental. Also, what is the 401k yearly contribution limit?&lt;/question&gt;\\n        &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n            To answer this question, I will:\\n            1. Call the get::benefitsaction::getbenefitplanname function to get the benefit plan name for the user Bob with benefit type Dental.\\n            2. Call the get::x_amz_knowledgebase_dentalinsurance::search function to search for information about deductibles for the plan name returned from step 1.\\n            3. Call the get::x_amz_knowledgebase_401k::search function to search for information about 401k yearly contribution limits.\\n            4. Return the deductible information from the search results to the user.\\n            I have checked that I have access to the get::benefitsaction::getbenefitplanname, x_amz_knowledgebase_dentalinsurance::search, and x_amz_knowledgebase_401k::search functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::benefitsaction::getbenefitplanname(userName=\\\"Bob\\\", benefitType=\\\"Dental\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'planName': 'Delta Dental'}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            I have received the plan name Delta Dental for the user Bob with Dental benefits. I will now call the x_amz_knowledgebase_dentalinsurance::search function to find deductible information for Delta Dental.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_dentalinsurance::search(searchQuery=\\\"What is the deductible for Delta Dental?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"\\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The user's individual deductible is $50 per benefit period&lt;/text&gt;\\\\n&lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;If they are enrolled with dependents, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\\\n&lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt; &lt;scratchpad&gt;\\n            I have found the deductible information for Dental benefits. I will now call the x_amz_knowledgebase_401k::search function to find yearly 401k contribution limits.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_401k::search(searchQuery=\\\"What is the yearly 401k contribution limit?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\\\n&lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The deductible for your Delta Dental plan is $50 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;If you have dependents enrolled, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\n                &lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    \\n\\n    &lt;example_docstring&gt;Here's a final example where the question asked could not be answered with information gathered from calling the provided functions. In this example, notice how you respond by telling the user you cannot answer, without using a function that was not provided to you.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Who are the reportees of David?&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            After reviewing the functions I was equipped with, I realize I am not able to accurately answer this question since I can't access reportees of David. Therefore, I should explain to the user I cannot answer this question.\\n        &lt;/scratchpad&gt;\\n        &lt;answer&gt;\\n            Sorry, I am unable to assist you with this request.\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n&lt;/examples&gt;\\n\\nThe above examples have been provided to you to illustrate general guidelines and format for use of function calling for information retrieval, and how to use your scratchpad to plan your approach. IMPORTANT: the functions provided within the examples should not be assumed to have been provided to you to use UNLESS they are also explicitly given to you within &lt;functions&gt;&lt;/functions&gt; tags below. All of the values and information within the examples (the questions, function results, and answers) are strictly part of the examples and have not been provided to you.\\n\\nNow that you have read and understood the examples, I will define the functions that you have available to you to use. Here is a comprehensive list.\\n\\n&lt;functions&gt;\\n&lt;function&gt;\\n&lt;function_name&gt;GET::optimal_departure_window_mars::getNextMarsLaunchWindow&lt;/function_name&gt;\\n&lt;function_description&gt;Gets the next optimal launch window to Mars.&lt;/function_description&gt;\\n&lt;required_argument&gt;specific_impulse (string): Specific impulse of the propulsion system (s).&lt;/required_argument&gt;\\n&lt;required_argument&gt;dry_mass (string): Mass of the spacecraft without fuel (kg).&lt;/required_argument&gt;\\n&lt;required_argument&gt;total_mass (string): Total mass of the spacecraft including fuel (kg)&lt;/required_argument&gt;\\n&lt;returns&gt;object: The next optimal departure date for a Hohmann transfer from Earth to Mars, based on the spacecraft's mass and specific impulse.&lt;/returns&gt;\\n&lt;/function&gt;\\n\\n\\n&lt;/functions&gt;\\n\\nNote that the function arguments have been listed in the order that they should be passed into the function.\\n\\n\\n\\nDo not modify or extend the provided functions under any circumstances. For example, GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be considered modifying the function which is not allowed. Please use the functions only as defined.\\n\\nDO NOT use any functions that I have not equipped you with.\\n\\n Do not make assumptions about inputs; instead, make sure you know the exact function and input to use before you call a function.\\n\\nTo call a function, output the name of the function in between &lt;function_call&gt; and &lt;/function_call&gt; tags. You will receive a &lt;function_result&gt; in response to your call that contains information that you can use to better answer the question. Or, if the function call produced an error, you will receive an &lt;error&gt; in response.\\n\\n\\n\\nThe format for all other &lt;function_call&gt; MUST be: &lt;function_call&gt;$FUNCTION_NAME($FUNCTION_PARAMETER_NAME=$FUNCTION_PARAMETER_VALUE)&lt;/function_call&gt;\\n\\nRemember, your goal is to answer the user's question to the best of your ability, using only the function(s) provided within the &lt;functions&gt;&lt;/functions&gt; tags to gather more information if necessary to better answer the question.\\n\\nDo not modify or extend the provided functions under any circumstances. For example, calling GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be modifying the function which is not allowed. Please use the functions only as defined.\\n\\nBefore calling any functions, create a plan for performing actions to answer this question within the &lt;scratchpad&gt;. Double check your plan to make sure you don't call any functions that you haven't been provided with. Always return your final answer within &lt;answer&gt;&lt;/answer&gt; tags.\\n\\n\\n\\nThe user input is &lt;question&gt;Answer the following question and pay strong attention to the prompt:\\n        &lt;question&gt;\\n        When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\\n        &lt;/question&gt;\\n        &lt;instruction&gt;\\n        You have functions available at your disposal to use when anwering any questions about orbital mechanics.if you can't find a function to answer a question about orbital mechanics, simply reply 'I do not know'\\n        &lt;/instruction&gt;&lt;/question&gt;\\n\\n\\nAssistant: &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n\\n\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\", \"type\": \"ORCHESTRATION\"}, \"event_order\": 2}, {\"type\": \"modelInvocationOutput\", \"data\": {\"metadata\": {\"usage\": {\"inputTokens\": 5160, \"outputTokens\": 135}}, \"rawResponse\": {\"content\": \"To answer this question about the next Mars launch window, I will:\\n\\n1. Call the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function to get the next optimal launch window, passing in the provided spacecraft mass and specific impulse values.\\n\\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.\\n\\n&lt;/scratchpad&gt;\\n\\n&lt;function_call&gt;\\nGET::optimal_departure_window_mars::getNextMarsLaunchWindow(specific_impulse=\\\"2500\\\", dry_mass=\\\"10000\\\", total_mass=\\\"50000\\\")\"}, \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 3}, {\"type\": \"rationale\", \"data\": {\"text\": \"To answer this question about the next Mars launch window, I will:\\n\\n1. Call the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function to get the next optimal launch window, passing in the provided spacecraft mass and specific impulse values.\\n\\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 4}, {\"type\": \"invocationInput\", \"data\": {\"actionGroupInvocationInput\": {\"actionGroupName\": \"optimal_departure_window_mars\", \"apiPath\": \"/get-next-mars-launch-window\", \"executionType\": \"LAMBDA\", \"parameters\": [{\"name\": \"total_mass\", \"type\": \"string\", \"value\": \"50000\"}, {\"name\": \"dry_mass\", \"type\": \"string\", \"value\": \"10000\"}, {\"name\": \"specific_impulse\", \"type\": \"string\", \"value\": \"2500\"}], \"verb\": \"get\"}, \"invocationType\": \"ACTION_GROUP\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 5}, {\"type\": \"observation\", \"data\": {\"actionGroupInvocationOutput\": {\"text\": \"{\\\"next_launch_window\\\": {\\\"next_launch_date\\\": \\\"2026-11-26 00:00:00\\\", \\\"synodic_period_days\\\": 779.9068939794238, \\\"transfer_time_days\\\": 259, \\\"delta_v_available_m_s\\\": 39457.985759929674, \\\"delta_v_required_m_s\\\": 5595.997417810693, \\\"is_feasible\\\": true}}\"}, \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\", \"type\": \"ACTION_GROUP\"}, \"event_order\": 6}]",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanFunctionName": "\"_trace_agent_pre_context\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanInputs": "{\"inner_input_trace\": \"\\n\\nHuman:\\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;. Your goal is to answer the user's question to the best of your ability, using the function(s) to gather more information if necessary to better answer the question. If you choose to call a function, the result of the function call will be added to the conversation history in &lt;function_results&gt; tags (if the call succeeded) or &lt;error&gt; tags (if the function failed). \\nYou were created with these instructions to consider as well:\\n&lt;auxiliary_instructions&gt;\\n            You are a friendly chat bot. You have access to a function called that returns\\n            information about the Mars launch window. When responding with Mars launch window,\\n            please make sure to add the timezone UTC.\\n            &lt;/auxiliary_instructions&gt;\\n\\nHere are some examples of correct action by other, different agents with access to functions that may or may not be similar to ones you are provided.\\n\\n&lt;examples&gt;\\n    &lt;example_docstring&gt; Here is an example of how you would correctly answer a question using a &lt;function_call&gt; and the corresponding &lt;function_result&gt;. Notice that you are free to think before deciding to make a &lt;function_call&gt; in the &lt;scratchpad&gt;.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;Can you show me my policy engine violation from 1st january 2023 to 1st february 2023? My alias is jsmith.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. I do not have knowledge to policy engine violations, so I should see if I can use any of the available functions to help. I have been equipped with get::policyengineactions::getpolicyviolations that gets the policy engine violations for a given alias, start date and end date. I will use this function to gather more information.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"jsmith\\\", startDate=\\\"1st January 2023\\\", endDate=\\\"1st February 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-06-01T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-06-02T14:45:00Z\\\", riskLevel: \\\"Medium\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;The policy engine violations between 1st january 2023 to 1st february 2023 for alias jsmith are - Policy ID: POL-001, Policy ID: POL-002&lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Here is another example that utilizes multiple function calls.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Can you check the policy engine violations under my manager between 2nd May to 5th May? My alias is john.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. Get the manager alias of the user using get::activedirectoryactions::getmanager function.\\n            2. Use the returned manager alias to get the policy engine violations using the get::policyengineactions::getpolicyviolations function.\\n\\n            I have double checked and made sure that I have been provided the get::activedirectoryactions::getmanager and the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::activedirectoryactions::getmanager(alias=\\\"john\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: {managerAlias: \\\"mark\\\", managerLevel: \\\"6\\\", teamName: \\\"Builder\\\", managerName: \\\"Mark Hunter\\\"}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            1. I have the managerAlias from the function results as mark and I have the start and end date from the user input. I can use the function result to call get::policyengineactions::getpolicyviolations function.\\n            2. I will then return the get::policyengineactions::getpolicyviolations function result to the user.\\n\\n            I have double checked and made sure that I have been provided the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"mark\\\", startDate=\\\"2nd May 2023\\\", endDate=\\\"5th May 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-05-02T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-05-04T14:45:00Z\\\", riskLevel: \\\"Low\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            The policy engine violations between 2nd May 2023 to 5th May 2023 for your manager's alias mark are - Policy ID: POL-001, Policy ID: POL-002\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Functions can also be search engine API's that issue a query to a knowledge base. Here is an example that utilizes regular function calls in combination with function calls to a search engine API. Please make sure to extract the source for the information within the final answer when using information returned from the search engine.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::benefitsaction::getbenefitplanname&lt;/function_name&gt;\\n                &lt;function_description&gt;Get's the benefit plan name for a user. The API takes in a userName and a benefit type and returns the benefit name to the user (i.e. Aetna, Premera, Fidelity, etc.).&lt;/function_description&gt;\\n                &lt;optional_argument&gt;userName (string): None&lt;/optional_argument&gt;\\n                &lt;optional_argument&gt;benefitType (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::benefitsaction::increase401klimit&lt;/function_name&gt;\\n                &lt;function_description&gt;Increases the 401k limit for a generic user. The API takes in only the current 401k limit and returns the new limit.&lt;/function_description&gt;\\n                &lt;optional_argument&gt;currentLimit (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_dentalinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Delta Dental benefits. It has information about covered dental benefits and other relevant information&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_401kplan::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Amazon 401k plan benefits. It can determine what a person's yearly 401k contribution limit is, based on their age.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_healthinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Aetna and Premera health benefits. It has information about the savings plan and shared deductible plan, as well as others.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;What is my deductible? My username is Bob and my benefitType is Dental. Also, what is the 401k yearly contribution limit?&lt;/question&gt;\\n        &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n            To answer this question, I will:\\n            1. Call the get::benefitsaction::getbenefitplanname function to get the benefit plan name for the user Bob with benefit type Dental.\\n            2. Call the get::x_amz_knowledgebase_dentalinsurance::search function to search for information about deductibles for the plan name returned from step 1.\\n            3. Call the get::x_amz_knowledgebase_401k::search function to search for information about 401k yearly contribution limits.\\n            4. Return the deductible information from the search results to the user.\\n            I have checked that I have access to the get::benefitsaction::getbenefitplanname, x_amz_knowledgebase_dentalinsurance::search, and x_amz_knowledgebase_401k::search functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::benefitsaction::getbenefitplanname(userName=\\\"Bob\\\", benefitType=\\\"Dental\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'planName': 'Delta Dental'}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            I have received the plan name Delta Dental for the user Bob with Dental benefits. I will now call the x_amz_knowledgebase_dentalinsurance::search function to find deductible information for Delta Dental.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_dentalinsurance::search(searchQuery=\\\"What is the deductible for Delta Dental?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"\\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The user's individual deductible is $50 per benefit period&lt;/text&gt;\\\\n&lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;If they are enrolled with dependents, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\\\n&lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt; &lt;scratchpad&gt;\\n            I have found the deductible information for Dental benefits. I will now call the x_amz_knowledgebase_401k::search function to find yearly 401k contribution limits.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_401k::search(searchQuery=\\\"What is the yearly 401k contribution limit?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\\\n&lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The deductible for your Delta Dental plan is $50 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;If you have dependents enrolled, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\n                &lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    \\n\\n    &lt;example_docstring&gt;Here's a final example where the question asked could not be answered with information gathered from calling the provided functions. In this example, notice how you respond by telling the user you cannot answer, without using a function that was not provided to you.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Who are the reportees of David?&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            After reviewing the functions I was equipped with, I realize I am not able to accurately answer this question since I can't access reportees of David. Therefore, I should explain to the user I cannot answer this question.\\n        &lt;/scratchpad&gt;\\n        &lt;answer&gt;\\n            Sorry, I am unable to assist you with this request.\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n&lt;/examples&gt;\\n\\nThe above examples have been provided to you to illustrate general guidelines and format for use of function calling for information retrieval, and how to use your scratchpad to plan your approach. IMPORTANT: the functions provided within the examples should not be assumed to have been provided to you to use UNLESS they are also explicitly given to you within &lt;functions&gt;&lt;/functions&gt; tags below. All of the values and information within the examples (the questions, function results, and answers) are strictly part of the examples and have not been provided to you.\\n\\nNow that you have read and understood the examples, I will define the functions that you have available to you to use. Here is a comprehensive list.\\n\\n&lt;functions&gt;\\n&lt;function&gt;\\n&lt;function_name&gt;GET::optimal_departure_window_mars::getNextMarsLaunchWindow&lt;/function_name&gt;\\n&lt;function_description&gt;Gets the next optimal launch window to Mars.&lt;/function_description&gt;\\n&lt;required_argument&gt;specific_impulse (string): Specific impulse of the propulsion system (s).&lt;/required_argument&gt;\\n&lt;required_argument&gt;dry_mass (string): Mass of the spacecraft without fuel (kg).&lt;/required_argument&gt;\\n&lt;required_argument&gt;total_mass (string): Total mass of the spacecraft including fuel (kg)&lt;/required_argument&gt;\\n&lt;returns&gt;object: The next optimal departure date for a Hohmann transfer from Earth to Mars, based on the spacecraft's mass and specific impulse.&lt;/returns&gt;\\n&lt;/function&gt;\\n\\n\\n&lt;/functions&gt;\\n\\nNote that the function arguments have been listed in the order that they should be passed into the function.\\n\\n\\n\\nDo not modify or extend the provided functions under any circumstances. For example, GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be considered modifying the function which is not allowed. Please use the functions only as defined.\\n\\nDO NOT use any functions that I have not equipped you with.\\n\\n Do not make assumptions about inputs; instead, make sure you know the exact function and input to use before you call a function.\\n\\nTo call a function, output the name of the function in between &lt;function_call&gt; and &lt;/function_call&gt; tags. You will receive a &lt;function_result&gt; in response to your call that contains information that you can use to better answer the question. Or, if the function call produced an error, you will receive an &lt;error&gt; in response.\\n\\n\\n\\nThe format for all other &lt;function_call&gt; MUST be: &lt;function_call&gt;$FUNCTION_NAME($FUNCTION_PARAMETER_NAME=$FUNCTION_PARAMETER_VALUE)&lt;/function_call&gt;\\n\\nRemember, your goal is to answer the user's question to the best of your ability, using only the function(s) provided within the &lt;functions&gt;&lt;/functions&gt; tags to gather more information if necessary to better answer the question.\\n\\nDo not modify or extend the provided functions under any circumstances. For example, calling GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be modifying the function which is not allowed. Please use the functions only as defined.\\n\\nBefore calling any functions, create a plan for performing actions to answer this question within the &lt;scratchpad&gt;. Double check your plan to make sure you don't call any functions that you haven't been provided with. Always return your final answer within &lt;answer&gt;&lt;/answer&gt; tags.\\n\\n\\n\\nThe user input is &lt;question&gt;Answer the following question and pay strong attention to the prompt:\\n        &lt;question&gt;\\n        When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\\n        &lt;/question&gt;\\n        &lt;instruction&gt;\\n        You have functions available at your disposal to use when anwering any questions about orbital mechanics.if you can't find a function to answer a question about orbital mechanics, simply reply 'I do not know'\\n        &lt;/instruction&gt;&lt;/question&gt;\\n\\n\\nAssistant: &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n\\n\"}",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanOutputs": "\"To answer this question about the next Mars launch window, I will:\\n\\n1. Call the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function to get the next optimal launch window, passing in the provided spacecraft mass and specific impulse values.\\n\\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.\""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "events": []</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "name": "Invoking Action Group",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "context": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "span_id": "0x692bd6457647dc76",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_id": "0x9b8bd0b2e018d77f936e48a09e54fd44"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "parent_id": "0xb802165d133a33aa",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "start_time": 1731388550224851000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "end_time": 1731388550225218000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_code": "OK",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_message": "",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "attributes": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.traceRequestId": "\"1e036cc3a7f946ec995f7763b8dde51c\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanType": "\"UNKNOWN\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_attributes": "[{\"type\": \"modelInvocationInput\", \"data\": {\"inferenceConfiguration\": {\"maximumLength\": 2048, \"stopSequences\": [\"&lt;/function_call&gt;\", \"&lt;/answer&gt;\", \"&lt;/error&gt;\"], \"temperature\": 0.0, \"topK\": 250, \"topP\": 1.0}, \"text\": \"\\n\\nHuman:\\nYou are a research assistant AI that has been equipped with one or more functions to help you answer a &lt;question&gt;. Your goal is to answer the user's question to the best of your ability, using the function(s) to gather more information if necessary to better answer the question. If you choose to call a function, the result of the function call will be added to the conversation history in &lt;function_results&gt; tags (if the call succeeded) or &lt;error&gt; tags (if the function failed). \\nYou were created with these instructions to consider as well:\\n&lt;auxiliary_instructions&gt;\\n            You are a friendly chat bot. You have access to a function called that returns\\n            information about the Mars launch window. When responding with Mars launch window,\\n            please make sure to add the timezone UTC.\\n            &lt;/auxiliary_instructions&gt;\\n\\nHere are some examples of correct action by other, different agents with access to functions that may or may not be similar to ones you are provided.\\n\\n&lt;examples&gt;\\n    &lt;example_docstring&gt; Here is an example of how you would correctly answer a question using a &lt;function_call&gt; and the corresponding &lt;function_result&gt;. Notice that you are free to think before deciding to make a &lt;function_call&gt; in the &lt;scratchpad&gt;.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;Can you show me my policy engine violation from 1st january 2023 to 1st february 2023? My alias is jsmith.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. I do not have knowledge to policy engine violations, so I should see if I can use any of the available functions to help. I have been equipped with get::policyengineactions::getpolicyviolations that gets the policy engine violations for a given alias, start date and end date. I will use this function to gather more information.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"jsmith\\\", startDate=\\\"1st January 2023\\\", endDate=\\\"1st February 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-06-01T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-06-02T14:45:00Z\\\", riskLevel: \\\"Medium\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;The policy engine violations between 1st january 2023 to 1st february 2023 for alias jsmith are - Policy ID: POL-001, Policy ID: POL-002&lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Here is another example that utilizes multiple function calls.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Can you check the policy engine violations under my manager between 2nd May to 5th May? My alias is john.&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            To answer this question, I will need to:\\n            1. Get the manager alias of the user using get::activedirectoryactions::getmanager function.\\n            2. Use the returned manager alias to get the policy engine violations using the get::policyengineactions::getpolicyviolations function.\\n\\n            I have double checked and made sure that I have been provided the get::activedirectoryactions::getmanager and the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::activedirectoryactions::getmanager(alias=\\\"john\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: {managerAlias: \\\"mark\\\", managerLevel: \\\"6\\\", teamName: \\\"Builder\\\", managerName: \\\"Mark Hunter\\\"}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            1. I have the managerAlias from the function results as mark and I have the start and end date from the user input. I can use the function result to call get::policyengineactions::getpolicyviolations function.\\n            2. I will then return the get::policyengineactions::getpolicyviolations function result to the user.\\n\\n            I have double checked and made sure that I have been provided the get::policyengineactions::getpolicyviolations functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::policyengineactions::getpolicyviolations(alias=\\\"mark\\\", startDate=\\\"2nd May 2023\\\", endDate=\\\"5th May 2023\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{response: [{creationDate: \\\"2023-05-02T09:30:00Z\\\", riskLevel: \\\"High\\\", policyId: \\\"POL-001\\\", policyUrl: \\\"https://example.com/policies/POL-001\\\", referenceUrl: \\\"https://example.com/violations/POL-001\\\"}, {creationDate: \\\"2023-05-04T14:45:00Z\\\", riskLevel: \\\"Low\\\", policyId: \\\"POL-002\\\", policyUrl: \\\"https://example.com/policies/POL-002\\\", referenceUrl: \\\"https://example.com/violations/POL-002\\\"}]}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            The policy engine violations between 2nd May 2023 to 5th May 2023 for your manager's alias mark are - Policy ID: POL-001, Policy ID: POL-002\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    &lt;example_docstring&gt;Functions can also be search engine API's that issue a query to a knowledge base. Here is an example that utilizes regular function calls in combination with function calls to a search engine API. Please make sure to extract the source for the information within the final answer when using information returned from the search engine.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::benefitsaction::getbenefitplanname&lt;/function_name&gt;\\n                &lt;function_description&gt;Get's the benefit plan name for a user. The API takes in a userName and a benefit type and returns the benefit name to the user (i.e. Aetna, Premera, Fidelity, etc.).&lt;/function_description&gt;\\n                &lt;optional_argument&gt;userName (string): None&lt;/optional_argument&gt;\\n                &lt;optional_argument&gt;benefitType (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::benefitsaction::increase401klimit&lt;/function_name&gt;\\n                &lt;function_description&gt;Increases the 401k limit for a generic user. The API takes in only the current 401k limit and returns the new limit.&lt;/function_description&gt;\\n                &lt;optional_argument&gt;currentLimit (string): None&lt;/optional_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_dentalinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Delta Dental benefits. It has information about covered dental benefits and other relevant information&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_401kplan::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Amazon 401k plan benefits. It can determine what a person's yearly 401k contribution limit is, based on their age.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::x_amz_knowledgebase_healthinsurance::search&lt;/function_name&gt;\\n                &lt;function_description&gt;This is a search tool that provides information about Aetna and Premera health benefits. It has information about the savings plan and shared deductible plan, as well as others.&lt;/function_description&gt;\\n                &lt;required_argument&gt;query(string): A full sentence query that is fed to the search tool&lt;/required_argument&gt;\\n                &lt;returns&gt;Returns string  related to the user query asked.&lt;/returns&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n\\n        &lt;question&gt;What is my deductible? My username is Bob and my benefitType is Dental. Also, what is the 401k yearly contribution limit?&lt;/question&gt;\\n        &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n            To answer this question, I will:\\n            1. Call the get::benefitsaction::getbenefitplanname function to get the benefit plan name for the user Bob with benefit type Dental.\\n            2. Call the get::x_amz_knowledgebase_dentalinsurance::search function to search for information about deductibles for the plan name returned from step 1.\\n            3. Call the get::x_amz_knowledgebase_401k::search function to search for information about 401k yearly contribution limits.\\n            4. Return the deductible information from the search results to the user.\\n            I have checked that I have access to the get::benefitsaction::getbenefitplanname, x_amz_knowledgebase_dentalinsurance::search, and x_amz_knowledgebase_401k::search functions.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::benefitsaction::getbenefitplanname(userName=\\\"Bob\\\", benefitType=\\\"Dental\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'planName': 'Delta Dental'}}}}&lt;/function_result&gt;\\n        &lt;scratchpad&gt;\\n            I have received the plan name Delta Dental for the user Bob with Dental benefits. I will now call the x_amz_knowledgebase_dentalinsurance::search function to find deductible information for Delta Dental.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_dentalinsurance::search(searchQuery=\\\"What is the deductible for Delta Dental?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"\\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The user's individual deductible is $50 per benefit period&lt;/text&gt;\\\\n&lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;If they are enrolled with dependents, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\\\n&lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt; &lt;scratchpad&gt;\\n            I have found the deductible information for Dental benefits. I will now call the x_amz_knowledgebase_401k::search function to find yearly 401k contribution limits.\\n        &lt;/scratchpad&gt;\\n        &lt;function_call&gt;get::x_amz_knowledgebase_401k::search(searchQuery=\\\"What is the yearly 401k contribution limit?\\\")&lt;/function_call&gt;\\n        &lt;function_result&gt;{{'response': {{'responseCode': '200', 'responseBody': \\\"&lt;answer&gt;\\\\n&lt;answer_part&gt;\\\\n&lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\\\n&lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\\\n&lt;/answer_part&gt;\\\\n&lt;/answer&gt;\\\"}}}}&lt;/function_result&gt;\\n        &lt;answer&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The deductible for your Delta Dental plan is $50 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;dfe040f8-46ed-4a65-b3ea-529fa55f6b9e&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;If you have dependents enrolled, the maximum family deductible is $150 per benefit period.&lt;/text&gt;\\n                &lt;source&gt;0e666064-31d8-4223-b7ba-8eecf40b7b47&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n            &lt;answer_part&gt;\\n                &lt;text&gt;The yearly 401k contribution limit is $20,500.&lt;/text&gt;\\n                &lt;source&gt;c546cbe8-07f6-45d1-90ca-74d87ab2885a&lt;/source&gt;\\n            &lt;/answer_part&gt;\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n\\n    \\n\\n    &lt;example_docstring&gt;Here's a final example where the question asked could not be answered with information gathered from calling the provided functions. In this example, notice how you respond by telling the user you cannot answer, without using a function that was not provided to you.&lt;/example_docstring&gt;\\n    &lt;example&gt;\\n        &lt;functions&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::policyengineactions::getpolicyviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Returns a list of policy engine violations for the specified alias within the specified date range.&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;required_argument&gt;startDate (string): The start date of the range to filter violations. The format for startDate is MM/DD/YYYY.&lt;/required_argument&gt;\\n                &lt;required_argument&gt;endDate (string): The end date of the range to filter violations&lt;/required_argument&gt;\\n                &lt;returns&gt;array: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;post::policyengineactions::acknowledgeviolations&lt;/function_name&gt;\\n                &lt;function_description&gt;Acknowledge policy engine violation. Generally used to acknowledge violation, once user notices a violation under their alias or their managers alias.&lt;/function_description&gt;\\n                &lt;required_argument&gt;policyId (string): The ID of the policy violation&lt;/required_argument&gt;\\n                &lt;required_argument&gt;expectedDateOfResolution (string): The date by when the violation will be addressed/resolved&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            &lt;function&gt;\\n                &lt;function_name&gt;get::activedirectoryactions::getmanager&lt;/function_name&gt;\\n                &lt;function_description&gt;This API is used to identify the manager hierarchy above a given person. Every person could have a manager and the manager could have another manager to which they report to&lt;/function_description&gt;\\n                &lt;required_argument&gt;alias (string): The alias of the employee under whose name current violations needs to be listed&lt;/required_argument&gt;\\n                &lt;returns&gt;object: Successful response&lt;/returns&gt;\\n                &lt;raises&gt;object: Invalid request&lt;/raises&gt;\\n            &lt;/function&gt;\\n            \\n        &lt;/functions&gt;\\n        &lt;question&gt;Who are the reportees of David?&lt;/question&gt;\\n        &lt;scratchpad&gt;\\n            After reviewing the functions I was equipped with, I realize I am not able to accurately answer this question since I can't access reportees of David. Therefore, I should explain to the user I cannot answer this question.\\n        &lt;/scratchpad&gt;\\n        &lt;answer&gt;\\n            Sorry, I am unable to assist you with this request.\\n        &lt;/answer&gt;\\n    &lt;/example&gt;\\n&lt;/examples&gt;\\n\\nThe above examples have been provided to you to illustrate general guidelines and format for use of function calling for information retrieval, and how to use your scratchpad to plan your approach. IMPORTANT: the functions provided within the examples should not be assumed to have been provided to you to use UNLESS they are also explicitly given to you within &lt;functions&gt;&lt;/functions&gt; tags below. All of the values and information within the examples (the questions, function results, and answers) are strictly part of the examples and have not been provided to you.\\n\\nNow that you have read and understood the examples, I will define the functions that you have available to you to use. Here is a comprehensive list.\\n\\n&lt;functions&gt;\\n&lt;function&gt;\\n&lt;function_name&gt;GET::optimal_departure_window_mars::getNextMarsLaunchWindow&lt;/function_name&gt;\\n&lt;function_description&gt;Gets the next optimal launch window to Mars.&lt;/function_description&gt;\\n&lt;required_argument&gt;specific_impulse (string): Specific impulse of the propulsion system (s).&lt;/required_argument&gt;\\n&lt;required_argument&gt;dry_mass (string): Mass of the spacecraft without fuel (kg).&lt;/required_argument&gt;\\n&lt;required_argument&gt;total_mass (string): Total mass of the spacecraft including fuel (kg)&lt;/required_argument&gt;\\n&lt;returns&gt;object: The next optimal departure date for a Hohmann transfer from Earth to Mars, based on the spacecraft's mass and specific impulse.&lt;/returns&gt;\\n&lt;/function&gt;\\n\\n\\n&lt;/functions&gt;\\n\\nNote that the function arguments have been listed in the order that they should be passed into the function.\\n\\n\\n\\nDo not modify or extend the provided functions under any circumstances. For example, GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be considered modifying the function which is not allowed. Please use the functions only as defined.\\n\\nDO NOT use any functions that I have not equipped you with.\\n\\n Do not make assumptions about inputs; instead, make sure you know the exact function and input to use before you call a function.\\n\\nTo call a function, output the name of the function in between &lt;function_call&gt; and &lt;/function_call&gt; tags. You will receive a &lt;function_result&gt; in response to your call that contains information that you can use to better answer the question. Or, if the function call produced an error, you will receive an &lt;error&gt; in response.\\n\\n\\n\\nThe format for all other &lt;function_call&gt; MUST be: &lt;function_call&gt;$FUNCTION_NAME($FUNCTION_PARAMETER_NAME=$FUNCTION_PARAMETER_VALUE)&lt;/function_call&gt;\\n\\nRemember, your goal is to answer the user's question to the best of your ability, using only the function(s) provided within the &lt;functions&gt;&lt;/functions&gt; tags to gather more information if necessary to better answer the question.\\n\\nDo not modify or extend the provided functions under any circumstances. For example, calling GET::optimal_departure_window_mars::getNextMarsLaunchWindow with additional parameters would be modifying the function which is not allowed. Please use the functions only as defined.\\n\\nBefore calling any functions, create a plan for performing actions to answer this question within the &lt;scratchpad&gt;. Double check your plan to make sure you don't call any functions that you haven't been provided with. Always return your final answer within &lt;answer&gt;&lt;/answer&gt; tags.\\n\\n\\n\\nThe user input is &lt;question&gt;Answer the following question and pay strong attention to the prompt:\\n        &lt;question&gt;\\n        When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\\n        &lt;/question&gt;\\n        &lt;instruction&gt;\\n        You have functions available at your disposal to use when anwering any questions about orbital mechanics.if you can't find a function to answer a question about orbital mechanics, simply reply 'I do not know'\\n        &lt;/instruction&gt;&lt;/question&gt;\\n\\n\\nAssistant: &lt;scratchpad&gt; I understand I cannot use functions that have not been provided to me to answer this question.\\n\\n\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\", \"type\": \"ORCHESTRATION\"}, \"event_order\": 2}, {\"type\": \"modelInvocationOutput\", \"data\": {\"metadata\": {\"usage\": {\"inputTokens\": 5160, \"outputTokens\": 135}}, \"rawResponse\": {\"content\": \"To answer this question about the next Mars launch window, I will:\\n\\n1. Call the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function to get the next optimal launch window, passing in the provided spacecraft mass and specific impulse values.\\n\\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.\\n\\n&lt;/scratchpad&gt;\\n\\n&lt;function_call&gt;\\nGET::optimal_departure_window_mars::getNextMarsLaunchWindow(specific_impulse=\\\"2500\\\", dry_mass=\\\"10000\\\", total_mass=\\\"50000\\\")\"}, \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 3}, {\"type\": \"rationale\", \"data\": {\"text\": \"To answer this question about the next Mars launch window, I will:\\n\\n1. Call the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function to get the next optimal launch window, passing in the provided spacecraft mass and specific impulse values.\\n\\nI have verified that I have access to the GET::optimal_departure_window_mars::getNextMarsLaunchWindow function.\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 4}, {\"type\": \"invocationInput\", \"data\": {\"actionGroupInvocationInput\": {\"actionGroupName\": \"optimal_departure_window_mars\", \"apiPath\": \"/get-next-mars-launch-window\", \"executionType\": \"LAMBDA\", \"parameters\": [{\"name\": \"total_mass\", \"type\": \"string\", \"value\": \"50000\"}, {\"name\": \"dry_mass\", \"type\": \"string\", \"value\": \"10000\"}, {\"name\": \"specific_impulse\", \"type\": \"string\", \"value\": \"2500\"}], \"verb\": \"get\"}, \"invocationType\": \"ACTION_GROUP\", \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\"}, \"event_order\": 5}, {\"type\": \"observation\", \"data\": {\"actionGroupInvocationOutput\": {\"text\": \"{\\\"next_launch_window\\\": {\\\"next_launch_date\\\": \\\"2026-11-26 00:00:00\\\", \\\"synodic_period_days\\\": 779.9068939794238, \\\"transfer_time_days\\\": 259, \\\"delta_v_available_m_s\\\": 39457.985759929674, \\\"delta_v_required_m_s\\\": 5595.997417810693, \\\"is_feasible\\\": true}}\"}, \"traceId\": \"e0b2b2c2-fb7c-4e17-8a1f-a3781100face-0\", \"type\": \"ACTION_GROUP\"}, \"event_order\": 6}]",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanFunctionName": "\"_action_group_trace\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanInputs": "{\"inner_trace_group\": \"{'actionGroupName': 'optimal_departure_window_mars', 'apiPath': '/get-next-mars-launch-window', 'executionType': 'LAMBDA', 'parameters': [{'name': 'total_mass', 'type': 'string', 'value': '50000'}, {'name': 'dry_mass', 'type': 'string', 'value': '10000'}, {'name': 'specific_impulse', 'type': 'string', 'value': '2500'}], 'verb': 'get'}\"}",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanOutputs": "\"{'action_group_name': 'optimal_departure_window_mars', 'api_path': '/get-next-mars-launch-window', 'execution_type': 'LAMBDA', 'execution_output': '{\\\"next_launch_window\\\": {\\\"next_launch_date\\\": \\\"2026-11-26 00:00:00\\\", \\\"synodic_period_days\\\": 779.9068939794238, \\\"transfer_time_days\\\": 259, \\\"delta_v_available_m_s\\\": 39457.985759929674, \\\"delta_v_required_m_s\\\": 5595.997417810693, \\\"is_feasible\\\": true}}'}\""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "events": []</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "name": "Retrieved Response",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "context": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "span_id": "0xfe0b5f9149c39d7d",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "trace_id": "0x9b8bd0b2e018d77f936e48a09e54fd44"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "parent_id": "0xb802165d133a33aa",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "start_time": 1731388550225320000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "end_time": 1731388550226466000,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_code": "OK",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "status_message": "",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "attributes": {</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.traceRequestId": "\"1e036cc3a7f946ec995f7763b8dde51c\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanType": "\"AGENT\"",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanInputs": "[{\"role\": \"user\", \"content\": \"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\", \"name\": null}]",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        "mlflow.spanOutputs": "{\"choices\": [{\"index\": 0, \"message\": {\"role\": \"user\", \"content\": \"Based on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the next optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.\", \"name\": null}, \"finish_reason\": \"stop\", \"logprobs\": null}], \"usage\": {\"prompt_tokens\": null, \"completion_tokens\": null, \"total_tokens\": null}, \"id\": null, \"model\": \"anthropic.claude-v2\", \"object\": \"chat.completion\", \"created\": 1731388550}"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      "events": []</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  "request": "{\"context\": \"&lt;mlflow.pyfunc.model.PythonModelContext object at 0x13397c530&gt;\", \"messages\": [{\"role\": \"user\", \"content\": \"When is the next launch window for Mars? My spacecraft's total mass is 50000, dry mass is 10000 and specific impulse is 2500. Mass in Kg.\", \"name\": null}], \"params\": {\"temperature\": 1.0, \"max_tokens\": null, \"stop\": null, \"n\": 1, \"stream\": false, \"top_p\": null, \"top_k\": null, \"frequency_penalty\": null, \"presence_penalty\": null}}",</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  "response": "{\"choices\": [{\"index\": 0, \"message\": {\"role\": \"user\", \"content\": \"Based on the provided spacecraft dry mass of 10000 kg, total mass of 50000 kg, and specific impulse of 2500 s, the next optimal launch window for a Hohmann transfer from Earth to Mars is on November 26, 2026 UTC. The transfer will take 259 days.\", \"name\": null}, \"finish_reason\": \"stop\", \"logprobs\": null}], \"usage\": {\"prompt_tokens\": null, \"completion_tokens\": null, \"total_tokens\": null}, \"id\": null, \"model\": \"anthropic.claude-v2\", \"object\": \"chat.completion\", \"created\": 1731388550}"</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></details>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="visualizing-trace-breakdown-in-the-mlflow-ui">Visualizing Trace Breakdown in the MLflow UI<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#visualizing-trace-breakdown-in-the-mlflow-ui" class="hash-link" aria-label="Direct link to Visualizing Trace Breakdown in the MLflow UI" title="Direct link to Visualizing Trace Breakdown in the MLflow UI">​</a></h3>
<ol>
<li>
<p><b>Initial Prompt Submitted to the Bedrock Agent.</b>
<img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/bedrock_input_prompt-7841e074dccf4a33f259a45f613147c5.png" width="2898" height="1310" class="img_ev3q"></p>
</li>
<li>
<p><b>In this trace, we can observe how the Bedrock Agent evaluates and selects the most suitable Action Group for the task at hand.</b>
<img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/action_group_decision-221f4cd596874f14b2521595c03f6b60.png" width="2902" height="1364" class="img_ev3q"></p>
</li>
<li>
<p><b>Once an Action Group is selected, its invocation is traced, displaying the input and output interactions with the underlying Lambda function as outlined by the OpenAPI Spec above.</b>
<img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/invoking_action_group-a94489c23d1626bcd67c5d2ce8136621.png" width="2918" height="1264" class="img_ev3q"></p>
</li>
<li>
<p><b>Furthermore, Bedrock's supplementary trace is included under the Attributes section,
along with additional metadata as shown below</b>
<img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/traces_attributes-320b4b8b8a9c52bc9dbf4f27248c11ca.png" width="2936" height="1788" class="img_ev3q"></p>
</li>
<li>
<p><b>Subsequently, the final response from the agent is traced, as depicted below.</b>
<img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/retrieved_response-e72339291104fb6659f04c1cedfcbef2.png" width="2914" height="1038" class="img_ev3q"></p>
</li>
</ol>
<p><strong>Note</strong>: We cannot break down the span's duration into individual trace durations
because the Bedrock Agent's trace response does not include timestamps for each trace step.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this blog, we explored how to integrate the AWS Bedrock Agent as an MLflow ChatModel, focusing on Action Groups,
Knowledge Bases, and Tracing. We demonstrated how to easily build a custom ChatModel using MLflow's flexible and
powerful APIs. This approach enables you to leverage MLflow's tracing and logging capabilities, even for models or
flavors that are not natively supported by MLflow.</p>
<p>Key Takeaways from This Blog:</p>
<ul>
<li>Deploying a Bedrock Agent with Action Groups as AWS Lambda Functions:<!-- -->
<ul>
<li>We covered how to set up a Bedrock Agent and implement custom actions using AWS Lambda functions within Action Groups.</li>
</ul>
</li>
<li>Mapping the AWS Bedrock Agent's Custom Tracing to MLflow span/trace objects:<!-- -->
<ul>
<li>We demonstrated how to convert the agent's custom tracing data into MLflow span objects for better observability.</li>
</ul>
</li>
<li>Logging and Loading the Bedrock Agent as an MLflow ChatModel:<!-- -->
<ul>
<li>We showed how to log the Bedrock Agent into MLflow as a <em><code>ChatModel</code></em> and how to load it for future use.</li>
</ul>
</li>
<li>Externalizing AWS Client and Bedrock Configurations:<!-- -->
<ul>
<li>We explained how to externalize AWS client and Bedrock configurations to safeguard secrets and make it easy to adjust model settings without the need to re-log the model.</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading-and-references">Further Reading and References<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/bedrock-chat-model-part-1#further-reading-and-references" class="hash-link" aria-label="Direct link to Further Reading and References" title="Direct link to Further Reading and References">​</a></h2>
<ul>
<li><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-how.html" target="_blank" rel="noopener noreferrer">How Amazon Bedrock Agents work</a></li>
<li><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html" target="_blank" rel="noopener noreferrer">Amazon Bedrock Tracing</a></li>
<li><a href="https://mlflow.org/docs/latest/llms/chat-model-guide/index.html" target="_blank" rel="noopener noreferrer">Creating a Custom GenAI chat agent</a></li>
<li><a href="https://github.com/awsdocs/aws-doc-sdk-examples" target="_blank" rel="noopener noreferrer">AWS Code Examples Repository</a></li>
</ul>]]></content>
        <author>
            <name>Jas Bali</name>
            <uri>https://www.linkedin.com/in/jas-bali-195ba410a/</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="pyfunc" term="pyfunc"/>
        <category label="bedrock" term="bedrock"/>
        <category label="tracing" term="tracing"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building Advanced RAG with MLflow and LlamaIndex Workflow]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow"/>
        <updated>2024-10-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide for using LlamaIndex Workflow with MLflow for building advanced QA application.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Thumbnail" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_title-c9f3f1bcce4659b5392213c0a2cb25e1.png" width="3338" height="1498" class="img_ev3q"></p>
<p>Augmenting LLMs with various data sources is a strong strategy to build LLM applications. However, as the system grows more complex, it becomes challenging to prototype and iteratively build improvements to these more complex systems.</p>
<p>LlamaIndex Workflow is a great framework to build such compound systems. Combined with MLflow, the Workflow API brings efficiency and robustness in the development cycle, enabling easy debugging, experiment tracking, and evaluation for continuous improvement.</p>
<p>In this blog, we will go through the journey of building a sophisticated chatbot with LlamaIndex's Workflow API and MLflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-llamaindex-workflow">What is LlamaIndex Workflow?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#what-is-llamaindex-workflow" class="hash-link" aria-label="Direct link to What is LlamaIndex Workflow?" title="Direct link to What is LlamaIndex Workflow?">​</a></h2>
<p><a href="https://docs.llamaindex.ai/en/stable/module_guides/workflow/" target="_blank" rel="noopener noreferrer">LlamaIndex Workflow</a> is an event-driven orchestration framework for designing dynamic AI applications. The core of LlamaIndex Workflow consists of:</p>
<ul>
<li>
<p><code>Steps</code> are units of execution, representing distinct actions in the workflow.</p>
</li>
<li>
<p><code>Events</code> trigger these steps, acting as signals that control the workflow’s flow.</p>
</li>
<li>
<p><code>Workflow</code> connects these two as a Python class. Each step is implemented as a method of the workflow class, defined with input and output events.</p>
</li>
</ul>
<p>This simple yet powerful abstraction allows you to break down complex tasks into manageable steps, enabling greater flexibility and scalability. As a framework embodying event-driven design, using the <code>Workflow</code> APIs makes it intuitive to design parallel and asynchronous execution flows, significantly enhancing the efficiency of long-running tasks and aids in providing production-ready scalability.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-use-mlflow-with-llamaindex-workflow">Why Use MLflow with LlamaIndex Workflow?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#why-use-mlflow-with-llamaindex-workflow" class="hash-link" aria-label="Direct link to Why Use MLflow with LlamaIndex Workflow?" title="Direct link to Why Use MLflow with LlamaIndex Workflow?">​</a></h2>
<p>Workflow provides great flexibility to design nearly arbitrary execution flows. However, with this great power comes a great responsibility. Without managing your changes properly, it can become a chaotic mess of indeterminate states and confusing configurations. After a few dozen changes, you may be asking yourself, "how did my workflow even work?".</p>
<p><strong>MLflow</strong> brings a powerful MLOps harness to LlamaIndex Workflows throughout the end-to-end development cycle.</p>
<ul>
<li>
<p><strong>Experiment Tracking</strong>: MLflow allows you to record various components like steps, prompts, LLMs, and tools, making it easy to improve the system iteratively.</p>
</li>
<li>
<p><strong>Reproducibility</strong>: MLflow packages environment information such as global configurations (<code>Settings</code>), library versions, and metadata to ensure consistent deployment across different stages of the ML lifecycle.</p>
</li>
<li>
<p><strong>Tracing</strong>: Debugging issues in a complex event-driven workflow is cumbersome. MLflow Tracing is a production-ready observability solution that natively integrates with LlamaIndex, giving you observability into each internal stage within your Workflow.</p>
</li>
<li>
<p><strong>Evaluation</strong>: Measuring is a crucial task for improving your model. MLflow Evaluation is great tool to evaluate the quality, speed, and cost of your LLM application. It is tightly integrated with MLflow's experiment tracking capabilities, streamlining the process of making iterative improvements.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lets-build️">Let's Build!🛠️<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#lets-build%EF%B8%8F" class="hash-link" aria-label="Direct link to Let's Build!🛠️" title="Direct link to Let's Build!🛠️">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="strategy-hybrid-approach-using-multiple-retrieval-methods">Strategy: Hybrid Approach Using Multiple Retrieval Methods<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#strategy-hybrid-approach-using-multiple-retrieval-methods" class="hash-link" aria-label="Direct link to Strategy: Hybrid Approach Using Multiple Retrieval Methods" title="Direct link to Strategy: Hybrid Approach Using Multiple Retrieval Methods">​</a></h3>
<p>Retrieval-Augmented Generation (RAG) is a powerful framework, but the retrieval step can often become a bottleneck, because embedding-based retrieval may not always capture the most relevant context. While many techniques exist to improve retrieval quality, no single solution works universally. Therefore, an effective strategy is to combine multiple retrieval approaches.</p>
<p>The concept we will explore here is to run several retrieval methods in parallel: (1) standard vector search, (2) keyword-based search (BM25), and (3) web search. The retrieved contexts are then merged, with irrelevant data filtered out to enhance the overall quality.</p>
<p><img loading="lazy" alt="Hybrid RAG Concept" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_hybrid_rag_concept-91f220154cd696bc022e0d3448b6de15.png" width="1949" height="929" class="img_ev3q"></p>
<p>How do we bring this concept to life? Let’s dive in and build this hybrid RAG using LlamaIndex Workflow and MLflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-set-up-repository">1. Set Up Repository<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#1-set-up-repository" class="hash-link" aria-label="Direct link to 1. Set Up Repository" title="Direct link to 1. Set Up Repository">​</a></h2>
<p>The sample code, including the environment setup script, is available in the <a href="https://github.com/mlflow/mlflow/tree/master/examples/llama_index/workflow" target="_blank" rel="noopener noreferrer">GitHub repository</a>. It contains a complete workflow definition, a hands-on notebook, and a sample dataset for running experiments. To clone it to your working environment, use the following command:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">git clone https://github.com/mlflow/mlflow.git</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After cloning the repository, set up the virtual environment by running:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">cd mlflow/examples/llama_index/workflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chmod +x install.sh</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">./install.sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once the installation is complete, start Jupyter Notebook within the Poetry environment using:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">poetry run jupyter notebook</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, open the <code>Tutorial.ipynb</code> notebook located in the root directory. Throughout this blog, we will walk through this notebook to guide you through the development process.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-start-an-mlflow-experiment">2. Start an MLflow Experiment<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#2-start-an-mlflow-experiment" class="hash-link" aria-label="Direct link to 2. Start an MLflow Experiment" title="Direct link to 2. Start an MLflow Experiment">​</a></h2>
<p>An <strong>MLflow Experiment</strong> is where you track all aspects of model development, including model definitions, configurations, parameters, dependency versions, and more. Let’s start by creating a new MLflow experiment called "LlamaIndex Workflow RAG":</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"LlamaIndex Workflow RAG"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At this point, the experiment doesn't have any recorded data yet. To view the experiment in the MLflow UI, open a new terminal and run the <code>mlflow ui</code> command, then navigate to the provided URL in your browser:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">poetry run mlflow ui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="Empty MLflow Experiment" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_empty_experiment-a51068dbf3d59a443672da5aa589c812.png" width="1926" height="418" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-choose-your-llm-and-embeddings">3. Choose your LLM and Embeddings<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#3-choose-your-llm-and-embeddings" class="hash-link" aria-label="Direct link to 3. Choose your LLM and Embeddings" title="Direct link to 3. Choose your LLM and Embeddings">​</a></h2>
<p>Now, set up your preferred LLM and embeddings models to LlamaIndex's Settings object. These models will be used throughout the LlamaIndex components.</p>
<p>For this demonstration, we’ll use OpenAI models, but you can easily switch to different LLM providers or local models by following the instructions in the notebook.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> getpass</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> getpass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">getpass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Enter OpenAI API Key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">core </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Settings</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">embeddings</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OpenAIEmbedding</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llms</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># LlamaIndex by default uses OpenAI APIs for LLMs and embeddings models. You can use the default</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># model (`gpt-3.5-turbo` and `text-embeddings-ada-002` as of Oct 2024), but we recommend using the</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># latest efficient models instead for getting better results with lower cost.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Settings</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">embed_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> OpenAIEmbedding</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"text-embedding-3-large"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Settings</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> OpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-4o-mini"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>💡 <em>MLflow will automatically log the <code>Settings</code> configuration into your MLflow Experiment when logging models, ensuring reproducibility and reducing the risk of discrepancies between environments.</em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-set-up-web-search-api">4. Set Up Web Search API<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#4-set-up-web-search-api" class="hash-link" aria-label="Direct link to 4. Set Up Web Search API" title="Direct link to 4. Set Up Web Search API">​</a></h2>
<p>Later in this blog, we will add a web search capability to the QA bot. We will use Tavily AI, a search API
optimized for LLM application and natively integrated with LlamaIndex. Visit <a href="https://tavily.com/" target="_blank" rel="noopener noreferrer">their website</a> to
get an API key for free-tier use, or use different search engine integrated with LlamaIndex, e.g. <a href="https://docs.llamaindex.ai/en/stable/api_reference/tools/google/#llama_index.tools.google.GoogleSearchToolSpec" target="_blank" rel="noopener noreferrer">GoogleSearchToolSpec</a>.</p>
<p>Once you get the API key, set it to the environment variable:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"TAVILY_AI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> getpass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">getpass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Enter Tavily AI API Key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-set-up-document-indices-for-retrieval">5. Set Up Document Indices for Retrieval<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#5-set-up-document-indices-for-retrieval" class="hash-link" aria-label="Direct link to 5. Set Up Document Indices for Retrieval" title="Direct link to 5. Set Up Document Indices for Retrieval">​</a></h2>
<p>The next step is to build a document index for retrieval from MLflow documentation. The <code>urls.txt</code> file in the <code>data</code> directory contains a list of MLflow documentation pages. These pages can be loaded as document objects using the web page reader utility.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">readers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">web </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SimpleWebPageReader</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">open</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data/urls.txt"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"r"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">file</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    urls </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> line </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">file</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> line</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strip</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">documents </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> SimpleWebPageReader</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">html_to_text</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">urls</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, ingest these documents into a vector database. In this tutorial, we’ll use the <a href="https://qdrant.tech/" target="_blank" rel="noopener noreferrer">Qdrant</a> vector store, which is free if self-hosted. If Docker is installed on your machine, you can start the Qdrant database by running the official Docker container:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">$ docker pull qdrant/qdrant</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">$ docker run -p 6333:6333 -p 6334:6334 \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    -v $(pwd)/.qdrant_storage:/qdrant/storage:z \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    qdrant/qdrant</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Once the container is running, you can create an index object that connects to the Qdrant database:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> qdrant_client</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">vector_stores</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">qdrant </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> QdrantVectorStore</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> qdrant_client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">QdrantClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">host</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"localhost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> port</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">6333</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">vector_store </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> QdrantVectorStore</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">client</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> collection_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow_doc"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">core </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> StorageContext</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> VectorStoreIndex</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">storage_context </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> StorageContext</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_defaults</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">vector_store</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">vector_store</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">index </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> VectorStoreIndex</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_documents</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    documents</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">documents</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    storage_context</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">storage_context</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Of course, you can use your preferred vector store here. LlamaIndex supports a variety of vector databases, such as <a href="https://docs.llamaindex.ai/en/stable/examples/vector_stores/FaissIndexDemo/" target="_blank" rel="noopener noreferrer">FAISS</a>, <a href="https://docs.llamaindex.ai/en/stable/examples/vector_stores/ChromaIndexDemo/" target="_blank" rel="noopener noreferrer">Chroma</a>, and <a href="https://docs.llamaindex.ai/en/stable/examples/vector_stores/DatabricksVectorSearchDemo/" target="_blank" rel="noopener noreferrer">Databricks Vector Search</a>. If you choose an alternative, follow the relevant LlamaIndex documentation and update the <code>workflow/workflow.py</code> file accordingly.</p>
<p>In addition to evaluating the vector search retrieval, we will assess the keyword-based retriever (BM25) later. Let's set up local document storage to enable BM25 retrieval in the workflow.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">core</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">node_parser </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SentenceSplitter</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">bm25 </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> BM25Retriever</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">splitter </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> SentenceSplitter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">chunk_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">512</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">nodes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> splitter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get_nodes_from_documents</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">documents</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">bm25_retriever </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> BM25Retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_defaults</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">nodes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">bm25_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">persist</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">".bm25_retriever"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-define-a-workflow">6. Define a Workflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#6-define-a-workflow" class="hash-link" aria-label="Direct link to 6. Define a Workflow" title="Direct link to 6. Define a Workflow">​</a></h2>
<p>Now that the environment and data sources are ready, we can build the workflow and experiment with it. The complete workflow code is defined in the <code>workflow</code> directory. Let's explore some key components of the implementation.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="events">Events<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#events" class="hash-link" aria-label="Direct link to Events" title="Direct link to Events">​</a></h3>
<p>The <code>workflow/events.py</code> file defines all the events used within the workflow. These are simple Pydantic models that carry information between workflow steps. For example, the <code>VectorSearchRetrieveEvent</code> triggers the vector search step by passing the user's query.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">VectorSearchRetrieveEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">Event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Event for triggering VectorStore index retrieval step."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="prompts">Prompts<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#prompts" class="hash-link" aria-label="Direct link to Prompts" title="Direct link to Prompts">​</a></h3>
<p>Throughout the workflow execution, we call LLMs multiple times. The prompt templates for these LLM calls are defined in the <code>workflow/prompts.py</code> file.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-class">Workflow Class<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#workflow-class" class="hash-link" aria-label="Direct link to Workflow Class" title="Direct link to Workflow Class">​</a></h3>
<p>The main workflow class is defined in <code>workflow/workflow.py</code>. Let's break down how it works.</p>
<p>The constructor accepts a retrievers argument, which specifies the retrieval methods to be used in the workflow. For instance, if <code>["vector_search", "bm25"]</code> is passed, the workflow performs vector search and keyword-based search, skipping web search.</p>
<p>💡 Deciding which retrievers to utilize dynamically allows us to experiment with different retrieval strategies without needing to replicate nearly identical model code.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">HybridRAGWorkflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">Workflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    VALID_RETRIEVERS </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bm25"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"web_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> retrievers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Settings</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> retrievers </span><span class="token keyword" style="color:rgb(86, 156, 214)">or</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> invalid_retrievers </span><span class="token operator" style="color:rgb(212, 212, 212)">:=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">set</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">VALID_RETRIEVERS</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Invalid retrievers specified: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">invalid_retrievers</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_vs_retriever </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_bm25_retriever </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bm25"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_web_search </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"web_search"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_vs_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            qd_client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> qdrant_client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">QdrantClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">host</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">_QDRANT_HOST</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> port</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">_QDRANT_PORT</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            vector_store </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> QdrantVectorStore</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">client</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">qd_client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> collection_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">_QDRANT_COLLECTION_NAME</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            index </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> VectorStoreIndex</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_vector_store</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">vector_store</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">vector_store</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">vs_retriever </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">as_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_bm25_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">bm25_retriever </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> BM25Retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_persist_dir</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">_BM25_PERSIST_DIR</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_web_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">tavily_tool </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> TavilyToolSpec</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">api_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"TAVILY_AI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The workflow begins by executing a step that takes the <code>StartEvent</code> as input, which is the <code>route_retrieval</code> step in this case. This step inspects the retrievers parameter and triggers the necessary retrieval steps. By using the <code>send_event()</code> method of the context object, multiple events can be dispatched in parallel from this single step.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># If no retriever is specified, proceed directly to the final query step with an empty context</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">len</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> QueryEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">context</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">""</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Trigger the retrieval steps based on the configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_vs_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send_event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">VectorSearchRetrieveEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_bm25_retriever</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send_event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">BM25RetrieveEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_use_web_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send_event</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">TransformQueryEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The retrieval steps are straightforward. However, the web search step is more advanced as it includes an additional step to transform the user's question into a search-friendly query using an LLM.</p>
<p>The results from all the retrieval steps are aggregated in the <code>gather_retrieval_results</code> step. Here, the <code>ctx.collect_events()</code> method is used to poll for the results of the asynchronously executed steps.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">collect_events</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ev</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">RetrievalResultEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">len</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Passing all results from multiple retrievers often leads to a large context with unrelated or duplicate content. To address this, we need to filter and select the most relevant results. While a score-based approach is common, web search results do not return similarity scores. Therefore, we use an LLM to sort and filter out irrelevant results. The rerank step achieves this by leveraging the built-in reranker integration with <a href="https://github.com/sunnweiwei/RankGPT" target="_blank" rel="noopener noreferrer">RankGPT</a>.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">    reranker </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RankGPTRerank</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">llm</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> top_n</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    reranked_nodes </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> reranker</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">postprocess_nodes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ev</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">nodes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> query_str</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    reranked_context </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"\n"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">node</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">text </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> node </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> reranked_nodes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally, the reranked context is passed to the LLM along with the user query to generate the final answer. The result is returned as a <code>StopEvent</code> with the <code>result</code> key.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@step</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">query_result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ev</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> QueryEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> StopEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Get result with relevant text."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        query </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">await</span><span class="token plain"> ctx</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"query"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> FINAL_QUERY_TEMPLATE</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">format</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">context</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">ev</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> query</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">query</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">complete</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">text</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> StopEvent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">result</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, let's instantiate the workflow and run it.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Workflow with VS + BM25 retrieval</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> workflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">workflow </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> HybridRAGWorkflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">workflow </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> HybridRAGWorkflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">retrievers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bm25"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> timeout</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">60</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">await</span><span class="token plain"> workflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">query</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Why use MLflow with LlamaIndex?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-log-the-workflow-in-an-mlflow-experiment">7. Log the Workflow in an MLflow Experiment<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#7-log-the-workflow-in-an-mlflow-experiment" class="hash-link" aria-label="Direct link to 7. Log the Workflow in an MLflow Experiment" title="Direct link to 7. Log the Workflow in an MLflow Experiment">​</a></h2>
<p>Now we want to run the workflow with various different retrieval strategies and evaluate the performance of each. However, before running the evaluation, we'll log the model in MLflow to track both the model and its performance within an <strong>MLflow Experiment</strong>.</p>
<p>For the LlamaIndex Workflow, we use the new <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">Model-from-code</a> method, which logs models as standalone Python scripts. This approach avoids the risks and instability associated with serialization methods like pickle, relying instead on code as the single source of truth for the model definition. When combined with MLflow's environment-freezing capability, it provides a reliable way to persist models. For more details, refer to the <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">MLflow documentation</a>.</p>
<p>💡 In the <code>workflow</code> directory, there's a <code>model.py</code> script that imports the <code>HybridRAGWorkflow</code> and instantiates it with dynamic configurations passed via the <code>model_config</code> parameter during logging. This design allows you to track models with different configurations without duplicating the model definition.</p>
<p>We'll start an MLflow Run and log the model script <code>model.py</code> with different configurations using the <a href="https://mlflow.org/docs/latest/python_api/mlflow.llama_index.html#mlflow.llama_index.log_model" target="_blank" rel="noopener noreferrer">mlflow.llama_index.log_model()</a> API.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Different configurations we will evaluate. We don't run evaluation for all permutation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># for demonstration purpose, but you can add as many patterns as you want.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">run_name_to_retrievers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># 1. No retrievers (prior knowledge in LLM).</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"none"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># 2. Vector search retrieval only.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"vs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># 3. Vector search and keyword search (BM25)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"vs + bm25"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bm25"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># 4. All retrieval methods including web search.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"vs + bm25 + web"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"vector_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bm25"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"web_search"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create an MLflow Run and log model with each configuration.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">models </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> run_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> retrievers </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> run_name_to_retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">run_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">run_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Specify the model Python script.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            llama_index_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"workflow/model.py"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Specify retrievers to use.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"retrievers"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> retrievers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define dependency files to save along with the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            code_paths</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"workflow"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Subdirectory to save artifacts (not important)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now open the MLflow UI again, and this time it should show 4 MLflow Runs are recorded with different <code>retrievers</code> parameter values. By clicking each Run name and navigate to the "Artifacts" tab, you can see MLflow records the model and various metadata, such as dependency versions and settings.</p>
<p><img loading="lazy" alt="MLflow Runs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_runs-c68e66f1a2d4b77801bf88bea021d142.png" width="1073" height="352" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-enable-mlflow-tracing">8. Enable MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#8-enable-mlflow-tracing" class="hash-link" aria-label="Direct link to 8. Enable MLflow Tracing" title="Direct link to 8. Enable MLflow Tracing">​</a></h2>
<p>Before running the evaluation, there’s one final step: enabling <strong>MLflow Tracing</strong>. We'll dive into this feature and why we do this here later, but for now, you can enable it with a simple one-line command. MLflow will automatically trace every LlamaIndex execution.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">llama_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-evaluate-the-workflow-with-different-retriever-strategies">9. Evaluate the Workflow with Different Retriever Strategies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#9-evaluate-the-workflow-with-different-retriever-strategies" class="hash-link" aria-label="Direct link to 9. Evaluate the Workflow with Different Retriever Strategies" title="Direct link to 9. Evaluate the Workflow with Different Retriever Strategies">​</a></h2>
<p>The example repository includes a sample evaluation dataset, <code>mlflow_qa_dataset.csv</code>, containing 30 question-answer pairs related to MLflow.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">eval_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">read_csv</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"data/mlflow_qa_dataset.csv"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">display</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">eval_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">head</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To evaluate the workflow, use the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer">mlflow.evaluate()</a> API, which requires (1) your dataset, (2) the logged model, and (3) the metrics you want to compute.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> latency</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> answer_correctness</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_info </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">run_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">run_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        result </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">evaluate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Pass the URI of the logged model above</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            data</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">eval_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Specify the column for ground truth answers.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            targets</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ground_truth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the metrics to compute.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            extra_metrics</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                latency</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                answer_correctness</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"openai:/gpt-4o-mini"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># The answer_correctness metric requires "inputs" column to be</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># present in the dataset. We have "query" instead so need to</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># specify the mapping in `evaluator_config` parameter.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            evaluator_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"col_mapping"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"query"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In this example, we evaluate the model with two metrics:</p>
<ol>
<li><strong>Latency</strong>: Measures the time taken to execute a workflow for a single query.</li>
<li><strong>Answer Correctness</strong>: Evaluates the accuracy of answers based on the ground truth, scored by the OpenAI GPT-4o model on a 1–5 scale.</li>
</ol>
<p>These metrics are just for demonstration purposes—you can add additional metrics like toxicity or faithfulness, or even create your own. See the MLflow documentation for the full set of <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#llm-evaluation-metrics" target="_blank" rel="noopener noreferrer">built-in metrics</a>
and how to define <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#creating-custom-llm-evaluation-metrics" target="_blank" rel="noopener noreferrer">custom metrics</a>.</p>
<p>The evaluation process will take a few minutes. Once completed, you can view the results in the MLflow UI. Open the Experiment page and click on the chart icon 📈 above the Run list.</p>
<p><img loading="lazy" alt="Evaluation Result" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_result_chart-f72c0b1c2b196cc540674020e201c6f4.png" width="2327" height="945" class="img_ev3q"></p>
<p>*💡 The evaluation results can be different depending on model set up and some randomness.</p>
<p>The first row shows bar charts for the answer correctness metrics, while the second row displays latency results. The best-performing combination is "Vector Search + BM25". Interestingly, adding web search not only increases latency significantly but also decreases answer correctness.</p>
<p>Why does this happen? It appears some answers from the web-search-enabled model are off-topic. For example, in response to a question about starting the Model Registry, the web-search model provides an unrelated answer about model deployment, while the "vs + bm25" model offers a correct response.</p>
<p><img loading="lazy" alt="Answer Comparison" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_answer_comparison-bad74ed92a791dae40c2bdce61763db4.png" width="1092" height="359" class="img_ev3q"></p>
<p>Where did this incorrect answer come from? This seems to be a retriever issue, as we only changed the retrieval strategy. However, it's difficult to see what each retriever returned from the final result. To gain deeper insights into what's happening behind the scenes, MLflow Tracing is the perfect solution.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="10-inspecting-quality-issues-with-mlflow-trace">10. Inspecting Quality Issues with MLflow Trace<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#10-inspecting-quality-issues-with-mlflow-trace" class="hash-link" aria-label="Direct link to 10. Inspecting Quality Issues with MLflow Trace" title="Direct link to 10. Inspecting Quality Issues with MLflow Trace">​</a></h2>
<p><a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow Tracing</a> is a new feature that brings observability to LLM applications. It integrates seamlessly with LlamaIndex, recording all inputs, outputs, and metadata about intermediate steps during workflow execution. Since we called <code>mlflow.llama_index.autolog()</code> at the start, every LlamaIndex operation has been traced and recorded in the MLflow Experiment.</p>
<p>To inspect the trace for a specific question from the evaluation, navigate to the "Traces" tab on the experiment page. Look for the row with the particular question in the request column and the run name "vs + bm25 + web." Clicking the request ID link opens the Trace UI, where you can view detailed information about each step in the execution, including inputs, outputs, metadata, and latency.</p>
<p><img loading="lazy" alt="Trace" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/llama_index_workflow_trace-1783d50c5a0624d8fc1a943806152559.png" width="2990" height="938" class="img_ev3q"></p>
<p>In this case, we identified the issue by examining the reranker step. The web search retriever returned irrelevant context related to model serving, and the reranker incorrectly ranked it as the most relevant. With this insight, we can determine potential improvements, such as refining the reranker to better understand MLflow topics, improving web search precision, or even removing the web search retriever altogether.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-llama-index-workflow#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this blog, we explored how the combination of LlamaIndex and MLflow can elevate the development of Retrieval-Augmented Generation (RAG) workflows, bringing together powerful model management and observability capabilities. By integrating multiple retrieval strategies (such as vector search, BM25, and web search) we demonstrated how flexible retrieval can enhance the performance of LLM-driven applications.</p>
<ul>
<li><strong>Experiment Tracking</strong> allowed us to organize and log different workflow configurations, ensuring reproducibility and enabling us to track model performance across multiple runs.</li>
<li><strong>MLflow Evaluate</strong> enabled us to easily log and evaluate the workflow with different retriever strategies, using key metrics like latency and answer correctness to compare performance.</li>
<li><strong>MLflow UI</strong> gave us a clear visualization of how various retrieval strategies impacted both accuracy and latency, helping us identify the most effective configurations.</li>
<li><strong>MLflow Tracing</strong>, integrated with LlamaIndex, provided detailed observability into each step of the workflow for diagnosing quality issues, such as incorrect reranking of search results.</li>
</ul>
<p>With these tools, you have a complete framework for building, logging, and optimizing RAG workflows. As LLM technology continues to evolve, the ability to track, evaluate, and fine-tune every aspect of model performance will be essential. We highly encourage you to experiment further and see how these tools can be tailored to your own applications.</p>
<p>To continue learning, explore the following resources:</p>
<ul>
<li>Learn more about the <a href="https://mlflow.org/docs/latest/llms/llama-index/index.html" target="_blank" rel="noopener noreferrer">MLflow LlamaIndex integration</a>.</li>
<li>Discover additional MLflow LLM features at <a href="https://mlflow.org/docs/latest/llms/index.html" target="_blank" rel="noopener noreferrer">LLMs in MLflow</a>.</li>
<li>Deploy your workflow to a serving endpoint with <a href="https://mlflow.org/docs/latest/deployment/index.html" target="_blank" rel="noopener noreferrer">MLflow Deployment</a>.</li>
<li>Check out more <a href="https://docs.llamaindex.ai/en/stable/module_guides/workflow/#examples" target="_blank" rel="noopener noreferrer">Workflow examples</a> from LlamaIndex.</li>
</ul>]]></content>
        <author>
            <name>Yuki Watanabe</name>
            <uri>https://www.linkedin.com/in/yuki-watanabe-a04528164/</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="mlops" term="mlops"/>
        <category label="mlflow-evaluate" term="mlflow-evaluate"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLM as judge]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge"/>
        <updated>2024-10-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Perform LLM Evaluations with custom metrics]]></summary>
        <content type="html"><![CDATA[<p>In this blog post, we'll dive on a journey to revolutionize how we evaluate language models. We'll explore the power of MLflow Evaluate and harness the capabilities of Large Language Models (LLMs) as judges. By the end, you'll learn how to create custom metrics, implement LLM-based evaluation, and apply these techniques to real-world scenarios. Get ready to transform your model assessment process and gain deeper insights into your AI's performance!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-challenge-of-evaluating-language-models">The Challenge of Evaluating Language Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#the-challenge-of-evaluating-language-models" class="hash-link" aria-label="Direct link to The Challenge of Evaluating Language Models" title="Direct link to The Challenge of Evaluating Language Models">​</a></h2>
<p>Evaluating large language models (LLMs) and natural language processing (NLP) systems presents several challenges, primarily due to their complexity and the diversity of tasks they can perform.</p>
<p>One major difficulty is creating metrics that comprehensively measure performance across varied applications, from generating coherent text to understanding nuanced human emotions. Traditional benchmarks often fail to capture these subtleties, leading to incomplete assessments.</p>
<p>An LLM acting as a judge can address these issues by leveraging its extensive training data to provide a more nuanced evaluation, offering insights into model behavior and areas needing improvement. For instance, an LLM can analyze whether a model generates text that is not only grammatically correct but also contextually appropriate and engaging, something more static metrics might miss.</p>
<p>However, to move forward effectively, we need more than just better evaluation methods. Standardized experimentation setups are essential to ensure that comparisons between models are both fair and replicable. A uniform framework for testing and evaluation would enable researchers to build on each other's work, leading to more consistent progress and the development of more robust models.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-mlflow-llm-evaluate">Introducing MLflow LLM Evaluate<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#introducing-mlflow-llm-evaluate" class="hash-link" aria-label="Direct link to Introducing MLflow LLM Evaluate" title="Direct link to Introducing MLflow LLM Evaluate">​</a></h2>
<p><a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">MLflow LLM Evaluate</a> is a powerful function within the MLflow ecosystem that allows for comprehensive model assessment by providing a standardized experiment setup. It supports both built-in metrics and custom (LLM) metrics, making it an ideal tool for evaluating complex language tasks. With <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer">MLflow LLM Evaluate</a>, you can:</p>
<ul>
<li>Evaluate models against multiple metrics simultaneously</li>
<li>Use pre-defined metrics for specific model types (e.g., question-answering, text-summarization and pure text)</li>
<li>Create custom metrics, including those that use LLMs as judges using <a href="https://mlflow.org/docs/latest/python_api/mlflow.metrics.html#mlflow.metrics.genai.make_genai_metric" target="_blank" rel="noopener noreferrer">mlflow.metrics.genai.make_genai_metric()</a>
and
<a href="https://mlflow.org/docs/latest/python_api/mlflow.metrics.html#mlflow.metrics.genai.make_genai_metric_from_prompt" target="_blank" rel="noopener noreferrer">mlflow.metrics.genai.make_genai_metric_from_prompt()</a></li>
</ul>
<p><img loading="lazy" alt="MLflow Evaluate" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/mlflow_evaluate.drawio-630de00051316c6b28dab80e5626f630.svg" width="700" height="300" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conquering-new-markets-with-an-llm-as-a-judge">Conquering new markets with an LLM as a judge<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#conquering-new-markets-with-an-llm-as-a-judge" class="hash-link" aria-label="Direct link to Conquering new markets with an LLM as a judge" title="Direct link to Conquering new markets with an LLM as a judge">​</a></h2>
<p>Imagine you're part of a global travel agency, "WorldWide Wandercorp," that's expanding its reach to Spanish-speaking countries.</p>
<p>Your team has developed an AI-powered translation system to help create culturally appropriate marketing materials and customer communications. However, as you begin to use this system, you realize that traditional evaluation metrics, such as BLEU (Bilingual Evaluation Understudy), fall short in capturing the nuances of language translation, especially when it comes to preserving cultural context and idiomatic expressions.</p>
<p>For instance, consider the phrase "kick the bucket." A direct translation might focus on the literal words, but the idiom actually means "to die." A traditional metric like BLEU may incorrectly evaluate the translation as adequate if the translated words match a reference translation, even if the cultural meaning is lost. In such cases, the metric might score the translation highly despite it being completely inappropriate in context. This could lead to embarrassing or culturally insensitive marketing content, which is something your team wants to avoid.</p>
<p>You need a way to evaluate whether the translation not only is accurate but also preserves the intended meaning, tone, and cultural context. This is where <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer">MLflow Evaluate</a> and LLMs (Large Language Models) as judges come into play. These tools can assess translations more holistically by considering context, idiomatic expressions, and cultural relevance, providing a more reliable evaluation of the AI’s output.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-metrics-tailoring-evaluation-to-your-needs">Custom Metrics: Tailoring Evaluation to Your Needs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#custom-metrics-tailoring-evaluation-to-your-needs" class="hash-link" aria-label="Direct link to Custom Metrics: Tailoring Evaluation to Your Needs" title="Direct link to Custom Metrics: Tailoring Evaluation to Your Needs">​</a></h2>
<p>In the following section, we’ll implement three metrics:</p>
<ul>
<li>The <code>"cultural_sensitivity"</code> metric ensures translations maintain cultural context and appropriateness.</li>
<li>The <code>"faithfulness"</code> metric checks that chatbot responses align accurately with company policies and retrieved content.</li>
<li>The <code>"toxicity"</code> metric evaluates responses for harmful or inappropriate content, ensuring respectful customer interactions.</li>
</ul>
<p>These metrics will help Worldwide WanderAgency ensure their AI-driven translations and interactions meet their specific needs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="evaluating-worldwide-wanderagencys-ai-systems">Evaluating Worldwide WanderAgency's AI Systems<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#evaluating-worldwide-wanderagencys-ai-systems" class="hash-link" aria-label="Direct link to Evaluating Worldwide WanderAgency's AI Systems" title="Direct link to Evaluating Worldwide WanderAgency's AI Systems">​</a></h2>
<p>Now that we understand WanderAgency's challenges, let's dive into a code walkthrough to address them. We'll implement custom metrics to measure AI performance and build a gauge visualization chart for sharing results with stakeholders.</p>
<p>We'll start by evaluating a language translation model, focusing on the "cultural_sensitivity" metric to ensure it preserves cultural nuances. This will help WanderAgency maintain high standards in global communication.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cultural-sensitivity-metric">Cultural Sensitivity Metric<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#cultural-sensitivity-metric" class="hash-link" aria-label="Direct link to Cultural Sensitivity Metric" title="Direct link to Cultural Sensitivity Metric">​</a></h3>
<p>The travel agency wants to ensure their translations are not only accurate but also culturally appropriate.
To achieve this they are considering creating a custom metric that allows Worldwide WanderAgency to quantify how well their translations maintain cultural context and idiomatic expressions.</p>
<p>For instance, a phrase that is polite in one culture might be inappropriate in another.
In English, addressing someone as "Dear" in a professional email might be seen as polite. However, in Spanish, using "Querido" in a professional context can be too personal and inappropriate.</p>
<p>How can we evaluate such an abstract concept in a systematic way? Traditional Metrics would fall short so we need a better way of doing it. In this case LLM as a judge would be a great fit!
For this use case let's create a "cultural_sensitivity" metric.</p>
<p>Here's a brief overview of the process:
Start by installing all the necessary libraries for this demo to work.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">pip install mlflow&gt;=2.14.1 openai  transformers torch torchvision evaluate datasets tiktoken fastapi rouge_score textstat tenacity plotly ipykernel nbformat&gt;=5.10.4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We will be using gpt3.5 and gpt4 during this example for that let's start by making sure our <a href="https://mlflow.org/docs/latest/llms/openai/notebooks/openai-quickstart.html#API-Key-Security-Overview" target="_blank" rel="noopener noreferrer">OpenAI key is setup</a>.</p>
<p>Import the necessary libraries.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Run a quick validation that we have an entry for the OPEN_API_KEY within environment variables</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY environment variable must be set"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> openai</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When using the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a> function, your large language model (LLM) can take one of the following forms:</p>
<ol>
<li>A <code>mlflow.pyfunc.PyFuncModel()</code> — typically an MLflow model.</li>
<li>A Python function that accepts strings as inputs and returns a single string as output.</li>
<li>An <code>MLflow Deployments</code> endpoint URI.</li>
<li><code>model=None</code> if the data you are providing has already been scored by a model, and you do not need to specify one.</li>
</ol>
<p>For this example, we will use an MLflow model.</p>
<p>We’ll begin by logging a translation model in MLflow. For this tutorial, we'll use GPT-3.5 with a defined system prompt.</p>
<p>In a production environment, you would typically experiment with different prompts and models to determine the most suitable configuration for your use case. For more details, refer to MLflow’s <a href="https://mlflow.org/docs/latest/llms/prompt-engineering/index.html" target="_blank" rel="noopener noreferrer">Prompt Engineering UI</a>.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">system_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Translate the following sentences into Spanish"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Let's set up an experiment to make it easier to track our results</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"/Path/to/your/experiment"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">basic_translation_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">openai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-3.5-turbo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    task</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">openai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">chat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">completions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    messages</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> system_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"{user_input}"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's test the model to make sure it works.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">basic_translation_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Hello, how are you?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Output = ['¡Hola, ¿cómo estás?']</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To use <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a>, we first need to prepare sample data that will serve as input to our LLM. In this scenario, the input would consist of the content the company is aiming to translate.</p>
<p>For demonstration purposes, we will define a set of common English expressions that we want the model to translate.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Prepare evaluation data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">eval_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"I'm over the moon about the news!"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Spill the beans."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Bite the bullet."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Better late than never."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To meet the objectives of the travel agency, we will define custom metrics that evaluate the quality of translations. In particular, we need to assess how faithfully the translations capture not only the literal meaning but also cultural nuances.</p>
<p>By default, <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a> uses <code>openai:/gpt-4</code> as the evaluation model. However, you also have the option to use a <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#selecting-the-llm-as-judge-model" target="_blank" rel="noopener noreferrer">local model for evaluation</a>, such as a model wrapped in a PyFunc (e.g., Ollama).</p>
<p>For this example, we will use GPT-4 as the evaluation model.</p>
<p>To begin, provide a few examples that illustrate good and poor translation scores.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Define the custom metric</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">cultural_sensitivity </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">make_genai_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"cultural_sensitivity"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    definition</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Assesses how well the translation preserves cultural nuances and idioms."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    grading_prompt</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Score from 1-5, where 1 is culturally insensitive and 5 is highly culturally aware."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    examples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Break a leg!"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"¡Rómpete una pierna!"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This is a literal translation that doesn't capture the idiomatic meaning."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Break a leg!"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"¡Mucha mierda!"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation uses the equivalent Spanish theater idiom, showing high cultural awareness."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"It's raining cats and dogs."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Está lloviendo gatos y perros."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This literal translation does not convey the idiomatic meaning of heavy rain."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"It's raining cats and dogs."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Está lloviendo a cántaros."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation uses a Spanish idiom that accurately conveys the meaning of heavy rain."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Kick the bucket."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Patear el balde."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This literal translation fails to convey the idiomatic meaning of dying."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Kick the bucket."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Estirar la pata."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation uses the equivalent Spanish idiom for dying, showing high cultural awareness."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Once in a blue moon."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Una vez en una luna azul."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This literal translation does not capture the rarity implied by the idiom."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Once in a blue moon."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"De vez en cuando."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation captures the infrequency but lacks the idiomatic color of the original."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The ball is in your court."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"La pelota está en tu cancha."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation is understandable but somewhat lacks the idiomatic nuance of making a decision."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The ball is in your court."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Te toca a ti."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"This translation accurately conveys the idiomatic meaning of it being someone else's turn to act."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"openai:/gpt-4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    parameters</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"temperature"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-toxicity-metric">The Toxicity Metric<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#the-toxicity-metric" class="hash-link" aria-label="Direct link to The Toxicity Metric" title="Direct link to The Toxicity Metric">​</a></h3>
<p>In addition to this custom metric let's use MLflow built-in metrics for the evaluators. In this case MLflow wll use roberta-hate-speech model to detect the <a href="https://huggingface.co/spaces/evaluate-measurement/toxicity" target="_blank" rel="noopener noreferrer">toxicity</a>. This metric evaluates responses for any harmful or inappropriate content, reinforcing the company's commitment to a positive customer experience.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Log and evaluate the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">evaluate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        basic_translation_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        data</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">eval_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"default"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        extra_metrics</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">cultural_sensitivity</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluator_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"col_mapping"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can retrieve the final results as such:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">results</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">tables</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"eval_results_table"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<table><thead><tr><th></th><th>llm_inputs</th><th>outputs</th><th>token_count</th><th>toxicity/v1/score</th><th>flesch_kincaid_grade_level/v1/score</th><th>ari_grade_level/v1/score</th><th>cultural_sensitivity/v1/score</th><th>cultural_sensitivity/v1/justification</th></tr></thead><tbody><tr><td>0</td><td>I'm over the moon about the news!</td><td>¡Estoy feliz por la noticia!</td><td>9</td><td>0.000258</td><td>5.2</td><td>3.7</td><td>4</td><td>The translation captures the general sentiment...</td></tr><tr><td>1</td><td>Spill the beans.</td><td>Revela el secreto.</td><td>7</td><td>0.001017</td><td>9.2</td><td>5.2</td><td>5</td><td>The translation accurately captures the idioma...</td></tr><tr><td>2</td><td>Bite the bullet.</td><td>Morder la bala.</td><td>7</td><td>0.001586</td><td>0.9</td><td>3.6</td><td>2</td><td>The translation "Morder la bala" is a litera...</td></tr><tr><td>3</td><td>Better late than never.</td><td>Más vale tarde que nunca.</td><td>7</td><td>0.004947</td><td>0.5</td><td>0.9</td><td>5</td><td>The translation accurately captures the idioma...</td></tr></tbody></table>
<p>Let's analyze the final metrics...</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">cultural_sensitivity_score </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> results</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'cultural_sensitivity/v1/mean'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Cultural Sensitivity Score: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">cultural_sensitivity_score</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">toxicity_score </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> results</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'toxicity/v1/mean'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate non-toxicity score</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">non_toxicity_score </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"{:.2f}"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">format</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> toxicity_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Non-Toxicity Score: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">non_toxicity_score</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">%"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Output:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Cultural Sensitivity Score: 3.75</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Pureness Score: 99.80</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It is often the case we want to monitor and track these metrics on a dashboard so both data scientists and stakeholders have an understanding of the performance and reliability of these solutions.</p>
<p>For this example let's create a gauge to display the final metric.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> plotly</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph_objects </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> go</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> plotly</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">subplots </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> make_subplots</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">create_gauge_chart</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">value1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> title1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> value2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> title2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a subplot figure with two columns</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    fig </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> make_subplots</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">rows</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> cols</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> specs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'type'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'indicator'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'type'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'indicator'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add the first gauge chart</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    fig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">go</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Indicator</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mode </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"gauge+number"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        value </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> value1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        title </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'text'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> title1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        gauge </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'axis'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'range'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> col</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add the second gauge chart</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    fig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">go</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Indicator</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mode </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"gauge+number"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        value </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> value2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        title </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'text'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> title2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        gauge </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'axis'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">'range'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> col</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Update layout</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    fig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">update_layout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">height</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">400</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> width</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">800</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Show figure</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    fig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">create_gauge_chart</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">cultural_sensitive_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Cultural Sensitivity Score"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">non_toxicity_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Non Toxicity Score"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="Gauge Chart" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/gauge-c21a7facbde6cfee6d102ac805057db2.png" width="800" height="400" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-faithfulness-metric">The Faithfulness Metric<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#the-faithfulness-metric" class="hash-link" aria-label="Direct link to The Faithfulness Metric" title="Direct link to The Faithfulness Metric">​</a></h3>
<p>As Worldwide WanderAgency's AI grows, they add a customer service chatbot that handles questions in multiple languages. This chatbot uses a RAG (Retrieval-Augmented Generation) system, which means it retrieves information from a database or documents and then generates an answer based on that information.</p>
<p>It's important that the answers provided by the chatbot stay true to the information it retrieves. To make sure of this, we create a "faithfulness" metric. This metric checks how well the chatbot's responses match the materials it’s supposed to be based on, ensuring the information given to customers is accurate.</p>
<p>For example, If the retrieved document says "Returns are accepted within 30 days," and the chatbot replies with "Our return policy is flexible and varies by region," it is not aligning well with the retrieved material. This inaccurate response (bad faithfulness) could mislead customers and create confusion.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-mlflow-to-evaluate-rag---faithfulness">Using MLflow to Evaluate RAG - Faithfulness<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#using-mlflow-to-evaluate-rag---faithfulness" class="hash-link" aria-label="Direct link to Using MLflow to Evaluate RAG - Faithfulness" title="Direct link to Using MLflow to Evaluate RAG - Faithfulness">​</a></h3>
<p>Let's evaluate how well our chatbot is doing in sticking to the retrieved information. Instead of using an MLflow model this time, we’ll use a custom function to define the faithfulness metric and see how aligned the chatbot's answers are with the data it pulls from.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Prepare evaluation data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">eval_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's policy on employee training?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Our company offers various training programs to support employee development. Employees are required to complete at least one training course per year related to their role. Additional training opportunities are available based on performance reviews." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's policy on sick leave?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Employees are entitled to 10 days of paid sick leave per year. Sick leave can be used for personal illness or to care for an immediate family member. A doctor's note is required for sick leave exceeding three consecutive days." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: How does the company handle performance reviews?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Performance reviews are conducted annually. Employees are evaluated based on their job performance, goal achievement, and overall contribution to the team. Feedback is provided, and development plans are created to support employee growth." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now let's define some examples for this faithfulness metric.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">examples </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's policy on remote work?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Our company supports a flexible working environment. Employees can work remotely up to three days a week, provided they maintain productivity and attend all mandatory meetings." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Employees can work remotely up to three days a week if they maintain productivity and attend mandatory meetings."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The answer is accurate and directly related to the question and context provided."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's policy on remote work?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Our company supports a flexible working environment. Employees can work remotely up to three days a week, provided they maintain productivity and attend all mandatory meetings." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Employees are allowed to work remotely as long as they want."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The answer is somewhat related but incorrect because it does not mention the three-day limit."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's policy on remote work?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Our company supports a flexible working environment. Employees can work remotely up to three days a week, provided they maintain productivity and attend all mandatory meetings." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Our company supports flexible work arrangements."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The answer is related to the context but does not specifically answer the question about the remote work policy."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Question: What is the company's annual leave policy?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">context: "Employees are entitled to 20 days of paid annual leave per year. Leave must be approved by the employee's direct supervisor and should be planned in advance to ensure minimal disruption to work." """</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            output</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Employees are entitled to 20 days of paid annual leave per year, which must be approved by their supervisor."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            score</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            justification</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"The answer is accurate and directly related to the question and context provided."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">#  Define the custom metric</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">faithfulness </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">make_genai_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"faithfulness"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    definition</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Assesses how well the answer relates to the question and provided context."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    grading_prompt</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Score from 1-5, where 1 is not related at all and 5 is highly relevant and accurate."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    examples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">examples</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Define out LLM function (in this case it can be any function that follows certain input/output formats that <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a>).</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Using custom function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">my_llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">inputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    answers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    system_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please answer the following question in formal language based on the context provided."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> inputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iterrows</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'INPUTS:'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> row</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        completion </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> openai</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">chat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">completions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">create</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-3.5-turbo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            messages</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> system_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">row</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        answers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">completion</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">choices</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> answers</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Resulting in a code that is similar to what we did before...</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">evaluate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        my_llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        eval_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"default"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        extra_metrics</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">faithfulness</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluator_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"col_mapping"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="genai-metrics">GenAI Metrics<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#genai-metrics" class="hash-link" aria-label="Direct link to GenAI Metrics" title="Direct link to GenAI Metrics">​</a></h3>
<p>Alternatively, we can leverage MLflow's built-in metrics for generative AI, using the same examples.</p>
<p>MLflow provides several <a href="https://mlflow.org/docs/latest/python_api/mlflow.metrics.html?highlight=genai%20answer#generative-ai-metrics" target="_blank" rel="noopener noreferrer">built-in metrics</a> that use an LLM as a judge. Despite differences in implementation, these metrics are used in the same way. Simply include them in the <code>extra_metrics</code> argument of the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a> function.</p>
<p>In this case, we will use MLflow’s built-in <a href="https://mlflow.org/docs/latest/python_api/mlflow.metrics.html?highlight=genai%20answer#mlflow.metrics.genai.faithfulness" target="_blank" rel="noopener noreferrer">faithfulness metric</a>.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">genai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> EvaluationExample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> faithfulness</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">faithfulness_metric </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> faithfulness</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"openai:/gpt-4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">faithfulness_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a> simplifies the process of providing grading context, such as the documents retrieved by our system, directly into the evaluation. This feature integrates seamlessly with <a href="https://python.langchain.com/docs/concepts/#retrievers" target="_blank" rel="noopener noreferrer">LangChain's retrievers</a>, allowing you to supply the context for evaluation as a dedicated column. For more details, refer to <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation-llama2.html" target="_blank" rel="noopener noreferrer">this example</a>.</p>
<p>In this case, since our retrieved documents are already included within the final prompt and we are not leveraging LangChain for this tutorial, we will simply map the <code>llm_input</code> column as our grading context.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">evaluate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        my_llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        eval_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"text"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"default"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        extra_metrics</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">faithfulness_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        evaluator_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"col_mapping"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"context"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"llm_inputs"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After the evaluation we get the following results:
<img loading="lazy" alt="Gauge faithfulness Chart" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/faithfulness-246906b0fa032bfe3bed8cdee648d7bf.png" width="800" height="400" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/llm-as-judge#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>By combining the Cultural Sensitivity score with our other calculated metrics, our travel agency can further refine its model to ensure the delivery of high-quality content across all languages. Moving forward, we can revisit and adjust the prompts used to boost our Cultural Sensitivity score. Alternatively, we could fine-tune a smaller model to maintain the same high level of cultural sensitivity while reducing costs. These steps will help us provide even better service to the agency's diverse customer base.</p>
<p><a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.evaluate" target="_blank" rel="noopener noreferrer"><code>mlflow.evaluate()</code></a>, combined with LLMs as judges, opens up new possibilities for nuanced and context-aware model evaluation. By creating custom metrics tailored to specific aspects of model performance, data scientists can gain deeper insights into their models' strengths and weaknesses.</p>
<p>The flexibility offered by <code>make_genai_metric()</code> allows you to create evaluation criteria that are perfectly suited to your specific use case. Whether you need structured guidance for your LLM judge or want full control over the prompting process, MLflow provides the tools you need.</p>
<p>As you explore MLflow evaluate and LLM-based metrics, remember that the key lies in designing thoughtful evaluation criteria and providing clear instructions to your LLM judge. With these tools at your disposal, you're well-equipped to take your model evaluation to the next level, ensuring that your language models not only perform well on traditional metrics but also meet the nuanced requirements of real-world applications.</p>
<p>The built-in metrics, such as toxicity, offer standardized assessments that are crucial for ensuring the safety and accessibility of model outputs.</p>
<p>As a final challenge, re-run all the tests performed but this time with "gpt-4o-mini" and see how the performance is affected.</p>]]></content>
        <author>
            <name>Pedro Azevedo</name>
            <uri>https://www.linkedin.com/in/pedro-azevedo-/</uri>
        </author>
        <author>
            <name>Rahul Pandey</name>
            <uri>https://www.linkedin.com/in/rahulpandey1901/</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="mlflow-evalaute" term="mlflow-evalaute"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Models from Code Logging in MLflow - What, Why, and How]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code"/>
        <updated>2024-09-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We all (well, most of us) remember November 2022 when the public release of ChatGPT by OpenAI marked a significant turning point in the world of AI. While generative artificial intelligence (GenAI) had been evolving for some time, ChatGPT, built on OpenAI's GPT-3.5 architecture, quickly captured the public’s imagination. This led to an explosion of interest in GenAI, both within the tech industry and among the general public.]]></summary>
        <content type="html"><![CDATA[<p>We all (well, most of us) remember November 2022 when the public release of ChatGPT by OpenAI marked a significant turning point in the world of AI. While generative artificial intelligence (GenAI) had been evolving for some time, ChatGPT, built on OpenAI's GPT-3.5 architecture, quickly captured the public’s imagination. This led to an explosion of interest in GenAI, both within the tech industry and among the general public.</p>
<p>On the tools side, MLflow continues to solidify its position as the favorite tool for (machine learning operations) MLOps among the ML community. However, the rise of GenAI has introduced new needs in how we use MLflow. One of these new challenges is how we log models in MLflow. If you’ve used MLflow before (and I bet you have), you’re probably familiar with the <code>mlflow.log_model()</code> function and how it efficiently <a href="https://github.com/cloudpipe/cloudpickle" target="_blank" rel="noopener noreferrer">pickles</a> model artifacts.</p>
<p>Particularly with GenAI, there’s a new requirement: logging the models "from code", instead of serializing it into a pickle file! And guess what? This need isn’t limited to GenAI models! So, in this post I will explore this concept and how MLflow has adapted to meet this new requirement.</p>
<p>You will notice that this feature is implemented at a very abstract level, allowing you to log any model "as code", whether it’s GenAI or not! I like to think of it as a generic approach, with GenAI models being just one of its use cases. So, in this post, I’ll explore this new feature, <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">"Models from Code logging"</a>.</p>
<p>By the end of this post, you should be able to answer the three main questions: 'What,' 'Why,' and 'How' to use Models from Code logging.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-models-from-code-logging">What Is Models from Code Logging?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#what-is-models-from-code-logging" class="hash-link" aria-label="Direct link to What Is Models from Code Logging?" title="Direct link to What Is Models from Code Logging?">​</a></h2>
<p>In fact, when MLflow announced this feature, it got me thinking in a more abstract way about the concept of a "model"! You might find it interesting as well, if you zoom out and consider a model as a mathematical representation or function that describes the relationship between input and output variables. At this level of abstraction, a model can be many things!</p>
<p>One might even recognize that a model, as an object or artifact, represents just one form of what a model can be, even if it’s the most popular in the ML community. If you think about it, a model can also be as simple as a piece of code for a mapping function or a code that sends API requests to external services such as OpenAI's APIs.</p>
<p>I'll explain the detailed workflow of how to log models from code later in the post, but for now, let's consider it at a high level with two main steps: first, writing your model code, and second, logging your model from code. This will look like the following figure:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="high-level-models-from-code-logging-workflow"><em>High Level Models from Code Logging Workflow</em>:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#high-level-models-from-code-logging-workflow" class="hash-link" aria-label="Direct link to high-level-models-from-code-logging-workflow" title="Direct link to high-level-models-from-code-logging-workflow">​</a></h4>
<p><img loading="lazy" alt="High Level Models-from-Code Logging Workflow" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-from-code1-5f8830b7ddd337699499b466a530057d.png" width="2629" height="379" class="img_ev3q"></p>
<p>🔴 It's important to note that when we refer to "model code," we're talking about code that can be treated as a model itself. This means it's <strong>not</strong> your training code that generates a trained model object, but rather the step-by-step code that is executed as a model itself.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-models-from-code-differs-from-object-based-logging">How Models from Code Differs from Object-Based Logging?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#how-models-from-code-differs-from-object-based-logging" class="hash-link" aria-label="Direct link to How Models from Code Differs from Object-Based Logging?" title="Direct link to How Models from Code Differs from Object-Based Logging?">​</a></h2>
<p>In the previous section, we discussed the concept of Models from Code logging. However, concepts often become clearer when contrasted with their alternatives; a technique known as <em>contrast learning</em>. In our case, the alternative is Object-Based logging, which is the commonly used approach for logging models in MLflow.</p>
<p>Object-Based logging treats a trained model as an <em>object</em> that can be stored and reused. After training, the model is saved as an object and can be easily loaded for deployment. For example, this process can be initiated by calling <code>mlflow.log_model()</code>, where MLflow handles the serialization, often using <a href="https://github.com/cloudpipe/cloudpickle" target="_blank" rel="noopener noreferrer">Pickle</a> or similar methods.</p>
<p>Object-Based logging can be broken down into three high-level steps as in the following figure: first, creating the model object (whether by training it or acquiring it), second, serializing it (usually with Pickle or a similar tool), and third, logging it as an object.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="high-level-object-based-logging-workflow"><em>High Level Object-Based Logging Workflow</em>:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#high-level-object-based-logging-workflow" class="hash-link" aria-label="Direct link to high-level-object-based-logging-workflow" title="Direct link to high-level-object-based-logging-workflow">​</a></h4>
<p><img loading="lazy" alt="High Level Object-Based Logging Workflow" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-from-code2-732b1bd2a33af059779d03ca39902f78.png" width="2629" height="525" class="img_ev3q"></p>
<p>💡The main distinction between the popular Object-Based logging and Models from Code logging is that in the former, we log the model object itself, whether it's a model you've trained or a pre-trained model you've acquired. In the latter, however, we log the code that <em>represents</em> your model.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-do-you-need-models-from-code-logging">When Do You Need Models from Code Logging?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#when-do-you-need-models-from-code-logging" class="hash-link" aria-label="Direct link to When Do You Need Models from Code Logging?" title="Direct link to When Do You Need Models from Code Logging?">​</a></h2>
<p>By now, I hope you have a clear understanding of <em>what</em> Models from Code logging is! You might still be wondering, though, about the specific use cases where this feature can be applied. This section will cover exactly that—the why!</p>
<p>While we mentioned GenAI as a motivational use case in the introduction, we also highlighted that MLflow has approached Models from Code logging in a more generic way and we will see that in the next section. This means you can leverage the generalizability of the Models from Code feature for a wide range of scenarios. I’ve identified three key usage patterns that I believe are particularly relevant:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-when-your-model-relies-on-external-services">1️⃣ When Your Model Relies on External Services:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#1%EF%B8%8F%E2%83%A3-when-your-model-relies-on-external-services" class="hash-link" aria-label="Direct link to 1️⃣ When Your Model Relies on External Services:" title="Direct link to 1️⃣ When Your Model Relies on External Services:">​</a></h3>
<p>This is one of the obvious and common use cases, especially with the rise of modern AI applications. It’s becoming increasingly clear that we are shifting from building AI at the "model" granularity to the "system" granularity.</p>
<p>In other words, AI is no longer just about individual models; it’s about how those models interact within a broader ecosystem. As we become more dependent on external AI services and APIs, the need for Models from Code logging becomes more pronounced.</p>
<p>For instance, frameworks like <a href="https://github.com/langchain-ai/langchain/" target="_blank" rel="noopener noreferrer">LangChain</a> allow developers to build applications that chain together various AI models and services to perform complex tasks, such as language understanding and information retrieval. In such scenarios, the "model" is not just a set of trained parameters that can be <em>pickled</em> but a "system" of interconnected services, often orchestrated by code that makes API calls to external platforms.</p>
<p>Models from Code logging in these situations ensures that the entire workflow, including the logic and dependencies, is preserved. It offers is the ability to maintain the same model-like experience by capturing the code making it possible to faithfully recreate the model’s behavior, even when the actual computational work is performed outside your domain.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-when-youre-combining-multiple-models-to-calculate-a-complex-metric">2️⃣ When You’re Combining Multiple Models to Calculate a Complex Metric:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#2%EF%B8%8F%E2%83%A3-when-youre-combining-multiple-models-to-calculate-a-complex-metric" class="hash-link" aria-label="Direct link to 2️⃣ When You’re Combining Multiple Models to Calculate a Complex Metric:" title="Direct link to 2️⃣ When You’re Combining Multiple Models to Calculate a Complex Metric:">​</a></h3>
<p>Apart from GenAI, you can still benefit from the Models from Code feature in various other domains. There are many situations where multiple specialized models are combined to produce a comprehensive output. Note that we are not just referring to traditional ensemble modeling (predicting the same variable); often, you need to combine multiple models to predict different components of a complex inferential task.</p>
<p>One concrete example could be <a href="https://en.wikipedia.org/wiki/Customer_lifetime_value" target="_blank" rel="noopener noreferrer">Customer Lifetime Value (CLV)</a> in customer analytics. In the context of CLV, you might have separate models for:</p>
<ul>
<li>Customer Retention: Forecasting how long a customer will continue to engage with the business.</li>
<li>Purchase Frequency: Predicting how often a customer will make a purchase.</li>
<li>Average Order Value: Estimating the typical value of each transaction.</li>
</ul>
<p>Each of these models might already be logged and tracked properly using MLflow. Now, you need to "combine" these models into a single "system" that calculates CLV. We refer to it as a "system" because it contains multiple components.</p>
<p>The beauty of MLflow's Models from Code logging is that it allows you to treat this "CLV system" as a "CLV model". It enables you to leverage MLflow's capabilities, maintaining the MLflow-like model structure with all the advantages of tracking, versioning, and deploying your CLV model as a cohesive unit, even though it's built on top of other models. While such a complex model system is able to be built using a custom MLflow PythonModel, utilizing the Models from Code feature dramatically simplifies the serialization process, reducing the friction to building your solution.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-when-you-dont-have-serialization-at-all">3️⃣ When You Don’t Have Serialization at All:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#3%EF%B8%8F%E2%83%A3-when-you-dont-have-serialization-at-all" class="hash-link" aria-label="Direct link to 3️⃣ When You Don’t Have Serialization at All:" title="Direct link to 3️⃣ When You Don’t Have Serialization at All:">​</a></h3>
<p>Despite the rise of deep learning, industries still rely on rule-based algorithms that don’t produce serialized models. In these cases, Models from Code logging can be beneficial for integrating these processes into the MLflow ecosystem.</p>
<p>One example is in industrial quality control, where the <a href="https://en.wikipedia.org/wiki/Canny_edge_detector" target="_blank" rel="noopener noreferrer">Canny edge detection algorithm</a> is often used to identify defects. This rule-based algorithm doesn’t involve serialization but is defined by specific steps.</p>
<p>Another example, which is gaining attention nowadays, is <a href="https://en.wikipedia.org/wiki/Causal_AI" target="_blank" rel="noopener noreferrer">Causal AI</a>. Constraint-based causal discovery algorithms like the <a href="https://causal-learn.readthedocs.io/en/latest/search_methods_index/Constraint-based%20causal%20discovery%20methods/PC.html" target="_blank" rel="noopener noreferrer">PC (Peter-Clark)</a> algorithm that discover causal relationships in data but are implemented as code rather than as model objects.</p>
<p>In either case, with the Models from Code feature, you can log the entire process as a "model" in MLflow, preserving the logic and parameters while benefiting from MLflow’s tracking and versioning features.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-implement-models-from-code-logging">How To Implement Models from Code Logging?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#how-to-implement-models-from-code-logging" class="hash-link" aria-label="Direct link to How To Implement Models from Code Logging?" title="Direct link to How To Implement Models from Code Logging?">​</a></h2>
<p>I hope that by this point, you have a clear understanding of the "What" and "Why" of Models from Code, and now you might be eager to get hands-on and focus on the <em>How</em>!</p>
<p>In this section, I'll provide a generic workflow for implementing MLflow's Models from Code logging, followed by a basic yet broadly applicable example. I hope the workflow provides a broad understanding that allows you to address a wide range of scenarios. I will also include links at the end to resources that cover more specific use cases (e.g., AI models).</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="models-from-code-workflow">Models from Code Workflow:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#models-from-code-workflow" class="hash-link" aria-label="Direct link to Models from Code Workflow:" title="Direct link to Models from Code Workflow:">​</a></h3>
<p>A key "ingredient" of the implementation is MLflow's component <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html" target="_blank" rel="noopener noreferrer"><code>pyfunc</code></a>. If you're not familiar with it, think of <code>pyfunc</code> as a universal interface in MLflow that lets you turn any model, from any framework, into an MLflow model by defining a <em>custom</em> Python function. You can also refer to <a href="https://mlflow.org/blog/custom-pyfunc" target="_blank" rel="noopener noreferrer">this earlier post</a> if you wish to gain a deeper understanding.</p>
<p>For our Models from Code logging, we’ll particularly use the <a href="https://mlflow.org/docs/latest/_modules/mlflow/pyfunc/model.html#PythonModel" target="_blank" rel="noopener noreferrer"><code>PythonModel</code></a> class within <code>pyfunc</code>. This class in the MLflow Python client library allows us to create and manage Python functions as MLflow models. It enables us to define a custom function that processes input data and returns predictions or results. This model can then be deployed, tracked, and shared using MLflow's features.</p>
<p>It seems to be exactly what we're looking for—we have some code that serves as our model, and we want to log it! That's why you'll soon see <code>mlflow.pyfunc.PythonModel</code> in our code example!</p>
<p>Now, each time we need to implement Models from Code, we create <em>two</em> separate Python files:</p>
<ol>
<li>
<p>The first contains our model code (let's call it <code>model_code.py</code>). This file contains a class that inherits from the <code>mlflow.pyfunc.PythonModel</code> class.
The class we're defining contains our model logic. It could be our calls to OpenAI APIs, CLV (Customer Lifetime Value) model, or our causal discovery code. We'll see a very simple 101 example soon.</p>
<p>📌 But wait! IMPORTANT:</p>
<ul>
<li>Our <code>model_code.py</code> script needs to call (i,e; include) <a href="https://mlflow.org/docs/latest/python_api/mlflow.models.html#mlflow.models.set_model" target="_blank" rel="noopener noreferrer"><code>mlflow.models.set_model()</code></a> to set the model, which is crucial for loading the model back using <code>load_model()</code> for inference. You will notice this in the example.</li>
</ul>
</li>
<li>
<p>The second file logs our class (that we defined in <code>model_code.py</code>). Think of it as the driver code; it can be either a notebook or a Python script (let's call it <code>driver.py</code>).
In this file, we'll include the code that is responsible for logging our model code (essentially, providing the path to <code>model_code.py</code>) .</p>
</li>
</ol>
<p>Then we can deploy our model. Later, when the serving environment is loaded, <code>model_code.py</code> is executed, and when a serving request comes in, <code>PyFuncClass.predict()</code> is called.</p>
<p>This figure gives a generic template of these two files.</p>
<p><img loading="lazy" alt="Models from Code files" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-from-code3-16100bbac4ffc50ceab80d52ecce642e.png" width="4242" height="1395" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-101-example-of-model-from-code-logging-">A 101 Example of Model from Code Logging :<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#a-101-example-of-model-from-code-logging-" class="hash-link" aria-label="Direct link to A 101 Example of Model from Code Logging :" title="Direct link to A 101 Example of Model from Code Logging :">​</a></h3>
<p>Let’s consider a straightforward example: a simple function to calculate the area of a circle based on its diameter. With Models from Code, we can log this calculation as a model! I like to think of it as framing the calculation as a prediction problem, allowing us to write our model code with a <code>predict</code> method.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-our-model_codepy-file-">1. Our <code>model_code.py</code> file :<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#1-our-model_codepy-file-" class="hash-link" aria-label="Direct link to 1-our-model_codepy-file-" title="Direct link to 1-our-model_codepy-file-">​</a></h4>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> math</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CircleAreaModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pi </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">r </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> r </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># It's important to call set_model() so it can be loaded for inference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Also, note that it is set to an instance of the class, not the class itself.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">CircleAreaModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-our-driverpy-file-">2. Our <code>driver.py</code> file :<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#2-our-driverpy-file-" class="hash-link" aria-label="Direct link to 2-our-driverpy-file-" title="Direct link to 2-our-driverpy-file-">​</a></h4>
<p>This can be defined within a notebook as well. Here are its essential contents:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">code_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"model_code.py"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># make sure that you put the correct path</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  logged_model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                            python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">code_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                            artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"test_code_logging"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                                            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">#We can proint some info about the logged model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"MLflow Run: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">logged_model_info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Model URI: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">logged_model_info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">model_uri</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-that-looks-like-on-mlflow">How that looks like on MLflow:<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#how-that-looks-like-on-mlflow" class="hash-link" aria-label="Direct link to How that looks like on MLflow:" title="Direct link to How that looks like on MLflow:">​</a></h4>
<p>Executing the <code>driver.py</code> will start an MLflow run and log our model as code. The files can been as demonstrated below:</p>
<p><img loading="lazy" alt="Models from Code files" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-from-code4-26c1a4d1a36f0a6e510124e13abd38d6.png" width="3413" height="4259" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-and-further-learning">Conclusion and Further Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/models_from_code#conclusion-and-further-learning" class="hash-link" aria-label="Direct link to Conclusion and Further Learning" title="Direct link to Conclusion and Further Learning">​</a></h2>
<p>I hope that by this point, I have fulfilled the promises I made earlier! You should now have a clearer understanding of <em>What</em> Models from Code is and how it differs from the popular Object-Based approach which logs models as serialized objects. You should also have a solid foundation of <em>Why</em> and when to use it, as well as an understanding of <em>How</em> to implement it through our general example.</p>
<p>As we mentioned in the introduction and throughout the post, there are various use cases where Models from Code can be beneficial. Our 101 example is just the beginning—there is much more to explore. Below is a list of code examples that you may find helpful:</p>
<ol>
<li>Logging models from code using <strong>Pyfunc</strong> log model API ( <a href="https://github.com/mlflow/mlflow/blob/a3454610285e3729266e5e94041d06bd2bc55ff6/examples/pyfunc/model_as_code.py" target="_blank" rel="noopener noreferrer">model code</a> | <a href="https://github.com/mlflow/mlflow/blob/a3454610285e3729266e5e94041d06bd2bc55ff6/examples/pyfunc/model_as_code_driver.py" target="_blank" rel="noopener noreferrer">driver code</a> )</li>
<li>Logging model from code using <strong>Langchain</strong> log model API ( <a href="https://github.com/mlflow/mlflow/blob/a3454610285e3729266e5e94041d06bd2bc55ff6/examples/langchain/chain_as_code.py" target="_blank" rel="noopener noreferrer">model code</a> | <a href="https://github.com/mlflow/mlflow/blob/a3454610285e3729266e5e94041d06bd2bc55ff6/examples/langchain/chain_as_code_driver.py" target="_blank" rel="noopener noreferrer">driver code</a> )</li>
</ol>]]></content>
        <author>
            <name>Awadelrahman M. A. Ahmed</name>
            <uri>https://www.linkedin.com/in/awadelrahman/</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="pyfunc" term="pyfunc"/>
        <category label="mlops" term="mlops"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AutoGen with Custom PyFunc]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent"/>
        <updated>2024-08-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide for building an autonomous image generation agent]]></summary>
        <content type="html"><![CDATA[<p>In this blog, we'll guide you through creating an <a href="https://microsoft.github.io/autogen/" target="_blank" rel="noopener noreferrer">AutoGen</a> agent framework within an MLflow custom PyFunc. By combining MLflow with AutoGen's ability to create multi-agent frameworks, we are able to create scalable and stable GenAI applications.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="agent-frameworks">Agent Frameworks<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#agent-frameworks" class="hash-link" aria-label="Direct link to Agent Frameworks" title="Direct link to Agent Frameworks">​</a></h2>
<p>Agent frameworks enable autonomous agents to handle complex, multi-turn tasks by integrating discrete logic at each step. These frameworks are crucial for LLM-driven workflows, where agents manage dynamic interactions across multiple stages. Each agent operates based on specific logic, enabling precise task automation, decision-making, and coordination. This is ideal for applications like workflow orchestration, customer support, and multi-agent systems, where LLMs must interpret evolving context and respond accordingly.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="agent-frameworks-with-autogen">Agent Frameworks with AutoGen<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#agent-frameworks-with-autogen" class="hash-link" aria-label="Direct link to Agent Frameworks with AutoGen" title="Direct link to Agent Frameworks with AutoGen">​</a></h2>
<p>AutoGen is an open-source programming framework designed for building agent-based AI systems. It offers a multi-agent conversation framework, allowing users to build <a href="https://microsoft.github.io/autogen/docs/Examples/" target="_blank" rel="noopener noreferrer">complex LLM workflows</a> using high-level abstractions. AutoGen simplifies the creation of diverse applications across various domains by providing pre-built systems. Additionally, it enhances LLM inference and optimization through specialized APIs, improving performance and reducing operational costs. The framework is tailored to streamline the development and deployment of agentic AI solutions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#setup" class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup">​</a></h2>
<p>First, let's install the required dependencies. Note that pyautogen requires <code>python&gt;=3.9</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="environment-setup">Environment Setup<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#environment-setup" class="hash-link" aria-label="Direct link to Environment Setup" title="Direct link to Environment Setup">​</a></h3>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">%pip install pyautogen mlflow -U -q</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We must also get API credentials to use an LLM. For this tutorial, we'll be using OpenAI. Note that a great way to securely pass tokens to your interactive python environment is via the <a href="https://docs.python.org/3/library/getpass.html" target="_blank" rel="noopener noreferrer">getpass</a> package.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> getpass </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> getpass</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> getpass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY:"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">getenv</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set an OPENAI_API_KEY environment variable."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Great! We've setup our authentication configuration and are ready to start building an agent framework.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="create-our-agent-framework-with-autogen-and-mlflow">Create Our Agent Framework with AutoGen and MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#create-our-agent-framework-with-autogen-and-mlflow" class="hash-link" aria-label="Direct link to Create Our Agent Framework with AutoGen and MLflow" title="Direct link to Create Our Agent Framework with AutoGen and MLflow">​</a></h2>
<p>In this tutorial we will be creating an image generation agent framework. There is a lot of code copied and modified from the <a href="https://github.com/microsoft/autogen/blob/main/notebook/agentchat_dalle_and_gpt4v.ipynb" target="_blank" rel="noopener noreferrer">autogen tutorial</a>, but the core agent functionality remains the same.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="agent-code">Agent Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#agent-code" class="hash-link" aria-label="Direct link to Agent Code" title="Direct link to Agent Code">​</a></h3>
<p>You don't have to worry about the specifics of the implementation. At a high level, we are creating an agent framework that...</p>
<ol>
<li>Takes a prompt.</li>
<li>Leverages <a href="https://openai.com/index/dall-e-3/" target="_blank" rel="noopener noreferrer">OpenAI's DALLE</a> to create an image based on that prompt.</li>
<li>Iteratively "catifies" e.g. adds fluffy cats to the image.</li>
</ol>
<p>Step 3 is where AutoGen shines. We're able to leverage AutoGen's <a href="https://microsoft.github.io/autogen/docs/reference/agentchat/contrib/multimodal_conversable_agent#multimodalconversableagent" target="_blank" rel="noopener noreferrer">MultimodalConversableAgent</a> to create a critic agent that observes the images and, based on a system prompt provided by the user to "add fluffy cats", gives feedback on how the prompt should be improved.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> re</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Union</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> matplotlib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyplot </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> plt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PIL</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> diskcache </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Cache</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> PIL </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Image</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> autogen </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> AssistantAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ConversableAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> UserProxyAgent</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> autogen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">agentchat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">contrib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">img_utils </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> _to_pil</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> get_image_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> get_pil_image</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> autogen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">agentchat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">contrib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">multimodal_conversable_agent </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> MultimodalConversableAgent</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define our prompt of interest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">CRITIC_PROMPT </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Add fluffy cats. Like a lot of cats. If there's less than 100 cats I'll be mad."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define our LLM configurations</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">dalle_call</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> OpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> quality</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Generate an image using OpenAI's DALL-E model and cache the result.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    This function takes a prompt and other parameters to generate an image using OpenAI's DALL-E model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    It checks if the result is already cached; if so, it returns the cached image data. Otherwise,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    it calls the DALL-E API to generate the image, stores the result in the cache, and then returns it.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        client (OpenAI): The OpenAI client instance for making API calls.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        model (str): The specific DALL-E model to use for image generation.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        prompt (str): The text prompt based on which the image is generated.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        size (str): The size specification of the image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        quality (str): The quality setting for the image generation.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        n (int): The number of images to generate.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    str: The image data as a string, either retrieved from the cache or newly generated.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Note:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The cache is stored in a directory named '.cache/'.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The function uses a tuple of (model, prompt, size, quality, n) as the key for caching.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The image data is obtained by making a secondary request to the URL provided by the DALL-E API response.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Function implementation...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    cache </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Cache</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">".cache/"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a cache directory</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    key </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> quality</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> key </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> cache</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># If not in cache, compute and store the result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">images</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">generate</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        prompt</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        quality</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">quality</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        n</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">n</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    image_url </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">url</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    img_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> get_image_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">image_url</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    cache</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> img_data</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> img_data</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> PIL</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Extracts an image from the last message of an agent and converts it to a PIL image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    This function searches the last message sent by the given agent for an image tag,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    extracts the image data, and then converts this data into a PIL (Python Imaging Library) image object.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Parameters:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        agent (Agent): An instance of an agent from which the last message will be retrieved.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        PIL.Image: A PIL image object created from the extracted image data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Note:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The function assumes that the last message contains an &lt;img&gt; tag with image data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The image data is extracted using a regular expression that searches for &lt;img&gt; tags.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - It's important that the agent's last message contains properly formatted image data for successful extraction.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - The `_to_pil` function is used to convert the extracted image data into a PIL image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    - If no &lt;img&gt; tag is found, or if the image data is not correctly formatted, the function may raise an error.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    last_message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> re</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">findall</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"&lt;img (.*)&gt;"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">elif</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># The GPT-4V format, where the content is an array of data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> last_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"image_url"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"url"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pil_img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> get_pil_image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pil_img</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">DALLEAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ConversableAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> llm_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">llm_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        api_key </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">getenv</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_dalle_client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> OpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">api_key</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">api_key</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> DALLEAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">generate_dalle_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Union</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        recipient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        request_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">bool</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        silent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">bool</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># override and always "silent" the send out message;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># otherwise, the print log would be super long!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> silent</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">generate_dalle_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Optional</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sender</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Agent"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Generate a reply using OpenAI DALLE call."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_dalle_client </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> config </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token plain"> config</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> client </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_oai_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sender</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> dalle_call</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            client</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"dall-e-3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            prompt</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"1024x1024"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            quality</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"standard"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            n</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _to_pil</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Convert to PIL image</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Return the OpenAI message format</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"image_url"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"image_url"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"url"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> img_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">AssistantAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n_iters</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initializes a CatifyWithDalle instance.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        This agent facilitates the creation of visualizations through a collaborative effort among</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        its child agents: dalle and critics.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Parameters:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            - n_iters (int, optional): The number of "improvement" iterations to run. Defaults to 2.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            - **kwargs: keyword arguments for the parent AssistantAgent.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reply_func</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_reply_user</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> position</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_n_iters </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> n_iters</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_reply_user</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> messages</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sender</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">all</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sender </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            error_msg </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Either </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">messages</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> or </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">sender</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> must be provided."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> AssertionError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">error_msg</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_oai_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sender</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)">## Define the agents</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> MultimodalConversableAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Critics"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            system_message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"""You need to improve the prompt of the figures you saw.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">CRITIC_PROMPT</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">Reply with the following format:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">CRITICS: the image needs to improve...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">PROMPT: here is the updated prompt!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"""</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"max_tokens"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-4o"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            human_input_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"NEVER"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> DALLEAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Dalle"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"dalle"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Data flow begins</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">imshow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">axis</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"off"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Turn off axis numbers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Image PLOTTED"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">range</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_n_iters</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Downsample the image s.t. GPT-4V can take</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            smaller_image </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">resize</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Resampling</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">LANCZOS</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            smaller_image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"result.png"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">msg_to_critics </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"""Here is the prompt: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">img_prompt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Here is the figure &lt;img result.png&gt;.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Now, critique and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">msg_to_critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            feedback </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_oai_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> re</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">findall</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"PROMPT: (.*)"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> feedback</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">imshow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">axis</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"off"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Turn off axis numbers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Image </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">i</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> PLOTTED"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"result.jpg"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Great! We have an agent framework. To quickly show how it works, let's instantiate our agent and give it a prompt.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"creator"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    system_message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Help me coordinate generating image"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">user_proxy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> UserProxyAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"User"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    human_input_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"NEVER"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    code_execution_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"work_dir"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"output"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Location where code will be written</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"use_docker"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use local jupyter execution environment instead of docker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">_ </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> user_proxy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">initiate_chat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    creator</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Show me something boring"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The initial result from the first iteration from the user prompt:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">User (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me something boring</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me something boring</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="An uninspired image" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/boring_0-58e3e96a4d1a56d431f044ae22d31adb.png" width="389" height="389" class="img_ev3q"></p>
<p>This is definitely a boring room. Notice the responses of the critics and how the critics enhance the submission prompt in the following iterations.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Image PLOTTED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Critics):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the prompt: Show me something boring.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the figure `&lt;image&gt;`.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Now, critique and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Critics (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">CRITICS: The image is simple and mundane, with a plain room and basic furniture, which accomplishes the task of showing something boring. However, it can be improved by adding an element of whimsy or interest, juxtaposing the boring scene with something unexpected. Let's add a lot of cats to make it more engaging.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">PROMPT: Show me a boring living room with plain furniture, but add 100 cats in various places around the room.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me a boring living room with plain furniture, but add 100 cats in various places around the room.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="A mild improvement" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/boring_1-4267848a50f24376844a18e7fe7543a3.png" width="389" height="389" class="img_ev3q"></p>
<p>On the final iteration, we can see a more refined instruction set to add additional details.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Image 0 PLOTTED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Critics):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the prompt: Show me a boring living room with plain furniture, but add 100 cats in various places around the room..</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the figure `&lt;image&gt;`.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Now, critique and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Critics (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">CRITICS: The image has successfully incorporated cats into a boring living room, bringing in an element of surprise and quirkiness. However, it is in black and white, which can make the image feel duller and less lively. Additionally, while there are many cats, they could be positioned in more playful and unexpected ways to create more interest.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">PROMPT: Show me a colorful, boring living room with plain furniture, but add 100 cats in various imaginative and playful positions around the room.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me a colorful, boring living room with plain furniture, but add 100 cats in various imaginative and playful positions around the room.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="Final cat room" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/boring_2-4ee565a1848ea391f56bcca9a327ac9c.png" width="389" height="389" class="img_ev3q"></p>
<p>Without any direct intervention, we now have an image that is remarkably different in style than the original user instruction. The agent has successfully
introduced elements of whimsy into the original instruction set.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-model-from-code">MLflow Model From Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#mlflow-model-from-code" class="hash-link" aria-label="Direct link to MLflow Model From Code" title="Direct link to MLflow Model From Code">​</a></h3>
<p>Now that we've proven the concept, it's time to leverage MLflow to manage our ML modeling lifecycle. For instance, it's highly likely that we'd want to take this model to production, so strong dependency management, model versioning, and support for tracking between development cycles would all be useful.</p>
<p>In this blog we will leverage the <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">Model from Code</a> feature to achieve the above functionality. MLflow Model from Code allows you to define and log models directly from a stand-alone python script. This feature is particularly useful when you want to log models that can be effectively stored as a code representation (models that do not need optimized weights through training) or applications that rely on external services (e.g., LangChain chains). Another benefit is that this approach entirely bypasses the use of the <code>pickle</code> or <code>cloudpickle</code> modules within Python, which can carry security</p>
<p>To leverage Model from Code, we must perform the following steps:</p>
<ol>
<li>Declare a <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">custom PyFunc</a></li>
<li>Leverage <a href="https://mlflow.org/docs/latest/python_api/mlflow.models.html?highlight=set_model#mlflow.models.set_model" target="_blank" rel="noopener noreferrer">mlflow.models.set_model</a> to indicate which python object is our model.</li>
</ol>
<p>To achieve these steps, we simply copy the above and below code to a python file. For simplicity, you can just create a single Python file with both code snippets, but MLflow also supports specifying local dependencies when logging our model via the <code>code_paths</code> parameter in <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc%20log_model#mlflow.pyfunc.log_model" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.lod_model</a></p>
<p><strong>This step was omitted for brevity and must be done manually.</strong></p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CatifyPyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">  </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autogen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    creator </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"creator"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            system_message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Help me coordinate generating image"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    user_proxy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> UserProxyAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"User"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> human_input_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"NEVER"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> code_execution_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"work_dir"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"output"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Location where code will be written</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"use_docker"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use local jupyter execution environment instead of docker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> user_proxy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">initiate_chat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        creator</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_input</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">CatifyPyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>At the end of this step, you should have a Python file that has both code snippets. The name is up to the user, but for this blog we will use "catify_model.py".</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-our-agent-framework">Use Our Agent Framework<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#use-our-agent-framework" class="hash-link" aria-label="Direct link to Use Our Agent Framework" title="Direct link to Use Our Agent Framework">​</a></h2>
<p>We are now positioned to leverage MLflow to interact with our powerful "catify" agent.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="log-and-load">Log and Load<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#log-and-load" class="hash-link" aria-label="Direct link to Log and Load" title="Direct link to Log and Load">​</a></h3>
<p>First, let's demonstrate the standard user journey of logging model to MLflow's tracking server. We will then load it back and perform inference.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autogen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Enable logging of traces</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"autogen_pyfunc"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"catify_model.py"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Our model from code python file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    run_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">run_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>With our model logged, let's reload it and perform inference, this time with a more cool prompt.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"runs:/</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">/autogen_pyfunc"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">out </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"The matrix with a cat"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The initial stage's results:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">User (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">The matrix with a cat</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">The matrix with a cat</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="Initial Matrix Cat" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/cool_0-d6729ef9b7346239662cd9a53b21c52f.png" width="389" height="389" class="img_ev3q"></p>
<p>On the next stage, the generation prompt is greatly enhanced by the critic agent.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Image PLOTTED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Critics):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the prompt: The matrix with a cat.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the figure `&lt;image&gt;`.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Now, critique and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Critics (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">CRITICS: The image effectively captures the Matrix-themed aesthetic with a cat, combining a cyberpunk atmosphere with digital elements. However, to improve the image:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Increase the number of cats to align with the requirement of having lots of cats (aim for around 100).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Enhance the digital and neon elements to make the Matrix theme more pronounced.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Add more movement or dynamic elements to the scene for a more immersive feel.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Ensure diversity in cat appearances, sizes, and positions to make the scene more complex and interesting.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">PROMPT: "Create a Matrix-themed scene set in a cyberpunk alleyway, with digital and neon elements filling the atmosphere. The scene should feature around 100 cats of various sizes, colors, and positions—some sitting, some walking, and some interacting with the digital elements. Make the digital grid and floating code more prominent, and add dynamic elements such as digital rain or floating holograms to create a more immersive and lively environment."</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">"Create a Matrix-themed scene set in a cyberpunk alleyway, with digital and neon elements filling the atmosphere. The scene should feature around 100 cats of various sizes, colors, and positions—some sitting, some walking, and some interacting with the digital elements. Make the digital grid and floating code more prominent, and add dynamic elements such as digital rain or floating holograms to create a more immersive and lively environment."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="First Matrix Iteration" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/cool_1-6c8e3b1405b0537c00e1b7037806997b.png" width="389" height="389" class="img_ev3q"></p>
<p>This is definitely an improvement, show casing the power of multi-turn agents.</p>
<p>The final stage enhances the instruction set even further.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">Image 0 PLOTTED</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Critics):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the prompt: "Create a Matrix-themed scene set in a cyberpunk alleyway, with digital and neon elements filling the atmosphere. The scene should feature around 100 cats of various sizes, colors, and positions—some sitting, some walking, and some interacting with the digital elements. Make the digital grid and floating code more prominent, and add dynamic elements such as digital rain or floating holograms to create a more immersive and lively environment.".</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Here is the figure `&lt;image&gt;`.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Now, critique and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Critics (to creator):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">CRITICS: The image significantly improves the Matrix-themed atmosphere with a cyberpunk alley and an abundance of cats. However, there are a few areas for improvement:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Increase the variety of the digital elements (e.g., different shapes of holograms, varied colors and intensities of neon signs).</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Make the cats more dynamic by showing more interactions such as jumping, playing, or chasing digital elements.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Enhance the depth and perspective of the scene to create a more three-dimensional and immersive look.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">- Add more detail to the surrounding environment, like futuristic posters or graffiti to intensify the cyberpunk feel.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">PROMPT: "Craft a highly detailed, Matrix-themed scene set in a cyberpunk alleyway. The atmosphere should be rich with diverse digital and neon elements, including various shapes of holograms and a range of vivid colors. Populate the scene with around 100 dynamic cats of different sizes, colors, and actions—some sitting, some walking, some jumping, playing, or chasing digital elements. Enhance the depth and perspective of the scene to create a more immersive three-dimensional experience. Include detailed futuristic environment elements like posters, graffiti, and neon signs to intensify the cyberpunk feel."</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">creator (to Dalle):</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">"Craft a highly detailed, Matrix-themed scene set in a cyberpunk alleyway. The atmosphere should be rich with diverse digital and neon elements, including various shapes of holograms and a range of vivid colors. Populate the scene with around 100 dynamic cats of different sizes, colors, and actions—some sitting, some walking, some jumping, playing, or chasing digital elements. Enhance the depth and perspective of the scene to create a more immersive three-dimensional experience. Include detailed futuristic environment elements like posters, graffiti, and neon signs to intensify the cyberpunk feel."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="2nd cool image" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/cool_2-0b7b423449ea4b44c90d48681b980bc1.png" width="389" height="389" class="img_ev3q"></p>
<p>A little dystopian, but we'll take it!</p>
<p>We have successfully demonstrated that we can log and load our model, then perform inference from the loaded model.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="show-mlflow-traces">Show MLflow Traces<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#show-mlflow-traces" class="hash-link" aria-label="Direct link to Show MLflow Traces" title="Direct link to Show MLflow Traces">​</a></h3>
<p><a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow Tracing</a> provides a thread-safe API to track the execution of complex applications. The MLflow AutoGen flavor has tracing built in as an autologging feature. So, simply by running <code>mlflow.autogen.autolog()</code> prior to doing inference, we will get traces logged automatically.</p>
<p>Traces can be accessed via the fluent APIs, MLflow client, and manually via the MLflow UI. For more, please visit the documentation linked above.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Example with fluent APIs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">last_active_trace </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get_last_active_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">last_active_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Output: Trace(request_id=71ffcf92785b4dfc965760a43193095c)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the meantime, we will display the MLFlow UI here. If you are running in an interactive context, such as jupyter, run the following command.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> subprocess</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> IPython</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">display </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> IFrame</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Start MLflow server in the background</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow_ui_server </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> subprocess</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Popen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"ui"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"--host"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"127.0.0.1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"--port"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"5000"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">IFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">src</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"http://127.0.0.1:5000"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> width</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"100%"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> height</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"600"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Run the below command to stop the server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># mlflow_ui_server.terminate()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you're not running interactively, you can simply run the follow shell command and navigate to the associated host and port in your web browser.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow ui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we navigate to the tracing tab, as shown in the image below, we can see our logged trace.</p>
<p><img loading="lazy" alt="The MLflow Tracing UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/tracing_main_page-472be004e0f16bb292a369b923d7d909.png" width="3406" height="1070" class="img_ev3q"></p>
<p>By clicking on that trace ID, we can see a detailed execution plan. At the bottom, we can see our prompt <code>"The matrix with a cat"</code> which kicked off the chat session. From there, many agents interacted to create images and provide feedback to "catify" them. Also, note that the trace ID is the same as the one returned by <code>mlflow.get_last_active_trace()</code> above.</p>
<p><img loading="lazy" alt="The MLflow Tracing UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/tracing_detail-d3bf5d68bc156658ed32a2ec2ed8bdbc.png" width="2912" height="1862" class="img_ev3q"></p>
<p>Finally, let's dig a bit deeper on the tracing LLM call. As you can see, we have lots of valuable information about the execution, such as the model and usage statistics. Tracing helps you monitor not just performance, but cost, usage patterns, and much more! You can also leverage custom metadata to get even more granular insights.</p>
<p><img loading="lazy" alt="The MLflow Tracing UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/tracing_chat_completion_1-cd942bdc4f6904ae270d182abb921cea.png" width="2892" height="1806" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="logging-artifacts-with-mlflow">Logging Artifacts with MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#logging-artifacts-with-mlflow" class="hash-link" aria-label="Direct link to Logging Artifacts with MLflow" title="Direct link to Logging Artifacts with MLflow">​</a></h3>
<p>Tracing's primary purpose is to provide robust lightweight summaries of complex agent executions. For larger or custom payloads, MLflow exposes a variety of artifact-logging APIs that can store images, text, tables, and more in the MLflow tracking server. Let's quickly demonstrate this functionality by logging the prompts and their associated images.</p>
<p>Within our <code>CatifyWithDalle</code> class, we will make 4 modifications...</p>
<ol>
<li>Create an instance variable in the class <code>__init__</code> to save metadata about our objects.</li>
<li>Create a private utility to increment our metadata and log and images with <a href="https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=log_image#mlflow.log_image" target="_blank" rel="noopener noreferrer">mlflow.log_image</a>.</li>
<li>Call the above utility after new images have been generated.</li>
<li>Finally, log our metadata object as JSON with <a href="https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=log_image#mlflow.log_dict" target="_blank" rel="noopener noreferrer">mlflow.log_dict</a>.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> uuid  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add to generate artifact file names and indeces for prompt mapping to generated images</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">AssistantAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n_iters</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initializes a CatifyWithDalle instance.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        This agent facilitates the creation of visualizations through a collaborative effort among</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        its child agents: dalle and critics.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Parameters:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            - n_iters (int, optional): The number of "improvement" iterations to run. Defaults to 2.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            - **kwargs: keyword arguments for the parent AssistantAgent.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register_reply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">Agent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> reply_func</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">CatifyWithDalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_reply_user</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> position</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_n_iters </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> n_iters</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dict_to_log </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add a buffer for storing mapping information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Adding this method to log the generated images and the prompt-to-image mapping file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_log_image_and_append_to_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> image_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">""" Method for logging generated images to MLflow and building a prompt mapping file """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Generate a unique ID</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        _id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">uuid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">uuid1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Append to class variable to log once at the end of all inference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dict_to_log</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"prompt"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"index"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> image_index</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log image to MLflow tracking server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.png"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_reply_user</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> messages</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sender</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">all</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> sender </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            error_msg </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Either </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">messages</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> or </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">sender</span><span class="token string-interpolation interpolation operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> must be provided."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> AssertionError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">error_msg</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> messages </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_oai_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">sender</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)">## Define the agents</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> MultimodalConversableAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Critics"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            system_message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"""You need to improve the prompt of the figures you saw.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">CRITIC_PROMPT</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">Reply with the following format:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">CRITICS: the image needs to improve...</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">PROMPT: here is the updated prompt!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"""</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"max_tokens"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"gpt-4o"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            human_input_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"NEVER"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> DALLEAgent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Dalle"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> llm_config</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"dalle"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_consecutive_auto_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Data flow begins</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">imshow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">axis</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"off"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Turn off axis numbers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Image PLOTTED"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_log_image_and_append_to_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Add image logging and buffer updates</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">range</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_n_iters</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Downsample the image s.t. GPT-4V can take</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            smaller_image </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">resize</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Resampling</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">LANCZOS</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            smaller_image</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"result.png"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">msg_to_critics </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"""Here is the prompt: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">img_prompt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Here is the figure &lt;img result.png&gt;.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Now, critic and create a prompt so that DALLE can give me a better image.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            Show me both "CRITICS" and "PROMPT"!</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">            """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">msg_to_critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            feedback </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_oai_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">critics</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> re</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">findall</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"PROMPT: (.*)"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> feedback</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> recipient</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> request_reply</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            img </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> extract_img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dalle</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">imshow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">axis</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"off"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Turn off axis numbers</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            plt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">show</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Image </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">i</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> PLOTTED"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_log_image_and_append_to_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">img</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> img_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the image in the iteration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dict_to_log</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"image_lookup.json"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the prompt-to-image mapping buffer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"result.jpg"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, if we rerun the above model logging code, every time we load the newest version of our model, images generated by our agent will be logged and a JSON object with all prompts, indexes of the prompts, and image names (for lookup purposes) will be logged.</p>
<p>Let's demonstrate this and wrap infernce in a single MLflow run for easy aggregation. Also note that we will be leveraging Autogen's <a href="https://microsoft.github.io/autogen/docs/reference/cache/" target="_blank" rel="noopener noreferrer">caching</a> functionality, so given we've already done inference with this prompt, we won't actually be making LLM calls again; we're just reading from cache and logging with our new MLflow code.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Be sure to re-log the model by rerunning the above code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">run_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"log_image_during_inferfence"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    loaded </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"runs:/</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">/autogen_pyfunc"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    loaded</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"The matrix with a cat"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="Logged Images and JSON Artifacts" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/logged_images-47157db604905efff1a73f995c64b5d7.png" width="1755" height="974" class="img_ev3q"></p>
<p>As you can see, we have logged three images of interest and a lookup dict. The keys of the dict correspond to the image names and the values correspond to additional information for how the image was generated. With these artifacts we can perform detailed analyses on prompt quality and make iterative improvements to our "catify" agent!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="additional-benefits-of-mlflow">Additional Benefits of MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#additional-benefits-of-mlflow" class="hash-link" aria-label="Direct link to Additional Benefits of MLflow" title="Direct link to Additional Benefits of MLflow">​</a></h3>
<p>There is a lot more happening behind the scenes that is out of the scope of this tutorial, but here's a quick list of additional MLflow features that are useful when building agentic frameworks.</p>
<ul>
<li><strong>Dependency management</strong>: when you log a model, MLflow will automatically try to infer your pip requirements. These requirements are written in several formats that makes remote serving of your model much simpler. If you have local dependencies, as noted above, you can specify additional paths for MLflow to serialize via the <code>code_paths</code> argument when logging your model.</li>
<li><strong>Model aliasing</strong>: when iteratively building your agentic framework, you want an easy way to compare models. MLflow model <a href="https://mlflow.org/docs/latest/model-registry.html#deploy-and-organize-models-with-aliases-and-tags" target="_blank" rel="noopener noreferrer">aliases and tags</a> facilitate lookups to the MLflow model registry and allow you to easily load and deploy an specific model version.</li>
<li><strong>Nested Runs</strong>: with agentic frameworks, especially when training underlying LLM components, you will often have complex nested structures. MLflow supports <a href="https://mlflow.org/docs/latest/traditional-ml/hyperparameter-tuning-with-child-runs/part1-child-runs.html" target="_blank" rel="noopener noreferrer">nested runs</a> to facilitate aggregating your run information. This can be especially useful with LLM training and fine tuning.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/autogen-image-agent#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>In this blog we outlined how to create a complex agent with AutoGen. We also showed how to leverage the MLflow <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">Model from Code</a> feature to log and load our model. Finally, we leveraged the MLflow AutoGen's autologging capabilities to automatically leverage MLflow tracing to get fine-grained and thread-safe agent execution information.</p>
<p>Happy coding!</p>]]></content>
        <author>
            <name>Michael Berk</name>
            <uri>https://www.linkedin.com/in/-michael-berk/</uri>
        </author>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="mlops" term="mlops"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangGraph with Model From Code]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code"/>
        <updated>2024-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this blog, we'll guide you through creating a LangGraph chatbot using MLflow. By combining MLflow with LangGraph's ability to create and manage cyclical graphs, you can create powerful stateful, multi-actor applications in a scalable fashion.]]></summary>
        <content type="html"><![CDATA[<p>In this blog, we'll guide you through creating a LangGraph chatbot using MLflow. By combining MLflow with LangGraph's ability to create and manage cyclical graphs, you can create powerful stateful, multi-actor applications in a scalable fashion.</p>
<p>Throughout this post we will demonstrate how to leverage MLflow's capabilities to create a serializable and servable MLflow model which can easily be tracked, versioned, and deployed on a variety of servers. We'll be using the <a href="https://mlflow.org/docs/latest/llms/langchain/index.html" target="_blank" rel="noopener noreferrer">langchain flavor</a> combined with MLflow's <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">model from code</a> feature.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-langgraph">What is LangGraph?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#what-is-langgraph" class="hash-link" aria-label="Direct link to What is LangGraph?" title="Direct link to What is LangGraph?">​</a></h3>
<p><a href="https://langchain-ai.github.io/langgraph/" target="_blank" rel="noopener noreferrer">LangGraph</a> is a library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows. Compared to other LLM frameworks, it offers these core benefits:</p>
<ul>
<li><strong>Cycles and Branching</strong>: Implement loops and conditionals in your apps.</li>
<li><strong>Persistence</strong>: Automatically save state after each step in the graph. Pause and resume the graph execution at any point to support error recovery, human-in-the-loop workflows, time travel and more.</li>
<li><strong>Human-in-the-Loop</strong>: Interrupt graph execution to approve or edit next action planned by the agent.</li>
<li><strong>Streaming Support</strong>: Stream outputs as they are produced by each node (including token streaming).</li>
<li><strong>Integration with LangChain</strong>: LangGraph integrates seamlessly with LangChain.</li>
</ul>
<p>LangGraph allows you to define flows that involve cycles, essential for most agentic architectures, differentiating it from DAG-based solutions. As a very low-level framework, it provides fine-grained control over both the flow and state of your application, crucial for creating reliable agents. Additionally, LangGraph includes built-in persistence, enabling advanced human-in-the-loop and memory features.</p>
<p>LangGraph is inspired by Pregel and Apache Beam. The public interface draws inspiration from NetworkX. LangGraph is built by LangChain Inc, the creators of LangChain, but can be used without LangChain.</p>
<p>For a full walkthrough, check out the <a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/" target="_blank" rel="noopener noreferrer">LangGraph Quickstart</a> and for more on the fundamentals of design with LangGraph, check out the <a href="https://langchain-ai.github.io/langgraph/concepts/#human-in-the-loop" target="_blank" rel="noopener noreferrer">conceptual guides</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1---setup">1 - Setup<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#1---setup" class="hash-link" aria-label="Direct link to 1 - Setup" title="Direct link to 1 - Setup">​</a></h2>
<p>First, we must install the required dependencies. We will use OpenAI for our LLM in this example, but using LangChain with LangGraph makes it easy to substitute any alternative supported LLM or LLM provider.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">capture</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">pip install langchain_openai</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token number" style="color:rgb(181, 206, 168)">.0</span><span class="token plain"> langchain</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.3</span><span class="token number" style="color:rgb(181, 206, 168)">.0</span><span class="token plain"> langgraph</span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token number" style="color:rgb(181, 206, 168)">.27</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">pip install </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain">U mlflow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Next, let's get our relevant secrets. <code>getpass</code>, as demonstrated in the <a href="https://langchain-ai.github.io/langgraph/tutorials/introduction/#setup" target="_blank" rel="noopener noreferrer">LangGraph quickstart</a> is a great way to insert your keys into an interactive jupyter environment.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set required environment variables for authenticating to OpenAI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Check additional MLflow tutorials for examples of authentication if needed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># https://mlflow.org/docs/latest/llms/openai/guide/index.html#direct-openai-service-usage</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set the OPENAI_API_KEY environment variable."</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2---custom-utilities">2 - Custom Utilities<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#2---custom-utilities" class="hash-link" aria-label="Direct link to 2 - Custom Utilities" title="Direct link to 2 - Custom Utilities">​</a></h2>
<p>While this is a demo, it's good practice to separate reusable utilities into a separate file/directory. Below we create three general utilities that theoretically would valuable when building additional MLflow + LangGraph implementations.</p>
<p>Note that we use the magic <code>%%writefile</code> command to create a new file in a jupyter notebook context. If you're running this outside of an interactive notebook, simply create the file below, omitting the <code>%%writefile {FILE_NAME}.py</code> line.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">writefile langgraph_utils</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">py</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># omit this line if directly creating this file; this command is purely for running within Jupyter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Union</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pregel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">io </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> AddableValuesDict</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_langgraph_message_to_mlflow_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> AddableValuesDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    langgraph_type_to_mlflow_role </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"human"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"ai"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"assistant"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"system"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> type_clean </span><span class="token operator" style="color:rgb(212, 212, 212)">:=</span><span class="token plain"> langgraph_type_to_mlflow_role</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> type_clean</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> langgraph_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Incorrect role specified: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">langgraph_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation builtin" style="color:rgb(86, 156, 214)">type</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">get_most_recent_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> AddableValuesDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    most_recent_message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> _langgraph_message_to_mlflow_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">most_recent_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">increment_message_history</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> AddableValuesDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> new_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Union</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> AddableValuesDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">isinstance</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">new_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> AddableValuesDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        new_message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> _langgraph_message_to_mlflow_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">new_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        _langgraph_message_to_mlflow_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> message </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> message_history </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">new_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>By the end of this step, you should see a new file in your current directory with the name <code>langgraph_utils.py</code>.</p>
<p>Note that it's best practice to add unit tests and properly organize your project into logically structured directories.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3---log-the-langgraph-model">3 - Log the LangGraph Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#3---log-the-langgraph-model" class="hash-link" aria-label="Direct link to 3 - Log the LangGraph Model" title="Direct link to 3 - Log the LangGraph Model">​</a></h2>
<p>Great! Now that we have some reusable utilities located in <code>./langgraph_utils.py</code>, we are ready to log the model with MLflow's official LangGraph flavor.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="31---create-our-model-from-code-file">3.1 - Create our Model-From-Code File<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#31---create-our-model-from-code-file" class="hash-link" aria-label="Direct link to 3.1 - Create our Model-From-Code File" title="Direct link to 3.1 - Create our Model-From-Code File">​</a></h3>
<p>Quickly, some background. MLflow looks to serialize model artifacts to the MLflow tracking server. Many popular ML packages don't have robust serialization and deserialization support, so MLflow looks to augment this functionality via the <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">models from code</a> feature. With models from code, we're able to leverage Python as the serialization format, instead of popular alternatives such as JSON or pkl. This opens up tons of flexibility and stability.</p>
<p>To create a Python file with models from code, we must perform the following steps:</p>
<ol>
<li>Create a new python file. Let's call it <code>graph.py</code>.</li>
<li>Define our langgraph graph.</li>
<li>Leverage <a href="https://mlflow.org/docs/latest/python_api/mlflow.models.html#mlflow.models.set_model" target="_blank" rel="noopener noreferrer">mlflow.models.set_model</a> to indicate to MLflow which object in the Python script is our model of interest.</li>
</ol>
<p>That's it!</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token operator" style="color:rgb(212, 212, 212)">%</span><span class="token plain">writefile graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">py</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># omit this line if directly creating this file; this command is purely for running within Jupyter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain_openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ChatOpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> StateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> START</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> END</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">message </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> add_messages</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">state </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> CompiledStateGraph</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> TypedDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> Annotated</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> CompiledStateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Create example chatbot from LangGraph Quickstart."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set the OPENAI_API_KEY environment variable."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">TypedDict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> Annotated</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> add_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> StateGraph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ChatOpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">chatbot</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> State</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">llm</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_node</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> chatbot</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_edge</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">START</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_edge</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"chatbot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> END</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    graph </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> graph_builder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">compile</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> graph</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set are model to be leveraged via model from code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">load_graph</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="32---log-with-model-from-code">3.2 - Log with "Model from Code"<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#32---log-with-model-from-code" class="hash-link" aria-label="Direct link to 3.2 - Log with &quot;Model from Code&quot;" title="Direct link to 3.2 - Log with &quot;Model from Code&quot;">​</a></h3>
<p>After creating this implementation, we can leverage the standard MLflow APIs to log the model.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lc_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"graph.py"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># Path to our model Python file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"langgraph"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_uri </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4---use-the-logged-model">4 - Use the Logged Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#4---use-the-logged-model" class="hash-link" aria-label="Direct link to 4 - Use the Logged Model" title="Direct link to 4 - Use the Logged Model">​</a></h2>
<p>Now that we have successfully logged a model, we can load it and leverage it for inference.</p>
<p>In the code below, we demonstrate that our chain has chatbot functionality!</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom utilities for handling chat history</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langgraph_utils </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    increment_message_history</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    get_most_recent_message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Enable tracing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Tracing example"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)"># In Databricks, use an absolute path. Visit Databricks docs for more.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Show inference and message history functionality</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"-------- Message 1 -----------"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"What's my name?"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">get_most_recent_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"\n-------- Message 2 -----------"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"My name is Morpheus."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">new_messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> increment_message_history</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> new_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">get_most_recent_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"\n-------- Message 3 -----------"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">message </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"What is my name?"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">new_messages </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> increment_message_history</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">response</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"role"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"user"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"content"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> message</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">payload </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"messages"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> new_messages</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">response </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">payload</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"User: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Agent: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">get_most_recent_message</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation interpolation">response</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ouput:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 1 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: What's my name?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: I'm sorry, I cannot guess your name as I do not have access to that information. If you would like to share your name with me, feel free to do so.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 2 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: My name is Morpheus.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: Nice to meet you, Morpheus! How can I assist you today?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">-------- Message 3 -----------</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">User: What is my name?</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">Agent: Your name is Morpheus.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="41---mlflow-tracing">4.1 - MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#41---mlflow-tracing" class="hash-link" aria-label="Direct link to 4.1 - MLflow Tracing" title="Direct link to 4.1 - MLflow Tracing">​</a></h3>
<p>Before concluding, let's demonstrate <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow tracing</a>.</p>
<p>MLflow Tracing is a feature that enhances LLM observability in your Generative AI (GenAI) applications by capturing detailed information about the execution of your application’s services. Tracing provides a way to record the inputs, outputs, and metadata associated with each intermediate step of a request, enabling you to easily pinpoint the source of bugs and unexpected behaviors.</p>
<p>Start the MLflow server as outlined in the <a href="https://mlflow.org/docs/latest/tracking/server.html" target="_blank" rel="noopener noreferrer">tracking server docs</a>. After entering the MLflow UI, we can see our experiment and corresponding traces.</p>
<p><img loading="lazy" alt="MLflow UI Experiment Traces" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/mlflow_ui_experiment_traces-ef274042459cdbbfece8fd37aa3f0ba9.png" width="2352" height="1280" class="img_ev3q"></p>
<p>As you can see, we've logged our traces and can easily see them by clicking our experiment of interest and the then the "Tracing" tab.</p>
<p><img loading="lazy" alt="MLflow UI Trace" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/mlflow_ui_trace-00b0839204bb937ac3cc7d6dfd9f7d54.png" width="2926" height="1896" class="img_ev3q"></p>
<p>After clicking on one of the traces, we can now see run execution for a single query. Notice that we log inputs, outputs, and lots of great metadata such as usage and invocation parameters. As we scale our application both from a usage and complexity perspective, this thread-safe and highly-performant tracking system will ensure robust monitoring of the app.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5---summary">5 - Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/langgraph-model-from-code#5---summary" class="hash-link" aria-label="Direct link to 5 - Summary" title="Direct link to 5 - Summary">​</a></h2>
<p>There are many logical extensions of the this tutorial, however the MLflow components can remain largely unchanged. Some examples include persisting chat history to a database, implementing a more complex langgraph object, productionizing this solution, and much more!</p>
<p>To summarize, here's what was covered in this tutorial:</p>
<ul>
<li>Creating a simple LangGraph chain.</li>
<li>Leveraging MLflow <a href="https://mlflow.org/docs/latest/models.html#models-from-code" target="_blank" rel="noopener noreferrer">model from code</a> functionality to log our graph.</li>
<li>Loading the model via the standard MLflow APIs.</li>
<li>Leveraging <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow tracing</a> to view graph execution.</li>
</ul>
<p>Happy coding!</p>]]></content>
        <author>
            <name>Michael Berk</name>
            <uri>https://www.linkedin.com/in/-michael-berk/</uri>
        </author>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="genai" term="genai"/>
        <category label="mlops" term="mlops"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyFunc in Practice]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice"/>
        <updated>2024-07-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Creative Applications of MLflow Pyfunc in Machine Learning Projects]]></summary>
        <content type="html"><![CDATA[<p>If you're looking to fully leverage the capabilities of <code>mlflow.pyfunc</code> and understand how it can be utilized in a Machine Learning project, this blog post will guide you through the process. MLflow PyFunc offers creative freedom and flexibility, allowing the development of complex systems encapsulated as models in MLflow that follow the same lifecycle as traditional ones. This blog will showcase how to create multi-model setups, seamlessly connect to databases, and implement your own custom fit method in your MLflow PyFunc model.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>This blog post demonstrates the capabilities of <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html" target="_blank" rel="noopener noreferrer">MLflow PyFunc</a> and how it can be utilized to build a multi-model setup encapsulated as a PyFunc flavor model in MLflow. This approach allows ensemble models to follow the same lifecycle as traditional <a href="https://mlflow.org/docs/latest/models.html#built-in-model-flavors" target="_blank" rel="noopener noreferrer">Built-In Model Flavors</a> in MLflow.</p>
<p>But first, let's use an analogy to get you familiarized with the concept of ensemble models and why you should consider this solution in your next Machine Learning project.</p>
<p>Imagine you are in the market to buy a house. Would you make a decision based solely on the first house you visit and the advice of a single real estate agent? Of course not! The process of buying a house involves considering multiple factors and gathering information from various sources to make an informed decision.</p>
<p>The house buying process explained:</p>
<ul>
<li><strong>Identify Your Needs</strong>: Determine whether you want a new or used house, the type of house, the model, and the year of construction.</li>
<li><strong>Research</strong>: Look for a list of available houses, check for discounts and offers, read customer reviews, and seek opinions from friends and family.</li>
<li><strong>Evaluate</strong>: Consider the performance, location, neighborhood amenities, and price range.</li>
<li><strong>Compare</strong>: Compare multiple houses to find the best fit for your needs and budget.</li>
</ul>
<p>In short, you wouldn’t directly reach a conclusion but would instead make a decision considering all the aforementioned factors before deciding on the best choice.</p>
<p>Ensemble models in Machine Learning operate on a similar idea. Ensemble learning helps improve Machine Learning results by combining several models to improve predictive performance compared to a single model. The performance increase can be due to several factors such as the reduction in variance by averaging multiple models or reducing bias by focusing on errors of previous models. There are several types of ensemble learning techniques exists such as:</p>
<ul>
<li><strong>Averaging</strong></li>
<li><strong>Weighted Averaging</strong></li>
<li><strong>Bagging</strong></li>
<li><strong>Boosting</strong></li>
<li><strong>Stacking</strong></li>
</ul>
<p>However, developing such systems requires careful management of the lifecycle of ensemble models, as integrating diverse models can be highly complex. This is where MLflow PyFunc becomes invaluable. It offers the flexibility to build complex systems, treating the entire ensemble as a model that adheres to the same lifecycle processes as traditional models. Essentially, MLflow PyFunc allows the creation of custom methods tailored to ensemble models, serving as an alternative to the built-in MLflow flavors available for popular frameworks such as scikit-learn, PyTorch, and LangChain.</p>
<p>This blog utilizes the house price dataset from <a href="https://www.kaggle.com/" target="_blank" rel="noopener noreferrer">Kaggle</a> to demonstrate the development and management of ensemble models through MLflow.</p>
<p>We will leverage various tools and technologies to highlight the capabilities of MLflow PyFunc models. Before delving into the ensemble model itself, we will explore how these components integrate to create a robust and efficient Machine Learning pipeline.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="components-of-the-project">Components of the Project<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#components-of-the-project" class="hash-link" aria-label="Direct link to Components of the Project" title="Direct link to Components of the Project">​</a></h3>
<p><strong>DuckDB</strong><br>
<!-- -->DuckDB is a high-performance analytical database system designed to be fast, reliable, portable, and easy to use. In this project, it showcases the integration of a database connection within the model context, facilitating efficient data handling directly within the model. <a href="https://duckdb.org/" target="_blank" rel="noopener noreferrer">Learn more about DuckDB</a>.</p>
<p><strong>scikit-learn (sklearn)</strong><br>
<!-- -->scikit-learn is a Machine Learning library for Python that provides efficient tools for data analysis and modelling. In this project, it is used to develop and evaluate various Machine Learning models that are integrated into our ensemble model. <a href="https://scikit-learn.org/" target="_blank" rel="noopener noreferrer">Learn more about scikit-learn</a>.</p>
<p><strong>MLflow</strong><br>
<!-- -->MLflow is an open-source platform for managing the end-to-end Machine Learning lifecycle, including experimentation, reproducibility, and deployment. In this project, it tracks experiments, manages model versions, and facilitates the deployment of MLflow PyFunc models in a similar manner to how we are familiar with individual flavors. <a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">Learn more about MLflow</a>.</p>
<blockquote>
<p><strong>Note:</strong> To reproduce this project, please refer to the official MLflow documentation for more details on setting up a simple local <a href="https://mlflow.org/docs/latest/tracking/server.html" target="_blank" rel="noopener noreferrer">MLflow Tracking Server</a>.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="creating-the-ensemble-model">Creating the Ensemble Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#creating-the-ensemble-model" class="hash-link" aria-label="Direct link to Creating the Ensemble Model" title="Direct link to Creating the Ensemble Model">​</a></h2>
<p>Creating a MLflow PyFunc ensemble model requires additional steps compared to using the built-in flavors for logging and working with popular Machine Learning frameworks.</p>
<p>To implement an ensemble model, you need to define an <code>mlflow.pyfunc</code> model, which involves creating a Python class that inherits from the <code>PythonModel</code> class and implementing its constructor and class methods. While the basic creation of a PyFunc model only requires implementing the <code>predict</code> method, an ensemble model requires additional methods to manage the models and obtain multi-model predictions. After instantiating the ensemble model, you must use the custom <code>fit</code> method to train the ensemble model's sub-models. Similar to an out-of-the-box MLflow model, you need to log the model along with its artifacts during the training run and then register the model in the MLflow Model Registry. A model alias <code>production</code> will also be added to the model to streamline both model updates and inference. Model aliases allow you to assign a mutable, named reference to a specific version of a registered model. By assigning the alias to a particular model version, it can be easily referenced via a model URI or the model registry API. This setup allows for seamless updates to the model version used for inference without changing the serving workload code. For more details, refer to <a href="https://mlflow.org/docs/latest/model-registry.html#deploy-and-organize-models-with-aliases-and-tags" target="_blank" rel="noopener noreferrer">Deploy and Organize Models with Aliases and Tags</a>.</p>
<p>The following sections, as depicted in the diagram, detail the implementation of each method for the ensemble model, providing a comprehensive understanding of defining, managing, and utilizing an ensemble model with MLflow PyFunc.</p>
<p><img loading="lazy" alt="Ensemble Model Architecture" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-architecture-2b00df62594a4030a01d626d8d06d2be.png" width="1545" height="1200" class="img_ev3q"></p>
<p>Before delving into the detailed implementation of each method, let's first review the skeleton of our <code>EnsembleModel</code> class. This skeleton serves as a blueprint for understanding the structure of the ensemble model. The subsequent sections will provide an overview and code for both the default methods provided by MLflow PyFunc and the custom methods implemented for the ensemble model.</p>
<p>Here is the skeleton of the <code>EnsembleModel</code> class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Ensemble model class leveraging Pyfunc for multi-model integration in MLflow."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Initialize the EnsembleModel instance."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Add strategies to the DuckDB database."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Perform feature engineering on input data."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Initialize models and their hyperparameter grids."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Train the ensemble of models."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Predict using the ensemble of models."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Load the preprocessor and models from the MLflow context."""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initializing-the-ensemblemodel">Initializing the EnsembleModel<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#initializing-the-ensemblemodel" class="hash-link" aria-label="Direct link to Initializing the EnsembleModel" title="Direct link to Initializing the EnsembleModel">​</a></h3>
<p>The constructor method in the ensemble model is crucial for setting up its essential elements. It establishes key attributes such as the preprocessor, a dictionary to store trained models, the path to a DuckDB database, and a pandas DataFrame for managing different ensemble strategies. Additionally, it takes advantage of the <code>initialize_models</code> method to define the sub-models integrated into the ensemble.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Initializes the EnsembleModel instance.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Sets up an empty preprocessing pipeline, a dictionary for fitted models,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    and a DataFrame to store strategies. Also calls the method to initialize sub-models.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="adding-strategies-and-saving-to-the-database">Adding Strategies and Saving to the Database<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#adding-strategies-and-saving-to-the-database" class="hash-link" aria-label="Direct link to Adding Strategies and Saving to the Database" title="Direct link to Adding Strategies and Saving to the Database">​</a></h3>
<p>The custom-defined <code>add_strategy_and_save_to_db</code> method enables the addition of new ensemble strategies to the model and their storage in a DuckDB database. This method accepts a pandas DataFrame containing the strategies and the database path as inputs. It appends the new strategies to the existing ones and saves them in the database specified during the initialization of the ensemble model. This method facilitates the management of various ensemble strategies and ensures their persistent storage for future use.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> strategy_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Add strategies from a DataFrame and save them to the DuckDB database.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        strategy_df (pd.DataFrame): DataFrame containing strategies.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        db_path (str): Path to the DuckDB database.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Update the instance-level database path for the current object</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> db_path</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Attempt to concatenate new strategies with the existing DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">try</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">concat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> strategy_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> ignore_index</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">except</span><span class="token plain"> Exception </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print an error message if any exceptions occur during concatenation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Error concatenating DataFrames: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">e</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Exit early to prevent further errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use context manager for the database connection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">try</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> duckdb</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Register the strategies DataFrame as a temporary table in DuckDB</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy_df"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Drop any existing strategies table and create a new one with updated strategies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"DROP TABLE IF EXISTS strategies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            con</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"CREATE TABLE strategies AS SELECT * FROM strategy_df"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">except</span><span class="token plain"> Exception </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> e</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print an error message if any exceptions occur during database operations</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Error executing database operations: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">e</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The following example demonstrates how to use this method to add strategies to the database.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define strategies for the ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategy_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a DataFrame to hold the strategy information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add strategies to the database</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategies_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The DataFrame <code>strategy_data</code> includes:</p>
<ul>
<li><strong>strategy</strong>: The name of the strategy for model predictions.</li>
<li><strong>model_list</strong>: A comma-separated list of model names included in the strategy.</li>
<li><strong>weights</strong>: A comma-separated list of weights assigned to each model in the <code>model_list</code>. If not provided, implies equal weights or default values.</li>
</ul>
<table><thead><tr><th>strategy</th><th>model_list</th><th>weights</th></tr></thead><tbody><tr><td>average_1</td><td>random_forest,xgboost,decision_tree,gradient_boosting,adaboost</td><td>1</td></tr></tbody></table>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="feature-engineering">Feature Engineering<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#feature-engineering" class="hash-link" aria-label="Direct link to Feature Engineering" title="Direct link to Feature Engineering">​</a></h3>
<p>The <code>feature_engineering</code> method preprocesses input data by handling missing values, scaling numerical features, and encoding categorical features. It applies different transformations to both numerical and categorical features, and returns the processed features as a NumPy array. This method is crucial for preparing data in a suitable format for model training, ensuring consistency and enhancing model performance.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">compose </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ColumnTransformer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">impute </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SimpleImputer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pipeline </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Pipeline</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> StandardScaler</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ndarray</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Applies feature engineering to the input data X, including imputation, scaling, and encoding.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        X (pd.DataFrame): Input features with potential categorical and numerical columns.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        np.ndarray: Processed feature array after transformations.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Convert columns with 'object' dtype to 'category' dtype for proper handling of categorical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">apply</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">lambda</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">astype</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"category"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> col</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dtypes </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"object"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token plain"> col</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Identify categorical and numerical features from the DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    categorical_features </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">select_dtypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">include</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"category"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    numerical_features </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">select_dtypes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">include</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"number"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the pipeline for numerical features: imputation followed by scaling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    numeric_transformer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Pipeline</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        steps</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"imputer"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                SimpleImputer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"median"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace missing values with the median</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"scaler"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                StandardScaler</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Standardize features by removing the mean and scaling to unit variance</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the pipeline for categorical features: imputation followed by one-hot encoding</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    categorical_transformer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Pipeline</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        steps</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"imputer"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                SimpleImputer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"most_frequent"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace missing values with the most frequent value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"onehot"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">handle_unknown</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ignore"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Encode categorical features as a one-hot numeric array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a ColumnTransformer to apply the appropriate pipelines to the respective feature types</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ColumnTransformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        transformers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"num"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                numeric_transformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                numerical_features</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the numeric pipeline to numerical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"cat"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                categorical_transformer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                categorical_features</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the categorical pipeline to categorical features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit and transform the input data using the preprocessor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit_transform</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Store the preprocessor for future use in the predict method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> preprocessor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> X_processed</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="initializing-models">Initializing Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#initializing-models" class="hash-link" aria-label="Direct link to Initializing Models" title="Direct link to Initializing Models">​</a></h3>
<p>The <code>initialize_models</code> method sets up a dictionary of various Machine Learning models along with their hyperparameter grids. This includes models such as <code>RandomForest</code>, <code>XGBoost</code>, <code>DecisionTree</code>, <code>GradientBoosting</code>, and <code>AdaBoost</code>. This step is crucial for preparing the ensemble’s sub-models and specifying the hyperparameters to adjust during training, ensuring that each model is configured correctly and ready for training.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    AdaBoostRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    GradientBoostingRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">tree </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> DecisionTreeRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> xgboost </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> XGBRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">initialize_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Initializes a dictionary of models along with their hyperparameter grids for grid search.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Define various regression models with their respective hyperparameter grids for tuning</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            XGBRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            DecisionTreeRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            GradientBoostingRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"max_depth"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            AdaBoostRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"n_estimators"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"learning_rate"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0.01</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1.0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-fit-method-to-train-and-save-multi-models">Defining a Custom <code>fit</code> Method to Train and Save Multi-Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-custom-fit-method-to-train-and-save-multi-models" class="hash-link" aria-label="Direct link to defining-a-custom-fit-method-to-train-and-save-multi-models" title="Direct link to defining-a-custom-fit-method-to-train-and-save-multi-models">​</a></h3>
<p>As already highlighted in the previous method, a key feature of MLflow PyFunc models is the ability to define custom methods, providing significant flexibility and customization for various tasks. In the multi-model PyFunc setup, the <code>fit</code> method is essential for customizing and optimizing multiple sub-models. It manages the training and fine-tuning of algorithms such as <code>RandomForestRegressor</code>, <code>XGBRegressor</code>, <code>DecisionTreeRegressor</code>, <code>GradientBoostingRegressor</code>, and <code>AdaBoostRegressor</code>. For demonstration purposes, Grid Search is used, which, while straightforward, can be computationally intensive and time-consuming, especially for ensemble models. To enhance efficiency, advanced optimization methods such as Bayesian optimization are recommended. Tools like <a href="https://optuna.org/" target="_blank" rel="noopener noreferrer">Optuna</a> and <a href="https://hyperopt.github.io/hyperopt/" target="_blank" rel="noopener noreferrer">Hyperopt</a> leverage probabilistic models to intelligently navigate the search space, significantly reducing the number of evaluations needed to identify optimal configurations.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> GridSearchCV</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">Series</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Trains the ensemble of models using the provided preprocessed training data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        X_train_processed (pd.DataFrame): Preprocessed feature matrix for training.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        y_train (pd.Series): Target variable for training.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        save_path (str): Directory path where trained models will be saved.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create the directory for saving models if it does not exist</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">makedirs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> exist_ok</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Iterate over each model and its parameter grid</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> param_grid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Perform GridSearchCV to find the best hyperparameters for the current model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        grid_search </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> GridSearchCV</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> param_grid</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> cv</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> n_jobs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> scoring</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"neg_mean_squared_error"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        grid_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the model with the training data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the best estimator from GridSearchCV</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        best_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> grid_search</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">best_estimator_</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> best_model</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the trained model to disk</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dump</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">best_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">save_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-predict-method-to-aggregate-multi-model-predictions">Defining a Custom <code>predict</code> Method to Aggregate Multi-model Predictions<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-custom-predict-method-to-aggregate-multi-model-predictions" class="hash-link" aria-label="Direct link to defining-a-custom-predict-method-to-aggregate-multi-model-predictions" title="Direct link to defining-a-custom-predict-method-to-aggregate-multi-model-predictions">​</a></h3>
<p>To streamline the inference process, every PyFunc model should define a custom <code>predict</code> method as the single entry point for inference. This approach abstracts the model's internal workings at inference time, whether dealing with a custom PyFunc model or an out-of-the-box MLflow built-in flavor for popular ML frameworks.</p>
<p>The custom <code>predict</code> method for the ensemble model is designed to collect and combine predictions from the sub-models, supporting various aggregation strategies (e.g., average, weighted). The process involves the following steps:</p>
<ol>
<li>Load the sub-model predictions aggregation strategy based on the user-defined approach.</li>
<li>Load the models to be used for inference.</li>
<li>Preprocess the input data.</li>
<li>Collect predictions from individual models.</li>
<li>Aggregate the model predictions according to the specified strategy.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> numpy </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> np</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">compose </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ColumnTransformer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">impute </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> SimpleImputer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pipeline </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Pipeline</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OneHotEncoder</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> StandardScaler</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ndarray</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Predicts the target variable using the ensemble of models based on the selected strategy.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        context: MLflow context object.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        model_input (pd.DataFrame): Input features for prediction.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        np.ndarray: Array of predicted values.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Raises:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        ValueError: If the strategy is unknown or no models are fitted.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Check if the 'strategy' column is present in the input DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">columns</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Extract the strategy and drop it from the input features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Strategy: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_input</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation string" style="color:rgb(206, 145, 120)">'strategy'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">iloc</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation interpolation number" style="color:rgb(181, 206, 168)">0</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">drop</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> inplace</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Default to 'average' strategy if none is provided</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the strategy details from the pre-loaded strategies DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    loaded_strategy </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">empty</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if the specified strategy is not found</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Strategy '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">' not found in the pre-loaded strategies."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Parse the list of models to be used for prediction</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_list </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">","</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Transform input features using the preprocessor, if available</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Feature engineering is required if the preprocessor is not set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use the existing preprocessor to transform the features</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        X_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">transform</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">not</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if no models are fitted</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"No fitted models found. Please fit the models first."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Collect predictions from all models specified in the strategy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    predictions </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> model_list</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Apply the specified strategy to combine the model predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate the average of predictions from all models</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">mean</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">elif</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Extract weights from the strategy and normalize them</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">w</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> w </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> loaded_strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">iloc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">","</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">array</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        weights </span><span class="token operator" style="color:rgb(212, 212, 212)">/=</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token builtin" style="color:rgb(86, 156, 214)">sum</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Ensure weights sum to 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Compute the weighted average of predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> np</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">average</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> weights</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">weights</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Raise an error if an unknown strategy is encountered</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Unknown strategy: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-load-context-custom-method-to-initialize-the-ensemble-model">Defining a <code>load context</code> custom method to initialize the Ensemble Model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#defining-a-load-context-custom-method-to-initialize-the-ensemble-model" class="hash-link" aria-label="Direct link to defining-a-load-context-custom-method-to-initialize-the-ensemble-model" title="Direct link to defining-a-load-context-custom-method-to-initialize-the-ensemble-model">​</a></h3>
<p>When loading the ensemble model using <code>mlflow.pyfunc.load_model</code>, the custom <code>load_context</code> method is executed to handle the required model initialization steps before inference.</p>
<p>This initialization process includes:</p>
<ol>
<li>Loading model artifacts, including both the pre-trained models and the preprocessor, using the context object that contains the artifacts references.</li>
<li>Fetching strategies definitions from DuckDB Database.</li>
</ol>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> duckdb</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token operator" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Loads the preprocessor and models from the MLflow context.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        context: MLflow context object which provides access to saved artifacts.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the preprocessor if its path is specified in the context artifacts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    preprocessor_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> preprocessor_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">preprocessor_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load each model from the context artifacts and store it in the fitted_models dictionary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">keys</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">get</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> model_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fitted_models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token comment" style="color:rgb(106, 153, 85)"># Print a warning if a model is not found in the context artifacts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Warning: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)"> model not found in artifacts. Initialized but not fitted."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Reconnect to the DuckDB database to load the strategies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    conn </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> duckdb</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">db_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Fetch strategies from the DuckDB database into the strategies DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"SELECT * FROM strategies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fetchdf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Close the database connection</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    conn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="bringing-it-all-together">Bringing It All Together<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#bringing-it-all-together" class="hash-link" aria-label="Direct link to Bringing It All Together" title="Direct link to Bringing It All Together">​</a></h3>
<p>Having explored each method in detail, the next step is to integrate them to observe the complete implementation in action. This will offer a comprehensive view of how the components interact to achieve the project's objectives.</p>
<p>You can use the skeleton provided in the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#creating-the-ensemble-model">Creating the Ensemble Model</a> section to assemble the entire <code>EnsembleModel</code> class. Each method was demonstrated with its specific dependencies included. Now, you just need to combine these methods into the class definition, following the outline given. Feel free to add any custom logic that fits your specific use case or enhances the functionality of the ensemble model.</p>
<p>After everything has been encapsulated in a PyFunc model, the lifecycle of the ensemble model closely mirrors that of a traditional MLflow model. The following diagram depicts the lifecycle of the model.</p>
<p><img loading="lazy" alt="Ensemble Model Lifecycle" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-lifecycle-f9bf951e52294104ffaaf1e91f473226.png" width="2471" height="215" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-tracking">MLflow Tracking<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#mlflow-tracking" class="hash-link" aria-label="Direct link to MLflow Tracking" title="Direct link to MLflow Tracking">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-the-fit-method-to-train-sub-models">Using the <code>fit</code> Method to Train Sub-Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#using-the-fit-method-to-train-sub-models" class="hash-link" aria-label="Direct link to using-the-fit-method-to-train-sub-models" title="Direct link to using-the-fit-method-to-train-sub-models">​</a></h3>
<p>Once the data is preprocessed, we use the custom <code>fit</code> method to train all the sub-models in our Ensemble Model. This method applies grid search to find the best hyperparameters for each sub-model, fits them to the training data, and saves the trained models for future use.</p>
<blockquote>
<p><strong>Note:</strong> For the following block of code, you might need to set the MLflow Tracking Server if you're not using Managed MLflow. In the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#components-of-the-project">Components of the Project</a>, there's a note about setting up a simple local MLflow Tracking Server. For this step of the project, you'll need to point MLflow to the server’s URI that has been configured and is currently running. Don't forget to set the server URI variable <code>remote_server_uri</code>. You can refer to the official MLflow documentation for more details on <a href="https://mlflow.org/docs/latest/tracking/server.html#logging-to-a-tracking-server" target="_blank" rel="noopener noreferrer">Logging to a Tracking Server</a>.</p>
</blockquote>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datetime</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> joblib</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">signature </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the MLflow client</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">MlflowClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set the URI of your MLflow Tracking Server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">remote_server_uri </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"..."</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Replace with your server URI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Point MLflow to your MLflow Tracking Server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_tracking_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">remote_server_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set the experiment name for organizing runs in MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Ensemble Model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load dataset from the provided URL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">read_csv</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"https://github.com/zobi123/Machine-Learning-project-with-Python/blob/master/Housing.csv?raw=true"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Separate features and target variable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">drop</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"price"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> axis</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">y </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"price"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Split dataset into training and test sets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> test_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a directory to save the models and related files</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">makedirs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> exist_ok</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize and train the EnsembleModel</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> EnsembleModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Preprocess the training data using the defined feature engineering method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train_processed </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">feature_engineering</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the models with the preprocessed training data and save them</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train_processed</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> save_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Infer the model signature using a small example from the training data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use a single sample for signature inference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"average"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">example_output </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">example_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> example_output</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the preprocessing pipeline to disk</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">joblib</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">dump</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">preprocessor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/preprocessor.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define strategies for the ensemble model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategy_data </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"average_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"model_list"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,decision_tree,gradient_boosting,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"random_forest,xgboost,gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"decision_tree,adaboost"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost,gradient_boosting"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weights"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.2,0.3,0.1,0.2,0.2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.4,0.4,0.2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.5,0.5"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"0.7,0.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a DataFrame to hold the strategy information</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategy_data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add strategies to the database</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">add_strategy_and_save_to_db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">strategies_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"models/strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the Conda environment configuration for the MLflow model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">conda_env </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"name"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow-env"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"channels"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"conda-forge"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"dependencies"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"python=3.8"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"scikit-learn=1.3.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"xgboost=2.0.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"joblib=1.2.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"pandas=1.5.3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"numpy=1.23.5"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token string" style="color:rgb(206, 145, 120)">"duckdb=1.0.0"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"pip"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"mlflow==2.14.1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Get current timestamp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">timestamp </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">datetime</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">now</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">isoformat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using MLflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">run_name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">timestamp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Log parameters, artifacts, and model signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_param</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"model_type"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"EnsembleModel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">model_name</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> model_name </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">keys</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"preprocessor.pkl"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategies_db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"models"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"strategies.db"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">ensemble_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        conda_env</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">conda_env</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        signature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"Model logged in run </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="registering-the-model-with-mlflow">Registering the Model with MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#registering-the-model-with-mlflow" class="hash-link" aria-label="Direct link to Registering the Model with MLflow" title="Direct link to Registering the Model with MLflow">​</a></h3>
<p>Following the completion of model training, the subsequent step involves registering the ensemble model with MLflow. This process entails logging the trained models, preprocessing pipelines, and associated strategies into the MLflow Tracking Server. This ensures that all components of the ensemble model are systematically saved and versioned, facilitating reproducibility and traceability.</p>
<p>Moreover, we will assign to this initial version of the model a production alias. This designation establishes a baseline model against which future iterations can be assessed. By marking this version as the <code>production</code> model, we can effectively benchmark improvements and confirm that subsequent versions yield measurable advancements over this established baseline.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Register the model in MLflow and assign a production alias</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_uri </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"runs:/</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">run</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">info</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token string-interpolation interpolation">run_id</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">/ensemble_model"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_details </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">register_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_registered_model_alias</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"ensemble_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> alias</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"production"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> version</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_details</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">version</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The following illustration demonstrates the complete lifecycle of our ensemble model within the MLflow UI up until this step.</p>
<p><img loading="lazy" alt="Ensemble Model within MLflow UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-mlflow-ui-241073e6b40b8f129f49f24f6e561102.gif" width="2918" height="1508" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-the-predict-method-to-perform-inference">Using the <code>predict</code> Method to Perform Inference<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#using-the-predict-method-to-perform-inference" class="hash-link" aria-label="Direct link to using-the-predict-method-to-perform-inference" title="Direct link to using-the-predict-method-to-perform-inference">​</a></h3>
<p>With the ensemble model registered in the MLflow Model Registry, it can now be utilized to predict house prices by aggregating the predictions from the various sub-models within the ensemble.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">metrics </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> r2_score</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the registered model using its alias</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">	model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"models:/ensemble_model@production"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the different strategies for evaluation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">strategies </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"average_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"average_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_1"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_2"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_3"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token string" style="color:rgb(206, 145, 120)">"weighted_4"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize a DataFrame to store the results of predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">results_df </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Iterate over each strategy, make predictions, and calculate R^2 scores</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">for</span><span class="token plain"> strategy </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> strategies</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a test DataFrame with the current strategy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_test_with_params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">copy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    X_test_with_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"strategy"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> strategy</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Use the loaded model to make predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    y_pred </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_test_with_params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Calculate R^2 score for the predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    r2 </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> r2_score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">y_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_pred</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Store the results and R^2 score in the results DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">strategy</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_pred</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"r2_</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">strategy</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> r2</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Add the actual target values to the results DataFrame</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">results_df</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"y_test"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> y_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">values</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Similar to out-of-the-box MLflow models, you begin by loading the ensemble model using <code>mlflow.pyfunc.load_model</code> to generate the house price predictions. After defining the different strategies for aggregating sub-model predictions and creating the model input containing both the housing data features and aggregation strategy, simply call the ensemble model's <code>predict</code> method to get the aggregated house price prediction.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluating-model-performance-with-different-strategies">Evaluating Model Performance with Different Strategies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#evaluating-model-performance-with-different-strategies" class="hash-link" aria-label="Direct link to Evaluating Model Performance with Different Strategies" title="Direct link to Evaluating Model Performance with Different Strategies">​</a></h3>
<p>To evaluate the performance of our ensemble model, we calculated the average R² scores for different aggregation strategies. These strategies include both simple averaging and weighted combinations of sub-models, with varying configurations of models and their respective weights. By comparing the R² scores, we can assess which strategies provide the most accurate predictions.</p>
<p>The bar graph below illustrates the average R² scores for each strategy. Higher values indicate better predictive performance. As shown in the graph, the ensemble strategies generally outperform individual models as depicted in our second strategy that is relying on a single <code>DecisionTree</code> (average_2), demonstrating the effectiveness of aggregating predictions from multiple sub-models. This visual comparison highlights the benefits of using an ensemble approach, particularly with weighted strategies that optimize the contribution of each sub-model.</p>
<p><img loading="lazy" alt="Ensemble Model Evaluation" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ensemble-model-evaluation-19d41715d23f6288ea9d3074701fcd05.png" width="1585" height="1087" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>This blog post highlights the capabilities of mlflow.pyfunc and its application in a Machine Learning project. This powerful feature of MLflow provides creative freedom and flexibility, enabling teams to build complex systems encapsulated as models within MLflow, following the same lifecycle as traditional models. The post showcases the creation of ensemble model setups, seamless integration with DuckDB, and the implementation of custom methods using this versatile module.</p>
<p>Beyond offering a structured approach to achieving desired outcomes, this blog demonstrates practical possibilities based on hands-on experience, discussing potential challenges and their solutions.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="additional-resources">Additional resources<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/pyfunc-in-practice#additional-resources" class="hash-link" aria-label="Direct link to Additional resources" title="Direct link to Additional resources">​</a></h2>
<p>Explore the following resources for a deeper understanding of MLflow PyFunc models:</p>
<ul>
<li><a href="https://mlflow.org/blog/custom-pyfunc" target="_blank" rel="noopener noreferrer">Custom MLflow Models with mlflow.pyfunc</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/part2-pyfunc-components.html" target="_blank" rel="noopener noreferrer">Understanding PyFunc in MLflow</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">Building Custom Python Function Models with MLflow</a></li>
<li><a href="https://mlflow.org/docs/latest/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.html" target="_blank" rel="noopener noreferrer">Deploy an MLflow PyFunc model with Model Serving</a></li>
</ul>]]></content>
        <author>
            <name>Hugo Carvalho</name>
            <uri>https://www.linkedin.com/in/hugodscarvalho/</uri>
        </author>
        <author>
            <name>Joana Ferreira</name>
            <uri>https://www.linkedin.com/in/joanaferreira96/</uri>
        </author>
        <author>
            <name>Rahul Pandey</name>
            <uri>https://www.linkedin.com/in/rahulpandey1901/</uri>
        </author>
        <author>
            <name>Filipe Miranda</name>
            <uri>https://www.linkedin.com/in/filipe-miranda-b576b186/</uri>
        </author>
        <category label="pyfunc" term="pyfunc"/>
        <category label="mlflow" term="mlflow"/>
        <category label="ensemble-models" term="ensemble-models"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing MLflow Tracing]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing"/>
        <updated>2024-06-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to announce the release of a powerful new feature in MLflow: MLflow Tracing.]]></summary>
        <content type="html"><![CDATA[<p>We're excited to announce the release of a powerful new feature in MLflow: <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">MLflow Tracing</a>.
This feature brings comprehensive instrumentation capabilities to your GenAI applications, enabling you to gain deep insights into the execution of your
models and workflows, from simple chat interfaces to complex multi-stage Retrieval Augmented Generation (RAG) applications.</p>
<blockquote>
<p>NOTE: MLflow Tracing has been released in MLflow 2.14.0 and is not available in previous versions.</p>
</blockquote>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introducing-mlflow-tracing">Introducing MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#introducing-mlflow-tracing" class="hash-link" aria-label="Direct link to Introducing MLflow Tracing" title="Direct link to Introducing MLflow Tracing">​</a></h2>
<p>Tracing is a critical aspect of understanding and optimizing complex applications, especially in the realm of machine learning and artificial intelligence.
With the release of MLflow Tracing, you can now easily capture, visualize, and analyze detailed execution traces of your GenAI applications.
This new feature aims to provide greater visibility and control over your applications' performance and behavior, aiding in everything from fine-tuning to debugging.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-mlflow-tracing">What is MLflow Tracing?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#what-is-mlflow-tracing" class="hash-link" aria-label="Direct link to What is MLflow Tracing?" title="Direct link to What is MLflow Tracing?">​</a></h2>
<p>MLflow Tracing offers a variety of methods to enable <a href="https://mlflow.org/docs/latest/llms/tracing/overview.html" target="_blank" rel="noopener noreferrer">tracing</a> in your applications:</p>
<ul>
<li><strong>Automated Tracing with LangChain</strong>: A fully automated integration with <a href="https://www.langchain.com/" target="_blank" rel="noopener noreferrer">LangChain</a> allows you to activate tracing simply by enabling <code>mlflow.langchain.autolog()</code>.</li>
<li><strong>Manual Trace Instrumentation with High-Level Fluent APIs</strong>: Use decorators, function wrappers, and context managers via the fluent API to add tracing functionality with minimal code modifications.</li>
<li><strong>Low-Level Client APIs for Tracing</strong>: The MLflow client API provides a thread-safe way to handle trace implementations for fine-grained control of what and when data is recorded.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-with-mlflow-tracing">Getting Started with MLflow Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#getting-started-with-mlflow-tracing" class="hash-link" aria-label="Direct link to Getting Started with MLflow Tracing" title="Direct link to Getting Started with MLflow Tracing">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="langchain-automatic-tracing">LangChain Automatic Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#langchain-automatic-tracing" class="hash-link" aria-label="Direct link to LangChain Automatic Tracing" title="Direct link to LangChain Automatic Tracing">​</a></h3>
<p>The easiest way to get started with MLflow Tracing is through the built-in integration with LangChain. By enabling autologging, traces are automatically logged to the active MLflow experiment when calling invocation APIs on chains. Here’s a quick example:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">prompts </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PromptTemplate</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> langchain_openai </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> OpenAI</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">assert</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"OPENAI_API_KEY"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">in</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">environ</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Please set your OPENAI_API_KEY environment variable."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"LangChain Tracing"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">langchain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">log_models</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> log_input_examples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">llm </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> OpenAI</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">temperature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.7</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_tokens</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">prompt_template </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Imagine you are {person}, and you are answering a question: {question}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> prompt_template </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> llm</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"person"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Richard Feynman"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"question"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Why should we colonize Mars?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">chain</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">invoke</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"person"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Linus Torvalds"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"question"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"Can I set everyone's access to sudo?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And this is what you will see after invoking the chains when navigating to the <strong>LangChain Tracing</strong> experiment in the MLflow UI:</p>
<p><img loading="lazy" alt="Traces in UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/tracing-ui-d5822d1e23426b65ff4008bf57d8cc83.gif" width="2048" height="1203" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="fluent-apis-for-manual-tracing">Fluent APIs for Manual Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#fluent-apis-for-manual-tracing" class="hash-link" aria-label="Direct link to Fluent APIs for Manual Tracing" title="Direct link to Fluent APIs for Manual Tracing">​</a></h3>
<p>For more control, you can use MLflow’s fluent APIs to manually instrument your code. This approach allows you to capture detailed trace data with minimal changes to your existing code.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="trace-decorator">Trace Decorator<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#trace-decorator" class="hash-link" aria-label="Direct link to Trace Decorator" title="Direct link to Trace Decorator">​</a></h4>
<p>The trace decorator captures the inputs and outputs of a function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Tracing Demo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">some_function</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> z</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">y </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> z</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">some_function</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="context-handler">Context Handler<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#context-handler" class="hash-link" aria-label="Direct link to Context Handler" title="Direct link to Context Handler">​</a></h4>
<p>The context handler is ideal for supplementing span information with additional data at the point of information generation:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">first_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> x </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> y</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@mlflow</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">second_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> b</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> a </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> b</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">do_math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> operation</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Math"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_inputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"a"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"x"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_attributes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"mode"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> operation</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        first </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> first_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">x</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        second </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> second_func</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">a</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        result </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> first </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> second </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> operation </span><span class="token operator" style="color:rgb(212, 212, 212)">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(86, 156, 214)">else</span><span class="token plain"> first </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"> second</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_outputs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"result"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">do_math</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"add"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="comprehensive-tracing-with-client-apis">Comprehensive Tracing with Client APIs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#comprehensive-tracing-with-client-apis" class="hash-link" aria-label="Direct link to Comprehensive Tracing with Client APIs" title="Direct link to Comprehensive Tracing with Client APIs">​</a></h3>
<p>For advanced use cases, the MLflow client API offers fine-grained control over trace management. These APIs allows you to create, manipulate, and retrieve traces programmatically, albeit with additional complexity throughout the implementation.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="starting-and-managing-traces-with-the-client-apis">Starting and Managing Traces with the Client APIs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#starting-and-managing-traces-with-the-client-apis" class="hash-link" aria-label="Direct link to Starting and Managing Traces with the Client APIs" title="Direct link to Starting and Managing Traces with the Client APIs">​</a></h4>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> MlflowClient</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> MlflowClient</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Start a new trace</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">root_span </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"my_trace"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">request_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> root_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">request_id</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Create a child span</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">child_span </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    name</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"child_span"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    parent_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">root_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">span_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    inputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"input_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"input_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"attribute_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"attribute_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># End the child span</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">child_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    span_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">child_span</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">span_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    outputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"output_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"output_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"custom_attribute"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># End the root span (trace)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">client</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">end_trace</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    request_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">request_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    outputs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"final_output_key"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"final_output_value"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    attributes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"token_usage"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"1174"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="diving-deeper-into-tracing">Diving Deeper into Tracing<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#diving-deeper-into-tracing" class="hash-link" aria-label="Direct link to Diving Deeper into Tracing" title="Direct link to Diving Deeper into Tracing">​</a></h2>
<p>MLflow Tracing is designed to be flexible and powerful, supporting various use cases from simple function tracing to complex, asynchronous workflows.</p>
<p>To learn more about this feature, <a href="https://mlflow.org/docs/latest/llms/tracing/index.html" target="_blank" rel="noopener noreferrer">read the guide</a>, <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow-tracing-fluent-python-apis" target="_blank" rel="noopener noreferrer">review the API Docs</a> and <a href="https://mlflow.org/docs/latest/llms/tracing/index.html#langchain-automatic-tracing" target="_blank" rel="noopener noreferrer">get started with the LangChain integration</a> today!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on This Journey<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-tracing#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on This Journey" title="Direct link to Join Us on This Journey">​</a></h2>
<p>The introduction of MLflow Tracing marks a significant milestone in our mission to provide comprehensive tools for managing machine learning workflows. We’re excited about the possibilities this new feature opens up and look forward to your <a href="https://github.com/mlflow/mlflow/issues" target="_blank" rel="noopener noreferrer">feedback</a> and <a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">contributions</a>.</p>
<p>For those in our community with a passion for sharing knowledge, we invite you to <a href="https://github.com/mlflow/mlflow-website/blob/main/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">collaborate</a>. Whether it’s writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community.</p>
<p>Stay tuned for more updates, and as always, happy coding!</p>]]></content>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="tracing" term="tracing"/>
        <category label="genai" term="genai"/>
        <category label="mlops" term="mlops"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deep Learning with MLflow (Part 2)]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2"/>
        <updated>2024-04-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Using MLflow's Deep Learning tracking features for fine tuning an LLM]]></summary>
        <content type="html"><![CDATA[<p>In the realm of deep learning, finetuning of pre-trained Large Language Models (LLMs) on private datasets is an excellent customization
option to increase a model’s relevancy for a specific task. This practice is not only common, but also essential for developing specialized
models, particularly for tasks like text classification and summarization.</p>
<p>In such scenarios, tools like MLflow are invaluable. Tracking tools like MLflow help to ensure that every aspect of the training
process - metrics, parameters, and artifacts - are reproducibly tracked and logged, allowing for the analysis, comparison, and sharing of tuning iterations.</p>
<p>In this blog post, we are going to be using <a href="https://mlflow.org/releases/2.12.1" target="_blank" rel="noopener noreferrer">MLflow 2.12</a> and the
<a href="https://mlflow.org/blog/deep-learning-part-1" target="_blank" rel="noopener noreferrer">recently introduced MLflow Deep Learning features</a> to track all the important aspects of fine
tuning a large language model for text classification, including the use of automated logging of training checkpoints in order to simplify
the process of resumption of training.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-case-fine-tuning-a-transformer-model-for-text-classification">Use Case: Fine Tuning a Transformer Model for Text Classification<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#use-case-fine-tuning-a-transformer-model-for-text-classification" class="hash-link" aria-label="Direct link to Use Case: Fine Tuning a Transformer Model for Text Classification" title="Direct link to Use Case: Fine Tuning a Transformer Model for Text Classification">​</a></h2>
<p>The example scenario that we're using within this blog utilizes the <a href="https://huggingface.co/datasets/coastalcph/lex_glue/viewer/unfair_tos" target="_blank" rel="noopener noreferrer">unfair-TOS</a> dataset.</p>
<p>In today’s world, it’s hard to find a service, platform, or even a consumer good that doesn’t have a legally-binding terms of service connected
with it. These encyclopedic size agreements, filled with dense legal jargon and sometimes baffling levels of specificity, are so large that
most people simply accept them without reading them. However, reports have indicated over time that occasionally, some suspiciously unfair
terms are embedded within them.</p>
<p>Addressing unfair clauses in Terms of Service (TOS) agreements through machine learning (ML) is particularly relevant due to the pressing
need for transparency and fairness in legal agreements that affect consumers. Consider the following clause from an example TOS
agreement: <strong>"We may revise these Terms from time to time. The changes will not be retroactive, and the most current version of the Terms, which will always..."</strong>
This clause stipulates that the service provider may suspend or terminate the service at any time for any reason,
with or without notice. Most people would consider this to be quite unfair.</p>
<p>While this sentence is buried quite deeply within a fairly dense document, an ML algorithm is not burdened by the exhaustion that a human
would have for combing through the text and identifying clauses that might seem a bit unfair. By automatically identifying potentially
unfair clauses, a transformers-based Deep Learning (DL) model can help protect consumers from exploitative practices, ensure greater compliance with legal standards,
and foster trust between service providers and users.</p>
<p>A base pre-trained transformer model, without specialized fine-tuning, faces several challenges in accurately identifying unfair Terms of Service clauses.
Firstly, it lacks the domain-specific knowledge essential for understanding complex legal language. Secondly, its training objectives are
too general to capture the nuanced interpretation required for legal analysis. Lastly, it may not effectively recognize the subtle
contextual meanings that determine the fairness of contractual terms, making it less effective for this specialized task.</p>
<p>Using prompt engineering to address the identification of unfair Terms of Service clauses with a closed-source Large language model
can be prohibitively expensive. This approach requires extensive trial and error to refine prompts without the ability to tweak
the underlying model mechanics. Each iteration can consume significant computational resources , especially when using
<a href="https://www.promptingguide.ai/techniques/fewshot" target="_blank" rel="noopener noreferrer">few-shot prompting</a>, leading to escalating costs without guaranteeing a corresponding
increase in accuracy or effectiveness.</p>
<p>In this context, the use of the <strong>RoBERTa-base</strong> model is particularly effective, provided that it is fine-tuned. This model is robust
enough to handle complex tasks like discerning embedded instructions within texts, yet it is sufficiently compact to be fine-tuned
on modest hardware, such as an Nvidia T4 GPU.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-peft">What is PEFT?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#what-is-peft" class="hash-link" aria-label="Direct link to What is PEFT?" title="Direct link to What is PEFT?">​</a></h3>
<p><a href="https://huggingface.co/docs/peft/en/index" target="_blank" rel="noopener noreferrer">Parameter-Efficient Fine-Tuning (PEFT)</a> approaches are advantageous as they involve
keeping the bulk of the pre-trained model parameters fixed while either only training a few additional layers or modifying the parameters used
when interacting with the model's weights. This methodology not only conserves memory during training, but also significantly reduces the overall training time. When
compared with the alternative of fine-tuning a base model's weights in order to customize its performance for a specific targeted task, the PEFT
approach can save significant cost in both time and money, while providing an equivalent or better performance results with less data than is required
for a comprehensive fine-tuning training task.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-hugging-face-models-and-the-pytorch-lightning-framework">Integrating Hugging-Face models and the PyTorch Lightning framework<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#integrating-hugging-face-models-and-the-pytorch-lightning-framework" class="hash-link" aria-label="Direct link to Integrating Hugging-Face models and the PyTorch Lightning framework" title="Direct link to Integrating Hugging-Face models and the PyTorch Lightning framework">​</a></h2>
<p><a href="https://lightning.ai/docs/pytorch/stable/" target="_blank" rel="noopener noreferrer">PyTorch Lightning</a> integrates seamlessly with
<a href="https://huggingface.co/docs/transformers/en/index" target="_blank" rel="noopener noreferrer">Hugging Face's Transformers library</a>, enabling streamlined model training workflows
that capitalize on Lightning's easy-to-use Higher level API’s and HF's state-of-the-art pre-trained models. The combination of Lightning with transformers’
<a href="https://huggingface.co/blog/peft" target="_blank" rel="noopener noreferrer">PEFT module</a> enhances productivity and scalability by reducing code complexity and enabling the use of
high-quality pre-optimized models for a range of diverse NLP tasks.</p>
<p>Below is an example of configuring the PEFT-based fine tuning of a base model using PyTorch Lightning and HuggingFace's <code>peft</code> module.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> List</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> LightningModule</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> peft </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> get_peft_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> LoraConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> TaskType</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> transformers </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> AutoModelForSequenceClassification</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">LightningModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">32</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">8</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2e-4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token builtin" style="color:rgb(86, 156, 214)">super</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">create_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">lr </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> lr</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save_hyperparameters</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"pretrained_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">create_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> lora_dropout</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Create and return the PEFT model with the given configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            pretrained_model: The path or identifier for the pretrained model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            num_classes: The number of classes for the sequence classification.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            lora_alpha: The alpha parameter for LoRA.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            lora_dropout: The dropout rate for LoRA.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            r: The rank of LoRA adaptations.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            Model: A model configured with PEFT.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> AutoModelForSequenceClassification</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            pretrained_model_name_or_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            num_labels</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">num_classes</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        peft_config </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> LoraConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            task_type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">TaskType</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">SEQ_CLS</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            inference_mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            r</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">r</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            lora_alpha</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">lora_alpha</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            lora_dropout</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">lora_dropout</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> get_peft_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> peft_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">forward</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> input_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> attention_mask</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> label</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> List</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""Calculate the loss by passing inputs to the model and comparing against ground truth labels.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Args:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            input_ids: List of token indices to be fed to the model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            attention_mask: List to indicate to the model which tokens should be attended to, and which should not.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            label: List of ground truth labels associated with the input data.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="display:inline-block;color:rgb(206, 145, 120)"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Returns:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">            torch.Tensor: The computed loss from the model as a tensor.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            input_ids</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">input_ids</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            attention_mask</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">attention_mask</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            labels</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">label</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Additional references for the full implementation can be <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow/blob/master/custom_module/fine_tune_clsify_head.py" target="_blank" rel="noopener noreferrer">seen within the companion repository here</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-mlflow-for-peft-based-fine-tuning">Configuring MLflow for PEFT-based fine-tuning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#configuring-mlflow-for-peft-based-fine-tuning" class="hash-link" aria-label="Direct link to Configuring MLflow for PEFT-based fine-tuning" title="Direct link to Configuring MLflow for PEFT-based fine-tuning">​</a></h2>
<p>Before initiating the training process, it's crucial to configure MLFlow so that all system metrics, loss metrics, and parameters are logged for the training run.
As of MLFlow 2.12, auto-logging for TensorFlow and PyTorch now includes support for checkpointing model weights during training, giving a snapshot of the model
weights at defined epoch frequencies in order to provide for training resumption in the case of an error or loss of the compute environment.
Below is an example of how to enable this feature:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">enable_system_metrics_logging</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">checkpoint_save_best_only </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> checkpoint_save_freq</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">'epoch'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the code above we are doing the following:</p>
<ul>
<li><strong>Enabling System Metrics Logging</strong>: The system resources will be logged to MLflow in order to understand where bottlenecks in memory, CPU, GPU, disk usage, and network traffic are throughout the training process.</li>
</ul>
<p><img loading="lazy" alt="MLflow UI System Metrics" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/sys_metrics-9423a86b67b9aeeac27ee5aea7be01e2.png" width="1600" height="866" class="img_ev3q"></p>
<ul>
<li><strong>Configuring Auto Logging to log parameters, metrics and checkpoints for all epochs</strong>: Deep learning involves experimenting with various model architectures and hyperparameter settings. Auto logging plays a crucial role in systematically recording these experiments, making it easier to compare different runs and determine which configurations yield the best results. Checkpoints are logged at every epoch, enabling detailed evaluations of all intermediate epochs during the initial exploration phase of the project. However, it is generally not advisable to log all epochs during late-stage development to avoid excessive data writes and latency in the final training stages.</li>
</ul>
<p><img loading="lazy" alt="System Metrics Logged" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/epoch_logging-c21dd79a1004d20b4804923690472a18.png" width="1600" height="864" class="img_ev3q"></p>
<p>The auto-logged checkpoint metrics and model artifacts will be viewable in the MLflow UI as the model trains, as shown below:</p>
<p><img loading="lazy" alt="Metrics logged with each epoch" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/checkpoint_metrics-ad7d10db8f81555e3ab4d04c8fb63240.png" width="1600" height="731" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-importance-of-logging-and-early-stopping">The Importance of Logging and Early-stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#the-importance-of-logging-and-early-stopping" class="hash-link" aria-label="Direct link to The Importance of Logging and Early-stopping" title="Direct link to The Importance of Logging and Early-stopping">​</a></h2>
<p>The integration of the Pytorch Lightning <code>Trainer</code> callback with MLflow is crucial within this training exercise. The integration allows for comprehensive
tracking and logging of metrics, parameters, and artifacts during model finetuning without having to explicitly call MLflow logging APIs. Additionally,
the autologging API allows for modifying the default logging behavior, permitting changes to the logging frequency, allowing for logging to occur at each
epoch, after a specified number of epochs, or at explicitly defined steps.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="early-stopping">Early stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#early-stopping" class="hash-link" aria-label="Direct link to Early stopping" title="Direct link to Early stopping">​</a></h3>
<p>Early stopping is a critical regularization technique in neural network training, designed to assist in preventing overfitting through the act of
halting training when validation performance plateaus. Pytorch Lightning includes APIs that allow for an easy high-level control of training cessation,
as demonstrated below.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-pytorch-trainer-callback-with-early-stopping">Configuring Pytorch Trainer Callback with Early stopping<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#configuring-pytorch-trainer-callback-with-early-stopping" class="hash-link" aria-label="Direct link to Configuring Pytorch Trainer Callback with Early stopping" title="Direct link to Configuring Pytorch Trainer Callback with Early stopping">​</a></h3>
<p>The example below shows the configuration of the <code>Trainer</code> object within <code>Lightning</code> to leverage early stopping to prevent overfitting. Once configured, the
training is executed by calling <code>fit</code> on the <code>Trainer</code> object. By providing the <code>EarlyStopping</code> callback, in conjunction with MLflow's autologging, the
appropriate number of epochs will be used, logged, and tracked without any additional effort.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> dataclasses </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> dataclass</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> field</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> data </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> LexGlueDataModule</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> Trainer</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> lightning</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">callbacks </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> EarlyStopping</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@dataclass</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">TrainConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"bert-base-uncased"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2e-4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">128</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    batch_size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">256</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    num_workers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">cpu_count</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_epochs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">|</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    max_time</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> field</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">default_factory</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token keyword" style="color:rgb(86, 156, 214)">lambda</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"hours"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_checkpoint_dir</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">str</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"/local_disk0/tmp/model-checkpoints"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    min_delta</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">float</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">0.005</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    patience</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(86, 156, 214)">int</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_config </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> TrainConfig</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Instantiate the custom Transformer class for PEFT training</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">nlp_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_classes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">num_classes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        lr</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">lr</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">datamodule </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> LexGlueDataModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pretrained_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        max_length</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        batch_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">batch_size</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        num_workers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">num_workers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        debug_mode_sample</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log system metrics while training loop is running</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">enable_system_metrics_logging</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Automatically log per-epoch parameters, metrics, and checkpoint weights</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">checkpoint_save_best_only </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define the Trainer configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">trainer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   callbacks</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">       EarlyStopping</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           monitor</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"Val_F1_Score"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           min_delta</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">min_delta</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           patience</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">patience</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           verbose</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">           mode</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"max"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   default_root_dir</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_checkpoint_dir</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   fast_dev_run</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token builtin" style="color:rgb(86, 156, 214)">bool</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">debug_mode_sample</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   max_epochs</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_epochs</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   max_time</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_time</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">   precision</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"32-true"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Execute the training run</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">nlp_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> datamodule</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">datamodule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="visualization-and-sharing-capabilities-within-mlflow">Visualization and Sharing Capabilities within MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#visualization-and-sharing-capabilities-within-mlflow" class="hash-link" aria-label="Direct link to Visualization and Sharing Capabilities within MLflow" title="Direct link to Visualization and Sharing Capabilities within MLflow">​</a></h2>
<p>The newly introduced DL-specific visualization capabilities introduced in MLflow 2.12 enable you to make comparisons between different runs and artifacts over epochs.
When comparing training runs, MLflow is capable of generating useful visualization that can be integrated into dashboards, facilitating
easy sharing. Additionally, the centralized storage of metrics, in conjunction with parameters, allows for effective analysis of the training
efficacy, as shown in the image below.</p>
<p><img loading="lazy" alt="Epoch Run Compare" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/compare-ea0bead7c1244ca8868d1f039c791ac4.png" width="1600" height="820" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-stop-training">When to stop training?<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#when-to-stop-training" class="hash-link" aria-label="Direct link to When to stop training?" title="Direct link to When to stop training?">​</a></h2>
<p>When training DL models, it is important to understand when to stop. Efficient training (for minimizing the overall cost incurred for
conducting training) and optimal model performance rely heavily on preventing a model from overfitting on the training data. A model
that trains for too long will invariably become quite good at effectively ‘memorizing’ the training data, resulting in a reduction in
the performance of the model when presented with novel data. A straightforward way to evaluate this behavior is to ensure that
validation data set metrics (scoring loss metrics on data that is not in the training data set) are captured during the training
loop. Integrating the MLflow callback into the PyTorch Lightning Trainer allows for iterative logging of loss metrics at
configurable iterations, enabling an easily debuggable evaluation of the training performance, ensuring that stopping criteria
can be enforced at the appropriate time to prevent overfitting.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="evaluating-epoch-checkpoints-of-fine-tuned-models-with-mlflow">Evaluating epoch checkpoints of Fine Tuned Models with MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#evaluating-epoch-checkpoints-of-fine-tuned-models-with-mlflow" class="hash-link" aria-label="Direct link to Evaluating epoch checkpoints of Fine Tuned Models with MLflow" title="Direct link to Evaluating epoch checkpoints of Fine Tuned Models with MLflow">​</a></h3>
<p>With your training process meticulously tracked and logged by MLflow, you have the flexibility to retrieve and test your model at
any arbitrary checkpoint. To do this, you can use the mlflow.pytorch.load_model() API to load the model from a specific run
and use the <code>predict()</code> method for evaluation.</p>
<p>In the example below, we will load the model checkpoint from the 3rd epoch and use the <code>Lightning</code> train module to generate predictions based on the
checkpoint state of the saved training epoch.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">disable </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">run_id </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'&lt;Add the run ID&gt;'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pytorch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_checkpoint</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">TransformerModule</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> run_id</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">examples_to_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"We reserve the right to modify the service price at any time and retroactively apply the adjusted price to historical service usage."</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_module </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Trainer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tokenizer </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> AutoTokenizer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pretrained_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tokens </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> tokenizer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">examples_to_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  max_length</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">train_config</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">max_length</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  padding</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"max_length"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                  truncation</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ds </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> Dataset</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token builtin" style="color:rgb(86, 156, 214)">dict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">tokens</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">ds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_format</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token builtin" style="color:rgb(86, 156, 214)">type</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"torch"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> columns</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"input_ids"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"attention_mask"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">train_module</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> dataloaders </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> DataLoader</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">ds</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>The integration of MLflow into the finetuning process of pre-trained language models, particularly for applications like custom
named entity recognition, text classification and instruction-following represents a significant advancement in managing and
optimizing deep learning workflows. Leveraging the autologging and tracking capabilities of MLflow in these workstreams not only
enhances the reproducibility and efficiency of model development, but also fosters a collaborative environment where insights
and improvements can be easily shared and implemented.</p>
<p>As we continue to push the boundaries of what these models can achieve, tools like MLflow will be instrumental in harnessing their full potential.</p>
<p>If you're interested in seeing the full example in its entirety, feel free to <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow" target="_blank" rel="noopener noreferrer">see the full example implementation</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="check-out-the-code">Check out the code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#check-out-the-code" class="hash-link" aria-label="Direct link to Check out the code" title="Direct link to Check out the code">​</a></h3>
<p>The code we provide will delve into additional aspects such as training from a checkpoint, integrating MLflow and TensorBoard, and utilizing Pyfunc for model wrapping, among others. These resources are specifically tailored for implementation on <a href="https://mlflow.org/blog/databricks-ce" target="_blank" rel="noopener noreferrer">Databricks Community Edition</a>. The main runner notebook
within the full example repository <a href="https://github.com/puneet-jain159/deeplearning_with_mlfow/blob/master/train.ipynb" target="_blank" rel="noopener noreferrer">can be found here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-with-mlflow-212-today">Get Started with MLflow 2.12 Today<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#get-started-with-mlflow-212-today" class="hash-link" aria-label="Direct link to Get Started with MLflow 2.12 Today" title="Direct link to Get Started with MLflow 2.12 Today">​</a></h2>
<p>Dive into the latest MLflow updates today and enhance the way you manage your machine learning projects! With our newest enhancements,
including advanced metric aggregation, automatic capturing of system metrics, intuitive feature grouping, and streamlined search capabilities,
MLflow is here to elevate your ML workflow to new heights. <a href="https://mlflow.org/releases/2.12.1" target="_blank" rel="noopener noreferrer">Get started now with MLflow's cutting-edge tools and features</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feedback">Feedback<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-2#feedback" class="hash-link" aria-label="Direct link to Feedback" title="Direct link to Feedback">​</a></h2>
<p>We value your input! Our feature prioritization is guided by feedback from the MLflow late 2023 survey. Please fill out our
<a href="https://surveys.training.databricks.com/jfe/form/SV_3jGIliwGC0g5xTU" target="_blank" rel="noopener noreferrer">Spring 2024 survey</a>, and by participating, you can help ensure that the features
you want most are implemented in MLflow.</p>]]></content>
        <author>
            <name>Puneet Jain</name>
            <uri>https://www.linkedin.com/in/puneetjain159/</uri>
        </author>
        <author>
            <name>Avinash Sooriyarachchi</name>
            <uri>https://www.linkedin.com/in/avi-data-ml/</uri>
        </author>
        <author>
            <name>Abe Omorogbe</name>
            <uri>https://www.linkedin.com/in/abeomor/</uri>
        </author>
        <author>
            <name>Ben Wilson</name>
            <uri>https://www.linkedin.com/in/benjamin-wilson-arch/</uri>
        </author>
        <category label="Deep Learning" term="Deep Learning"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLflow Release Candidates]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates"/>
        <updated>2024-04-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are excited to announce the implementation of a release candidate process for MLflow!]]></summary>
        <content type="html"><![CDATA[<p>We are excited to announce the implementation of a release candidate process for MLflow!
The pace of feature development in MLflow is faster now than ever before and the core maintainer team has even more exciting things planned in the near future! However, with an increased velocity on major feature development comes with a risk of breaking things. As the maintainers of such a widely used project, we are cognizant of the disruptive nature of regressions and we strive to avoid them as much as we can. Aside from new feature development work, our primary goal is in ensuring the stability of production systems. While we do have the aspirational goal of moving fast(er), we certainly don't want to move fast and break things. With that goal in mind, we've decided to introduce a release candidate (RC) process. The RC process allows us to introduce new features and fixes in a controlled environment before they become part of the official release.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-works">How It Works<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates#how-it-works" class="hash-link" aria-label="Direct link to How It Works" title="Direct link to How It Works">​</a></h2>
<p>Starting from MLflow 2.13.0, new MLflow major and minor releases will be tagged as release candidates (e.g., <code>2.13.0rc0</code>) in PyPI two weeks before they are officially released.</p>
<p>The release candidate process involves several key stages:</p>
<ul>
<li>Feature Development Freeze: Prior to cutting the RC branch and announcing its availability, we will freeze the RC branch from feature commits. Once the branch is cut, only bug fix and stability PRs will be permitted to be merged, ensuring that unexpected, late-arriving, potentially regression-causing merges are not permitted to destabilize the forthcoming release.</li>
<li>Pre-Release Announcement: We will announce upcoming features and improvements, providing our community with a roadmap of what to expect.</li>
<li>Release Candidate Rollout: A release candidate version will be made available for testing, accompanied by detailed release notes outlining the changes.</li>
<li>Community Testing and Feedback: We encourage our users to test the release candidate in their environments and share their feedback with us by filing issue reports on the MLflow Github repository. This feedback is invaluable for identifying issues and ensuring the final release aligns with user needs (i.e., we didn't break your workflows).</li>
<li>Final Release: After incorporating feedback and making necessary adjustments, we will proceed with the final release. This version will include all updates tested in the RC phase, offering a polished and stable experience for all users.</li>
</ul>
<p>This approach provides several benefits:</p>
<ul>
<li>Enhanced Stability: By rigorously testing release candidates, we can identify and address potential issues early, reducing the likelihood of disruptions in production environments.</li>
<li>Community Feedback: The RC phase offers you, a member of the MLflow community, the opportunity to provide feedback on upcoming changes. This collaborative approach ensures that the final release aligns with the needs and expectations of our users.</li>
<li>Gradual Adoption: Users can choose to experiment with new features in a release candidate without committing to a full upgrade. This flexibility supports cautious integration and thorough evaluation in various environments.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-involved">Get Involved<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/release-candidates#get-involved" class="hash-link" aria-label="Direct link to Get Involved" title="Direct link to Get Involved">​</a></h2>
<p>Your participation is crucial to the success of this process. We invite you to join us in testing upcoming release candidates and sharing your insights. Together, we can ensure that MLflow continues to serve as a reliable foundation for your machine learning projects.
Stay tuned for announcements regarding our first release candidate. We look forward to your contributions and feedback as we take this important step toward a more stable and dependable MLflow.</p>]]></content>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="mlflow" term="mlflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Announcing MLflow Enhancements - Deep Learning with MLflow (Part 1)]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1"/>
        <updated>2024-03-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlighting the recent improvements in MLflow for Deep Learning workflows]]></summary>
        <content type="html"><![CDATA[<p>In the quickly evolving world of artificial intelligence, where generative AI has taken center stage, the landscape of machine learning is
evolving at an unprecedented pace. There has been a surge in the use of cutting-edge deep learning (DL) libraries like
<a href="https://huggingface.co/docs/transformers/index" target="_blank" rel="noopener noreferrer">Transformers</a>, <a href="https://www.tensorflow.org/" target="_blank" rel="noopener noreferrer">Tensorflow</a>,
and <a href="https://pytorch.org/" target="_blank" rel="noopener noreferrer">PyTorch</a> to fine-tune these generative AI models for enhanced performance.
As this trend accelerates, it's become clear that the tools used to build these models must rapidly evolve as well, particularly when it comes
to managing and optimizing these deep learning workloads. MLflow offers a practical solution for managing the complexities of these machine learning projects.</p>
<p>In collaboration with <a href="https://www.mosaicml.com/" target="_blank" rel="noopener noreferrer">MosaicML</a> and the broader ML community, MLflow is thrilled to unveil a set of eagerly awaited enhancements.
This latest release (<a href="https://www.mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">MLflow 2.11</a>) introduces updated tracking UI capabilities in direct response to
<a href="https://www.linkedin.com/posts/mlflow-org_qualtrics-survey-qualtrics-experience-management-activity-7128154257924513793-RCDG?utm_source=share&amp;utm_medium=member_desktop" target="_blank" rel="noopener noreferrer">the feedback</a>
and needs of MLflow enthusiasts. These updates are not just incremental; they represent a leap forward in addressing the needs of MLflow users doing Deep Learning.</p>
<p>The evolution of enhanced Deep Learning capabilities is a testament to MLflow's commitment to serving the open-source community, ensuring that its offerings
are not just keeping pace, but setting the pace in the rapidly evolving domain of machine learning.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="deep-learning-api-improvements">Deep Learning API Improvements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#deep-learning-api-improvements" class="hash-link" aria-label="Direct link to Deep Learning API Improvements" title="Direct link to Deep Learning API Improvements">​</a></h2>
<p>Leveraging valuable insights from our user community, we've implemented critical enhancements to the effective scale of metrics logging and the inclusion of
system-related metric logging within our platform. These improvements encompass expanded scalability options, support for logging more iterations and the
logging of system metrics.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="system-metrics">System Metrics<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#system-metrics" class="hash-link" aria-label="Direct link to System Metrics" title="Direct link to System Metrics">​</a></h3>
<p>This feature allows you to <a href="https://mlflow.org/docs/latest/system-metrics/index.html?highlight=system" target="_blank" rel="noopener noreferrer">monitor system metrics</a> and identify any hardware issues that might be impacting performance.
Metrics such as CPU utilization, Memory usage, disk usage etc., from all nodes in your cluster can now be logged and visualized within the MLflow UI.</p>
<p><img loading="lazy" alt="System Metrics" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/system-metrics-b16140bd7099bca6362a3f04a6525a76.png" width="1600" height="823" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="improved-logging-performance">Improved Logging Performance<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#improved-logging-performance" class="hash-link" aria-label="Direct link to Improved Logging Performance" title="Direct link to Improved Logging Performance">​</a></h3>
<p>We recently introduced both asynchronous and batch logging, making it easier to log both
<a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#parallel-runs" target="_blank" rel="noopener noreferrer">parallel and distributed</a> DL training sessions. Additionally, the MLflow Client
now supports up to <strong>1 million</strong> steps (iterations) when logging metrics, allowing users to log more steps during long-running DL jobs.</p>
<p><img loading="lazy" alt="Parallel Runs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/parallel-runs-d0e00c0275d69ccf3f879086d7f26e6f.png" width="1600" height="546" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="checkpointing-for-deep-learning">Checkpointing for Deep Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#checkpointing-for-deep-learning" class="hash-link" aria-label="Direct link to Checkpointing for Deep Learning" title="Direct link to Checkpointing for Deep Learning">​</a></h3>
<p><a href="https://mlflow.org/releases/2.11.0#autologging-for-tensorflow-and-pytorch-now-supports-checkpointing-of-model-weights:~:text=both%20PyTorch%20and-,TensorFlow,-for%20automatic%20model" target="_blank" rel="noopener noreferrer">TensorFlow</a>
and <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.pytorch.html#mlflow.pytorch.autolog" target="_blank" rel="noopener noreferrer">PyTorch</a> now support model weight checkpointing when
using autologging.</p>
<p><img loading="lazy" alt="DL Checkpointing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-checkpointing-b1f298b18bd0e09facca8751a5cd599a.png" width="1600" height="981" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="user-experience-and-productivity-enhancements">User Experience and Productivity Enhancements<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#user-experience-and-productivity-enhancements" class="hash-link" aria-label="Direct link to User Experience and Productivity Enhancements" title="Direct link to User Experience and Productivity Enhancements">​</a></h2>
<p>We have introduced substantial improvements to user experience and feature organization within our platform. These enhancements include more
sophisticated user interfaces and an intuitive redesign of the run details page, the addition of chart groups and metric aggregation, all
aimed at simplifying navigation and enhancing productivity especially for Deep Learning use cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="metric-aggregation">Metric Aggregation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#metric-aggregation" class="hash-link" aria-label="Direct link to Metric Aggregation" title="Direct link to Metric Aggregation">​</a></h3>
<p>We've enhanced the UI with metric aggregation, enabling you to aggregate metrics across multiple runs based on
datasets, tags, or parameters. These improvements significantly improve the time it takes to understand training results when working
with large DL models, enabling more nuanced and comprehensive analysis of overarching trends in model performance across multiple dimensions.</p>
<p><img loading="lazy" alt="DL Metric Aggregation" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-metric-aggregation-a160faaae5aa4cee5b270ddc327fbda9.gif" width="960" height="549" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-grouping-functionality">Chart Grouping Functionality<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-grouping-functionality" class="hash-link" aria-label="Direct link to Chart Grouping Functionality" title="Direct link to Chart Grouping Functionality">​</a></h3>
<p>You can now easily categorize and organize your metrics, such as training, testing, and system metrics into
named groups within the MLflow UI. This organization allows for a comprehensive overview of all metrics, enabling quicker access and
better management, particularly when handling experiments with many metrics.</p>
<p><img loading="lazy" alt="DL Chart Grouping" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-grouping-f7f232a7f4048fdddde3338c5ed30902.gif" width="960" height="551" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="slash--logging-syntax">Slash ("/") Logging Syntax<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#slash--logging-syntax" class="hash-link" aria-label="Direct link to Slash (&quot;/&quot;) Logging Syntax" title="Direct link to Slash (&quot;/&quot;) Logging Syntax">​</a></h3>
<p>To further streamline metric organization, we've implemented a new logging syntax that uses slashes
("/") to group metrics. For example, using mlflow.log_metric("x/y/score", 100) helps in structuring and segregating different types
of data or metrics into hierarchical groups, making it easier to navigate and interpret the logs, especially when dealing with complex
models and experiments.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'SVR/val_MAPE'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> mean_absolute_percentage_error</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">test_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> pred_y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img loading="lazy" alt="DL Slash Logging" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-slash-logging-21f02b8e210f4dbb614f3025ae8248b4.png" width="1000" height="574" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-searching">Chart Searching<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#chart-searching" class="hash-link" aria-label="Direct link to Chart Searching" title="Direct link to Chart Searching">​</a></h3>
<p>We've significantly enhanced the search functionality within our platform, enabling more robust and intuitive searching
across charts, parameters, and metrics. This upgrade allows for quicker and more precise retrieval of specific data points, streamlining the
process of analyzing and comparing different aspects of your experiments.</p>
<p><img loading="lazy" alt="DL Chart Searching" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-chart-searching-a06459f5a16b9ad28e7571d592cea5bd.gif" width="999" height="472" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="run-details-redesign">Run Details Redesign<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#run-details-redesign" class="hash-link" aria-label="Direct link to Run Details Redesign" title="Direct link to Run Details Redesign">​</a></h3>
<p>We reorganized the Run Details UI to a modular tabbed layout, added new drag and drop UI functionality so that you can
can now render logged tables. This enhancement will make it easier to organize your runs and experiments.</p>
<p><img loading="lazy" alt="DL Run Details Redesign" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-run-details-d776f564ca6e435cdffbf070d5f02b0b.gif" width="1000" height="631" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started-updates">Getting Started Updates<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#getting-started-updates" class="hash-link" aria-label="Direct link to Getting Started Updates" title="Direct link to Getting Started Updates">​</a></h2>
<p>Following extensive feedback from our user community, we've introduced significant updates to enhance the
<a href="https://www.mlflow.org/docs/latest/getting-started/index.html" target="_blank" rel="noopener noreferrer">getting started</a> documentation within MLflow. These updates include a
<a href="https://www.mlflow.org/docs/latest/deep-learning/index.html" target="_blank" rel="noopener noreferrer">comprehensive overhaul</a> of our documentation for easier navigation and
<a href="https://www.mlflow.org/docs/latest/deep-learning/pytorch/quickstart/pytorch_quickstart.html" target="_blank" rel="noopener noreferrer">enriched guidance</a>, along with a streamlined
<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">login API</a>. These enhancements, reflecting our commitment to improving the
user experience and workflow, aim to empower our users to achieve more with greater speed and ease.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-tutorials-and-docs">New Tutorials and Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#new-tutorials-and-docs" class="hash-link" aria-label="Direct link to New Tutorials and Docs" title="Direct link to New Tutorials and Docs">​</a></h3>
<p>We've overhauled our documentation to offer a more comprehensive, user-friendly experience with practical examples
to support both newcomers and experienced practitioners with the information they need to start a Deep Learning project.</p>
<p><img loading="lazy" alt="Deep Learning Docs" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/dl-docs-93b181a7480d0a38c003a4ba44012825.png" width="1021" height="558" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="seamless-login-with-mlflowlogin">Seamless login with mlflow.login()<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#seamless-login-with-mlflowlogin" class="hash-link" aria-label="Direct link to Seamless login with mlflow.login()" title="Direct link to Seamless login with mlflow.login()">​</a></h3>
<p>We've streamlined our authentication processes.
<a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#method-2-use-free-hosted-tracking-server-databricks-community-edition" target="_blank" rel="noopener noreferrer">This method</a>
provides a simple way to connect MLflow to your tracking server without having to leave your development environment.
<a href="https://mlflow.org/blog/databricks-ce" target="_blank" rel="noopener noreferrer">Try it out today</a></p>
<p><img loading="lazy" alt="Login Update" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/login-update-578121a523809b9c607c73f811975f41.png" width="1159" height="453" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="get-started-today">Get Started Today<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#get-started-today" class="hash-link" aria-label="Direct link to Get Started Today" title="Direct link to Get Started Today">​</a></h2>
<p>Dive into the latest MLflow updates today and enhance the way you manage your machine learning projects! With our newest enhancements,
including advanced metric aggregation, automatic capturing of system metrics, intuitive feature grouping, and streamlined search capabilities,
MLflow is here to elevate your data science workflow to new heights.
<a href="https://mlflow.org/releases/2.11.0" target="_blank" rel="noopener noreferrer">Get started now with MLflow's cutting-edge tools and features</a>.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">pip install mlflow==2.11</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow ui --port 8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">datasets </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> load_diabetes</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestRegressor</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set our tracking server uri for logging</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_tracking_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"http://127.0.0.1:8080"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">db </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> load_diabetes</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_test</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_test </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> db</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">target</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestRegressor</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">100</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">6</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_features</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># MLflow triggers logging automatically upon model fitting</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">rf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feedback">Feedback<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/deep-learning-part-1#feedback" class="hash-link" aria-label="Direct link to Feedback" title="Direct link to Feedback">​</a></h2>
<p>We value your input! Our <a href="https://github.com/orgs/mlflow/projects/4" target="_blank" rel="noopener noreferrer">feature roadmap</a> prioritization is guided by feedback from the <a href="https://www.linkedin.com/feed/update/urn:li:activity:7128154257924513793" target="_blank" rel="noopener noreferrer">MLflow late 2023 survey</a>, <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">GitHub Issues</a> and <a href="https://mlflow.org/slack" target="_blank" rel="noopener noreferrer">Slack</a>. Look out for our next survey later this year, by participating you can help ensure that the features you want are implemented in MLflow. You can also create an <a href="https://github.com/mlflow/mlflow" target="_blank" rel="noopener noreferrer">issue on GitHub</a> or join our <a href="https://mlflow.org/slack" target="_blank" rel="noopener noreferrer">Slack</a>.</p>]]></content>
        <author>
            <name>Abe Omorogbe</name>
            <uri>https://www.linkedin.com/in/abeomor/</uri>
        </author>
        <author>
            <name>Hubert Zub</name>
            <uri>https://www.linkedin.com/in/hubert-zub/</uri>
        </author>
        <author>
            <name>Yun Park</name>
            <uri>https://www.linkedin.com/in/yunpark93/</uri>
        </author>
        <author>
            <name>Chen Qian</name>
            <uri>https://www.linkedin.com/in/thomas-chen-qian/</uri>
        </author>
        <author>
            <name>Jesse Chan</name>
        </author>
        <category label="Deep Learning" term="Deep Learning"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023 Year in Review]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review"/>
        <updated>2024-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MLflow year-end recap]]></summary>
        <content type="html"><![CDATA[<p>With more than <strong>16 million</strong> monthly downloads, MLflow has established itself as a leading open-source MLOps platform worldwide.
This achievement underscores the robustness of MLflow and the active community that consistently refines and improves it.</p>
<p>The past year marked a significant milestone for MLflow, particularly in Generative AI. Its integration and support for Large Language Models
(LLMs) stood out. This strategic decision has propelled MLflow to the forefront of the AI revolution, establishing itself as the premier GenAI
platform that enables users to create more intelligent, efficient, and adaptable AI models and applications.</p>
<p><img loading="lazy" alt="16 Million Downloads!" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/download-graph-6003d8547fa38dd5c3253b2a6211d9aa.png" width="1164" height="1241" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2023-a-year-of-genai-and-innovation">2023: A Year of GenAI and Innovation<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-a-year-of-genai-and-innovation" class="hash-link" aria-label="Direct link to 2023: A Year of GenAI and Innovation" title="Direct link to 2023: A Year of GenAI and Innovation">​</a></h2>
<p>Last year was remarkable for MLflow, particularly in integrating LLMs and other generative AI tools. MLflow has evolved significantly by offering
a unified platform and workflow for traditional ML, deep learning, and GenAI applications. This integration ensures unparalleled efficiency and
innovation. MLflow's dedication to improving LLM support has revolutionized how users create and oversee AI workflows, establishing it as an
indispensable tool for building advanced machine learning applications.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrations-with-leading-ai-tools">Integrations with Leading AI Tools<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#integrations-with-leading-ai-tools" class="hash-link" aria-label="Direct link to Integrations with Leading AI Tools" title="Direct link to Integrations with Leading AI Tools">​</a></h3>
<p>MLflow has successfully incorporated support for popular AI services/frameworks such as <a href="https://huggingface.co/" target="_blank" rel="noopener noreferrer">Hugging Face</a>,
<a href="https://www.langchain.com/" target="_blank" rel="noopener noreferrer">LangChain</a>, and <a href="https://openai.com/" target="_blank" rel="noopener noreferrer">OpenAI</a>, while offering a unified and framework-agnostic interface for
packaging, evaluating, and deploying them. These integrations have opened new horizons for MLflow users, allowing them to leverage the capabilities
of these advanced AI tools seamlessly within their MLflow workflows.</p>
<p><img loading="lazy" alt="GenAI Integrations" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/integrations-5fa17d7f697fd95f91aefa520e6a2432.png" width="1544" height="735" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="model-packaging-for-llms">Model Packaging for LLMs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#model-packaging-for-llms" class="hash-link" aria-label="Direct link to Model Packaging for LLMs" title="Direct link to Model Packaging for LLMs">​</a></h4>
<p>Recognizing the surge in LLM popularity and utility, MLflow has focused on enhancing packaging support for these models. With MLflow’s new built-in
model flavors for <a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Hugging Face</a>, <a href="https://www.mlflow.org/docs/latest/llms/langchain/index.html" target="_blank" rel="noopener noreferrer">LangChain</a>
, and <a href="https://www.mlflow.org/docs/latest/llms/openai/index.html" target="_blank" rel="noopener noreferrer">OpenAI</a>, users can log and deploy their LLMs and generative AI applications within minutes.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="retrieval-augmented-generation-rag-and-mlflow-integration">Retrieval Augmented Generation (RAG) and MLflow Integration<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#retrieval-augmented-generation-rag-and-mlflow-integration" class="hash-link" aria-label="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration" title="Direct link to Retrieval Augmented Generation (RAG) and MLflow Integration">​</a></h4>
<p><a href="https://mlflow.org/docs/latest/llms/rag/index.html" target="_blank" rel="noopener noreferrer">Retrieval Augmented Generation (RAG)</a> represents an impactful method in natural language processing.
It combines pre-trained models with retrieval mechanisms to access a dataset of documents that fetch validated and curated content as opposed to relying
on pure generation. This approach significantly improves generated responses' contextual relevance and factual accuracy. With
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">mlflow.evaluate()</a>, users can compare RAG systems across prompts, models, vector
databases, and more. See further details in the blog post:
<a href="https://medium.com/@dliden/evaluating-retrieval-augmented-generation-rag-systems-with-mlflow-cf09a74faadb" target="_blank" rel="noopener noreferrer">"Evaluating Retrieval Augmented Generation (RAG) Systems with MLflow"</a>.</p>
<p><img loading="lazy" alt="RAG with MLflow" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/rag-3fd1206bbdf1c5f03b411304a4c683b9.webp" width="1600" height="1276" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-deployment-server-in-mlflow-290">MLflow Deployment Server in MLflow 2.9.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-deployment-server-in-mlflow-290" class="hash-link" aria-label="Direct link to MLflow Deployment Server in MLflow 2.9.0" title="Direct link to MLflow Deployment Server in MLflow 2.9.0">​</a></h4>
<p>The <a href="https://www.mlflow.org/docs/latest/llms/deployments/index.html" target="_blank" rel="noopener noreferrer">MLflow Deployment Server</a> simplifies LLM usage and management from various providers
like OpenAI, MosaicML, Anthropic, Hugging Face, Cohere, MLflow models, and more. Besides supporting popular SaaS LLM providers, the MLflow Deployment Server
integrates with MLflow model serving, enabling users to serve their own LLM or fine-tuned foundation models within their serving infrastructure.
The MLflow Deployment Server also provides a unified inference API across different providers and services, making it much easier to query and compose
them together. It uses securely stored keys from a centralized location, so users no longer need to share sensitive API keys with each member of their
organization. This simplifies how we interact with language models, adding an extra layer of security for managing API keys.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="enhanced-mlflow-evaluate-api-in-mlflow-280">Enhanced MLflow Evaluate API in MLflow 2.8.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#enhanced-mlflow-evaluate-api-in-mlflow-280" class="hash-link" aria-label="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0" title="Direct link to Enhanced MLflow Evaluate API in MLflow 2.8.0">​</a></h4>
<p>The <a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">MLflow Evaluate API</a> underwent significant feature enhancements to support LLM
workflows better and incorporate multiple new evaluation modes, including support for
<a href="https://mlflow.org/docs/latest/llms/llm-evaluate/index.html#metrics-with-llm-as-the-judge" target="_blank" rel="noopener noreferrer">LLM-as-a-judge</a>. This upgraded API enables a more refined
and thorough analysis of LLM performance.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="prompt-engineering-ui-in-mlflow-270">Prompt Engineering UI in MLflow 2.7.0<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#prompt-engineering-ui-in-mlflow-270" class="hash-link" aria-label="Direct link to Prompt Engineering UI in MLflow 2.7.0" title="Direct link to Prompt Engineering UI in MLflow 2.7.0">​</a></h4>
<p>MLflow introduced the <a href="https://mlflow.org/docs/latest/llms/prompt-engineering/index.html" target="_blank" rel="noopener noreferrer">Prompt Engineering UI</a>, a tool specifically designed for efficient prompt
development, testing, and assessment in Large Language Models (LLMs). This user-friendly interface and comprehensive toolkit have notably improved the
accessibility and efficiency of prompt engineering within LLM workflows.</p>
<p><img loading="lazy" alt="Prompt Engineering UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/prompt-engineering-6863e45e95ed31ec42b84c688187b0d7.png" width="2870" height="1610" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-growth-and-engagement">Community Growth and Engagement<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#community-growth-and-engagement" class="hash-link" aria-label="Direct link to Community Growth and Engagement" title="Direct link to Community Growth and Engagement">​</a></h2>
<p>The introduction of the MLflow blog in 2023 was a new addition to the MLflow website. This fresh section signifies a crucial stride toward boosting
community involvement and fostering knowledge exchange within the MLflow ecosystem. The blog serves as a direct avenue for sharing updates about new
features, improvements, and the future trajectory of the MLflow project.</p>
<p>MLflow surpassed 45,000 followers in 2023! Not only this, across <a href="https://twitter.com/MLflow?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor" target="_blank" rel="noopener noreferrer">X</a>
and <a href="https://www.linkedin.com/company/mlflow-org/" target="_blank" rel="noopener noreferrer">LinkedIn</a>, MLflow had over 1 million impressions, the number of times our
content was displayed to users. When it came to MLflow contributor growth, the MLflow contributor count grew from 530 to 690 in 2023.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-docs-overhaul">MLflow Docs Overhaul<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#mlflow-docs-overhaul" class="hash-link" aria-label="Direct link to MLflow Docs Overhaul" title="Direct link to MLflow Docs Overhaul">​</a></h3>
<p>We have undertaken a massive initiative to reimagine how our users interact with our content. The primary goal is to enhance clarity, improve navigation,
and provide more in-depth resources for our community, in addition to refreshing the look and feel. The overhaul of the MLflow documentation is a significant
milestone, but it’s just the beginning. We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, sharing use cases,
or providing feedback, every contribution enriches the MLflow community.</p>
<p><img loading="lazy" alt="Docs Overhaul" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/docs-overhaul-c4502c290db228977c36909907249e77.png" width="2210" height="1418" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2023-events">2023 Events<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#2023-events" class="hash-link" aria-label="Direct link to 2023 Events" title="Direct link to 2023 Events">​</a></h3>
<p>MLflow made a substantial impact at two significant events: <strong>NeurIPS 2023</strong> and the <strong>Data+AI Summit 2023</strong>. These events underscored MLflow's commitment
to contributing to the evolving discourse in machine learning and AI, emphasizing its pivotal role in shaping the future of these dynamic fields.
The Data+AI Summit occurred in June 2023 and featured various MLflow-related sessions. Notably, two sessions stood out:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=WpudXKAZQNI" target="_blank" rel="noopener noreferrer">Advancements in Open Source LLM Tooling, Including MLflow</a>: Explored MLflow's seamless integration
with leading generative AI tools like Hugging Face, LangChain, and OpenAI. It highlighted how these integrations enable effortless construction of AI workflows.</li>
<li><a href="https://www.youtube.com/watch?v=MYqXfMqEUq4" target="_blank" rel="noopener noreferrer">How the Texas Rangers Revolutionized Baseball Analytics with a Modern Data Lakehouse</a>: Offered a
comprehensive insight into how the Texas Rangers baseball team leveraged MLflow and Databricks to revolutionize their approach to data analytics.</li>
</ul>
<p><img loading="lazy" alt="Big Data Baseball" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/baseball-f47adc1879b65e6f0e2175f83b78f0c1.png" width="1692" height="906" class="img_ev3q"></p>
<p>In December 2023, MLflow participated in the 37th Annual Conference of Neural Information Processing Systems (NeurIPS) held in New Orleans, LA. NeurIPS
stands as one of the most prestigious conferences in machine learning and computational neuroscience.
For those seeking guidance on fine-tuning a Large Language Model for general-purpose instruction following, the session
<a href="https://arxiv.org/abs/2311.13133" target="_blank" rel="noopener noreferrer">"LIMIT: Less Is More for Instruction Tuning Across Evaluation Paradigms"</a> at NeurIPS presented valuable insights.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="stay-plugged-in">Stay Plugged In<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#stay-plugged-in" class="hash-link" aria-label="Direct link to Stay Plugged In" title="Direct link to Stay Plugged In">​</a></h3>
<p>If you are interested in joining the MLflow community, we’d love to connect! Join us on
<a href="https://mlflow-users.slack.com/ssb/redirect" target="_blank" rel="noopener noreferrer">Slack</a>, <a href="https://groups.google.com/g/mlflow-users" target="_blank" rel="noopener noreferrer">Google Groups</a>, and <a href="https://github.com/mlflow/mlflow/" target="_blank" rel="noopener noreferrer">GitHub</a>.
We have a roadmap full of exciting updates, new content, and features. Whether it’s writing tutorials, developing code, sharing use-cases, or providing feedback, let’s work together!
Are you already an MLflow contributor? The newly launched MLflow Ambassador Program is a great way to boost your involvement. As an MLflow Ambassador,
you will serve as one of our esteemed global ambassadors, pivotal in propelling the adoption and amplifying awareness of MLflow within the global data
community. We invite you to submit an application <a href="https://forms.gle/adAPNvH6aVq4diPF9" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p><img loading="lazy" alt="Ambassador Program" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ambassador-program-f6ebce80bb98bf364c13ed073ef7e796.png" width="1316" height="1294" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="looking-forward">Looking Forward<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-year-in-review#looking-forward" class="hash-link" aria-label="Direct link to Looking Forward" title="Direct link to Looking Forward">​</a></h3>
<p>“In 2024, we're launching new initiatives to engage, support, and expand our community. MLflow is thrilled to broaden its horizons this year through strategic
collaboration and partnership”, says Ben Wilson, Software Engineer at Databricks. “This collaboration will unlock fresh opportunities for our users and
significantly contribute to MLflow's evolution. Stay tuned for an announcement about this exciting effort.”</p>
<p>The year 2023 marked a transformative period for MLflow. By embracing the latest ML and GenAI advancements, MLflow improved its platform and made substantial
contributions to the wider AI and machine learning community. To our MLflow community, we extend our deepest gratitude.</p>
<p>You have been instrumental in driving MLflow's success over the past year. Whether it's enhancing existing features, exploring new integrations, or sharing
your expertise, your contributions are the lifeblood of the MLflow community. If you're interested in contributing to MLflow,
<a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">this guide</a> is an excellent starting point. Looking ahead, we're excited about the myriad
possibilities and new frontiers we can explore together.</p>
<p>MLflow is poised to continue its path of growth and innovation, cementing its role as a leader in managing machine learning and GenAI workflows across the
entire lifecycle. We're eager to keep pushing the boundaries of what's achievable in AI and strive to create an innovative, inclusive, and open future.</p>]]></content>
        <author>
            <name>Carly Akerly</name>
            <uri>https://www.linkedin.com/in/carlyakerly/</uri>
        </author>
        <category label="MLflow" term="MLflow"/>
        <category label="2023" term="2023"/>
        <category label="Linux Foundation" term="Linux Foundation"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamline your MLflow Projects with Free Hosted MLflow]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce"/>
        <updated>2024-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide to using Databricks Community Edition with integrated managed MLflow]]></summary>
        <content type="html"><![CDATA[<p>If you're new to MLflow and want to get started with a fully-managed and completely free deployment of MLflow, this blog will show you how to get started using MLflow in minutes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free">Streamline Your ML Projects: Get Started with Hosted MLflow for Free<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#streamline-your-ml-projects-get-started-with-hosted-mlflow-for-free" class="hash-link" aria-label="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free" title="Direct link to Streamline Your ML Projects: Get Started with Hosted MLflow for Free">​</a></h2>
<p>Explore the world of big data and machine learning with <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks Community Edition (CE)</a>, a free, limited<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-1-1ef65d" id="user-content-fnref-1-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup> version of the Databricks platform.
Ideal for beginners and those new to Databricks and MLflow, this edition streamlines the learning curve by offering a managed environment. It eliminates the complexity of manually
setting up a tracking server. Databricks CE includes hosted MLflow, enabling efficient management and visualization of your MLflow experiments. This makes it a prime choice for
developing machine learning projects in a user-friendly interface, allowing you to connect from your favorite IDE, notebook environment, or even from within Databricks CE's notebooks.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="benefits-of-using-databricks-ce-for-mlflow">Benefits of Using Databricks CE for MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#benefits-of-using-databricks-ce-for-mlflow" class="hash-link" aria-label="Direct link to Benefits of Using Databricks CE for MLflow" title="Direct link to Benefits of Using Databricks CE for MLflow">​</a></h3>
<p>MLflow is an open-source framework compatible with any platform, yet it offers distinct benefits when used on Databricks (including the Community Edition, CE) compared to other platforms. These advantages include:</p>
<ol>
<li>
<p><strong>Cost-Effective</strong>: Free of charge, MLflow on Databricks CE is perfect for educational purposes and small-scale projects.</p>
</li>
<li>
<p><strong>Simple Setup</strong>: Gain access to a fully managed tracking server and user interface from any location. To connect to Databricks CE, just execute <code>mlflow.login()</code>.</p>
</li>
<li>
<p><strong>Easy Sharing</strong>: In the Databricks ecosystem, sharing your notebooks is straightforward and hassle-free.</p>
</li>
<li>
<p><strong>Seamless Integration</strong>: Databricks CE allows for direct storage and visualization of MLflow experiments, runs, and models.</p>
</li>
<li>
<p><strong>Scalability</strong>: MLflow on Databricks CE provides an easy path to scale your projects. It also integrates seamlessly with a wide range of data tools available on the Databricks platform.</p>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="scenario">Scenario<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#scenario" class="hash-link" aria-label="Direct link to Scenario" title="Direct link to Scenario">​</a></h3>
<p>In this blog, we will walk through running ML experiments on your local device and tracking them on an <a href="https://mlflow.org/docs/latest/tracking.html#common-setups" target="_blank" rel="noopener noreferrer">MLflow tracking server hosted on Databricks CE</a></p>
<p>To give you an idea of the options available for running MLflow, the figure below shows what is possible for common setup configurations.</p>
<p><img loading="lazy" alt="Remote Tracking Server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/remote-tracking-server-7954737febd0bc4d6d0d209cc78aec6a.png" width="1582" height="1010" class="img_ev3q"></p>
<p>For this blog, we're showing #3, using a remote (fully managed) tracking server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-by-step-guide">Step-by-Step Guide<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#step-by-step-guide" class="hash-link" aria-label="Direct link to Step-by-Step Guide" title="Direct link to Step-by-Step Guide">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-creating-a-databricks-ce-account">1. Creating a Databricks CE Account<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#1-creating-a-databricks-ce-account" class="hash-link" aria-label="Direct link to 1. Creating a Databricks CE Account" title="Direct link to 1. Creating a Databricks CE Account">​</a></h4>
<p>If you haven't already, you can <a href="https://www.databricks.com/try-databricks#account" target="_blank" rel="noopener noreferrer">sign up for a free account</a>. The process is quick, typically taking no more than 3 minutes.</p>
<p>Fill out the signup form and select “Get started with Community Edition.”</p>
<p><img loading="lazy" alt="Databricks CE Signup Page" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/ce-signup-8d3a74af80d917b0ab1d514d2b36d601.png" width="1163" height="552" class="img_ev3q"></p>
<p>Once signed up, you'll get information on how to set a password that you can use to login to CE with<sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-2-1ef65d" id="user-content-fnref-2-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-installing-dependencies">2. Installing Dependencies<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#2-installing-dependencies" class="hash-link" aria-label="Direct link to 2. Installing Dependencies" title="Direct link to 2. Installing Dependencies">​</a></h4>
<p>Before you start, ensure that you have the necessary packages installed. Run the following command in your favorite IDE or notebook from your device:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">%pip install -q mlflow databricks-sdk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-setting-up-databricks-ce-authentication">3. Setting Up Databricks CE Authentication<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#3-setting-up-databricks-ce-authentication" class="hash-link" aria-label="Direct link to 3. Setting Up Databricks CE Authentication" title="Direct link to 3. Setting Up Databricks CE Authentication">​</a></h4>
<p>The main advantage of Databricks Community Edition (CE) is its convenience: it offers an MLflow tracking server without requiring
<a href="https://mlflow.org/docs/latest/getting-started/logging-first-model/step1-tracking-server.html" target="_blank" rel="noopener noreferrer">local infrastructure setup</a>. You can easily access this server through the
<a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function after creating your CE account, streamlining the process for MLflow experiment tracking.</p>
<p>To authenticate with Databricks CE, use the <a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.login" target="_blank" rel="noopener noreferrer">mlflow.login()</a> function. This will prompt you for:</p>
<ul>
<li>
<p><strong>Databricks Host</strong>: <code>https://community.cloud.databricks.com/</code></p>
</li>
<li>
<p><strong>Username</strong>: Your Databricks CE email address.</p>
</li>
<li>
<p><strong>Password</strong>: Your Databricks CE password.</p>
</li>
</ul>
<p>Upon successful authentication, you will see a confirmation message.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">login</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Follow the prompts for authentication</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce">4. Connect to Hosted MLflow and Track Experiments with Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#4-connect-to-hosted-mlflow-and-track-experiments-with-databricks-ce" class="hash-link" aria-label="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE" title="Direct link to 4. Connect to Hosted MLflow and Track Experiments with Databricks CE">​</a></h4>
<p>After you login from your local machine, start an experiment with <a href="https://mlflow.org/docs/latest/python_api/mlflow.html?highlight=mlflow%20set_experiment#mlflow.set_experiment" target="_blank" rel="noopener noreferrer">mlflow.set_experiment()</a> and log some metrics. For instance:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">set_experiment</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"/Users/\&lt;email&gt;/check-databricks-ce-connection"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"foo"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_metric</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"bar"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p><strong>Note</strong>: The Databricks environment requires you to set experiments with the directory (from root)</p>
</blockquote>
<p><code>/Users/{your email address for your account}/{name of your experiment}</code>, which is different from the behavior in self-hosted MLflow (and when running MLFlow locally).</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="5-viewing-your-experiment-in-databricks-ce">5. Viewing Your Experiment in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#5-viewing-your-experiment-in-databricks-ce" class="hash-link" aria-label="Direct link to 5. Viewing Your Experiment in Databricks CE" title="Direct link to 5. Viewing Your Experiment in Databricks CE">​</a></h4>
<p>Now let’s navigate to Databricks CE to view the experiment result. Log in to your <a href="https://community.cloud.databricks.com/" target="_blank" rel="noopener noreferrer">Databricks CE</a>
account, and click on the top left to select machine learning in the drop down list. Finally, click on the experiment icon. See the screenshots below:</p>
<p>Navigate to the Machine Learning Section</p>
<p><img loading="lazy" alt="Navigate to ML Section of Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-experiments-43a3dba9c34a69026e401602f9b5eea7.png" width="1185" height="678" class="img_ev3q"></p>
<p>Navigate to the MLflow UI</p>
<p><img loading="lazy" alt="Navigate to the MLflow UI on Databricks CE" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/navigate-to-mlflow-ui-9153eefcaed934e7b4eb23ee237a47e7.png" width="1288" height="1009" class="img_ev3q"></p>
<p>In the “Experiments” view, you should be able to find the experiment <code>/Users/{your email}/check-databricks-ce-connection</code>, similar to:</p>
<p><img loading="lazy" alt="Experiment view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-experiment-7dc9705edc70510de92018420a83fbc1.png" width="1600" height="469" class="img_ev3q"></p>
<p>Clicking on the run name, which in this example is 'youthful-lamb-287' (note that you will see a different, randomly generated name in your CE console),
will take you to the run view that looks similar to the following:</p>
<p><img loading="lazy" alt="Run view of Databricks MLflow server" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/view-run-558bde39743ec2b9babdc6f03b81d70f.png" width="1600" height="570" class="img_ev3q"></p>
<p>In the run view, you will see our dummy metrics <code>“foo”</code> and <code>“bar”</code> have been logged successfully.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="6-run-any-mlflow-tutorial-in-databricks-ce">6. Run any MLflow tutorial in Databricks CE<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#6-run-any-mlflow-tutorial-in-databricks-ce" class="hash-link" aria-label="Direct link to 6. Run any MLflow tutorial in Databricks CE" title="Direct link to 6. Run any MLflow tutorial in Databricks CE">​</a></h4>
<p>If you want to try a tutorial from the MLflow website, you can use Databricks CE to quickly test (and modify, if you're inclined) the tutorial. For example, if you wanted to test
the <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.html" target="_blank" rel="noopener noreferrer">Creating Custom Pyfunc tutorial</a>:</p>
<ol>
<li>Click Workspace and&nbsp; select “Import notebook”</li>
</ol>
<p><img loading="lazy" alt="Import a Notebook" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-548588052cf7a796bdb1924c3727a578.png" width="1196" height="674" class="img_ev3q"></p>
<ol start="2">
<li>
<p>Use the <code>URL</code> option to import the notebook directly from the MLflow documentation website. For this example, to import, replace the last element of the url
from <code>html</code> to <code>ipynb</code>. This can be done with any of the tutorial or guide notebooks that are hosted on the MLflow website.</p>
<p>.../notebooks/basic-pyfunc.<del>html</del> → .../notebooks/basic-pyfunc.<strong>ipynb</strong><sup><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fn-3-1ef65d" id="user-content-fnref-3-1ef65d" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup></p>
</li>
</ol>
<p><img loading="lazy" alt="Select the Notebook for Importing" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/import-notebook-2-589a74ce4c982cb92c494ab404814618.png" width="1519" height="1174" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h3>
<p>Databricks Community Edition (CE) offers an accessible and collaborative platform for MLflow experiment tracking, presenting several advantages. Its setup process is effortless
and quick, providing a user-friendly experience. Additionally, it's free to use, making it an ideal choice for beginners, learners, and small-scale projects.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting started<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#getting-started" class="hash-link" aria-label="Direct link to Getting started" title="Direct link to Getting started">​</a></h3>
<p>Try out the notebook on <a href="https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/2830662238121329/3266358972198675/8538262732615206/latest.html" target="_blank" rel="noopener noreferrer">Databricks</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h3>
<ul>
<li>
<p>Learn more about <a href="https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html#minute-tracking-server-overv" target="_blank" rel="noopener noreferrer">different methods to setup your tracking server</a></p>
</li>
<li>
<p>Learn more about running <a href="https://mlflow.org/docs/latest/getting-started/running-notebooks/index.html" target="_blank" rel="noopener noreferrer">Tutorial Notebooks </a>with Databricks CE</p>
</li>
</ul>
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-1ef65d">
<p>The Model Registry and Model Deployment features are not available in the Databricks Community Edition. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-1-1ef65d" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-1ef65d">
<p>Databricks CE only supports basic authorization signin (username / password). For more advanced and secure authorization setups, only the full Databricks product supports those. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-2-1ef65d" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-1ef65d">
<p>Or you can <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/basic-pyfunc.ipynb" target="_blank" rel="noopener noreferrer">download the notebook</a> and manually load it in the UI by selecting <code>File</code> instead of <code>URL</code>. <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/databricks-ce#user-content-fnref-3-1ef65d" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content>
        <author>
            <name>Abe Omorogbe</name>
            <uri>https://www.linkedin.com/in/abeomor/</uri>
        </author>
        <category label="managed mlflow" term="managed mlflow"/>
        <category label="getting started" term="getting started"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom MLflow Models with mlflow.pyfunc]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc"/>
        <updated>2024-01-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A guide for creating custom MLflow models]]></summary>
        <content type="html"><![CDATA[<p>If you're looking to learn about all of the flexibility and customization that is possible within
MLflow's custom models, this blog will help you on your journey in understanding more about how to
leverage this powerful and highly customizable model storage format.</p>
<p><img loading="lazy" alt="Welcome" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/header-63bc1d1400bae90d4022e288cb0c513d.png" width="1200" height="629" class="img_ev3q"></p>
<p>MLflow offers built-in methods for logging and working with models from many popular machine
learning and generative AI frameworks and model providers, such as scikit-learn, PyTorch,
HuggingFace transformers, and LangChain. For example,
<a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>
will log a scikit-learn model as an MLflow artifact without requiring you to define custom methods for
prediction or for handling artifacts.</p>
<p>In some cases, however, you might be working in a framework for which MLflow does not have
built-in methods, or you might want something different than the model’s default prediction
outputs. In those cases, MLflow allows you to create custom models to work with essentially
any framework and to integrate custom logic to existing supported frameworks.</p>
<p>In its simplest form, all that’s required is to define a custom predict method and log the model.
The following example defines a simple pyfunc model that just returns the square of its input:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define a custom model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Directly return the square of the input</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">**</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">MyModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Predict</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let’s dig into how this works, starting with some basic concepts.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="models-and-model-flavors">Models and Model Flavors<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#models-and-model-flavors" class="hash-link" aria-label="Direct link to Models and Model Flavors" title="Direct link to Models and Model Flavors">​</a></h2>
<p><img loading="lazy" alt="Models and Flavors" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/models-and-flavors-51143bf4059c2106bb267bc53daa31bb.png" width="2235" height="1332" class="img_ev3q"></p>
<p>An MLflow model is a directory that includes everything needed to reproduce a machine learning model
across different environments. Aside from the stored model itself, the most important component
stored is an <code>MLmodel</code> YAML file that specifies the model’s supported model flavors.
A <a href="https://mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/part1-named-flavors.html#components-of-a-model-in-mlflow" target="_blank" rel="noopener noreferrer">model flavor</a>
is a set of rules specifying how MLflow can interact with the model (i.e., save it, load it, and
get predictions from it).</p>
<p>When you create a custom model in MLflow, it has the <code>python_function</code> or pyfunc model flavor,
which is a kind of “universal translator” across formats in MLflow. When you save a model in MLflow
using a built-in model flavor, e.g. with <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.log_model" target="_blank" rel="noopener noreferrer">mlflow.sklearn.log_model</a>,
that model also has the pyfunc model flavor in addition to its framework-specific flavor.
Having both framework-specific and pyfunc model flavors allows you to use the model via the
framework’s native API (e.g., <code>scikit-learn</code>) or via the pyfunc flavor’s framework-agnostic inference API.</p>
<p>Models with the pyfunc flavor are loaded as instances of the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.PyFuncModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PyfuncModel</a>
class, which exposes a standardized predict method. This enables straightforward inference through a single
function call, regardless of the underlying model's implementation details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-mlflow-pyfunc-models">Defining Custom MLflow Pyfunc Models<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-mlflow-pyfunc-models" class="hash-link" aria-label="Direct link to Defining Custom MLflow Pyfunc Models" title="Direct link to Defining Custom MLflow Pyfunc Models">​</a></h2>
<p>Saving a model from any supported machine learning framework as an MLflow model results in the
creation of a pyfunc model flavor that provides a framework-agnostic interface for managing and
using the model. But what if you’re using a framework without an MLflow integration, or you’re
trying to elicit some custom behavior from a model? <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#creating-custom-pyfunc-models" target="_blank" rel="noopener noreferrer">Custom pyfunc models</a>
allow you to work with essentially any framework and to integrate custom logic.</p>
<p>To implement a custom pyfunc model, define a new Python class inheriting from the PythonModel class
and implement the necessary methods. Minimally, this will involve implementing a custom predict
method. Next, create an instance of your model and log or save the model. Once you’ve loaded the
saved or logged model, you can use it for predictions.</p>
<p><img loading="lazy" alt="Creating a custom model" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-model-creation-d615de1b07178eaeaa25b55443690d17.png" width="2235" height="1383" class="img_ev3q"></p>
<p>Let’s work through a few examples, each adding a little more complexity and highlighting different
aspects of defining a custom pyfunc model. We’ll cover four main techniques for implementing custom
behaviors in pyfunc models:</p>
<ol>
<li>Implementing a custom <code>predict</code> method</li>
<li>Implementing a custom <code>__init__</code> method</li>
<li>Implementing a custom <code>load_context</code> method</li>
<li>Implementing user-defined custom methods</li>
</ol>
<p><img loading="lazy" alt="Pyfunc model customization" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/custom-pyfunc-types-5cd29c2ba155b783ed35f0231432922f.png" width="2239" height="1100" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-a-custom-predict-method">Defining a custom <code>predict</code> method<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-a-custom-predict-method" class="hash-link" aria-label="Direct link to defining-a-custom-predict-method" title="Direct link to defining-a-custom-predict-method">​</a></h3>
<p>At a minimum, a pyfunc model should specify a custom predict method that defines what happens when
we call <code>model.predict</code>. Here’s an example of a custom model that applies a simple linear
transformation to the model inputs, multiplying each input by two and adding three:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"linear_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">SimpleLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that you can (and should) also include a <a href="https://mlflow.org/docs/latest/models.html#model-signature" target="_blank" rel="noopener noreferrer">signature</a>
and an <a href="https://mlflow.org/docs/latest/models.html#model-input-example" target="_blank" rel="noopener noreferrer">input example</a> when saving/logging a
model. If you pass an input example, the signature will be inferred automatically. The model
signature provides a way for MLflow to enforce correct usage of your model.</p>
<p>Once we’ve defined the model path and saved an instance of the model, we can load the saved model
and use it to generate predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Now the model can be loaded and used for predictions</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Which will return:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:    0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  5</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  7</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that if a custom <code>predict</code> method is all you need—that is, if your model does not have any
artifacts that require special handling—you can save or log the <code>predict</code> method directly without
needing to wrap it in a Python class:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Pass predict method as python_model argument to save/log model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"simple_function"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Note that with this approach, we <strong>must include</strong> an input example along with the custom predict
method. We also have to modify the predict method such that it takes only one input (i.e., no self or context).
Running this example and then loading with the same code as the preceding code block will retain the same output as
the example using a class definiton.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="parameterizing-the-custom-model">Parameterizing the custom model<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#parameterizing-the-custom-model" class="hash-link" aria-label="Direct link to Parameterizing the custom model" title="Direct link to Parameterizing the custom model">​</a></h3>
<p>Now suppose we want to parameterize the custom linear function model so that it can be used with
different slopes and intercepts. We can define the <code>__init__</code> method to set up custom parameters,
as in the following example. Note that the custom model class’s <code>__init__</code> method should not be used
to load external resources like data files or pretrained models; these are handled in the
<code>load_context</code> method, which we’ll discuss shortly.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> slope</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize the parameters of the model. Note that we are not loading</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        any external resources here, just setting up the parameters.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> slope</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> intercept</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">intercept</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">linear_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ParameterizedLinearModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Saving the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"parameter_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">linear_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        input_example</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Again, we can load this model and make some predictions:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">1</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Example input data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># Outputs transformed data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  40</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  50</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There are many cases where we might want to parameterize a model in this manner. We can define
variables in the <code>__init__</code> method to:</p>
<ul>
<li>Set model hyperparameters.</li>
<li>A/B test models with different parameter sets.</li>
<li>Set user-specific customizations.</li>
<li>Toggle features.</li>
<li>Set, e.g., access credentials and endpoints for models that access external APIs.</li>
</ul>
<p>In some cases, we may want to be able to pass parameters at inference time rather than when we
initialize the model. This can be accomplished with
<a href="https://mlflow.org/docs/latest/models.html#model-inference-params" target="_blank" rel="noopener noreferrer">model inference params</a>. To use
inference params, we must pass a valid model signature including <code>params</code>. Here’s how to adapt the
preceding example to use inference params:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> pandas </span><span class="token keyword" style="color:rgb(86, 156, 214)">as</span><span class="token plain"> pd</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">models </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> infer_signature</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Custom PythonModel class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Applies a simple linear transformation</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        to the input data. For example, y = 2x + 3.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        slope </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Assuming model_input is a pandas DataFrame with one column</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">slope </span><span class="token operator" style="color:rgb(212, 212, 212)">*</span><span class="token plain"> model_input </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Set default params</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">params </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Define model signature</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">signature </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> infer_signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">params</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Save the model with mlflow</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"model_with_params"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">LinearFunctionInferenceParams</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        signature</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">signature</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After loading the model as before, you can now pass a <code>params</code> argument to the <code>predict</code> method,
enabling you to use the same loaded model for different combinations of parameters:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_uri</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">parameterized_predictions </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    pd</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">DataFrame</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">20</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">30</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> params</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"slope"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"intercept"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">print</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">parameterized_predictions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">:     0</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 0  30</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 1  50</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">: 2  70</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="loading-external-resources-with-load_context">Loading external resources with <code>load_context</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#loading-external-resources-with-load_context" class="hash-link" aria-label="Direct link to loading-external-resources-with-load_context" title="Direct link to loading-external-resources-with-load_context">​</a></h3>
<p>Custom models often require external files such as model weights in order to perform inference.
These files, or artifacts, must be handled carefully to avoid unnecessarily loading files into
memory or errors during model serialization. When building custom pyfunc models in MLflow, you can
use the <code>load_context</code> method to handle model artifacts correctly.</p>
<p>The <code>load_context</code> method receives a <code>context</code> object containing artifacts the model can use during
inference. You can specify these artifacts using the <code>artifacts</code> argument when saving or logging
models, making them accessible to the <code>load_context</code> method via the <code>context.artifacts</code> dictionary.</p>
<p>In practice, the <code>load_context</code> method often initializes the model called by the <code>predict</code> method by
handling the loading of model artifacts.</p>
<p>This raises an important question: why do we load artifacts and define the model in the <code>load_context</code>
method and not in <code>__init__</code> or directly in <code>predict</code>? Correct usage of <code>load_context</code> is essential
for the maintainability, efficiency, scalability, and portability of MLflow pyfunc models. This is because:</p>
<ul>
<li>The <code>load_context</code> method is executed once when the model is loaded via <code>mlflow.pyfunc.load_model</code>.
This setup ensures that resource-intensive processes defined within this method, such as loading
large model files, are not repeated unnecessarily. If artifact loading is done in the predict
method, it will occur every single time a prediction is made. This is highly inefficient for
resource-intensive models.</li>
<li>Saving or logging an MLflow <code>pyfunc</code> model involves serializing the Python model class (the subclass
of <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.PythonModel" target="_blank" rel="noopener noreferrer">mlflow.pyfunc.PythonModel</a>
you created) and its attributes. Complex ML models are not always compatible with the methods used
to serialize the Python object, which can lead to errors if they are created as attributes of the Python object.</li>
</ul>
<p>As an example, suppose we want to load a large language model (LLM) in the <code>gguf</code> model format
(a file format designed for storing models for inference) and run it with the
<a href="https://pypi.org/project/ctransformers" target="_blank" rel="noopener noreferrer">ctransformers library</a>. At the time of writing, there is
no built-in model flavor that lets us use <code>gguf</code> models for inference, so we’ll create a custom
pyfunc model that loads the required libraries and model files in the <code>load_context</code> method.
Specifically, we’re going to load a quantized version of the <a href="https://huggingface.co/TheBloke/Mistral-7B-v0.1-AWQ" target="_blank" rel="noopener noreferrer">AWQ version of the Mistral 7B model</a>.</p>
<p>First, we’ll download the model snapshot using the huggingface hub cli:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">huggingface-cli download TheBloke/Mistral-7B-v0.1-GGUF \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                mistral-7b-v0.1.Q4_K_M.gguf \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir /path/to/mistralfiles/ \</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                --local-dir-use-symlinks False</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And then we’ll define our custom <code>pyfunc</code> model. Note the addition of the <code>load_context</code> method:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"The model has not been loaded. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Ensure that 'load_context' is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There’s a lot going on here, so let’s break it down. Here are the key points:</p>
<ul>
<li>As before, we use the <code>__init__</code> method to parameterize the model (in this case, to set the
<code>gpu_layers</code> argument for the model).</li>
<li>The purpose of the <code>load_context</code> method is to load the artifacts required for use in the
<code>predict</code> method. In this case, we need to load the model and its weights.</li>
<li>You’ll notice that we reference <code>context.artifacts["model_file"]</code>. This comes from the artifacts
argument to <code>mlflow.pyfunc.save_model</code> or <code>mlflow.pyfunc.load_model</code>, as shown in the following
code snippet. This is an important part of working with <code>pyfunc</code> models. The <code>predict</code> and
<code>load_context</code> methods can access the artifacts defined in the artifacts argument to the
<code>save_model</code> or <code>log_model</code> method via the <code>context.artifacts</code> object. <code>load_context</code> is executed
when the model is loaded via <code>load_model</code>; as described earlier, this provides a way to ensure that
the potentially time-consuming initialization of a model does not occur each time the model is used
for prediction.</li>
</ul>
<p>Now we can initialize and save an instance of the model. Note the artifacts argument to the
<code>save_model</code> function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Create an instance of the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mistral_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">50</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">log_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistral_model"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the saved model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">load_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_info</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_uri</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Make a prediction with the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">loaded_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is the MLflow Pyfunc model flavor?"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To recap: correct use of the <code>load_context</code> method helps to ensure efficient handling of model
artifacts and prevents errors in serialization that could result from attempting to define artifacts
as model attributes.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-custom-methods">Defining custom methods<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#defining-custom-methods" class="hash-link" aria-label="Direct link to Defining custom methods" title="Direct link to Defining custom methods">​</a></h3>
<p>You can define your own methods in the custom <code>pyfunc</code> model to handle tasks like preprocessing
inputs or post-processing outputs. These custom methods can then be called by the predict method.
Keep in mind that these custom methods, just like <code>__init__</code> and <code>predict</code>, should <strong>not be used</strong> for
loading artifacts. Loading artifacts is the exclusive role of the <code>load_context</code> method.</p>
<p>For example, we can modify the <code>CTransformersModel</code> to incorporate some prompt formatting as follows:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> ctransformers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> PythonModel</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">CTransformersModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">PythonModel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">__init__</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Initialize with GPU layer configuration.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> gpu_layers</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">load_context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Load the model from the specified artifacts directory.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        model_file_path </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">artifacts</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token comment" style="color:rgb(106, 153, 85)"># Load the model</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> ctransformers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">AutoModelForCausalLM</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">from_pretrained</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            model_path_or_repo_id</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">model_file_path</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            gpu_layers</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">gpu_layers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(212, 212, 212)">@staticmethod</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Formats the user's prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        formatted_prompt </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Question: What is an MLflow Model?\n\n"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"Answer: An MLflow Model is a directory that includes "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"everything that is needed to reproduce a machine "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"learning model across different environments. "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"It is essentially a container holding the trained model "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"files, dependencies, environment details, input examples, "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"and additional metadata. The directory also includes an "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"MLmodel YAML file, which describes the different "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">f"flavors of the model.\n\nQuestion: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string-interpolation interpolation">prompt</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token string-interpolation string" style="color:rgb(206, 145, 120)">\nAnswer: "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> formatted_prompt</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token keyword" style="color:rgb(86, 156, 214)">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">predict</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">"""</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        Perform prediction using the loaded model.</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token triple-quoted-string string" style="color:rgb(206, 145, 120)">        """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">if</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model </span><span class="token keyword" style="color:rgb(86, 156, 214)">is</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token keyword" style="color:rgb(86, 156, 214)">raise</span><span class="token plain"> ValueError</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"Model was not loaded. Ensure that 'load_context' "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">                </span><span class="token string" style="color:rgb(206, 145, 120)">"is properly executed."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token keyword" style="color:rgb(86, 156, 214)">return</span><span class="token plain"> self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">self</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">_format_prompt</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">model_input</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now the <code>predict</code> method can access the private <code>_format_prompt</code> static method to apply custom formatting to the prompts.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependencies-and-source-code">Dependencies and Source Code<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#dependencies-and-source-code" class="hash-link" aria-label="Direct link to Dependencies and Source Code" title="Direct link to Dependencies and Source Code">​</a></h3>
<p>The custom <code>CTransformersModel</code> defined above uses the <code>ctransformers</code> library. There are a few
different approaches for making sure this library (and any other source code, including from your
local device) is correctly loaded with your model. Correctly specifying dependencies is essential
for ensuring that custom models work as expected across environments.</p>
<p>There are three main approaches to be aware of for specifying dependencies:</p>
<ul>
<li>Define pip requirements explicitly with the <code>pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Add extra pip requirements to an automatically generated set of requirements with the
<code>extra_pip_requirements</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
<li>Define a Conda environment with the <code>conda_env</code> argument to <code>save_model</code> or <code>log_model</code>.</li>
</ul>
<p>Earlier, we used the first approach to specify that the <code>ctransformers</code> library was needed:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token comment" style="color:rgb(106, 153, 85)"># Log the model using mlflow with the model file as an artifact</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">with</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">start_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    model_info </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">pyfunc</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">save_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifact_path</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token string" style="color:rgb(206, 145, 120)">"mistralmodel"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        python_model</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain">mistral_model</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        artifacts</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token string" style="color:rgb(206, 145, 120)">"model_file"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">"path/to/mistral/model/on/local/filesystem"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        pip_requirements</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">            </span><span class="token string" style="color:rgb(206, 145, 120)">"ctransformers==0.2.27"</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you do not specify dependencies explicitly, MLflow will attempt to infer the correct set of
requirements and environment details. To enable greater accuracy, it is <strong>strongly recommended</strong> to
include an <code>input_example</code> when saving or logging your model due to the internal execution of a
sample inference step that will capture any loaded library references associated with the inference
execution, enabling a higher probability that the correct dependencies will be recorded.</p>
<p>You can also work with custom code on your own filesystem with the <code>code_path</code> argument.
<code>code_path</code> takes a list of paths to Python file dependencies and prepends them to the system
path before the model is loaded, so the custom pyfunc model can import from these modules.</p>
<p>See the documentation for the <a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.log_model" target="_blank" rel="noopener noreferrer">log_model</a> and
<a href="https://mlflow.org/docs/latest/python_api/mlflow.pyfunc.html?highlight=pyfunc#mlflow.pyfunc.save_model" target="_blank" rel="noopener noreferrer">save_model</a>
functions for more details on the accepted formats for <code>pip</code>, <code>Conda</code>, and local code requirements.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary-custom-pyfunc-models-in-mlflow">Summary: Custom Pyfunc Models in MLflow<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#summary-custom-pyfunc-models-in-mlflow" class="hash-link" aria-label="Direct link to Summary: Custom Pyfunc Models in MLflow" title="Direct link to Summary: Custom Pyfunc Models in MLflow">​</a></h3>
<p>MLflow has built-in methods for working with models from many popular machine learning frameworks,
such as <a href="https://www.mlflow.org/docs/latest/models.html#scikit-learn-sklearn" target="_blank" rel="noopener noreferrer">scikit-learn</a>,
<a href="https://www.mlflow.org/docs/latest/models.html#pytorch-pytorch" target="_blank" rel="noopener noreferrer">PyTorch</a>, and
<a href="https://www.mlflow.org/docs/latest/llms/transformers/index.html" target="_blank" rel="noopener noreferrer">Transformers</a>. You can define your own custom
<code>mlflow.pyfunc</code> model when you want to work with models that do not yet have built-in model
flavors, or when you want to implement a custom predict method for models with built-in model flavors.</p>
<p>There are several ways to customize <code>pyfunc</code> models to get the desired behavior. Minimally, you can
implement a custom <code>predict</code> method. If your model requires saving or loading artifacts, you should also
implement a <code>load_context</code> method. For further customization, you can use the <code>__init__</code> method for
setting custom attributes and define your own custom methods for pre- and post-processing.
Combining these approaches gives you the ability to flexibly define custom logic for your machine
learning models.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="further-learning">Further Learning<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/custom-pyfunc#further-learning" class="hash-link" aria-label="Direct link to Further Learning" title="Direct link to Further Learning">​</a></h3>
<p>Interested in learning more about custom <code>pyfunc</code> implementations? You can visit:</p>
<ul>
<li><a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom Pyfuncs for Advanced LLMs with MLflow</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">Build Custom Python Function Models for traditional ML</a></li>
<li><a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/notebooks/index.html" target="_blank" rel="noopener noreferrer">Custom PyFunc notebook examples</a></li>
</ul>]]></content>
        <author>
            <name>Daniel Liden</name>
            <uri>https://www.linkedin.com/in/danielliden</uri>
        </author>
        <category label="pyfunc" term="pyfunc"/>
        <category label="models" term="models"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automatic Metric, Parameter, and Artifact Logging with mlflow.autolog]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog"/>
        <updated>2023-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!]]></summary>
        <content type="html"><![CDATA[<p>Looking to learn more about the autologging functionality included in MLflow? Look no further than this primer on the basics of using this powerful and time-saving feature!</p>
<p>Robust logging practices are central to the iterative development and improvement of machine learning models. Carefully tracking metrics, parameters, and artifacts can be challenging when working with complex machine learning libraries or when experimenting with multiple different frameworks with varying APIs and selections of different objects and values to track.</p>
<p>MLflow’s <strong>automatic logging functionality</strong> offers a simple solution that is compatible with many widely-used machine learning libraries, such as <a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a>, <a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a>, and <a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a>. Using <code>mlflow.autolog()</code> instructs MLflow to capture essential data without requiring the user to specify what to capture manually. It is an accessible and powerful entrypoint for MLflow’s logging capabilities.</p>
<p>To enable automatic logging, simply add the following line to your machine learning scripts/notebooks, before initiating activities like model training or evaluation that may include information or artifacts you would like to log:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="autolog-features">Autolog features<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#autolog-features" class="hash-link" aria-label="Direct link to Autolog features" title="Direct link to Autolog features">​</a></h2>
<p>When a data science workflow includes <code>mlflow.autolog()</code>, MLflow will automatically log:</p>
<ul>
<li><strong>Metrics</strong>: standard training and evaluation measures such as accuracy and F1 score;</li>
<li><strong>Parameters</strong>: hyperparameters, such as learning rate and number of estimators; and</li>
<li><strong>Artifacts</strong>: important files, such as trained models.</li>
</ul>
<p>MLflow’s automatic logging captures details tailored to the specific activities of the library being used: different libraries will result in different logged objects and data. In addition, MLflow logs key metadata such as software versions, a git commit hash, and the file name from which the run was initiated. By documenting the system's state during model training, MLflow aims to facilitate environment reproducibility and provide audit lineage, minimizing the possibility of inference issues that could arise from package regressions or deprecations in newer library versions.</p>
<p>The specifics of what is captured through automatic logging depend on the libraries used. Additionally, MLflow captures contextual metadata such as software versions, git commit hash, and the name of the file from which the run was launched. By logging as much detail as possible about the state of the system that trained the model, MLflow can offer environment reproducibility and audit lineage, minimizing the possibility of inference issues resulting from, for example, package regressions or deprecations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-usage-of-mlflowautolog">Basic Usage of <code>mlflow.autolog</code><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#basic-usage-of-mlflowautolog" class="hash-link" aria-label="Direct link to basic-usage-of-mlflowautolog" title="Direct link to basic-usage-of-mlflowautolog">​</a></h2>
<p>You can access auto logging functionality in two different ways:</p>
<ol>
<li>Via the <code>mlflow.autolog()</code> function, which enables and configures automatic logging across all supported libraries. This provides a broad, one-size-fits-all approach when working with multiple libraries and is ideal for prototyping and exploratory analysis of a machine learning pipeline.</li>
<li>Via the library-specific autolog functions, such as <code>mlflow.sklearn.autolog()</code>, which enable finer-grained logging configuration for individual libraries. For example, <code>mlflow.pytorch.autolog()</code> includes the <code>log_every_n_epoch</code> and <code>log_every_n_step</code> arguments for specifying how often to log metrics.</li>
</ol>
<p>Regardless of which of these two approaches you use, you do not need to manually initialize an MLflow run with <a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.start_run" target="_blank" rel="noopener noreferrer">start_run()</a> in order to have a run created and for your model, parameters, and metrics to be captured in MLflow.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="example">Example<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#example" class="hash-link" aria-label="Direct link to Example" title="Direct link to Example">​</a></h3>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> mlflow</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> datasets</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">ensemble </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> RandomForestClassifier</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token keyword" style="color:rgb(86, 156, 214)">from</span><span class="token plain"> sklearn</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">model_selection </span><span class="token keyword" style="color:rgb(86, 156, 214)">import</span><span class="token plain"> train_test_split</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Generate a 3-class classification problem</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> datasets</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">make_classification</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_samples</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    class_sep</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.5</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_classes</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">    n_informative</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">3</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Split the data into training and validation sets</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> train_test_split</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> test_size</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">0.2</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> random_state</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">42</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Enable autolog</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">autolog</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)"># or mlflow.sklearn.autolog()</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Initialize the classifier with n_estimators=200 and max_depth=10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> RandomForestClassifier</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">n_estimators</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">200</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> max_depth</span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token number" style="color:rgb(181, 206, 168)">10</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Fit the classifier to the data.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The `fit` method is patched to perform autologging. When engaged in training, a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># run is created and the parameters are logged.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># After the fit is complete, the model artifact is logged to the run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">fit</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_train</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Score the model on the data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># The current active run is retrieved during calling `score` and the loss metrics are logged</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># to the active MLflow run.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">clf</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">score</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">X_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> y_val</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)"># Visualize the automatically logged run results to validate what we recorded</span><span class="token plain"></span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">mlflow</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token plain">last_active_run</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The above logs model parameters, metrics, and the model to an MLflow run. The output result of the final statement (<a href="https://www.mlflow.org/docs/latest/python_api/mlflow.html#mlflow.last_active_run" target="_blank" rel="noopener noreferrer">mlflow.last_active_run()</a>) in the above example, which will return data from the run on model metrics, parameters, and logged artifacts (results truncated) is as shown below:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#9CDCFE;--prism-background-color:#1E1E1E"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#9CDCFE;background-color:#1E1E1E"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#9CDCFE"><span class="token plain">&lt;Run: data=&lt;RunData:</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">metrics={'RandomForestClassifier_score_X_val': 0.72,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_accuracy_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_f1_score': 0.9962547564333545,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_log_loss': 0.3354604497935824,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_precision_score': 0.9962921348314606,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_recall_score': 0.99625,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_roc_auc': 0.9998943433719795,</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'training_score': 0.99625</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain"> params={'bootstrap': 'True',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'ccp_alpha': '0.0',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'class_weight': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'criterion': 'gini',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_depth': '10',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_features': 'sqrt',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         'max_leaf_nodes': 'None',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         [...],</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">         },</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">tags={'estimator_class': 'sklearn.ensemble._forest.RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'estimator_name': 'RandomForestClassifier',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      'mlflow.autologging': 'sklearn',</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">      [...]</span><br></span><span class="token-line" style="color:#9CDCFE"><span class="token plain">}, [...]&gt;&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also access these in the mlflow ui by executing <a href="https://www.mlflow.org/docs/latest/tracking.html#tracking-ui" target="_blank" rel="noopener noreferrer">mlflow ui</a> on a command line terminal.</p>
<p><img loading="lazy" alt="The MLflow Tracking UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_in_ui-2a92179f1ef630da4f1357e3daaf5999.png" width="1687" height="1307" class="img_ev3q"></p>
<p>The MLflow UI also allows you to graphically compare different metrics and parameters across multiple runs, including those generated via <code>mlflow.autolog</code>.</p>
<p><img loading="lazy" alt="Run comparison of autologged runs in the MLflow UI" src="https://your-docusaurus-site.example.com/mlflow-website/assets/images/autolog_compare_runs-08773285a5af4ee8175c0ed1fc3c8c83.png" width="1685" height="1307" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuration-and-customization">Configuration and Customization<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#configuration-and-customization" class="hash-link" aria-label="Direct link to Configuration and Customization" title="Direct link to Configuration and Customization">​</a></h2>
<p>The automatic logging functions take many arguments that give the user greater control over logging behavior. For example, <code>mlflow.autolog()</code> includes <code>log_models</code> and <code>log_datasets</code> arguments (both <code>True</code> by default) that specify whether models and dataset information should be saved to the MLflow run, enabling you to specify what is actually logged. To disable automatic logging of datasets while continuing to log all the usual elements, simply disable the autologging of datasets feature by setting <code>mlflow.autolog(log_datasets=False)</code> before fitting a model. You can also adjust the behavior of library-specific autolog functions: for example, the <code>mlflow.sklearn.autolog()</code> function includes a <code>max_tuning_runs</code> argument that specifies how many nested runs to capture when performing hyperparameter searches.</p>
<p><code>mlflow.autolog()</code> can be used in combination with the library-specific autolog functions to control the logging behavior for specific libraries. The library-specific autolog call will always supersede <code>mlflow.autolog()</code>, regardless of the order in which they are called. For example, combining <code>mlflow.autolog()</code> with <code>mlflow.sklearn.autolog(disable=True)</code> will result in automatic logging for all supported libraries except for <code>scikit-learn</code>.</p>
<p>It is important to consult the documentation for the specific framework(s) you are using in order to understand what is logged automatically and what configuration options are available. See the <a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading">further reading section below</a> for links.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-and-next-steps">Conclusion and Next Steps<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#conclusion-and-next-steps" class="hash-link" aria-label="Direct link to Conclusion and Next Steps" title="Direct link to Conclusion and Next Steps">​</a></h2>
<p>MLflow's autologging capabilities and library-specific automatic logging functions provide a straightforward starting point for MLflow tracking with little or no required configuration. They log key metrics, parameters, and artifacts from many popular machine learning libraries, allowing users to track their machine learning workflows without writing custom tracking code.</p>
<p>They are not, however, the right solution for all use cases. If you only need to track a handful of specific metrics, enabling automatic logging may be inefficient, resulting in much more generated data and stored artifacts than needed. Furthermore, automatic logging is not available for every possible framework and custom values one might want to track. In such cases, it might be necessary to <a href="https://mlflow.org/docs/latest/tracking/tracking-api.html#logging-functions" target="_blank" rel="noopener noreferrer">manually specify what to track</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="further-reading">Further Reading<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-autolog#further-reading" class="hash-link" aria-label="Direct link to Further Reading" title="Direct link to Further Reading">​</a></h2>
<ul>
<li><a href="https://mlflow.org/docs/latest/tracking/autolog.html" target="_blank" rel="noopener noreferrer">MLflow Documentation on Automatic Logging</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow.autolog" target="_blank" rel="noopener noreferrer">Python API reference for mlflow.autolog</a></li>
<li>Python API references for library-specific autolog functions<!-- -->
<ul>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pytorch.html" target="_blank" rel="noopener noreferrer">PyTorch</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.tensorflow.html#mlflow.tensorflow.autolog" target="_blank" rel="noopener noreferrer">Tensorflow</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.sklearn.html#mlflow.sklearn.autolog" target="_blank" rel="noopener noreferrer">Scikit-learn</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.xgboost.html#mlflow.xgboost.autolog" target="_blank" rel="noopener noreferrer">XGBoost</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.pyspark.ml.html#mlflow.pyspark.ml.autolog" target="_blank" rel="noopener noreferrer">PySpark</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.statsmodels.html#mlflow.statsmodels.autolog" target="_blank" rel="noopener noreferrer">Statsmodels</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.lightgbm.html#mlflow.lightgbm.autolog" target="_blank" rel="noopener noreferrer">LightGBM</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.paddle.html#mlflow.paddle.autolog" target="_blank" rel="noopener noreferrer">Paddle</a></li>
<li><a href="https://mlflow.org/docs/latest/python_api/mlflow.fastai.html#mlflow.fastai.autolog" target="_blank" rel="noopener noreferrer">Fastai</a></li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Daniel Liden</name>
            <uri>https://www.linkedin.com/in/danielliden</uri>
        </author>
        <category label="autolog" term="autolog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLflow Docs Overhaul]]></title>
        <id>https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul</id>
        <link href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul"/>
        <updated>2023-10-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The MLflow Documentation is getting an upgrade.]]></summary>
        <content type="html"><![CDATA[<p>The MLflow Documentation is getting an upgrade.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overhauling-the-mlflow-docs">Overhauling the MLflow Docs<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#overhauling-the-mlflow-docs" class="hash-link" aria-label="Direct link to Overhauling the MLflow Docs" title="Direct link to Overhauling the MLflow Docs">​</a></h2>
<p>We're thrilled to announce a comprehensive overhaul of the MLflow Docs. This initiative is not just about refreshing the look and feel but about reimagining how our users interact with our content. Our primary goal is to enhance clarity, improve navigation, and provide more in-depth resources for our community.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-renewed-focus-on-user-experience">A Renewed Focus on User Experience<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#a-renewed-focus-on-user-experience" class="hash-link" aria-label="Direct link to A Renewed Focus on User Experience" title="Direct link to A Renewed Focus on User Experience">​</a></h2>
<p>The MLflow documentation has always been an essential resource for our users. Over time, we've received invaluable feedback, and we've listened. The modernization effort is a direct response to the needs and preferences of our community.</p>
<p>Along with working on covering new cutting-edge features as part of this documentation overhaul, we're working on addressing the complexity of getting started. As the first part of a series of tutorials and guides focusing on the initial learning phase, we've created a new <a href="https://www.mlflow.org/docs/latest/getting-started/logging-first-model/index.html" target="_blank" rel="noopener noreferrer">getting started guide</a>, the first of many in a new series we're working on in an effort to teach the fundamentals of using MLflow. We feel that more in-depth instructional tutorials for learning the concepts and tools of MLflow will help to enhance the user experience for not only new users, but experienced users who need a refresher of how to do certain tasks.</p>
<p>There are more of these coming in the future!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="easier-navigation"><strong>Easier Navigation</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#easier-navigation" class="hash-link" aria-label="Direct link to easier-navigation" title="Direct link to easier-navigation">​</a></h3>
<p>Our first order of business is to declutter and reorganize. This is going to be a process, though. With some of the monolithic pages (<a href="https://www.mlflow.org/docs/2.7.1/models.html" target="_blank" rel="noopener noreferrer">Mlflow Models</a>), this will be more of a marathon than a sprint.</p>
<p>We've introduced a <a href="https://www.mlflow.org/docs/latest/index.html" target="_blank" rel="noopener noreferrer">new main navigation page</a> in an effort to help steer you to the content that you're looking for based on end-use domain, rather than component of MLflow. We're hoping that this helps to bring new feature content and useful examples to your awareness, limiting the amount of exploratory discovery needed to understand how to use these new features.</p>
<p>Another priority for us was to make major new features easier to discover. While the <a href="https://github.com/mlflow/mlflow/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer">release notes</a> are useful, particularly for Engineers who are maintaining integrations with, or are managing a deployment of, MLflow, they're not particularly user-friendly for an end-user of MLflow. We felt that a curated list of major new features would help to distill the information in our release notes, so we built the <a href="https://www.mlflow.org/docs/latest/new-features/index.html" target="_blank" rel="noopener noreferrer">new features</a> page. We sincerely hope it helps to reduce the amount of effort needed to know what new major features have been released.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="interactive-learning-with-notebooks"><strong>Interactive Learning with Notebooks</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#interactive-learning-with-notebooks" class="hash-link" aria-label="Direct link to interactive-learning-with-notebooks" title="Direct link to interactive-learning-with-notebooks">​</a></h3>
<p>In today's fast-paced tech world, interactive learning is becoming the norm. Recognizing this trend, we're embedding viewable notebooks directly within the docs. But we're not stopping there. These notebooks are downloadable, allowing you to run, modify, and experiment with them locally. It's a hands-on approach to learning, bridging the gap between theory and practice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="in-depth-tutorials-and-guides"><strong>In-depth Tutorials and Guides</strong><a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#in-depth-tutorials-and-guides" class="hash-link" aria-label="Direct link to in-depth-tutorials-and-guides" title="Direct link to in-depth-tutorials-and-guides">​</a></h3>
<p>While our previous documentation provided a solid foundation, we felt there was room for more detailed explorations. We're introducing comprehensive <a href="https://www.mlflow.org/docs/latest/traditional-ml/creating-custom-pyfunc/index.html" target="_blank" rel="noopener noreferrer">tutorials</a> and <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/index.html" target="_blank" rel="noopener noreferrer">guides</a> that delve deep into MLflow's features, showing how to solve actual problems. These first new tutorials and guides are just the start. We're going to be spending a lot of time and effort on making much more of MLflow documented in this way, helping to dramatically reduce the amount of time you have to spend figuring out how to leverage features in MLflow.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="diving-deeper-expanding-on-guides-and-tutorials">Diving Deeper: Expanding on Guides and Tutorials<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#diving-deeper-expanding-on-guides-and-tutorials" class="hash-link" aria-label="Direct link to Diving Deeper: Expanding on Guides and Tutorials" title="Direct link to Diving Deeper: Expanding on Guides and Tutorials">​</a></h2>
<p>Our dedication to simplifying the usage of MLflow shines through in our revamped tutorials and guides. We're not just providing instructions; we're offering <a href="https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/index.html" target="_blank" rel="noopener noreferrer">deep dives</a>, <a href="https://www.mlflow.org/docs/latest/traditional-ml/hyperparameter-tuning-with-child-runs/index.html" target="_blank" rel="noopener noreferrer">best practices</a>, and real-world applications. What you see in the MLflow 2.8.0 release is just the beginning. We're going to be heavily focusing on creating more content, showing the best way to leverage the many features and services within MLflow, all the while endeavoring to make it easier than ever to manage any ML project you're working on.</p>
<ul>
<li>
<p><strong>LLMs</strong>: With all of the <a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation.html" target="_blank" rel="noopener noreferrer">new LLM-focused features</a> we've been releasing in the past year, we feel the need to create easier getting started guides,
<a href="https://www.mlflow.org/docs/latest/llms/llm-evaluate/notebooks/question-answering-evaluation.html" target="_blank" rel="noopener noreferrer">in-depth tutorials</a>, runnable examples, and more teaching-oriented step-by-step introductions to these features.</p>
</li>
<li>
<p><strong>Tracking and the MLflow UI</strong>: Our expanded section on tracking will cover everything from setting up your first experiment to advanced tracking techniques. The MLflow UI, an integral part of the platform, will also get its spotlight, ensuring you can make the most of its features.</p>
</li>
<li>
<p><strong>Model Registry</strong>: The model registry is where MLflow truly shines, and our new guides will ensure you can harness its full power. From organizing models to version control, we'll cover it all.</p>
</li>
<li>
<p><strong>Recipes and LLM-focused Features</strong>: MLflow's versatility is one of its strengths. Our new content will explore the breadth of features available, from recipes to LLM-focused tools like the AI Gateway, LLM Evaluation, and the PromptLab UI.</p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-transformative-power-of-interactive-notebooks">The Transformative Power of Interactive Notebooks<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#the-transformative-power-of-interactive-notebooks" class="hash-link" aria-label="Direct link to The Transformative Power of Interactive Notebooks" title="Direct link to The Transformative Power of Interactive Notebooks">​</a></h2>
<p>Interactive notebooks have revolutionized data science and machine learning. By integrating them into our documentation, we aim to provide a holistic learning experience. You can see code in action, understand its impact, and then experiment on their own. It's a dynamic way to grasp complex concepts, ensuring that you not only understand but can also apply your knowledge in your actual project code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="join-us-on-this-journey">Join Us on This Journey<a href="https://your-docusaurus-site.example.com/mlflow-website/blog/mlflow-docs-overhaul#join-us-on-this-journey" class="hash-link" aria-label="Direct link to Join Us on This Journey" title="Direct link to Join Us on This Journey">​</a></h2>
<p>The overhaul of the MLflow documentation is a significant milestone, but it's just the beginning. We have a roadmap full of exciting updates, new content, and features. And for those in our community with a passion for sharing knowledge, we have a message: We'd love to <a href="https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener noreferrer">collaborate</a>! Whether it's writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community.</p>
<p>In conclusion, our commitment to providing top-notch documentation is a new primary focus of the maintainer group. We believe that well-documented features, combined with interactive learning tools, can significantly enhance the experience of using any tool. We want to put in the effort and time to make sure that your journey with using MLflow is as simple and powerful as it can be.</p>
<p>Stay tuned for more updates, and as always, happy coding!</p>]]></content>
        <author>
            <name>MLflow maintainers</name>
            <uri>https://github.com/mlflow/mlflow.git</uri>
        </author>
        <category label="docs" term="docs"/>
    </entry>
</feed>