"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8870],{8387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var o=n(5893),a=n(1151);const i={title:"AutoGen with Custom PyFunc",description:"A guide for building an autonomous image generation agent",tags:["genai","mlops"],slug:"autogen-image-agent",authors:["michael-berk","mlflow-maintainers"],thumbnail:"/img/blog/autogen-blog.png"},r=void 0,s={permalink:"/mlflow-website/blog/autogen-image-agent",source:"@site/blog/2024-08-29-autogen-pyfunc/index.md",title:"AutoGen with Custom PyFunc",description:"A guide for building an autonomous image generation agent",date:"2024-08-29T00:00:00.000Z",formattedDate:"August 29, 2024",tags:[{label:"genai",permalink:"/mlflow-website/blog/tags/genai"},{label:"mlops",permalink:"/mlflow-website/blog/tags/mlops"}],readingTime:21.295,hasTruncateMarker:!0,authors:[{name:"Michael Berk",title:"Sr. Resident Solutions Architect at Databricks",url:"https://www.linkedin.com/in/-michael-berk/",imageURL:"/img/authors/michael_berk.png",key:"michael-berk"},{name:"MLflow maintainers",title:"MLflow maintainers",url:"https://github.com/mlflow/mlflow.git",imageURL:"https://github.com/mlflow-automation.png",key:"mlflow-maintainers"}],frontMatter:{title:"AutoGen with Custom PyFunc",description:"A guide for building an autonomous image generation agent",tags:["genai","mlops"],slug:"autogen-image-agent",authors:["michael-berk","mlflow-maintainers"],thumbnail:"/img/blog/autogen-blog.png"},unlisted:!1,prevItem:{title:"Models from Code Logging in MLflow - What, Why, and How",permalink:"/mlflow-website/blog/models_from_code"},nextItem:{title:"LangGraph with Model From Code",permalink:"/mlflow-website/blog/langgraph-model-from-code"}},l={authorsImageUrls:[void 0,void 0]},m=[{value:"Agent Frameworks",id:"agent-frameworks",level:2}];function g(e){const t={a:"a",h2:"h2",p:"p",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["In this blog, we'll guide you through creating an ",(0,o.jsx)(t.a,{href:"https://microsoft.github.io/autogen/",children:"AutoGen"})," agent framework within an MLflow custom PyFunc. By combining MLflow with AutoGen's ability to create multi-agent frameworks, we are able to create scalable and stable GenAI applications."]}),"\n",(0,o.jsx)(t.h2,{id:"agent-frameworks",children:"Agent Frameworks"}),"\n",(0,o.jsx)(t.p,{children:"Agent frameworks enable autonomous agents to handle complex, multi-turn tasks by integrating discrete logic at each step. These frameworks are crucial for LLM-driven workflows, where agents manage dynamic interactions across multiple stages. Each agent operates based on specific logic, enabling precise task automation, decision-making, and coordination. This is ideal for applications like workflow orchestration, customer support, and multi-agent systems, where LLMs must interpret evolving context and respond accordingly."})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var o=n(7294);const a={},i=o.createContext(a);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);