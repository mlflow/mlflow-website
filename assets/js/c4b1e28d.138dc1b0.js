"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6131],{3341:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(5893),a=t(1151);const o={title:"Introducing MLflow Tracing",tags:["tracing","genai","mlops"],slug:"mlflow-tracing",authors:["mlflow-maintainers"],thumbnail:"/img/blog/trace-intro.gif"},r=void 0,l={permalink:"/mlflow-website/blog/mlflow-tracing",source:"@site/blog/2024-06-10-mlflow-tracing/index.md",title:"Introducing MLflow Tracing",description:"We're excited to announce the release of a powerful new feature in MLflow: MLflow Tracing.",date:"2024-06-10T00:00:00.000Z",formattedDate:"June 10, 2024",tags:[{label:"tracing",permalink:"/mlflow-website/blog/tags/tracing"},{label:"genai",permalink:"/mlflow-website/blog/tags/genai"},{label:"mlops",permalink:"/mlflow-website/blog/tags/mlops"}],readingTime:3.825,hasTruncateMarker:!1,authors:[{name:"MLflow maintainers",title:"MLflow maintainers",url:"https://github.com/mlflow/mlflow.git",imageURL:"https://github.com/mlflow-automation.png",key:"mlflow-maintainers"}],frontMatter:{title:"Introducing MLflow Tracing",tags:["tracing","genai","mlops"],slug:"mlflow-tracing",authors:["mlflow-maintainers"],thumbnail:"/img/blog/trace-intro.gif"},unlisted:!1,prevItem:{title:"PyFunc in Practice",permalink:"/mlflow-website/blog/pyfunc-in-practice"},nextItem:{title:"Deep Learning with MLflow (Part 2)",permalink:"/mlflow-website/blog/deep-learning-part-2"}},s={authorsImageUrls:[void 0]},c=[{value:"Introducing MLflow Tracing",id:"introducing-mlflow-tracing",level:2},{value:"What is MLflow Tracing?",id:"what-is-mlflow-tracing",level:2},{value:"Getting Started with MLflow Tracing",id:"getting-started-with-mlflow-tracing",level:2},{value:"LangChain Automatic Tracing",id:"langchain-automatic-tracing",level:3},{value:"Fluent APIs for Manual Tracing",id:"fluent-apis-for-manual-tracing",level:3},{value:"Trace Decorator",id:"trace-decorator",level:4},{value:"Context Handler",id:"context-handler",level:4},{value:"Comprehensive Tracing with Client APIs",id:"comprehensive-tracing-with-client-apis",level:3},{value:"Starting and Managing Traces with the Client APIs",id:"starting-and-managing-traces-with-the-client-apis",level:4},{value:"Diving Deeper into Tracing",id:"diving-deeper-into-tracing",level:2},{value:"Join Us on This Journey",id:"join-us-on-this-journey",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["We're excited to announce the release of a powerful new feature in MLflow: ",(0,i.jsx)(e.a,{href:"https://mlflow.org/docs/latest/llms/tracing/index.html",children:"MLflow Tracing"}),".\nThis feature brings comprehensive instrumentation capabilities to your GenAI applications, enabling you to gain deep insights into the execution of your\nmodels and workflows, from simple chat interfaces to complex multi-stage Retrieval Augmented Generation (RAG) applications."]}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"NOTE: MLflow Tracing has been released in MLflow 2.14.0 and is not available in previous versions."}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"introducing-mlflow-tracing",children:"Introducing MLflow Tracing"}),"\n",(0,i.jsx)(e.p,{children:"Tracing is a critical aspect of understanding and optimizing complex applications, especially in the realm of machine learning and artificial intelligence.\nWith the release of MLflow Tracing, you can now easily capture, visualize, and analyze detailed execution traces of your GenAI applications.\nThis new feature aims to provide greater visibility and control over your applications' performance and behavior, aiding in everything from fine-tuning to debugging."}),"\n",(0,i.jsx)(e.h2,{id:"what-is-mlflow-tracing",children:"What is MLflow Tracing?"}),"\n",(0,i.jsxs)(e.p,{children:["MLflow Tracing offers a variety of methods to enable ",(0,i.jsx)(e.a,{href:"https://mlflow.org/docs/latest/llms/tracing/overview.html",children:"tracing"})," in your applications:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Automated Tracing with LangChain"}),": A fully automated integration with ",(0,i.jsx)(e.a,{href:"https://www.langchain.com/",children:"LangChain"})," allows you to activate tracing simply by enabling ",(0,i.jsx)(e.code,{children:"mlflow.langchain.autolog()"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Manual Trace Instrumentation with High-Level Fluent APIs"}),": Use decorators, function wrappers, and context managers via the fluent API to add tracing functionality with minimal code modifications."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Low-Level Client APIs for Tracing"}),": The MLflow client API provides a thread-safe way to handle trace implementations for fine-grained control of what and when data is recorded."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"getting-started-with-mlflow-tracing",children:"Getting Started with MLflow Tracing"}),"\n",(0,i.jsx)(e.h3,{id:"langchain-automatic-tracing",children:"LangChain Automatic Tracing"}),"\n",(0,i.jsx)(e.p,{children:"The easiest way to get started with MLflow Tracing is through the built-in integration with LangChain. By enabling autologging, traces are automatically logged to the active MLflow experiment when calling invocation APIs on chains. Here\u2019s a quick example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import os\nfrom langchain.prompts import PromptTemplate\nfrom langchain_openai import OpenAI\nimport mlflow\n\nassert "OPENAI_API_KEY" in os.environ, "Please set your OPENAI_API_KEY environment variable."\n\nmlflow.set_experiment("LangChain Tracing")\nmlflow.langchain.autolog(log_models=True, log_input_examples=True)\n\nllm = OpenAI(temperature=0.7, max_tokens=1000)\nprompt_template = "Imagine you are {person}, and you are answering a question: {question}"\nchain = prompt_template | llm\n\nchain.invoke({"person": "Richard Feynman", "question": "Why should we colonize Mars?"})\nchain.invoke({"person": "Linus Torvalds", "question": "Can I set everyone\'s access to sudo?"})\n\n'})}),"\n",(0,i.jsxs)(e.p,{children:["And this is what you will see after invoking the chains when navigating to the ",(0,i.jsx)(e.strong,{children:"LangChain Tracing"})," experiment in the MLflow UI:"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"Traces in UI",src:t(195).Z+"",width:"2048",height:"1203"})}),"\n",(0,i.jsx)(e.h3,{id:"fluent-apis-for-manual-tracing",children:"Fluent APIs for Manual Tracing"}),"\n",(0,i.jsx)(e.p,{children:"For more control, you can use MLflow\u2019s fluent APIs to manually instrument your code. This approach allows you to capture detailed trace data with minimal changes to your existing code."}),"\n",(0,i.jsx)(e.h4,{id:"trace-decorator",children:"Trace Decorator"}),"\n",(0,i.jsx)(e.p,{children:"The trace decorator captures the inputs and outputs of a function:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Tracing Demo")\n\n@mlflow.trace\ndef some_function(x, y, z=2):\n    return x + (y - z)\n\nsome_function(2, 4)\n'})}),"\n",(0,i.jsx)(e.h4,{id:"context-handler",children:"Context Handler"}),"\n",(0,i.jsx)(e.p,{children:"The context handler is ideal for supplementing span information with additional data at the point of information generation:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import mlflow\n\n@mlflow.trace\ndef first_func(x, y=2):\n    return x + y\n\n@mlflow.trace\ndef second_func(a, b=3):\n    return a * b\n\ndef do_math(a, x, operation="add"):\n    with mlflow.start_span(name="Math") as span:\n        span.set_inputs({"a": a, "x": x})\n        span.set_attributes({"mode": operation})\n        first = first_func(x)\n        second = second_func(a)\n        result = first + second if operation == "add" else first - second\n        span.set_outputs({"result": result})\n        return result\n\ndo_math(8, 3, "add")\n'})}),"\n",(0,i.jsx)(e.h3,{id:"comprehensive-tracing-with-client-apis",children:"Comprehensive Tracing with Client APIs"}),"\n",(0,i.jsx)(e.p,{children:"For advanced use cases, the MLflow client API offers fine-grained control over trace management. These APIs allows you to create, manipulate, and retrieve traces programmatically, albeit with additional complexity throughout the implementation."}),"\n",(0,i.jsx)(e.h4,{id:"starting-and-managing-traces-with-the-client-apis",children:"Starting and Managing Traces with the Client APIs"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Start a new trace\nroot_span = client.start_trace("my_trace")\nrequest_id = root_span.request_id\n\n# Create a child span\nchild_span = client.start_span(\n    name="child_span",\n    request_id=request_id,\n    parent_id=root_span.span_id,\n    inputs={"input_key": "input_value"},\n    attributes={"attribute_key": "attribute_value"},\n)\n\n# End the child span\nclient.end_span(\n    request_id=child_span.request_id,\n    span_id=child_span.span_id,\n    outputs={"output_key": "output_value"},\n    attributes={"custom_attribute": "value"},\n)\n\n# End the root span (trace)\nclient.end_trace(\n    request_id=request_id,\n    outputs={"final_output_key": "final_output_value"},\n    attributes={"token_usage": "1174"},\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"diving-deeper-into-tracing",children:"Diving Deeper into Tracing"}),"\n",(0,i.jsx)(e.p,{children:"MLflow Tracing is designed to be flexible and powerful, supporting various use cases from simple function tracing to complex, asynchronous workflows."}),"\n",(0,i.jsxs)(e.p,{children:["To learn more about this feature, ",(0,i.jsx)(e.a,{href:"https://mlflow.org/docs/latest/llms/tracing/index.html",children:"read the guide"}),", ",(0,i.jsx)(e.a,{href:"https://mlflow.org/docs/latest/python_api/mlflow.html#mlflow-tracing-fluent-python-apis",children:"review the API Docs"})," and ",(0,i.jsx)(e.a,{href:"https://mlflow.org/docs/latest/llms/tracing/index.html#langchain-automatic-tracing",children:"get started with the LangChain integration"})," today!"]}),"\n",(0,i.jsx)(e.h2,{id:"join-us-on-this-journey",children:"Join Us on This Journey"}),"\n",(0,i.jsxs)(e.p,{children:["The introduction of MLflow Tracing marks a significant milestone in our mission to provide comprehensive tools for managing machine learning workflows. We\u2019re excited about the possibilities this new feature opens up and look forward to your ",(0,i.jsx)(e.a,{href:"https://github.com/mlflow/mlflow/issues",children:"feedback"})," and ",(0,i.jsx)(e.a,{href:"https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.md",children:"contributions"}),"."]}),"\n",(0,i.jsxs)(e.p,{children:["For those in our community with a passion for sharing knowledge, we invite you to ",(0,i.jsx)(e.a,{href:"https://github.com/mlflow/mlflow-website/blob/main/CONTRIBUTING.md",children:"collaborate"}),". Whether it\u2019s writing tutorials, sharing use-cases, or providing feedback, every contribution enriches the MLflow community."]}),"\n",(0,i.jsx)(e.p,{children:"Stay tuned for more updates, and as always, happy coding!"})]})}function h(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},195:(n,e,t)=>{t.d(e,{Z:()=>i});const i=t.p+"assets/images/tracing-ui-d5822d1e23426b65ff4008bf57d8cc83.gif"},1151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>r});var i=t(7294);const a={},o=i.createContext(a);function r(n){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(o.Provider,{value:e},n.children)}}}]);