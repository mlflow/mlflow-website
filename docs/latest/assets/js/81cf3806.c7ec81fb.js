"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7450],{14252:(e,l,n)=>{n.d(l,{A:()=>o});n(96540);var t=n(65195);const r={tableOfContentsInline:"tableOfContentsInline_prmo"};var i=n(74848);function o({toc:e,minHeadingLevel:l,maxHeadingLevel:n}){return(0,i.jsx)("div",{className:r.tableOfContentsInline,children:(0,i.jsx)(t.A,{toc:e,minHeadingLevel:l,maxHeadingLevel:n,className:"table-of-contents",linkClassName:null})})}},28453:(e,l,n)=>{n.d(l,{R:()=>o,x:()=>s});var t=n(96540);const r={},i=t.createContext(r);function o(e){const l=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function s(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:l},e.children)}},49374:(e,l,n)=>{n.d(l,{B:()=>a});n(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=n(86025),i=n(28774),o=n(74848);const s=e=>{const l=e.split(".");for(let n=l.length;n>0;n--){const e=l.slice(0,n).join(".");if(t[e])return e}return null};function a({fn:e,children:l}){const n=s(e);if(!n)return(0,o.jsx)(o.Fragment,{children:l});const a=(0,r.Ay)(`/${t[n]}#${e}`);return(0,o.jsx)(i.A,{to:a,target:"_blank",children:l??(0,o.jsxs)("code",{children:[e,"()"]})})}},60977:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>h,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"tracking/autolog/index","title":"Automatic Logging with MLflow Tracking","description":"Auto logging is a powerful feature that allows you to log metrics, parameters, and models without the need for explicit log statements. All you need to do is to","source":"@site/docs/classic-ml/tracking/autolog/index.mdx","sourceDirName":"tracking/autolog","slug":"/tracking/autolog/","permalink":"/docs/latest/ml/tracking/autolog/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"classicMLSidebar","previous":{"title":"MLflow 5 minute Tracking Quickstart","permalink":"/docs/latest/ml/tracking/quickstart/notebooks/tracking_quickstart"},"next":{"title":"Tracking Server","permalink":"/docs/latest/ml/tracking/server/"}}');var r=n(74848),i=n(28453),o=n(14252),s=n(49374),a=n(72839);const c={sidebar_position:1},d="Automatic Logging with MLflow Tracking",h={},m=[{value:"How to Get started",id:"how-to-get-started",level:2},{value:"Step 1 - Get MLflow",id:"step-1---get-mlflow",level:3},{value:"Step 2 - Insert <code>mlflow.autolog</code> in Your Code",id:"step-2---insert-mlflowautolog-in-your-code",level:3},{value:"Step 3 - Execute Your Code",id:"step-3---execute-your-code",level:3},{value:"Step 4 - View Your Results in the MLflow UI",id:"step-4---view-your-results-in-the-mlflow-ui",level:3},{value:"Customize Autologging Behavior",id:"customize-autologging-behavior",level:2},{value:"Enable / Disable Autologging for Specific Libraries",id:"enable--disable-autologging-for-specific-libraries",level:2},{value:"Supported Libraries",id:"supported-libraries",level:2},{value:"Keras/TensorFlow",id:"autolog-keras",level:3},{value:"LightGBM",id:"autolog-lightgbm",level:3},{value:"Paddle",id:"autolog-paddle",level:3},{value:"PySpark",id:"autolog-pyspark",level:3},{value:"PyTorch",id:"autolog-pytorch",level:3},{value:"Scikit-learn",id:"autolog-sklearn",level:3},{value:"Spark",id:"autolog-spark",level:3},{value:"Statsmodels",id:"autolog-statsmodels",level:3},{value:"XGBoost",id:"autolog-xgboost",level:3}];function p(e){const l={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.header,{children:(0,r.jsx)(l.h1,{id:"automatic-logging-with-mlflow-tracking",children:"Automatic Logging with MLflow Tracking"})}),"\n",(0,r.jsxs)(l.p,{children:["Auto logging is a powerful feature that allows you to log metrics, parameters, and models without the need for explicit log statements. All you need to do is to\ncall ",(0,r.jsx)(s.B,{fn:"mlflow.autolog"})," before your training code."]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:"import mlflow\n\nmlflow.autolog()\n\nwith mlflow.start_run():\n    # your training code goes here\n    ...\n"})}),"\n",(0,r.jsx)(l.p,{children:"This will enable MLflow to automatically log various information about your run, including:"}),"\n",(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Metrics"})," - MLflow pre-selects a set of metrics to log, based on what model and library you use"]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Parameters"})," - hyper params specified for the training, plus default values provided by the library if not explicitly set"]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Model Signature"})," - logs ",(0,r.jsx)(l.a,{href:"/ml/model/signatures",children:"Model signature"})," instance, which describes input and output schema of the model"]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Artifacts"})," - e.g. model checkpoints"]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Dataset"})," - dataset object used for training (if applicable), such as ",(0,r.jsx)(l.em,{children:"tensorflow.data.Dataset"})]}),"\n"]}),"\n",(0,r.jsx)(l.h2,{id:"how-to-get-started",children:"How to Get started"}),"\n",(0,r.jsx)(l.h3,{id:"step-1---get-mlflow",children:"Step 1 - Get MLflow"}),"\n",(0,r.jsx)(l.p,{children:"MLflow is available on PyPI. If you don't already have it installed on your system, you can install it with:"}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",children:"pip install mlflow\n"})}),"\n",(0,r.jsxs)(l.h3,{id:"step-2---insert-mlflowautolog-in-your-code",children:["Step 2 - Insert ",(0,r.jsx)(l.code,{children:"mlflow.autolog"})," in Your Code"]}),"\n",(0,r.jsx)(l.p,{children:"For example, following code snippet shows how to enable autologging for a scikit-learn model:"}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:"import mlflow\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import RandomForestRegressor\n\nmlflow.autolog()\n\ndb = load_diabetes()\nX_train, X_test, y_train, y_test = train_test_split(db.data, db.target)\n\nrf = RandomForestRegressor(n_estimators=100, max_depth=6, max_features=3)\n# MLflow triggers logging automatically upon model fitting\nrf.fit(X_train, y_train)\n"})}),"\n",(0,r.jsx)(l.h3,{id:"step-3---execute-your-code",children:"Step 3 - Execute Your Code"}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",children:"python YOUR_ML_CODE.py\n"})}),"\n",(0,r.jsx)(l.h3,{id:"step-4---view-your-results-in-the-mlflow-ui",children:"Step 4 - View Your Results in the MLflow UI"}),"\n",(0,r.jsx)(l.p,{children:"Once your training job finishes, you can run following command to launch the MLflow UI:"}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",children:"mlflow ui --port 8080\n"})}),"\n",(0,r.jsxs)(l.p,{children:["Then, navigate to ",(0,r.jsx)(l.a,{href:"http://localhost:8080",children:(0,r.jsx)(l.code,{children:"http://localhost:8080"})})," in your browser to view the results."]}),"\n",(0,r.jsx)(l.h2,{id:"customize-autologging-behavior",children:"Customize Autologging Behavior"}),"\n",(0,r.jsxs)(l.p,{children:["You can also control the behavior of autologging by passing arguments to ",(0,r.jsx)(s.B,{fn:"mlflow.autolog"})," function.\nFor example, you can disable logging of model checkpoints and associate tags with your run as follows:"]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:'import mlflow\n\nmlflow.autolog(\n    log_model_signatures=False,\n    extra_tags={"YOUR_TAG": "VALUE"},\n)\n'})}),"\n",(0,r.jsxs)(l.p,{children:["See ",(0,r.jsx)(s.B,{fn:"mlflow.autolog"})," for the full set of arguments you can use."]}),"\n",(0,r.jsx)(l.h2,{id:"enable--disable-autologging-for-specific-libraries",children:"Enable / Disable Autologging for Specific Libraries"}),"\n",(0,r.jsxs)(l.p,{children:["One common use case is to enable/disable autologging for a specific library. For example, if you train your model on PyTorch but use scikit-learn\nfor data preprocessing, you may want to disable autologging for scikit-learn while keeping it enabled for PyTorch. You can achieve this by either\n(1) enable autologging only for PyTorch using PyTorch flavor (2) disable autologging for scikit-learn using its flavor with ",(0,r.jsx)(l.code,{children:"disable=True"}),"."]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:"import mlflow\n\n# Option 1: Enable autologging only for PyTorch\nmlflow.pytorch.autolog()\n\n# Option 2: Disable autologging for scikit-learn, but enable it for other libraries\nmlflow.sklearn.autolog(disable=True)\nmlflow.autolog()\n"})}),"\n",(0,r.jsx)(l.h2,{id:"supported-libraries",children:"Supported Libraries"}),"\n",(0,r.jsx)(l.admonition,{type:"note",children:(0,r.jsxs)(l.p,{children:["The generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.autolog"})," enables autologging for each supported library you have installed as soon as you import it.\nAlternatively, you can use library-specific autolog calls such as ",(0,r.jsx)(s.B,{fn:"mlflow.pytorch.autolog"})," to explicitly enable (or disable) autologging for a particular library."]})}),"\n",(0,r.jsx)(l.p,{children:"The following list covers the most popular libraries that support autologging within MLflow:"}),"\n",(0,r.jsx)(o.A,{toc:m.slice(m.findIndex((e=>"supported-libraries"===e.id))+1)}),"\n",(0,r.jsx)(l.admonition,{type:"note",children:(0,r.jsx)(l.p,{children:"There are many more integrations that support autologging and the list of supported libraries is constantly growing. See the dedicated pages\nfor further guidance on whether autologging support is available for a given library."})}),"\n",(0,r.jsxs)(l.p,{children:["For flavors that automatically save models as an artifact, ",(0,r.jsx)(l.a,{href:"/ml/model#storage-format",children:"additional files"})," for dependency management are logged."]}),"\n",(0,r.jsx)(l.h3,{id:"autolog-keras",children:"Keras/TensorFlow"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function or ",(0,r.jsx)(s.B,{fn:"mlflow.tensorflow.autolog"})," before your training code to enable automatic logging of metrics and parameters. As an example, try running the ",(0,r.jsx)(l.a,{href:"https://github.com/mlflow/mlflow/blob/master/examples/keras/train.py",children:"Keras/Tensorflow example"}),"."]}),"\n",(0,r.jsxs)(l.p,{children:["Note that only versions of ",(0,r.jsx)(l.code,{children:"tensorflow>=2.3"})," are supported.\nThe respective metrics associated with ",(0,r.jsx)(l.code,{children:"tf.estimator"})," and ",(0,r.jsx)(l.code,{children:"EarlyStopping"})," are automatically logged.\nAs an example, try running the ",(0,r.jsx)(l.a,{href:"https://github.com/mlflow/mlflow/blob/master/examples/keras/train.py",children:"Keras/TensorFlow example"}),"."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(l.code,{children:"tf.keras"})}),(0,r.jsx)("td",{children:"Training loss; validation loss; user-specified metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.code,{children:"fit()"})," parameters; optimizer name; learning rate; epsilon"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:["Model summary on training start; ",(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (Keras model); TensorBoard logs on training end"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(l.code,{children:"tf.keras.callbacks.EarlyStopping"})}),(0,r.jsxs)("td",{children:["Metrics from the ",(0,r.jsx)(l.code,{children:"EarlyStopping"})," callbacks. For example, ",(0,r.jsx)(l.code,{children:"stopped_epoch"}),", ",(0,r.jsx)(l.code,{children:"restored_epoch"}),", ",(0,r.jsx)(l.code,{children:"restore_best_weight"}),", etc"]}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.code,{children:"fit()"})," parameters from ",(0,r.jsx)(l.code,{children:"EarlyStopping"}),". For example, ",(0,r.jsx)(l.code,{children:"min_delta"}),", ",(0,r.jsx)(l.code,{children:"patience"}),", ",(0,r.jsx)(l.code,{children:"baseline"}),", ",(0,r.jsx)(l.code,{children:"restore_best_weights"}),", etc"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsx)("td",{children:"--"})]})]})]}),"\n",(0,r.jsxs)(l.p,{children:["If no active run exists when ",(0,r.jsx)(l.code,{children:"autolog()"})," captures data, MLflow will automatically create a run to log information to.\nAlso, MLflow will then automatically end the run once training ends via calls to ",(0,r.jsx)(l.code,{children:"tf.keras.fit()"}),"."]}),"\n",(0,r.jsxs)(l.p,{children:["If a run already exists when ",(0,r.jsx)(l.code,{children:"autolog()"})," captures data, MLflow will log to that run but not automatically end that run after training. You will have to manually stop the run if you wish to start a new run context for logging to a new run."]}),"\n",(0,r.jsx)(l.h3,{id:"autolog-lightgbm",children:"LightGBM"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.lightgbm.autolog"})," before your training code to enable automatic logging of metrics and parameters."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"LightGBM"}),(0,r.jsx)("td",{children:"user-specified metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.train.html#lightgbm-train",children:"lightgbm.train"})," parameters"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (LightGBM model) with model signature on training end; feature importance; input example;"]})]})})]}),"\n",(0,r.jsx)(l.p,{children:"If early stopping is activated, metrics at the best iteration will be logged as an extra step/iteration."}),"\n",(0,r.jsx)(l.h3,{id:"autolog-paddle",children:"Paddle"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.paddle.autolog"})," before your training code to enable automatic logging of metrics and parameters."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Paddle"}),(0,r.jsx)("td",{children:"user-specified metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"https://www.paddlepaddle.org.cn/documentation/docs/en/api/paddle/Model_en.html",children:"paddle.Model.fit"})," parameters"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (Paddle model) with model signature on training end"]})]})})]}),"\n",(0,r.jsx)(l.h3,{id:"autolog-pyspark",children:"PySpark"}),"\n",(0,r.jsxs)(l.p,{children:["Call ",(0,r.jsx)(s.B,{fn:"mlflow.pyspark.ml.autolog"})," before your training code to enable automatic logging of metrics, params, and models.\nSee example usage with ",(0,r.jsx)(l.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/pyspark_ml_autologging",children:"PySpark"}),"."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging for pyspark ml estimators captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:["Post training metrics obtained by ",(0,r.jsx)(l.code,{children:"Evaluator.evaluate"})]}),(0,r.jsxs)("td",{children:["Parameters obtained by ",(0,r.jsx)(l.code,{children:"Estimator.fit"})]}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Class name"}),"\n",(0,r.jsx)(l.li,{children:"Fully qualified class name"}),"\n"]})}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," containing a fitted estimator"]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.code,{children:"metric_info.json"})," for post training metrics"]}),"\n"]})})]})})]}),"\n",(0,r.jsx)(l.h3,{id:"autolog-pytorch",children:"PyTorch"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.pytorch.autolog"})," before your PyTorch Lightning training code to enable automatic logging of metrics, parameters, and models. See example usages ",(0,r.jsx)(l.a,{href:"https://github.com/chauhang/mlflow/tree/master/examples/pytorch/MNIST",children:"here"}),".\nNote that currently, PyTorch autologging supports only models trained using PyTorch Lightning."]}),"\n",(0,r.jsxs)(l.p,{children:["Autologging is triggered on calls to ",(0,r.jsx)(l.code,{children:"pytorch_lightning.trainer.Trainer.fit"})," and captures the following information:"]}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework/module"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(l.code,{children:"pytorch_lightning.trainer.Trainer"})}),(0,r.jsx)("td",{children:"Training loss; validation loss; average_test_accuracy; user-defined-metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.code,{children:"fit()"})," parameters; optimizer name; learning rate; epsilon."]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:["Model summary on training start, ",(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (PyTorch model) on training end;"]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(l.code,{children:"pytorch_lightning.callbacks.earlystopping"})}),(0,r.jsxs)("td",{children:["Training loss; validation loss; average_test_accuracy; user-defined-metrics. Metrics from the ",(0,r.jsx)(l.code,{children:"EarlyStopping"})," callbacks. For example, ",(0,r.jsx)(l.code,{children:"spotted_epoch"}),", ",(0,r.jsx)(l.code,{children:"restored_epoch"}),", ",(0,r.jsx)(l.code,{children:"restore_best_weight"}),", etc"]}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.code,{children:"fit()"})," parameters; optimizer name; learning rate; epsilon. Parameters from the ",(0,r.jsx)(l.code,{children:"EarlyStopping"})," callbacks. For example, ",(0,r.jsx)(l.code,{children:"min_delta"}),", ",(0,r.jsx)(l.code,{children:"patience"}),", ",(0,r.jsx)(l.code,{children:"baseline"}),", ",(0,r.jsx)(l.code,{children:"restore_best_weights"}),", etc"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:["Model summary on training start; ",(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (PyTorch model) on training end; Best PyTorch model checkpoint, if training stops due to early stopping callback."]})]})]})]}),"\n",(0,r.jsxs)(l.p,{children:["If no active run exists when ",(0,r.jsx)(l.code,{children:"autolog()"})," captures data, MLflow will automatically create a run to log information, ending the run once\nthe call to ",(0,r.jsx)(l.code,{children:"pytorch_lightning.trainer.Trainer.fit()"})," completes."]}),"\n",(0,r.jsxs)(l.p,{children:["If a run already exists when ",(0,r.jsx)(l.code,{children:"autolog()"})," captures data, MLflow will log to that run but not automatically end that run after training."]}),"\n",(0,r.jsx)(l.admonition,{type:"note",children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:["Parameters not explicitly passed by users (parameters that use default values) while using ",(0,r.jsx)(l.code,{children:"pytorch_lightning.trainer.Trainer.fit()"})," are not currently automatically logged"]}),"\n",(0,r.jsx)(l.li,{children:"In case of a multi-optimizer scenario (such as usage of autoencoder), only the parameters for the first optimizer are logged"}),"\n"]})}),"\n",(0,r.jsx)(l.h3,{id:"autolog-sklearn",children:"Scikit-learn"}),"\n",(0,r.jsxs)(l.p,{children:["Call ",(0,r.jsx)(s.B,{fn:"mlflow.sklearn.autolog"})," before your training code to enable automatic logging of sklearn metrics, params, and models.\nSee example usage ",(0,r.jsx)(l.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/sklearn_autolog",children:"here"}),"."]}),"\n",(0,r.jsxs)(l.p,{children:["Autologging for estimators (e.g. ",(0,r.jsx)(l.a,{href:"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html",children:"LinearRegression"}),") and meta estimators (e.g. ",(0,r.jsx)(l.a,{href:"https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html",children:"Pipeline"}),") creates a single run and logs:"]}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:["Training score obtained by ",(0,r.jsx)(l.code,{children:"estimator.score"})]}),(0,r.jsxs)("td",{children:["Parameters obtained by ",(0,r.jsx)(l.code,{children:"estimator.get_params"})]}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Class name"}),"\n",(0,r.jsx)(l.li,{children:"Fully qualified class name"}),"\n"]})}),(0,r.jsx)("td",{children:"Fitted estimator"})]})})]}),"\n",(0,r.jsxs)(l.p,{children:["Autologging for parameter search estimators (e.g. ",(0,r.jsx)(l.a,{href:"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html",children:"GridSearchCV"}),") creates a single parent run and nested child runs"]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{children:"- Parent run\n  - Child run 1\n  - Child run 2\n  - ...\n"})}),"\n",(0,r.jsx)(l.p,{children:"containing the following data:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Run type"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Parent"}),(0,r.jsx)("td",{children:"Training score"}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Parameter search estimator's parameters"}),"\n",(0,r.jsx)(l.li,{children:"Best parameter combination"}),"\n"]})}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Class name"}),"\n",(0,r.jsx)(l.li,{children:"Fully qualified class name"}),"\n"]})}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Fitted parameter search estimator"}),"\n",(0,r.jsx)(l.li,{children:"Fitted best estimator"}),"\n",(0,r.jsx)(l.li,{children:"Search results csv file"}),"\n"]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Child"}),(0,r.jsx)("td",{children:"CV test score for each parameter combination"}),(0,r.jsx)("td",{children:"Each parameter combination"}),(0,r.jsx)("td",{children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Class name"}),"\n",(0,r.jsx)(l.li,{children:"Fully qualified class name"}),"\n"]})}),(0,r.jsx)("td",{children:"--"})]})]})]}),"\n",(0,r.jsx)(l.h3,{id:"autolog-spark",children:"Spark"}),"\n",(0,r.jsxs)(l.p,{children:["Initialize a SparkSession with the mlflow-spark JAR attached (e.g.\n",(0,r.jsx)(l.code,{children:'SparkSession.builder.config("spark.jars.packages", "org.mlflow.mlflow-spark")'}),") and then\ncall the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.spark.autolog"})," to enable automatic logging of Spark datasource\ninformation at read-time, without the need for explicit\nlog statements. Note that autologging of Spark ML (MLlib) models is not yet supported."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Spark"}),(0,r.jsx)("td",{children:"--"}),(0,r.jsx)("td",{children:"--"}),(0,r.jsx)("td",{children:"Single tag containing source path, version, format. The tag contains one line per datasource"}),(0,r.jsx)("td",{children:"--"})]})})]}),"\n",(0,r.jsx)(l.admonition,{type:"note",children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsx)(l.li,{children:"Moreover, Spark datasource autologging occurs asynchronously - as such, it's possible (though unlikely) to see race conditions when launching short-lived MLflow runs that result in datasource information not being logged."}),"\n"]})}),"\n",(0,r.jsx)(l.admonition,{title:"important",type:"warning",children:(0,r.jsxs)(l.p,{children:["With Pyspark 3.2.0 or above, Spark datasource autologging requires ",(0,r.jsx)(l.code,{children:"PYSPARK_PIN_THREAD"})," environment variable to be set to ",(0,r.jsx)(l.code,{children:"false"}),"."]})}),"\n",(0,r.jsx)(l.h3,{id:"autolog-statsmodels",children:"Statsmodels"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.statsmodels.autolog"})," before your training code to enable automatic logging of metrics and parameters."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Statsmodels"}),(0,r.jsx)("td",{children:"user-specified metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"https://www.statsmodels.org/dev/dev/generated/statsmodels.base.model.Model.html",children:"statsmodels.base.model.Model.fit"})," parameters"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (statsmodels.base.wrapper.ResultsWrapper) on training end"]})]})})]}),"\n",(0,r.jsx)(l.admonition,{type:"note",children:(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:["Each model subclass that overrides ",(0,r.jsx)(l.em,{children:"fit"})," expects and logs its own parameters."]}),"\n"]})}),"\n",(0,r.jsx)(l.h3,{id:"autolog-xgboost",children:"XGBoost"}),"\n",(0,r.jsxs)(l.p,{children:["Call the generic autolog function ",(0,r.jsx)(s.B,{fn:"mlflow.xgboost.autolog"})," before your training code to enable automatic logging of metrics and parameters."]}),"\n",(0,r.jsx)(l.p,{children:"Autologging captures the following information:"}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Framework"}),(0,r.jsx)("th",{children:"Metrics"}),(0,r.jsx)("th",{children:"Parameters"}),(0,r.jsx)("th",{children:"Tags"}),(0,r.jsx)("th",{children:"Artifacts"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"XGBoost"}),(0,r.jsx)("td",{children:"user-specified metrics"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"https://xgboost.readthedocs.io/en/latest/python/python_api.html#xgboost.train",children:"xgboost.train"})," parameters"]}),(0,r.jsx)("td",{children:"--"}),(0,r.jsxs)("td",{children:[(0,r.jsx)(l.a,{href:"/ml/model",children:"MLflow Model"})," (XGBoost model) with model signature on training end; feature importance; input example"]})]})})]}),"\n",(0,r.jsx)(l.p,{children:"If early stopping is activated, metrics at the best iteration will be logged as an extra step/iteration."})]})}function f(e={}){const{wrapper:l}={...(0,i.R)(),...e.components};return l?(0,r.jsx)(l,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65195:(e,l,n)=>{n.d(l,{A:()=>g});var t=n(96540),r=n(6342);function i(e){const l=e.map((e=>({...e,parentIndex:-1,children:[]}))),n=Array(7).fill(-1);l.forEach(((e,l)=>{const t=n.slice(2,e.level);e.parentIndex=Math.max(...t),n[e.level]=l}));const t=[];return l.forEach((e=>{const{parentIndex:n,...r}=e;n>=0?l[n].children.push(r):t.push(r)})),t}function o({toc:e,minHeadingLevel:l,maxHeadingLevel:n}){return e.flatMap((e=>{const t=o({toc:e.children,minHeadingLevel:l,maxHeadingLevel:n});return function(e){return e.level>=l&&e.level<=n}(e)?[{...e,children:t}]:t}))}function s(e){const l=e.getBoundingClientRect();return l.top===l.bottom?s(e.parentNode):l}function a(e,{anchorTopOffset:l}){const n=e.find((e=>s(e).top>=l));if(n){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(s(n))?n:e[e.indexOf(n)-1]??null}return e[e.length-1]??null}function c(){const e=(0,t.useRef)(0),{navbar:{hideOnScroll:l}}=(0,r.p)();return(0,t.useEffect)((()=>{e.current=l?0:document.querySelector(".navbar").clientHeight}),[l]),e}function d(e){const l=(0,t.useRef)(void 0),n=c();(0,t.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:t,linkActiveClassName:r,minHeadingLevel:i,maxHeadingLevel:o}=e;function s(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(t),s=function({minHeadingLevel:e,maxHeadingLevel:l}){const n=[];for(let t=e;t<=l;t+=1)n.push(`h${t}.anchor`);return Array.from(document.querySelectorAll(n.join()))}({minHeadingLevel:i,maxHeadingLevel:o}),c=a(s,{anchorTopOffset:n.current}),d=e.find((e=>c&&c.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,n){n?(l.current&&l.current!==e&&l.current.classList.remove(r),e.classList.add(r),l.current=e):e.classList.remove(r)}(e,e===d)}))}return document.addEventListener("scroll",s),document.addEventListener("resize",s),s(),()=>{document.removeEventListener("scroll",s),document.removeEventListener("resize",s)}}),[e,n])}var h=n(28774),m=n(74848);function p({toc:e,className:l,linkClassName:n,isChild:t}){return e.length?(0,m.jsx)("ul",{className:t?void 0:l,children:e.map((e=>(0,m.jsxs)("li",{children:[(0,m.jsx)(h.A,{to:`#${e.id}`,className:n??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,m.jsx)(p,{isChild:!0,toc:e.children,className:l,linkClassName:n})]},e.id)))}):null}const f=t.memo(p);function g({toc:e,className:l="table-of-contents table-of-contents__left-border",linkClassName:n="table-of-contents__link",linkActiveClassName:s,minHeadingLevel:a,maxHeadingLevel:c,...h}){const p=(0,r.p)(),g=a??p.tableOfContents.minHeadingLevel,u=c??p.tableOfContents.maxHeadingLevel,x=function({toc:e,minHeadingLevel:l,maxHeadingLevel:n}){return(0,t.useMemo)((()=>o({toc:i(e),minHeadingLevel:l,maxHeadingLevel:n})),[e,l,n])}({toc:e,minHeadingLevel:g,maxHeadingLevel:u});return d((0,t.useMemo)((()=>{if(n&&s)return{linkClassName:n,linkActiveClassName:s,minHeadingLevel:g,maxHeadingLevel:u}}),[n,s,g,u])),(0,m.jsx)(f,{toc:x,className:l,linkClassName:n,...h})}},72839:(e,l,n)=>{n.d(l,{X:()=>r});var t=n(74848);function r({children:e}){return(0,t.jsx)("div",{className:"w-full overflow-x-auto",children:(0,t.jsx)("table",{children:e})})}}}]);