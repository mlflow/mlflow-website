"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5226],{11470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(96540),a=t(34164),s=t(23104),o=t(56347),i=t(205),l=t(57485),c=t(31682),m=t(70679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function f({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[o,l]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,d]=f({queryString:t,groupId:a}),[h,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,m.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:a}),_=(()=>{const e=c??h;return u({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{_&&l(_)}),[_]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=t(92303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(74848);function x({className:e,block:n,selectedValue:t,selectValue:r,tabValues:o}){const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),c=e=>{const n=e.currentTarget,a=i.indexOf(n),s=o[a].value;s!==t&&(l(n),r(s))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;n=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;n=i[t]??i[i.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:r})=>(0,v.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{i.push(e)},onKeyDown:m,onClick:c,...r,className:(0,a.A)("tabs__item",_.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function w(e){const n=h(e);return(0,v.jsxs)("div",{className:(0,a.A)("tabs-container",_.tabList),children:[(0,v.jsx)(x,{...n,...e}),(0,v.jsx)(y,{...n,...e})]})}function j(e){const n=(0,g.A)();return(0,v.jsx)(w,{...e,children:d(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function o({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>l});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var a=t(86025),s=t(28774),o=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function l({fn:e,children:n}){const t=i(e);if(!t)return(0,o.jsx)(o.Fragment,{children:n});const l=(0,a.Ay)(`/${r[t]}#${e}`);return(0,o.jsx)(s.A,{to:l,target:"_blank",children:n??(0,o.jsxs)("code",{children:[e,"()"]})})}},51491:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>m,default:()=>f,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"tracing/track-environments-context/index","title":"Track Versions & Environments","description":"Tracking environments, application versions, and custom contextual information in your GenAI application enables comprehensive observability across different deployment stages, versions, and business-specific dimensions. MLflow provides flexible mechanisms to attach rich metadata to your traces using tags.","source":"@site/docs/genai/tracing/track-environments-context/index.mdx","sourceDirName":"tracing/track-environments-context","slug":"/tracing/track-environments-context/","permalink":"/docs/latest/genai/tracing/track-environments-context/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Track Users and Sessions","permalink":"/docs/latest/genai/tracing/track-users-sessions/"},"next":{"title":"User Feedback Collection","permalink":"/docs/latest/genai/tracing/collect-user-feedback/"}}');var a=t(74848),s=t(28453),o=t(49374),i=t(11470),l=t(19365);const c={},m="Track Versions & Environments",d={},p=[{value:"Why Track Environments &amp; Context?",id:"why-track-environments--context",level:2},{value:"Standard &amp; Custom Tags for Context",id:"standard--custom-tags-for-context",level:2},{value:"Automatically Populated Tags",id:"automatically-populated-tags",level:3},{value:"Reserved Standard Tags",id:"reserved-standard-tags",level:3},{value:"Custom Tags",id:"custom-tags",level:3},{value:"Basic Implementation",id:"basic-implementation",level:2},{value:"Querying and Analyzing Context Data",id:"querying-and-analyzing-context-data",level:2},{value:"Using the MLflow UI",id:"using-the-mlflow-ui",level:3},{value:"Programmatic Analysis",id:"programmatic-analysis",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Tagging Strategy",id:"tagging-strategy",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Security and Privacy",id:"security-and-privacy",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"track-versions--environments",children:"Track Versions & Environments"})}),"\n",(0,a.jsx)(n.p,{children:"Tracking environments, application versions, and custom contextual information in your GenAI application enables comprehensive observability across different deployment stages, versions, and business-specific dimensions. MLflow provides flexible mechanisms to attach rich metadata to your traces using tags."}),"\n",(0,a.jsx)(n.h2,{id:"why-track-environments--context",children:"Why Track Environments & Context?"}),"\n",(0,a.jsx)(n.p,{children:"Attaching this metadata to your traces provides critical insights for:"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Environment-specific analysis"}),": Compare behavior across ",(0,a.jsx)(n.code,{children:"development"}),", ",(0,a.jsx)(n.code,{children:"staging"}),", and ",(0,a.jsx)(n.code,{children:"production"})," environments"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Version management"}),": Track performance and regressions across different application versions (e.g., ",(0,a.jsx)(n.code,{children:"v1.0.1"}),", ",(0,a.jsx)(n.code,{children:"v1.2.0"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Custom categorization"}),": Add business-specific context (e.g., ",(0,a.jsx)(n.code,{children:'customer_tier: "premium"'}),", ",(0,a.jsx)(n.code,{children:'feature_flag: "new_algorithm"'}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deployment validation"}),": Ensure consistent behavior across different deployment targets"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Root cause analysis"}),": Quickly narrow down issues to specific environments, versions, or configurations"]}),"\n",(0,a.jsx)(n.h2,{id:"standard--custom-tags-for-context",children:"Standard & Custom Tags for Context"}),"\n",(0,a.jsx)(n.p,{children:"MLflow uses tags (key-value string pairs) to store contextual information on traces."}),"\n",(0,a.jsx)(n.h3,{id:"automatically-populated-tags",children:"Automatically Populated Tags"}),"\n",(0,a.jsx)(n.p,{children:"These standard tags are automatically captured by MLflow based on your execution environment:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"mlflow.source.name"})}),": The entry point or script that generated the trace (automatically populated with the filename for Python scripts, notebook name for Jupyter notebooks)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"mlflow.source.git.commit"})}),": If run from a Git repository, the commit hash is automatically detected and populated"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"mlflow.source.type"})}),": ",(0,a.jsx)(n.code,{children:"NOTEBOOK"})," if running in Jupyter notebook, ",(0,a.jsx)(n.code,{children:"LOCAL"})," if running a local Python script, else ",(0,a.jsx)(n.code,{children:"UNKNOWN"})," (automatically detected)"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You can override these automatically populated tags manually if needed using ",(0,a.jsx)(o.B,{fn:"mlflow.update_current_trace"})," or ",(0,a.jsx)(o.B,{fn:"mlflow.set_trace_tag"})," for more granular control."]}),"\n",(0,a.jsx)(n.h3,{id:"reserved-standard-tags",children:"Reserved Standard Tags"}),"\n",(0,a.jsx)(n.p,{children:"Some standard tags have special meaning but must be set manually:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"mlflow.trace.session"})}),": Groups traces from multi-turn conversations or user sessions together"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"mlflow.trace.user"})}),": Associates traces with specific users for user-centric analysis"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"custom-tags",children:"Custom Tags"}),"\n",(0,a.jsxs)(n.p,{children:["You can define ",(0,a.jsx)(n.strong,{children:"custom tags"})," to capture any business-specific or application-specific context. Common examples include:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"environment"})}),": e.g., ",(0,a.jsx)(n.code,{children:'"production"'}),", ",(0,a.jsx)(n.code,{children:'"staging"'})," (from ",(0,a.jsx)(n.code,{children:"DEPLOY_ENV"})," environment variable)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"app_version"})}),": e.g., ",(0,a.jsx)(n.code,{children:'"1.0.0"'})," (from ",(0,a.jsx)(n.code,{children:"APP_VERSION"})," environment variable)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"deployment_id"})}),": e.g., ",(0,a.jsx)(n.code,{children:'"deploy-abc-123"'})," (from ",(0,a.jsx)(n.code,{children:"DEPLOYMENT_ID"})," environment variable)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"region"})}),": e.g., ",(0,a.jsx)(n.code,{children:'"us-east-1"'})," (from ",(0,a.jsx)(n.code,{children:"REGION"})," environment variable)"]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.strong,{children:"Feature flags and A/B test variants"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-implementation",children:"Basic Implementation"}),"\n",(0,a.jsx)(n.p,{children:"Here's how to add various types of context as tags to your traces:"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(l.A,{value:"basic-example",label:"Basic Example",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\nimport platform\n\n\n@mlflow.trace\ndef process_data_with_context(data: dict, app_config: dict):\n    """Process data and add environment, version, and custom context."""\n\n    current_env = os.getenv("APP_ENVIRONMENT", "development")\n    current_app_version = app_config.get("version", "unknown")\n    current_model_version = app_config.get("model_in_use", "gpt-3.5-turbo")\n\n    # Define custom context tags\n    context_tags = {\n        "environment": current_env,\n        "app_version": current_app_version,\n        "model_version": current_model_version,\n        "python_version": platform.python_version(),\n        "operating_system": platform.system(),\n        "data_source": data.get("source", "batch"),\n        "processing_mode": "online" if current_env == "production" else "offline",\n    }\n\n    # Add tags to the current trace\n    mlflow.update_current_trace(tags=context_tags)\n\n    # Your application logic here...\n    result = (\n        f"Processed \'{data[\'input\']}\' in {current_env} with app {current_app_version}"\n    )\n\n    return result\n\n\n# Example usage\nconfig = {"version": "1.1.0", "model_in_use": "claude-3-sonnet-20240229"}\ninput_data = {"input": "Summarize this document...", "source": "realtime_api"}\n\nprocessed_result = process_data_with_context(input_data, config)\nprint(processed_result)\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key points:"})}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"os.getenv()"})," to fetch environment variables (e.g., ",(0,a.jsx)(n.code,{children:"APP_ENVIRONMENT"}),", ",(0,a.jsx)(n.code,{children:"APP_VERSION"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"Pass application or model configurations into your traced functions"}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"platform"})," module for system information"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(o.B,{fn:"mlflow.update_current_trace"})," adds all key-value pairs to the active trace"]}),"\n"]})]}),(0,a.jsxs)(l.A,{value:"context-manager",label:"Using Context Managers",children:[(0,a.jsx)(n.p,{children:"For more complex scenarios, you can use context managers to ensure consistent tagging:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\nfrom contextlib import contextmanager\n\n\n@contextmanager\ndef trace_with_environment(operation_name: str):\n    """Context manager that automatically adds environment context to traces"""\n\n    # Environment context\n    env_tags = {\n        "environment": os.getenv("ENVIRONMENT", "development"),\n        "app_version": os.getenv("APP_VERSION", "unknown"),\n        "deployment_id": os.getenv("DEPLOYMENT_ID", "local"),\n        "region": os.getenv("AWS_REGION", "local"),\n        "kubernetes_namespace": os.getenv("KUBERNETES_NAMESPACE"),\n        "container_image": os.getenv("CONTAINER_IMAGE"),\n    }\n\n    # Filter out None values\n    env_tags = {k: v for k, v in env_tags.items() if v is not None}\n\n    with mlflow.start_span(name=operation_name, attributes=env_tags) as span:\n        # Add tags to the trace level as well\n        mlflow.update_current_trace(tags=env_tags)\n        yield span\n\n\n# Usage\ndef my_genai_pipeline(user_input: str):\n    with trace_with_environment("genai_pipeline"):\n        # Your pipeline logic here\n        return f"Processed: {user_input}"\n\n\nresult = my_genai_pipeline("What is the weather like?")\n'})})]}),(0,a.jsxs)(l.A,{value:"web-app",label:"Web Application Example",children:[(0,a.jsx)(n.p,{children:"In a production web application, context can be derived from environment variables, request headers, or application configuration:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\nimport uvicorn\n\napp = FastAPI()\n\n\n@mlflow.trace\n@app.post("/chat")\nasync def handle_chat(request: Request):\n    # Get request data\n    data = await request.json()\n    message = data.get("message", "")\n\n    # Retrieve context from request headers\n    client_request_id = request.headers.get("X-Request-ID")\n    session_id = request.headers.get("X-Session-ID")\n    user_id = request.headers.get("X-User-ID")\n    user_agent = request.headers.get("User-Agent")\n\n    # Update the current trace with all context and environment metadata\n    mlflow.update_current_trace(\n        client_request_id=client_request_id,\n        tags={\n            # Session context - groups traces from multi-turn conversations\n            "mlflow.trace.session": session_id,\n            # User context - associates traces with specific users\n            "mlflow.trace.user": user_id,\n            # Environment metadata - tracks deployment context\n            "environment": os.getenv("ENVIRONMENT", "development"),\n            "app_version": os.getenv("APP_VERSION", "1.0.0"),\n            "deployment_id": os.getenv("DEPLOYMENT_ID", "unknown"),\n            "region": os.getenv("REGION", "us-east-1"),\n            # Request context\n            "user_agent": user_agent,\n            "request_method": request.method,\n            "endpoint": request.url.path,\n        },\n    )\n\n    # Your application logic for processing the chat message\n    response_text = f"Processed message: \'{message}\'"\n\n    return JSONResponse(content={"response": response_text})\n\n\nif __name__ == "__main__":\n    uvicorn.run(app, host="127.0.0.1", port=5000, debug=True)\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example request with context headers:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://127.0.0.1:5000/chat" \\\n     -H "Content-Type: application/json" \\\n     -H "X-Request-ID: req-abc-123-xyz-789" \\\n     -H "X-Session-ID: session-def-456-uvw-012" \\\n     -H "X-User-ID: user-jane-doe-12345" \\\n     -d \'{"message": "What is my account balance?"}\'\n'})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"querying-and-analyzing-context-data",children:"Querying and Analyzing Context Data"}),"\n",(0,a.jsx)(n.h3,{id:"using-the-mlflow-ui",children:"Using the MLflow UI"}),"\n",(0,a.jsx)(n.p,{children:"In the MLflow UI (Traces tab), use the search functionality to filter traces by context tags:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"tags.environment = 'production'"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"tags.app_version = '2.1.0'"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"tags.model_used = 'advanced_model' AND tags.client_variant = 'treatment'"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"tags.feature_flag_new_ui = 'true'"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"You can group traces by tags to compare performance or error rates across different contexts."}),"\n",(0,a.jsx)(n.h3,{id:"programmatic-analysis",children:"Programmatic Analysis"}),"\n",(0,a.jsx)(n.p,{children:"Use the MLflow SDK for more complex analysis or to integrate with other tools:"}),"\n",(0,a.jsxs)(i.A,{children:[(0,a.jsxs)(l.A,{value:"version-comparison",label:"Version Comparison",default:!0,children:[(0,a.jsx)(n.p,{children:"Compare error rates and performance across different application versions:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow import MlflowClient\n\n\ndef compare_version_metrics(experiment_id: str, versions: list):\n    """Compare error rates and performance across app versions"""\n\n    version_metrics = {}\n\n    for version in versions:\n        traces = mlflow.search_traces(\n            experiment_ids=[experiment_id],\n            filter_string=f"tags.environment = \'production\' AND tags.app_version = \'{version}\'",\n        )\n\n        if traces.empty:\n            version_metrics[version] = {\n                "error_rate": None,\n                "avg_latency": None,\n                "total_traces": 0,\n            }\n            continue\n\n        # Calculate metrics\n        error_count = len(traces[traces["status"] == "ERROR"])\n        total_traces = len(traces)\n        error_rate = (error_count / total_traces) * 100\n\n        successful_traces = traces[traces["status"] == "OK"]\n        avg_latency = (\n            successful_traces["execution_time_ms"].mean()\n            if not successful_traces.empty\n            else 0\n        )\n\n        version_metrics[version] = {\n            "error_rate": error_rate,\n            "avg_latency": avg_latency,\n            "total_traces": total_traces,\n        }\n\n    return version_metrics\n\n\n# Usage\nmetrics = compare_version_metrics("1", ["1.0.0", "1.1.0", "1.2.0"])\nfor version, data in metrics.items():\n    print(\n        f"Version {version}: {data[\'error_rate\']:.1f}% errors, {data[\'avg_latency\']:.1f}ms avg latency"\n    )\n'})})]}),(0,a.jsxs)(l.A,{value:"environment-analysis",label:"Environment Analysis",children:[(0,a.jsx)(n.p,{children:"Analyze performance differences across environments:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def analyze_environment_performance(experiment_id: str):\n    """Compare performance across different environments"""\n\n    environments = ["development", "staging", "production"]\n    env_metrics = {}\n\n    for env in environments:\n        traces = mlflow.search_traces(\n            experiment_ids=[experiment_id],\n            filter_string=f"tags.environment = \'{env}\' AND status = \'OK\'",\n        )\n\n        if not traces.empty:\n            env_metrics[env] = {\n                "count": len(traces),\n                "avg_latency": traces["execution_time_ms"].mean(),\n                "p95_latency": traces["execution_time_ms"].quantile(0.95),\n                "p99_latency": traces["execution_time_ms"].quantile(0.99),\n            }\n\n    return env_metrics\n\n\n# Usage\nenv_performance = analyze_environment_performance("1")\nfor env, metrics in env_performance.items():\n    print(\n        f"{env}: {metrics[\'count\']} traces, "\n        f"avg: {metrics[\'avg_latency\']:.1f}ms, "\n        f"p95: {metrics[\'p95_latency\']:.1f}ms"\n    )\n'})})]}),(0,a.jsxs)(l.A,{value:"feature-flags",label:"Feature Flag Analysis",children:[(0,a.jsx)(n.p,{children:"Analyze the impact of feature flags on performance:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def analyze_feature_flag_impact(experiment_id: str, flag_name: str):\n    """Analyze performance impact of a feature flag"""\n\n    # Get traces with feature flag enabled\n    flag_on_traces = mlflow.search_traces(\n        experiment_ids=[experiment_id],\n        filter_string=f"tags.feature_flag_{flag_name} = \'true\' AND status = \'OK\'",\n    )\n\n    # Get traces with feature flag disabled\n    flag_off_traces = mlflow.search_traces(\n        experiment_ids=[experiment_id],\n        filter_string=f"tags.feature_flag_{flag_name} = \'false\' AND status = \'OK\'",\n    )\n\n    results = {}\n\n    if not flag_on_traces.empty:\n        results["flag_on"] = {\n            "count": len(flag_on_traces),\n            "avg_latency": flag_on_traces["execution_time_ms"].mean(),\n            "error_rate": 0,  # Only looking at successful traces\n        }\n\n    if not flag_off_traces.empty:\n        results["flag_off"] = {\n            "count": len(flag_off_traces),\n            "avg_latency": flag_off_traces["execution_time_ms"].mean(),\n            "error_rate": 0,  # Only looking at successful traces\n        }\n\n    # Calculate performance impact\n    if "flag_on" in results and "flag_off" in results:\n        latency_change = (\n            results["flag_on"]["avg_latency"] - results["flag_off"]["avg_latency"]\n        )\n        latency_change_pct = (latency_change / results["flag_off"]["avg_latency"]) * 100\n        results["impact"] = {\n            "latency_change_ms": latency_change,\n            "latency_change_percent": latency_change_pct,\n        }\n\n    return results\n\n\n# Usage\nflag_analysis = analyze_feature_flag_impact("1", "new_retriever")\nif "impact" in flag_analysis:\n    impact = flag_analysis["impact"]\n    print(\n        f"Feature flag impact: {impact[\'latency_change_ms\']:.1f}ms "\n        f"({impact[\'latency_change_percent\']:.1f}% change)"\n    )\n'})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"tagging-strategy",children:"Tagging Strategy"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Standardize tag keys"}),": Use a consistent naming convention (e.g., ",(0,a.jsx)(n.code,{children:"snake_case"}),") for your custom tags"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Environment variables for deployment context"}),": Use environment variables set during your CI/CD or deployment process for version and environment information"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Automate context attachment"}),": Ensure context tags are automatically applied by your application or deployment scripts"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Balance granularity and simplicity"}),": Capture enough context for useful analysis, but avoid excessive tagging that makes traces hard to manage"]}),"\n",(0,a.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Minimize tag volume"}),": While adding tags has minimal overhead, avoid attaching excessively large numbers of tags in high-throughput systems"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Use short tag values"}),": Keep tag values concise to reduce storage overhead"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Consistent tagging"}),": Ensure your tagging strategy is applied consistently across all services and deployment environments"]}),"\n",(0,a.jsx)(n.h3,{id:"security-and-privacy",children:"Security and Privacy"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Avoid sensitive data"}),": Do not store PII or sensitive information directly in tags"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Use anonymized identifiers"}),": When tracking users, use anonymized identifiers rather than personal information"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Review tag content"}),": Regularly audit your tags to ensure they don't contain sensitive information"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/observe-with-traces/ui",children:"MLflow Tracing UI"})}),": Learn to use the UI for filtering and analyzing traces by environment and version"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})}),": Master advanced search syntax for complex context-based queries"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/observe-with-traces/query-via-sdk",children:"Query Traces via SDK"})}),": Build custom analysis and monitoring workflows"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing",children:"Manual Tracing"})}),": Add detailed instrumentation with context-aware spans"]}),"\n",(0,a.jsx)(n.p,{children:"By implementing comprehensive environment and version tracking, you can build robust observability into your GenAI applications that scales from development through production deployment."})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);