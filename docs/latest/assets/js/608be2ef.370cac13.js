"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6035],{10550:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/trace-decorator-8ae22208121b562582947549f8b9a46e.png"},11470:(e,n,t)=>{t.d(n,{A:()=>b});var r=t(96540),a=t(34164),o=t(23104),i=t(56347),s=t(205),l=t(57485),c=t(31682),d=t(70679);function p(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=h(e),[i,l]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o}))),[c,p]=m({queryString:t,groupId:a}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,d.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:a}),x=(()=>{const e=c??f;return u({value:e,tabValues:o})?e:null})();(0,s.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var g=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=t(74848);function y({className:e,block:n,selectedValue:t,selectValue:r,tabValues:i}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,a=s.indexOf(n),o=i[a].value;o!==t&&(l(n),r(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:r})=>(0,w.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:d,onClick:c,...r,className:(0,a.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function _({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function j(e){const n=f(e);return(0,w.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,w.jsx)(y,{...n,...e}),(0,w.jsx)(_,{...n,...e})]})}function b(e){const n=(0,g.A)();return(0,w.jsx)(j,{...e,children:p(e.children)},String(n))}},18186:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/tracing-multi-thread-acfb6f382ce45e030c95b7c0536749bf.png"},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var o=t(74848);function i({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,t),hidden:n,children:e})}},21049:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/trace-exception-d23766aa1c06b25b252c98d5d98cfef5.gif"},28278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tracing/app-instrumentation/manual-tracing/fluent-apis","title":"Decorators & Context Managers (Recommended)","description":"In addition to the Auto Tracing integrations, you can instrument your Python code using MLflow\'s manual tracing APIs. This is especially useful when you need to instrument your custom Python code.","source":"@site/docs/genai/tracing/app-instrumentation/manual-tracing/fluent-apis.mdx","sourceDirName":"tracing/app-instrumentation/manual-tracing","slug":"/tracing/app-instrumentation/manual-tracing/fluent-apis","permalink":"/docs/latest/genai/tracing/app-instrumentation/manual-tracing/fluent-apis","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Manual Tracing","permalink":"/docs/latest/genai/tracing/app-instrumentation/manual-tracing/"},"next":{"title":"Low-level Client APIs (Advanced)","permalink":"/docs/latest/genai/tracing/app-instrumentation/manual-tracing/low-level-api"}}');var a=t(74848),o=t(28453),i=(t(11470),t(19365),t(49374));const s={},l="Decorators & Context Managers (Recommended)",c={},d=[{value:"Decorator",id:"decorator",level:2},{value:"Example",id:"example",level:3},{value:"Customizing Spans",id:"customizing-spans",level:3},{value:"Using <code>@mlflow.trace</code> with Other Decorators",id:"using-mlflowtrace-with-other-decorators",level:3},{value:"Adding Trace Tags",id:"adding-trace-tags",level:3},{value:"Customizing Request and Response Previews in the UI",id:"customizing-request-and-response-previews-in-the-ui",level:3},{value:"Automatic Exception Handling",id:"automatic-exception-handling",level:3},{value:"Combining with Auto-Tracing",id:"combining-with-auto-tracing",level:3},{value:"Streaming",id:"streaming",level:3},{value:"Function Wrapping",id:"function-wrapping",level:3},{value:"Context Manager",id:"context-manager",level:2},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Multi Threading",id:"multi-threading",level:3},{value:"Async Support",id:"async-support",level:3},{value:"Low-Level Client APIs",id:"low-level-client-apis",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"decorators--context-managers-recommended",children:"Decorators & Context Managers (Recommended)"})}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the ",(0,a.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"Auto Tracing"})," integrations, you can instrument your Python code using MLflow's manual tracing APIs. This is especially useful when you need to instrument your custom Python code."]}),"\n",(0,a.jsx)(n.h2,{id:"decorator",children:"Decorator"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(i.B,{fn:"mlflow.trace"})," decorator allows you to create a span for any function. This approach provides a simple yet effective way to add tracing to your code with minimal effort:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd17 ",(0,a.jsx)(n.strong,{children:"MLflow detects the parent-child relationships"})," between functions, making it compatible with auto-tracing integrations."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udee1\ufe0f ",(0,a.jsx)(n.strong,{children:"Captures exceptions"})," during function execution and records them as span events."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcca ",(0,a.jsx)(n.strong,{children:"Automatically logs the function's name, inputs, outputs, and execution time"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\udd1d ",(0,a.jsx)(n.strong,{children:"Can be used alongside auto-tracing"})," features, such as ",(0,a.jsx)(n.code,{children:"mlflow.openai.autolog"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The @mlflow.trace decorator currently supports the following types of functions:"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Function Type"}),(0,a.jsx)(n.th,{children:"Supported"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Sync"}),(0,a.jsx)(n.td,{children:"Yes"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Async"}),(0,a.jsx)(n.td,{children:"Yes (>= 2.16.0)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Generator"}),(0,a.jsx)(n.td,{children:"Yes (>= 2.20.2)"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Async Generator"}),(0,a.jsx)(n.td,{children:"Yes (>= 2.20.2)"})]})]})]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"The following code is a minimum example of using the decorator for tracing Python functions."}),"\n",(0,a.jsx)(n.admonition,{title:"Decorator Order",type:"tip",children:(0,a.jsxs)(n.p,{children:["To ensure complete observability, the ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," decorator should generally be the ",(0,a.jsx)(n.strong,{children:"outermost"})," one if using multiple decorators. See ",(0,a.jsx)(n.a,{href:"#using-mlflowtrace-with-other-decorators",children:"Using @mlflow.trace with Other Decorators"})," for a detailed explanation and examples."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\n@mlflow.trace(span_type="func", attributes={"key": "value"})\ndef add_1(x):\n    return x + 1\n\n\n@mlflow.trace(span_type="func", attributes={"key1": "value1"})\ndef minus_1(x):\n    return x - 1\n\n\n@mlflow.trace(name="Trace Test")\ndef trace_test(x):\n    step1 = add_1(x)\n    return minus_1(step1)\n\n\ntrace_test(4)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Tracing Decorator",src:t(10550).A+"",width:"1354",height:"417"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["When a trace contains multiple spans with same name, MLflow appends an auto-incrementing suffix to them, such as ",(0,a.jsx)(n.code,{children:"_1"}),", ",(0,a.jsx)(n.code,{children:"_2"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"customizing-spans",children:"Customizing Spans"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(i.B,{fn:"mlflow.trace"})," decorator accepts following arguments to customize the span to be created:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83c\udff7\ufe0f ",(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"name"})," parameter"]})," to override the span name from the default (the name of decorated function)"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"span_type"})," parameter"]})," to set the type of span. Set either one of built-in ",(0,a.jsx)(n.a,{href:"/genai/tracing/data-model#span-types",children:"Span Types"})," or a string."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfd7\ufe0f ",(0,a.jsxs)(n.strong,{children:[(0,a.jsx)(n.code,{children:"attributes"})," parameter"]})," to add custom attributes to the span."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{title:"Decorator Order",type:"tip",children:(0,a.jsxs)(n.p,{children:["When combining ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," with other decorators (e.g., from web frameworks), it's crucial for it to be the outermost. For a clear example of correct vs. incorrect ordering, please refer to ",(0,a.jsx)(n.a,{href:"#using-mlflowtrace-with-other-decorators",children:"Using @mlflow.trace with Other Decorators"}),"."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from mlflow.entities import SpanType\n\n\n@mlflow.trace(\n    name="call-local-llm", span_type=SpanType.LLM, attributes={"model": "gpt-4o-mini"}\n)\ndef invoke(prompt: str):\n    return client.invoke(\n        messages=[{"role": "user", "content": prompt}], model="gpt-4o-mini"\n    )\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Alternatively, you can update the span dynamically inside the function by using ",(0,a.jsx)(i.B,{fn:"mlflow.get_current_active_span"})," API."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from mlflow.entities import SpanType\n\n\n@mlflow.trace(span_type=SpanType.LLM)\ndef invoke(prompt: str):\n    model_id = "gpt-4o-mini"\n    # Get the current span (created by the @mlflow.trace decorator)\n    span = mlflow.get_current_active_span()\n    # Set the attribute to the span\n    span.set_attributes({"model": model_id})\n    return client.invoke(messages=[{"role": "user", "content": prompt}], model=model_id)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"using-mlflowtrace-with-other-decorators",children:["Using ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," with Other Decorators"]}),"\n",(0,a.jsxs)(n.p,{children:["When applying multiple decorators to a single function, it's crucial to place ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," as the ",(0,a.jsx)(n.strong,{children:"outermost"})," decorator (the one at the very top). This ensures that MLflow can capture the entire execution of the function, including the behavior of any inner decorators."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," is not the outermost decorator, its visibility into the function's execution may be limited or incorrect, potentially leading to incomplete traces or misrepresentation of the function's inputs, outputs, and execution time."]}),"\n",(0,a.jsx)(n.p,{children:"Consider the following conceptual example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport functools\nimport time\n\n\n# A hypothetical additional decorator\ndef simple_timing_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(\n            f"{func.__name__} executed in {end_time - start_time:.4f} seconds by simple_timing_decorator."\n        )\n        return result\n\n    return wrapper\n\n\n# Correct order: @mlflow.trace is outermost\n@mlflow.trace(name="my_decorated_function_correct_order")\n@simple_timing_decorator\n# @another_framework_decorator # e.g., @app.route("/mypath") from Flask\ndef my_complex_function(x, y):\n    # Function logic here\n    time.sleep(0.1)  # Simulate work\n    return x + y\n\n\n# Incorrect order: @mlflow.trace is NOT outermost\n@simple_timing_decorator\n@mlflow.trace(name="my_decorated_function_incorrect_order")\n# @another_framework_decorator\ndef my_other_complex_function(x, y):\n    time.sleep(0.1)\n    return x * y\n\n\n# Example calls\nif __name__ == "__main__":\n    print("Calling function with correct decorator order:")\n    my_complex_function(5, 3)\n\n    print("\\nCalling function with incorrect decorator order:")\n    my_other_complex_function(5, 3)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.code,{children:"my_complex_function"})," example (correct order), ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," will capture the full execution, including the time added by ",(0,a.jsx)(n.code,{children:"simple_timing_decorator"}),". In ",(0,a.jsx)(n.code,{children:"my_other_complex_function"})," (incorrect order), the trace captured by MLflow might not accurately reflect the total execution time or could miss modifications to inputs/outputs made by ",(0,a.jsx)(n.code,{children:"simple_timing_decorator"})," before ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," sees them."]}),"\n",(0,a.jsx)(n.h3,{id:"adding-trace-tags",children:"Adding Trace Tags"}),"\n",(0,a.jsxs)(n.p,{children:["Tags can be added to traces to provide additional metadata at the trace level. There are a few different ways to set tags on a trace. Please refer to the ",(0,a.jsx)(n.a,{href:"/genai/tracing/attach-tags",children:"how-to guide"})," for the other methods."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@mlflow.trace\ndef my_func(x):\n    mlflow.update_current_trace(tags={"fruit": "apple"})\n    return x + 1\n'})}),"\n",(0,a.jsx)(n.h3,{id:"customizing-request-and-response-previews-in-the-ui",children:"Customizing Request and Response Previews in the UI"}),"\n",(0,a.jsxs)(n.p,{children:["The Traces tab in the MLflow UI displays a list of traces, and the ",(0,a.jsx)(n.code,{children:"Request"})," and ",(0,a.jsx)(n.code,{children:"Response"})," columns show a preview of the end-to-end input and output of each trace. This allows you to quickly understand what each trace represents."]}),"\n",(0,a.jsxs)(n.p,{children:["By default, these previews are truncated to a fixed number of characters. However, you can customize what's shown in these columns by using the ",(0,a.jsx)(n.code,{children:"request_preview"})," and ",(0,a.jsx)(n.code,{children:"response_preview"})," parameters within the ",(0,a.jsx)(i.B,{fn:"mlflow.update_current_trace"})," function. This is particularly useful for complex inputs or outputs where the default truncation might not show the most relevant information."]}),"\n",(0,a.jsxs)(n.p,{children:["Below is an example of setting a custom request preview for a trace that processes a long document and user instructions, aiming to render the most relevant information in the UI's ",(0,a.jsx)(n.code,{children:"Request"})," column:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\n@mlflow.trace(name="Summarization Pipeline")\ndef summarize_document(document_content: str, user_instructions: str):\n    # Construct a custom preview for the request column\n    # For example, show beginning of document and user instructions\n    request_p = f"Doc: {document_content[:30]}... Instr: {user_instructions[:30]}..."\n    mlflow.update_current_trace(request_preview=request_p)\n\n    # Simulate LLM call\n    # messages = [\n    #     {"role": "system", "content": "Summarize the following document based on user instructions."},\n    #     {"role": "user", "content": f"Document: {document_content}\\nInstructions: {user_instructions}"}\n    # ]\n    # completion = client.chat.completions.create(model="gpt-4o-mini", messages=messages)\n    # summary = completion.choices[0].message.content\n    summary = f"Summary of document starting with \'{document_content[:20]}...\' based on \'{user_instructions}\'"\n\n    # Customize the response preview\n    response_p = f"Summary: {summary[:50]}..."\n    mlflow.update_current_trace(response_preview=response_p)\n\n    return summary\n\n\n# Example Call\nlong_document = (\n    "This is a very long document that contains many details about various topics..."\n    * 10\n)\ninstructions = "Focus on the key takeaways regarding topic X."\nsummary_result = summarize_document(long_document, instructions)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["By setting ",(0,a.jsx)(n.code,{children:"request_preview"})," and ",(0,a.jsx)(n.code,{children:"response_preview"})," on the trace (typically the root span), you control how the overall interaction is summarized in the main trace list view, making it easier to identify and understand traces at a glance."]}),"\n",(0,a.jsx)(n.h3,{id:"automatic-exception-handling",children:"Automatic Exception Handling"}),"\n",(0,a.jsxs)(n.p,{children:["If an ",(0,a.jsx)(n.code,{children:"Exception"})," is raised during processing of a trace-instrumented operation, an indication will be shown within the UI that the invocation was not successful and a partial capture of data will be available to aid in debugging. Additionally, details about the Exception that was raised will be included within ",(0,a.jsx)(n.code,{children:"Events"})," of the partially completed span, further aiding the identification of where issues are occurring within your code."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Trace Error",src:t(21049).A+"",width:"1192",height:"720"})}),"\n",(0,a.jsx)(n.h3,{id:"combining-with-auto-tracing",children:"Combining with Auto-Tracing"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," decorator can be used in conjunction with auto tracing to combine auto-tracing with manually defined spans in a single cohesive and integrated trace. Learn more ",(0,a.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic#combining-manual-and-automatic-tracing",children:"here"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"streaming",children:"Streaming"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," decorator can be used to trace functions that return a generator or an iterator, since MLflow 2.20.2."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@mlflow.trace\ndef stream_data():\n    for i in range(5):\n        yield i\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The above example will generate a trace with a single span for the ",(0,a.jsx)(n.code,{children:"stream_data"})," function. By default, MLflow will capture all elements yielded by the generator as a list in the span's output. In the example above, the output of the span will be ",(0,a.jsx)(n.code,{children:"[0, 1, 2, 3, 4]"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["A span for a stream function will start when the returned iterator starts to be ",(0,a.jsx)(n.strong,{children:"consumed"}),", and will end when the iterator is exhausted, or an exception is raised during the iteration."]})}),"\n",(0,a.jsxs)(n.p,{children:["If you want to aggregate the elements to be a single span output, you can use the ",(0,a.jsx)(n.code,{children:"output_reducer"})," parameter to specify a custom function to aggregate the elements. The custom function should take a list of yielded elements as inputs."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'@mlflow.trace(output_reducer=lambda x: ",".join(x))\ndef stream_data():\n    for c in "hello":\n        yield c\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the example above, the output of the span will be ",(0,a.jsx)(n.code,{children:'"h,e,l,l,o"'}),". The raw chunks can still be found in the ",(0,a.jsx)(n.code,{children:"Events"})," tab of the span."]}),"\n",(0,a.jsxs)(n.p,{children:["The following is an advanced example that uses the ",(0,a.jsx)(n.code,{children:"output_reducer"})," to consolidate ChatCompletionChunk output from an OpenAI LLM into a single message object."]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Of course, we recommend using the ",(0,a.jsx)(n.a,{href:"/genai/tracing/integrations/listing/openai",children:"auto-tracing for OpenAI"})," for examples like this, which does the same job but with one-liner code. The example below is for demonstration purposes."]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport openai\nfrom openai.types.chat import *\nfrom typing import Optional\n\n\ndef aggregate_chunks(outputs: list[ChatCompletionChunk]) -> Optional[ChatCompletion]:\n    """Consolidate ChatCompletionChunks to a single ChatCompletion"""\n    if not outputs:\n        return None\n\n    first_chunk = outputs[0]\n    delta = first_chunk.choices[0].delta\n    message = ChatCompletionMessage(\n        role=delta.role, content=delta.content, tool_calls=delta.tool_calls or []\n    )\n    finish_reason = first_chunk.choices[0].finish_reason\n    for chunk in outputs[1:]:\n        delta = chunk.choices[0].delta\n        message.content += delta.content or ""\n        message.tool_calls += delta.tool_calls or []\n        finish_reason = finish_reason or chunk.choices[0].finish_reason\n\n    base = ChatCompletion(\n        id=first_chunk.id,\n        choices=[Choice(index=0, message=message, finish_reason=finish_reason)],\n        created=first_chunk.created,\n        model=first_chunk.model,\n        object="chat.completion",\n    )\n    return base\n\n\n@mlflow.trace(output_reducer=aggregate_chunks)\ndef predict(messages: list[dict]):\n    stream = openai.OpenAI().chat.completions.create(\n        model="gpt-4o-mini",\n        messages=messages,\n        stream=True,\n    )\n    for chunk in stream:\n        yield chunk\n\n\nfor chunk in predict([{"role": "user", "content": "Hello"}]):\n    print(chunk)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the example above, the generated ",(0,a.jsx)(n.code,{children:"predict"})," span will have a single chat completion message as the output, which is aggregated by the custom reducer function."]}),"\n",(0,a.jsx)(n.h3,{id:"function-wrapping",children:"Function Wrapping"}),"\n",(0,a.jsxs)(n.p,{children:["Function wrapping provides a flexible way to add tracing to existing functions without modifying their definitions. This is particularly useful when you want to add tracing to third-party functions or functions defined outside of your control. By wrapping an external function with ",(0,a.jsx)(i.B,{fn:"mlflow.trace"}),", you can capture its inputs, outputs, and execution context."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:'When wrapping functions dynamically, the concept of "outermost" still applies. The tracing wrapper should be applied at the point where you want to capture the entire call to the wrapped function.'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import math\nimport mlflow\n\n\ndef invocation(x, y, exp=2):\n    # Wrap an external function from the math library\n    traced_pow = mlflow.trace(math.pow)\n    raised = traced_pow(x, exp)\n\n    traced_factorial = mlflow.trace(math.factorial)\n    factorial = traced_factorial(int(raised))\n    return factorial\n\n\ninvocation(4, 2)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"context-manager",children:"Context Manager"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the decorator, MLflow allows for creating a span that can then be accessed within any encapsulated arbitrary code block using the ",(0,a.jsx)(i.B,{fn:"mlflow.start_span"})," context manager. It can be useful for capturing complex interactions within your code in finer detail than what is possible by capturing the boundaries of a single function."]}),"\n",(0,a.jsxs)(n.p,{children:["Similarly to the decorator, the context manager automatically captures parent-child relationship, exceptions, execution time, and works with auto-tracing. However, the name, inputs, and outputs of the span must be provided manually. You can set them via the ",(0,a.jsx)(i.B,{fn:"mlflow.entities.Span"})," object that is returned from the context manager."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nwith mlflow.start_span(name="my_span") as span:\n    span.set_inputs({"x": 1, "y": 2})\n    z = x + y\n    span.set_outputs(z)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Below is a slightly more complex example that uses the ",(0,a.jsx)(i.B,{fn:"mlflow.start_span"})," context manager in conjunction with both the decorator and auto-tracing for OpenAI."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport openai\nfrom mlflow.entities import SpanType\n\n# Enable auto-tracing for OpenAI\nmlflow.openai.autolog()\n\n\n@mlflow.trace(span_type=SpanType.CHAIN)\ndef start_session():\n    messages = [{"role": "system", "content": "You are a friendly chat bot"}]\n    while True:\n        with mlflow.start_span(name="User") as span:\n            span.set_inputs(messages)\n            user_input = input(">> ")\n            span.set_outputs(user_input)\n\n        if user_input == "BYE":\n            break\n\n        messages.append({"role": "user", "content": user_input})\n\n        response = openai.OpenAI().chat.completions.create(\n            model="gpt-4o-mini",\n            max_tokens=100,\n            messages=messages,\n        )\n        answer = response.choices[0].message.content\n        print(f"\ud83e\udd16: {answer}")\n\n        messages.append({"role": "assistant", "content": answer})\n\n\nstart_session()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,a.jsx)(n.h3,{id:"multi-threading",children:"Multi Threading"}),"\n",(0,a.jsx)(n.p,{children:"MLflow Tracing is thread-safe, traces are isolated by default per thread. But you can also create a trace that spans multiple threads with a few additional steps."}),"\n",(0,a.jsxs)(n.p,{children:["MLflow uses Python's built-in ",(0,a.jsx)(n.a,{href:"https://docs.python.org/3/library/contextvars.html",children:"ContextVar"})," mechanism to ensure thread safety, which is not propagated across threads by default. Therefore, you need to manually copy the context from the main thread to the worker thread, as shown in the example below."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import contextvars\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport mlflow\nfrom mlflow.entities import SpanType\nimport openai\n\nclient = openai.OpenAI()\n\n# Enable MLflow Tracing for OpenAI\nmlflow.openai.autolog()\n\n\n@mlflow.trace\ndef worker(question: str) -> str:\n    messages = [\n        {"role": "system", "content": "You are a helpful assistant."},\n        {"role": "user", "content": question},\n    ]\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=messages,\n        temperature=0.1,\n        max_tokens=100,\n    )\n    return response.choices[0].message.content\n\n\n@mlflow.trace\ndef main(questions: list[str]) -> list[str]:\n    results = []\n    # Almost same as how you would use ThreadPoolExecutor, but two additional steps\n    #  1. Copy the context in the main thread using copy_context()\n    #  2. Use ctx.run() to run the worker in the copied context\n    with ThreadPoolExecutor(max_workers=2) as executor:\n        futures = []\n        for question in questions:\n            ctx = contextvars.copy_context()\n            futures.append(executor.submit(ctx.run, worker, question))\n        for future in as_completed(futures):\n            results.append(future.result())\n    return results\n\n\nquestions = [\n    "What is the capital of France?",\n    "What is the capital of Germany?",\n]\n\nmain(questions)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Multi threaded tracing",src:t(18186).A+"",width:"1140",height:"426"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["In contrast, ",(0,a.jsx)(n.code,{children:"ContextVar"})," is copied to ",(0,a.jsx)(n.strong,{children:"async"})," tasks by default. Therefore, you don't need to manually copy the context when using ",(0,a.jsx)(n.code,{children:"asyncio"}),", which might be an easier way to handle concurrent I/O-bound tasks in Python with MLflow Tracing."]})}),"\n",(0,a.jsx)(n.h3,{id:"async-support",children:"Async Support"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," decorator works seamlessly with async functions:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport mlflow\n\n\n@mlflow.trace\nasync def async_operation(data: str) -> str:\n    # Simulate async work\n    await asyncio.sleep(0.1)\n    return f"Processed: {data}"\n\n\n@mlflow.trace\nasync def async_pipeline(items: list[str]) -> list[str]:\n    results = []\n    for item in items:\n        result = await async_operation(item)\n        results.append(result)\n    return results\n\n\n# Run the async pipeline\nasyncio.run(async_pipeline(["item1", "item2", "item3"]))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"low-level-client-apis",children:"Low-Level Client APIs"}),"\n",(0,a.jsx)(n.p,{children:"For advanced scenarios requiring complete control over trace lifecycle, MLflow provides low-level client APIs. These are recommended only when decorators and context managers don't meet your requirements."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Use client APIs for:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\ud83d\udc68\u200d\ud83d\udcbc Manual parent-child relationship control"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udee0\ufe0f Precise control of span start and end points"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u26a0\ufe0f Important Limitations:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u274c No automatic parent-child relationship detection"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udee0\ufe0f Manual exception handling required"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udeab Incompatible with auto-tracing integrations"}),"\n",(0,a.jsx)(n.li,{children:"\ud83d\udccb Requires explicit span lifecycle management"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Basic Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Start trace (creates root span)\nroot_span = client.start_trace(name="my_application_flow", inputs={"user_id": "123"})\n\ntry:\n    # Create child span\n    child_span = client.start_span(\n        name="processing_step",\n        request_id=root_span.request_id,\n        parent_id=root_span.span_id,\n        inputs={"data": "sample"},\n    )\n\n    # Do work\n    result = perform_operation()\n\n    # End child span\n    client.end_span(\n        request_id=child_span.request_id,\n        span_id=child_span.span_id,\n        outputs={"result": result},\n        status="OK",\n    )\n\nexcept Exception as e:\n    # Handle errors manually\n    client.end_span(\n        request_id=child_span.request_id,\n        span_id=child_span.span_id,\n        status="ERROR",\n        attributes={"error": str(e)},\n    )\n    raise\nfinally:\n    # End root trace\n    client.end_trace(request_id=root_span.request_id, outputs={"status": "completed"})\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"When to Use Different Approaches:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,a.jsx)(n.strong,{children:"Decorators"}),": Simple function tracing, most common use case"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,a.jsx)(n.strong,{children:"Context Managers"}),": Complex code blocks, manual input/output control"]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,a.jsx)(n.strong,{children:"Client APIs"}),": Custom trace IDs, distributed tracing, existing system integration"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\ud83d\udcdd ",(0,a.jsx)(n.strong,{children:"Use descriptive span names"}),": Choose names that clearly describe what the span does, making traces easier to understand and debug."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,a.jsxs)(n.strong,{children:["Apply ",(0,a.jsx)(n.code,{children:"@mlflow.trace"})," as the outermost decorator"]}),": This ensures complete visibility into function execution when using multiple decorators."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83e\udd1d ",(0,a.jsx)(n.strong,{children:"Combine with auto-tracing"}),": Use manual spans to add context around automatically traced operations for comprehensive observability."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udfd7\ufe0f ",(0,a.jsx)(n.strong,{children:"Set meaningful attributes"}),": Add custom attributes that help with debugging and analysis, such as model names, processing parameters, or business context."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83d\udee1\ufe0f ",(0,a.jsx)(n.strong,{children:"Handle errors gracefully"}),": The decorator automatically captures exceptions, but you can add custom error handling and additional context as needed."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udf9b\ufe0f ",(0,a.jsx)(n.strong,{children:"Choose the right approach"}),": Use decorators for simple cases, context managers for complex blocks, and client APIs only when you need full control."]}),"\n",(0,a.jsxs)(n.li,{children:["\u26a1 ",(0,a.jsx)(n.strong,{children:"Implement sampling for high-throughput"}),": Use conditional tracing and sampling strategies to balance observability with performance."]}),"\n",(0,a.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,a.jsx)(n.strong,{children:"Propagate context in distributed systems"}),": Ensure trace context flows correctly across service boundaries."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic#combining-manual-and-automatic-tracing",children:"Combining with Auto-Tracing"})}),": Mix automatic and manual tracing for optimal observability"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/data-model",children:"Trace Data Model"})}),": Understand the structure and components of MLflow traces"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Querying Traces"})}),": Programmatically search and analyze your traces"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(96540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>l});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var a=t(86025),o=t(28774),i=t(74848);const s=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function l({fn:e,children:n}){const t=s(e);if(!t)return(0,i.jsx)(i.Fragment,{children:n});const l=(0,a.Ay)(`/${r[t]}#${e}`);return(0,i.jsx)(o.A,{to:l,target:"_blank",children:n??(0,i.jsxs)("code",{children:[e,"()"]})})}}}]);