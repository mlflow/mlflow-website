"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6892],{20736:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>l,toc:()=>h});const l=JSON.parse('{"id":"model/python_model","title":"MLflow PythonModel Guide","description":"Introduction to MLflow PythonModel","source":"@site/docs/classic-ml/model/python_model.mdx","sourceDirName":"model","slug":"/model/python_model","permalink":"/docs/latest/ml/model/python_model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Custom Python Model","sidebar_position":4},"sidebar":"classicMLSidebar","previous":{"title":"Models From Code","permalink":"/docs/latest/ml/model/models-from-code/"},"next":{"title":"MLflow Signature Playground Notebook","permalink":"/docs/latest/ml/model/notebooks/signature_examples"}}');var o=t(74848),i=t(28453),s=t(49374),a=t(72839);const d={sidebar_label:"Custom Python Model",sidebar_position:4},r="MLflow PythonModel Guide",p={},h=[{value:"Introduction to MLflow PythonModel",id:"introduction-to-mlflow-pythonmodel",level:2},{value:"Define a custom PythonModel",id:"define-a-custom-pythonmodel",level:3},{value:"Option 1: Subclass PythonModel",id:"option-1-subclass-pythonmodel",level:4},{value:"Option 2: Define a callable",id:"option-2-define-a-callable",level:4},{value:"Log the model",id:"log-the-model",level:3},{value:"Validate the model before deployment",id:"validate-the-model-before-deployment",level:3},{value:"Deploy the model",id:"deploy-the-model",level:3},{value:"Type hint usage in PythonModel",id:"type-hint-usage-in-pythonmodel",level:2},{value:"Supported type hints",id:"supported-type-hints",level:3},{value:"Using type hints in PythonModel",id:"using-type-hints-in-pythonmodel",level:3},{value:"Type hints data validation in PythonModel",id:"type-hints-data-validation-in-pythonmodel",level:3},{value:"Pydantic Model type hints data conversion",id:"pydantic-model-type-hints-data-conversion",level:3},{value:"Model signature inference based on type hints",id:"model-signature-inference-based-on-type-hints",level:3},{value:"Input example together with type hints during model logging",id:"input-example-together-with-type-hints-during-model-logging",level:3},{value:"Query a serving endpoint hosting a PythonModel with type hints",id:"query-a-serving-endpoint-hosting-a-pythonmodel-with-type-hints",level:3},{value:"Extra allowed type hints that don&#39;t support data validation or schema inference",id:"extra-allowed-type-hints-that-dont-support-data-validation-or-schema-inference",level:3},{value:"TypeFromExample type hint usage",id:"typefromexample-type-hint-usage",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mlflow-pythonmodel-guide",children:"MLflow PythonModel Guide"})}),"\n",(0,o.jsx)(n.h2,{id:"introduction-to-mlflow-pythonmodel",children:"Introduction to MLflow PythonModel"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc",children:(0,o.jsx)(n.code,{children:"mlflow.pyfunc"})})," module provides ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.save_model",children:"save_model()"})," and\n",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.log_model",children:"log_model()"})," utilities for creating MLflow Models with the\n",(0,o.jsx)(n.code,{children:"python_function"})," flavor that contain user-specified code and ",(0,o.jsx)(n.em,{children:"artifact"})," (file) dependencies."]}),"\n",(0,o.jsx)(n.p,{children:"The MLflow PythonModel enables you to implement custom model logic while leveraging MLflow's\npackaging and deployment capabilities."}),"\n",(0,o.jsxs)(n.p,{children:["There are two ways to define a PythonModel:\nSubclassing ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.PythonModel"})," or defining a callable.\nThis guide provides a complete walkthrough on how to define and use a custom PythonModel."]}),"\n",(0,o.jsx)(n.h3,{id:"define-a-custom-pythonmodel",children:"Define a custom PythonModel"}),"\n",(0,o.jsx)(n.h4,{id:"option-1-subclass-pythonmodel",children:"Option 1: Subclass PythonModel"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc",children:(0,o.jsx)(n.code,{children:"mlflow.pyfunc"})})," module provides a ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.PythonModel",children:"generic PythonModel class"}),"\nthat can be used to define your own customized model. By subclassing it, the model can be seamlessly integrated with other MLflow components."]}),"\n",(0,o.jsx)(n.p,{children:"Methods of PythonModel:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"predict"}),"\nA valid PythonModel must implement the predict method, which defines the model\u2019s prediction logic. This method is called by MLflow when\nthe model is loaded as a PyFunc model using ",(0,o.jsx)(n.code,{children:"mlflow.pyfunc.load_model"})," and the ",(0,o.jsx)(n.code,{children:"predict"})," function is invoked."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"predict_stream"}),"\nThe predict_stream method should be implemented if the model is intended for use in streaming environments. MLflow invokes this method\nwhen the model is loaded as a PyFunc model with ",(0,o.jsx)(n.code,{children:"mlflow.pyfunc.load_model"})," and ",(0,o.jsx)(n.code,{children:"predict_stream"})," is called."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"load_context"}),"\nImplement the load_context method if the model requires additional context to be loaded. For more details, refer to ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.PythonModel.load_context",children:"load_context()"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Starting from MLflow 2.20.0, the ",(0,o.jsx)(n.code,{children:"context"})," parameter can be removed from ",(0,o.jsx)(n.code,{children:"predict"})," and ",(0,o.jsx)(n.code,{children:"predict_stream"})," functions if it is not used.\ne.g. ",(0,o.jsx)(n.code,{children:"def predict(self, model_input, params)"})," is a valid predict function signature."]})}),"\n",(0,o.jsx)(n.p,{children:"Below is an example of a simple PythonModel that takes a list of string and returns it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import mlflow\n\n\nclass MyModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: list[str], params=None) -> list[str]:\n        return model_input\n"})}),"\n",(0,o.jsx)(n.h4,{id:"option-2-define-a-callable",children:"Option 2: Define a callable"}),"\n",(0,o.jsxs)(n.p,{children:["An alternative way to log a PythonModel is to define a callable that ",(0,o.jsx)(n.strong,{children:"takes a single argument"})," and returns a prediction. This callable can be\nlogged as a PythonModel by passing it to ",(0,o.jsx)(n.code,{children:"mlflow.pyfunc.log_model"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Starting from MLflow 2.20.0, you can use the ",(0,o.jsx)(n.code,{children:"@pyfunc"})," decorator on the callable to enable data validation on the input based on the type hints.\nCheck ",(0,o.jsx)(n.a,{href:"#type-hint-usage-in-pythonmodel",children:"type hint usage in PythonModel"})," for more details."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from mlflow.pyfunc.utils import pyfunc\n\n\n@pyfunc\ndef predict(model_input: list[str]) -> list[str]:\n    return model_input\n"})}),"\n",(0,o.jsx)(n.h3,{id:"log-the-model",children:"Log the model"}),"\n",(0,o.jsxs)(n.p,{children:["Use the pyfunc module to log a custom model with ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.log_model"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        name="model",\n        python_model=MyModel(),\n        input_example=input_example,\n    )\n'})}),"\n",(0,o.jsx)(n.h3,{id:"validate-the-model-before-deployment",children:"Validate the model before deployment"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(s.B,{fn:"mlflow.models.predict"})," API to validate the model dependencies and input data before deploy it.\nCheck ",(0,o.jsx)(n.a,{href:"/ml/model#validate-models-before-deployment",children:"MLflow Model Validation"})," for more details."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.models.predict(\n    model_uri=model_info.model_uri,\n    input_data=["a", "b", "c"],\n    env_manager="uv",\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"In addition, you can load the model locally and validate it by running predictions."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\npyfunc_model = mlflow.pyfunc.load_model(model_info.model_uri)\npyfunc_model.predict(["hello", "world"])\n'})}),"\n",(0,o.jsx)(n.h3,{id:"deploy-the-model",children:"Deploy the model"}),"\n",(0,o.jsxs)(n.p,{children:["The final step to use your model in production is to deploy it. Follow ",(0,o.jsx)(n.a,{href:"/ml/model#deployment_plugin",children:"MLflow Model Deployment"})," guide to deploy the model."]}),"\n",(0,o.jsx)(n.h2,{id:"type-hint-usage-in-pythonmodel",children:"Type hint usage in PythonModel"}),"\n",(0,o.jsx)(n.p,{children:"Starting from MLflow 2.20.0, type hints are now a valid way to define your model's interfaces. You can use type hints to define the input and output types of the model.\nUtilizing type hints introduces the following benefits:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Data validation"}),": MLflow validates the input data based on the type hints defined in the model. No matter if the model is a PythonModel instance or a loaded PyFunc model, the input data is consistently validated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Type hint inference"}),": MLflow infers the input and output schema of the model based on the type hints defined in the model, and sets that inferred structure as the logged model signature."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"supported-type-hints",children:"Supported type hints"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:["Type hints used within the PythonModel's input signature must be of type ",(0,o.jsx)(n.code,{children:"list[...]"})]})," because PythonModel's predict function expects batch input data.\nThe following type hints are supported as the element type of ",(0,o.jsx)(n.code,{children:"list[...]"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Primitive types"}),": int, float, str, bool, bytes, datetime.datetime"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Collection types"}),": list, dict"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Union types"}),": ",(0,o.jsx)(n.code,{children:"Union[type1, type2, ...]"})," or ",(0,o.jsx)(n.code,{children:"type1 | type2 | ..."})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optional types"}),": Optional[type]"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pydantic models"}),": Subclass of pydantic.BaseModel (fields must be of supported types mentioned in this section)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"typing.Any"}),": Any"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Constraints of type hints usage:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Pydantic models"}),": Optional fields must contain a default value."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Union types"}),": Union of more than one valid type is inferred as AnyType in MLflow, and MLflow does no data validation based on it."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Optional types"}),": Optional type cannot be directly used in ",(0,o.jsx)(n.code,{children:"list[...]"})," since the predict function's input should not be None."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Below are some examples of supported type hints:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"list[str]"}),", ",(0,o.jsx)(n.code,{children:"list[int]"}),", ",(0,o.jsx)(n.code,{children:"list[float]"}),", ",(0,o.jsx)(n.code,{children:"list[bool]"}),", ",(0,o.jsx)(n.code,{children:"list[bytes]"}),", ",(0,o.jsx)(n.code,{children:"list[datetime.datetime]"})]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"list[list[str]]..."})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"list[dict[str, str]]"}),", ",(0,o.jsx)(n.code,{children:"list[dict[str, int]]"}),", ",(0,o.jsx)(n.code,{children:"list[dict[str, list[str]]]..."})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"list[Union[int, str]]"}),", ",(0,o.jsx)(n.code,{children:"list[str | dict[str, int]]..."})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Below is an example of nested pydantic models as type hints:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.pyfunc.utils import pyfunc\nimport pydantic\nfrom typing import Optional\n\n\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n\n\nclass FunctionParams(pydantic.BaseModel):\n    properties: dict[str, str]\n    type: str = "object"\n    required: Optional[list[str]] = None\n    additionalProperties: Optional[bool] = None\n\n\nclass ToolDefinition(pydantic.BaseModel):\n    name: str\n    description: Optional[str] = None\n    parameters: Optional[FunctionParams] = None\n    strict: Optional[bool] = None\n\n\nclass ChatRequest(pydantic.BaseModel):\n    messages: list[Message]\n    tool: Optional[ToolDefinition] = None\n\n\n@pyfunc\ndef predict(model_input: list[ChatRequest]) -> list[list[str]]:\n    return [[msg.content for msg in request.messages] for request in model_input]\n\n\ninput_example = [ChatRequest(messages=[Message(role="user", content="Hello")])]\nprint(predict(input_example))  # Output: [[\'Hello\']]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"using-type-hints-in-pythonmodel",children:"Using type hints in PythonModel"}),"\n",(0,o.jsx)(n.p,{children:"To use type hints in PythonModel, you can define the input and output types in the predict function signature. Below is an example of a PythonModel\nthat takes a list of Message object and returns a list of string."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import pydantic\nimport mlflow\n\n\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n\n\nclass CustomModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: list[Message], params=None) -> list[str]:\n        return [msg.content for msg in model_input]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"type-hints-data-validation-in-pythonmodel",children:"Type hints data validation in PythonModel"}),"\n",(0,o.jsxs)(n.p,{children:["By subclassing ",(0,o.jsx)(s.B,{fn:"mlflow.pyfunc.PythonModel"}),", you can get data validation based on the type hints for free.\nThe data validation works for both a PythonModel instance and a loaded PyFunc model."]}),"\n",(0,o.jsxs)(n.p,{children:["Below example demonstrates how data validation works based on the ",(0,o.jsx)(n.code,{children:"CustomModel"})," defined above."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'model = CustomModel()\n\n# The input_example can be a list of Message objects as defined in the type hint\ninput_example = [\n    Message(role="system", content="Hello"),\n    Message(role="user", content="Hi"),\n]\nprint(model.predict(input_example))  # Output: [\'Hello\', \'Hi\']\n\n# The input_example can also be a list of dict with the same schema as Message\ninput_example = [\n    {"role": "system", "content": "Hello"},\n    {"role": "user", "content": "Hi"},\n]\nprint(model.predict(input_example))  # Output: [\'Hello\', \'Hi\']\n\n# If your input doesn\'t match the schema, it will raise an exception\n# e.g. content field is missing here, but it\'s required in the Message definition\nmodel.predict([{"role": "system"}])\n# Output: 1 validation error for Message\\ncontent\\n  Field required [type=missing, input_value={\'role\': \'system\'}, input_type=dict]\n\n# The same data validation works if you log and load the model as pyfunc\nmodel_info = mlflow.pyfunc.log_model(\n    name="model",\n    python_model=model,\n    input_example=input_example,\n)\npyfunc_model = mlflow.pyfunc.load_model(model_info.model_uri)\nprint(pyfunc_model.predict(input_example))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For callables, you can use the ",(0,o.jsx)(n.code,{children:"@pyfunc"})," decorator to enable data validation based on the type hints."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.pyfunc.utils import pyfunc\n\n\n@pyfunc\ndef predict(model_input: list[Message]) -> list[str]:\n    return [msg.content for msg in model_input]\n\n\n# The input_example can be a list of Message objects as defined in the type hint\ninput_example = [\n    Message(role="system", content="Hello"),\n    Message(role="user", content="Hi"),\n]\nprint(predict(input_example))  # Output: [\'Hello\', \'Hi\']\n\n# The input_example can also be a list of dict with the same schema as Message\ninput_example = [\n    {"role": "system", "content": "Hello"},\n    {"role": "user", "content": "Hi"},\n]\nprint(predict(input_example))  # Output: [\'Hello\', \'Hi\']\n\n# If your input doesn\'t match the schema, it will raise an exception\n# e.g. passing a list of string here will raise an exception\npredict(["hello"])\n# Output: Failed to validate data against type hint `list[Message]`, invalid elements:\n# [(\'hello\', "Expecting example to be a dictionary or pydantic model instance for Pydantic type hint, got <class \'str\'>")]\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"MLflow doesn't validate model output against the type hints, but the output type hint is used for model signature inference."})}),"\n",(0,o.jsx)(n.h3,{id:"pydantic-model-type-hints-data-conversion",children:"Pydantic Model type hints data conversion"}),"\n",(0,o.jsxs)(n.p,{children:["For Pydantic model type hints, the input data can be either a Pydantic object or a dictionary that matches the schema of the Pydantic model.\nMLflow automatically converts the provided data to the type hint object before passing it to the predict function.\nIf comparing to the example in the last section, ",(0,o.jsx)(n.code,{children:'[{"role": "system", "content": "Hello"}]'})," is converted to ",(0,o.jsx)(n.code,{children:'[Message(role="system", content="Hello")]'})," within the predict function."]}),"\n",(0,o.jsx)(n.p,{children:"The example below demonstrates how to use a base class as type hint, while preserving fields in the subclasses."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel, ConfigDict\nfrom mlflow.pyfunc.utils import pyfunc\n\n\nclass BaseMessage(BaseModel):\n    # set extra=\'allow\' to allow extra fields in the subclass\n    model_config = ConfigDict(extra="allow")\n\n    role: str\n    content: str\n\n\nclass SystemMessage(BaseMessage):\n    system_prompt: str\n\n\nclass UserMessage(BaseMessage):\n    user_prompt: str\n\n\n@pyfunc\ndef predict(model_input: list[BaseMessage]) -> list[str]:\n    result = []\n    for msg in model_input:\n        if hasattr(msg, "system_prompt"):\n            result.append(msg.system_prompt)\n        elif hasattr(msg, "user_prompt"):\n            result.append(msg.user_prompt)\n    return result\n\n\ninput_example = [\n    {"role": "system", "content": "Hello", "system_prompt": "Hi"},\n    {"role": "user", "content": "Hi", "user_prompt": "Hello"},\n]\nprint(predict(input_example))  # Output: [\'Hi\', \'Hello\']\n'})}),"\n",(0,o.jsx)(n.h3,{id:"model-signature-inference-based-on-type-hints",children:"Model signature inference based on type hints"}),"\n",(0,o.jsx)(n.p,{children:"When logging a PythonModel with type hints, MLflow automatically infers the input and output schema of the model based on the type hints defined in the model."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Do not pass ",(0,o.jsx)(n.code,{children:"signature"})," parameter explicitly when logging a PythonModel with type hints. If you pass the ",(0,o.jsx)(n.code,{children:"signature"})," parameter,\nMLflow still uses the inferred signature based on the type hints, and raises a warning if they don't match."]})}),"\n",(0,o.jsx)(n.p,{children:"The table below illustrates how type hints map to given schemas in model signatures:"}),"\n",(0,o.jsxs)(a.X,{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:"Type hint"}),(0,o.jsx)("th",{children:"Inferred schema"})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[str]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=DataType.string)])"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[list[str]]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=Array(DataType.string))])"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[dict[str, str]]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=Map(DataType.string))])"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[Union[int, str]]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=AnyType())])"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[Any]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=AnyType())])"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:"list[pydantic.BaseModel]"}),(0,o.jsx)("td",{children:"Schema([ColSpec(type=Object([...]))]) # properties based on the pydantic model fields"})]})]})]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Pydantic objects cannot be used in the ",(0,o.jsx)(n.code,{children:"infer_signature"})," function. To use pydantic objects as model inputs, you must define the type hints\nas the pydantic model in the PythonModel's predict function signature."]})}),"\n",(0,o.jsx)(n.h3,{id:"input-example-together-with-type-hints-during-model-logging",children:"Input example together with type hints during model logging"}),"\n",(0,o.jsxs)(n.p,{children:["When logging a PythonModel, it is recommended to provide an input example that matches the type hints defined in the model.\nThe input example is used to validate the type hints and check if the ",(0,o.jsx)(n.code,{children:"predict"})," function works as expected."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.pyfunc.log_model(\n    name="model",\n    python_model=CustomModel(),\n    input_example=["a", "b", "c"],\n)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"query-a-serving-endpoint-hosting-a-pythonmodel-with-type-hints",children:"Query a serving endpoint hosting a PythonModel with type hints"}),"\n",(0,o.jsxs)(n.p,{children:["When querying a serving endpoint hosting a PythonModel with type hints, you ",(0,o.jsx)(n.strong,{children:"must pass the input data with"})," ",(0,o.jsx)(n.code,{children:"inputs"})," ",(0,o.jsx)(n.strong,{children:"key in the request body"}),".\nThe example below demonstrates how to serve the model locally and query it:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'mlflow models serve -m runs:/<run_id>/model --env-manager local\ncurl http://127.0.0.1:5000/invocations -H \'Content-Type: application/json\' -d \'{"inputs": [{"role": "system", "content": "Hello"}]}\'\n'})}),"\n",(0,o.jsx)(n.h3,{id:"extra-allowed-type-hints-that-dont-support-data-validation-or-schema-inference",children:"Extra allowed type hints that don't support data validation or schema inference"}),"\n",(0,o.jsx)(n.p,{children:"MLflow also supports using the following type hints in PythonModel, but they are not used for data validation or schema inference, and a\nvalid model signature or input_example needs to be provided during model logging."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"pandas.DataFrame"}),"\n",(0,o.jsx)(n.li,{children:"pandas.Series"}),"\n",(0,o.jsx)(n.li,{children:"numpy.ndarray"}),"\n",(0,o.jsx)(n.li,{children:"scipy.sparse.csc_matrix"}),"\n",(0,o.jsx)(n.li,{children:"scipy.sparse.csr_matrix"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"typefromexample-type-hint-usage",children:"TypeFromExample type hint usage"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow provides a special type hint, ",(0,o.jsx)(n.code,{children:"TypeFromExample"}),", which helps convert the input data to match the type of your input example\nduring PyFunc prediction. This is useful if you don't want to explicitly define a type hint for the model input but still want\nthe data to conform to the input example type during prediction.\n",(0,o.jsx)(n.strong,{children:"To use this feature, a valid input example must be provided during model logging."})," The input example must be one of the following\ntypes, as the ",(0,o.jsx)(n.code,{children:"predict"})," function expects batch input data:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"list"}),"\n",(0,o.jsx)(n.li,{children:"pandas.DataFrame"}),"\n",(0,o.jsx)(n.li,{children:"pandas.Series"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The example below demonstrates how to use ",(0,o.jsx)(n.code,{children:"TypeFromExample"})," type hint:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.types.type_hints import TypeFromExample\n\n\nclass Model(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: TypeFromExample):\n        return model_input\n\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        name="model",\n        python_model=Model(),\n        input_example=["a", "b", "c"],\n    )\npyfunc_model = mlflow.pyfunc.load_model(model_info.model_uri)\nassert pyfunc_model.predict(["d", "e", "f"]) == ["d", "e", "f"]\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["If neither type hints nor ",(0,o.jsx)(n.code,{children:"TypeFromExample"})," are used, MLflow's schema enforcement will default to converting the input data into a pandas DataFrame.\nThis may not be ideal if the model expects the same type as the input example. It is strongly recommended to use supported type hints to avoid this\nconversion and enable data validation based on the specified type hints."]})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var l=t(96540);const o={},i=l.createContext(o);function s(e){const n=l.useContext(i);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),l.createElement(i.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>d});t(96540);const l=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(86025),i=t(28774),s=t(74848);const a=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(l[e])return e}return null};function d({fn:e,children:n}){const t=a(e);if(!t)return(0,s.jsx)(s.Fragment,{children:n});const d=(0,o.Ay)(`/${l[t]}#${e}`);return(0,s.jsx)(i.A,{to:d,target:"_blank",children:n??(0,s.jsxs)("code",{children:[e,"()"]})})}},72839:(e,n,t)=>{t.d(n,{X:()=>o});var l=t(74848);function o({children:e}){return(0,l.jsx)("div",{className:"w-full overflow-x-auto",children:(0,l.jsx)("table",{children:e})})}}}]);