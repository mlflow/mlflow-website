"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[822],{16734:(e,n,t)=>{t.d(n,{d:()=>r});var o=t(58069);const d="codeBlock_oJcR";var l=t(74848);const r=e=>{let{children:n,executionCount:t}=e;return(0,l.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,l.jsx)(o.A,{className:d,language:"python",children:n})})}},20723:(e,n,t)=>{t.d(n,{O:()=>l});var o=t(96540),d=t(74848);function l(e){let{children:n,href:t}=e;const l=(0,o.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:t})}catch{}const n=await fetch(t),o=await n.blob(),d=window.URL.createObjectURL(o),l=document.createElement("a");l.style.display="none",l.href=d;const r=t.split("/").pop();l.download=r,document.body.appendChild(l),l.click(),window.URL.revokeObjectURL(d),document.body.removeChild(l)}),[t]);return(0,d.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:t,download:!0,onClick:l,children:n})}},25509:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>f,frontMatter:()=>m,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial-ipynb","title":"Deploy an MLflow PyFunc model with Model Serving","description":"Download this notebook","source":"@site/docs/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial-ipynb.mdx","sourceDirName":"traditional-ml/serving-multiple-models-with-pyfunc/notebooks","slug":"/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial","permalink":"/docs/latest/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.ipynb","slug":"MME_Tutorial"},"sidebar":"docsSidebar","previous":{"title":"Serving Multiple Models on a Single Endpoint with a Custom PyFunc Model","permalink":"/docs/latest/traditional-ml/serving-multiple-models-with-pyfunc/"},"next":{"title":"MLflow Tracking","permalink":"/docs/latest/tracking/"}}');var d=t(74848),l=t(28453),r=t(16734),i=t(61536),s=t(86563),a=t(20723);const m={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.ipynb",slug:"MME_Tutorial"},u="Deploy an MLflow PyFunc model with Model Serving",c={},h=[{value:"Install and import libraries",id:"install-and-import-libraries",level:2},{value:"1 - Create Some Sample Models",id:"1---create-some-sample-models",level:2},{value:"1.1 - Create Dummy Data",id:"11---create-dummy-data",level:4},{value:"1.2 - Train Models for Each Day of the Week",id:"12---train-models-for-each-day-of-the-week",level:4},{value:"1.3 - Test inference on our DOW models",id:"13---test-inference-on-our-dow-models",level:4},{value:"2 - Create an MME Custom PyFunc Model",id:"2---create-an-mme-custom-pyfunc-model",level:2},{value:"2.1 - Create a Child Implementation of <code>mlflow.pyfunc.PythonModel</code>",id:"21---create-a-child-implementation-of-mlflowpyfuncpythonmodel",level:4},{value:"2.2 - Test our Implementation",id:"22---test-our-implementation",level:4},{value:"2.3 - Register our Custom PyFunc Model",id:"23---register-our-custom-pyfunc-model",level:4},{value:"3 - Serve our Model",id:"3---serve-our-model",level:2},{value:"4 - Query our Served Model",id:"4---query-our-served-model",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsxs)(n.h1,{id:"deploy-an-mlflow-pyfunc-model-with-model-serving",children:["Deploy an MLflow ",(0,d.jsx)(n.code,{children:"PyFunc"})," model with Model Serving"]})}),"\n",(0,d.jsx)(a.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/traditional-ml/serving-multiple-models-with-pyfunc/notebooks/MME_Tutorial.ipynb",children:"Download this notebook"}),"\n",(0,d.jsx)(n.p,{children:"In this notebook, learn how to deploy a custom MLflow PyFunc model to a serving endpoint. MLflow pyfunc offers greater flexibility and customization to your deployment. You can run any custom model, add preprocessing or post-processing logic, or execute any arbitrary Python code. While using the MLflow built-in flavor is recommended for optimal performance, you can use MLflow PyFunc models where more customization is required."}),"\n",(0,d.jsx)(n.h2,{id:"install-and-import-libraries",children:"Install and import libraries"}),"\n",(0,d.jsx)(r.d,{executionCount:13,children:"%pip install --upgrade mlflow scikit-learn -q"}),"\n",(0,d.jsx)(i.p,{isStderr:!0,children:"213.32s - pydevd: Sending message related to process being replaced timed-out after 5 seconds"}),"\n",(0,d.jsx)(r.d,{executionCount:2,children:'import json\nimport warnings\n\nimport numpy as np\nimport pandas as pd\nimport requests\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport mlflow\nfrom mlflow.models import infer_signature\n\nwarnings.filterwarnings("ignore")'}),"\n",(0,d.jsx)(r.d,{executionCount:3,children:'DOW_MODEL_NAME_PREFIX = "DOW_model_"\nMME_MODEL_NAME = "MME_DOW_model"'}),"\n",(0,d.jsx)(n.h2,{id:"1---create-some-sample-models",children:"1 - Create Some Sample Models"}),"\n",(0,d.jsx)(n.h4,{id:"11---create-dummy-data",children:"1.1 - Create Dummy Data"}),"\n",(0,d.jsx)(r.d,{executionCount:4,children:'def create_weekly_dataset(n_dates, n_observations_per_date):\n  rng = pd.date_range(start="today", periods=n_dates, freq="D")\n  df = pd.DataFrame(\n      np.random.randn(n_dates * n_observations_per_date, 4),\n      columns=["x1", "x2", "x3", "y"],\n      index=np.tile(rng, n_observations_per_date),\n  )\n  df["dow"] = df.index.dayofweek\n  return df\n\n\ndf = create_weekly_dataset(n_dates=30, n_observations_per_date=500)\nprint(df.shape)\ndf.head()'}),"\n",(0,d.jsx)(i.p,{children:"(15000, 5)"}),"\n",(0,d.jsx)(s.Q,{children:(0,d.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>x1</th>\n    <th>x2</th>\n    <th>x3</th>\n    <th>y</th>\n    <th>dow</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>2024-01-26 18:30:42.810981</th>\n    <td>-1.137854</td>\n    <td>0.165915</td>\n    <td>0.711107</td>\n    <td>0.046467</td>\n    <td>4</td>\n  </tr>\n  <tr>\n    <th>2024-01-27 18:30:42.810981</th>\n    <td>0.475331</td>\n    <td>-0.749121</td>\n    <td>0.318395</td>\n    <td>0.520535</td>\n    <td>5</td>\n  </tr>\n  <tr>\n    <th>2024-01-28 18:30:42.810981</th>\n    <td>2.525948</td>\n    <td>1.019708</td>\n    <td>0.038251</td>\n    <td>-0.270675</td>\n    <td>6</td>\n  </tr>\n  <tr>\n    <th>2024-01-29 18:30:42.810981</th>\n    <td>1.113931</td>\n    <td>0.376434</td>\n    <td>-1.464181</td>\n    <td>-0.069208</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>2024-01-30 18:30:42.810981</th>\n    <td>-0.304569</td>\n    <td>1.389245</td>\n    <td>-1.152598</td>\n    <td>-1.137589</td>\n    <td>1</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,d.jsx)(n.h4,{id:"12---train-models-for-each-day-of-the-week",children:"1.2 - Train Models for Each Day of the Week"}),"\n",(0,d.jsx)(r.d,{executionCount:5,children:'for dow in df["dow"].unique():\n  # Create dataset corresponding to a single day of the week\n  X = df.loc[df["dow"] == dow]\n  X.pop("dow")  # Remove DOW as a predictor column\n  y = X.pop("y")\n\n  # Fit our DOW model\n  model = RandomForestRegressor().fit(X, y)\n\n  # Infer signature of the model\n  signature = infer_signature(X, model.predict(X))\n\n  with mlflow.start_run():\n      model_path = f"model_{dow}"\n\n      # Log and register our DOW model with signature\n      mlflow.sklearn.log_model(\n          model,\n          name=model_path,\n          signature=signature,\n          registered_model_name=f"{DOW_MODEL_NAME_PREFIX}{dow}",\n      )\n      mlflow.set_tag("dow", dow)'}),"\n",(0,d.jsx)(i.p,{isStderr:!0,children:"Successfully registered model 'DOW_model_4'.\nCreated version '1' of model 'DOW_model_4'.\nSuccessfully registered model 'DOW_model_5'.\nCreated version '1' of model 'DOW_model_5'.\nSuccessfully registered model 'DOW_model_6'.\nCreated version '1' of model 'DOW_model_6'.\nSuccessfully registered model 'DOW_model_0'.\nCreated version '1' of model 'DOW_model_0'.\nSuccessfully registered model 'DOW_model_1'.\nCreated version '1' of model 'DOW_model_1'.\nSuccessfully registered model 'DOW_model_2'.\nCreated version '1' of model 'DOW_model_2'.\nSuccessfully registered model 'DOW_model_3'.\nCreated version '1' of model 'DOW_model_3'."}),"\n",(0,d.jsx)(n.h4,{id:"13---test-inference-on-our-dow-models",children:"1.3 - Test inference on our DOW models"}),"\n",(0,d.jsx)(r.d,{executionCount:6,children:'# Load Tuesday\'s model\ntuesday_dow = 1\nmodel_name = f"{DOW_MODEL_NAME_PREFIX}{tuesday_dow}"\nmodel_uri = f"models:/{model_name}/latest"\nmodel = mlflow.sklearn.load_model(model_uri)\n\n# Perform inference using our training data for Tuesday\npredictor_columns = [column for column in df.columns if column not in {"y", "dow"}]\nhead_of_training_data = df.loc[df["dow"] == tuesday_dow, predictor_columns].head()\ntuesday_fitted_values = model.predict(head_of_training_data)\nprint(tuesday_fitted_values)'}),"\n",(0,d.jsx)(i.p,{children:"[-0.8571552   0.61833952  0.61625155  0.28999143  0.49778144]"}),"\n",(0,d.jsx)(n.h2,{id:"2---create-an-mme-custom-pyfunc-model",children:"2 - Create an MME Custom PyFunc Model"}),"\n",(0,d.jsxs)(n.h4,{id:"21---create-a-child-implementation-of-mlflowpyfuncpythonmodel",children:["2.1 - Create a Child Implementation of ",(0,d.jsx)(n.code,{children:"mlflow.pyfunc.PythonModel"})]}),"\n",(0,d.jsx)(r.d,{executionCount:7,children:'class DOWModel(mlflow.pyfunc.PythonModel):\n  def __init__(self, model_uris):\n      self.model_uris = model_uris\n      self.models = {}\n\n  @staticmethod\n  def _model_uri_to_dow(model_uri: str) -> int:\n      return int(model_uri.split("/")[-2].split("_")[-1])\n\n  def load_context(self, context):\n      self.models = {\n          self._model_uri_to_dow(model_uri): mlflow.sklearn.load_model(model_uri)\n          for model_uri in self.model_uris\n      }\n\n  def predict(self, context, model_input, params):\n      # Parse the dow parameter\n      dow = params.get("dow")\n      if dow is None:\n          raise ValueError("DOW param is not passed.")\n\n      # Get the model associated with the dow parameter\n      model = self.models.get(dow)\n      if model is None:\n          raise ValueError(f"Model {dow} version was not found: {self.models.keys()}.")\n\n      # Perform inference\n      return model.predict(model_input)'}),"\n",(0,d.jsx)(n.h4,{id:"22---test-our-implementation",children:"2.2 - Test our Implementation"}),"\n",(0,d.jsx)(r.d,{executionCount:8,children:"head_of_training_data"}),"\n",(0,d.jsx)(s.Q,{children:(0,d.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>x1</th>\n    <th>x2</th>\n    <th>x3</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>2024-01-30 18:30:42.810981</th>\n    <td>-0.304569</td>\n    <td>1.389245</td>\n    <td>-1.152598</td>\n  </tr>\n  <tr>\n    <th>2024-02-06 18:30:42.810981</th>\n    <td>0.521323</td>\n    <td>0.814452</td>\n    <td>0.115571</td>\n  </tr>\n  <tr>\n    <th>2024-02-13 18:30:42.810981</th>\n    <td>0.229761</td>\n    <td>-1.936210</td>\n    <td>0.139201</td>\n  </tr>\n  <tr>\n    <th>2024-02-20 18:30:42.810981</th>\n    <td>-0.865488</td>\n    <td>1.024857</td>\n    <td>-0.857649</td>\n  </tr>\n  <tr>\n    <th>2024-01-30 18:30:42.810981</th>\n    <td>-1.454631</td>\n    <td>0.462055</td>\n    <td>0.703858</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,d.jsx)(r.d,{executionCount:9,children:'# Instantiate our DOW MME\nmodel_uris = [f"models:/{DOW_MODEL_NAME_PREFIX}{i}/latest" for i in df["dow"].unique()]\ndow_model = DOWModel(model_uris)\ndow_model.load_context(None)\nprint("Model URIs:")\nprint(model_uris)\n\n# Perform inference using our training data for Tuesday\nparams = {"dow": 1}\nmme_tuesday_fitted_values = dow_model.predict(None, head_of_training_data, params=params)\nassert all(tuesday_fitted_values == mme_tuesday_fitted_values)\n\nprint("\nTuesday fitted values:")\nprint(mme_tuesday_fitted_values)'}),"\n",(0,d.jsx)(i.p,{children:"Model URIs:\n['models:/DOW_model_4/latest', 'models:/DOW_model_5/latest', 'models:/DOW_model_6/latest', 'models:/DOW_model_0/latest', 'models:/DOW_model_1/latest', 'models:/DOW_model_2/latest', 'models:/DOW_model_3/latest']\n\nTuesday fitted values:\n[-0.8571552   0.61833952  0.61625155  0.28999143  0.49778144]"}),"\n",(0,d.jsx)(n.h4,{id:"23---register-our-custom-pyfunc-model",children:"2.3 - Register our Custom PyFunc Model"}),"\n",(0,d.jsx)(r.d,{executionCount:10,children:'with mlflow.start_run():\n  # Instantiate the custom pyfunc model\n  model = DOWModel(model_uris)\n  model.load_context(None)\n  model_path = "MME_model_path"\n\n  signature = infer_signature(\n      model_input=head_of_training_data,\n      model_output=tuesday_fitted_values,\n      params=params,\n  )\n  print(signature)\n\n  # Log the model to the experiment\n  mlflow.pyfunc.log_model(\n      name=model_path,\n      python_model=model,\n      signature=signature,\n      pip_requirements=["scikit-learn=1.3.2"],\n      registered_model_name=MME_MODEL_NAME,  # also register the model for easy access\n  )\n\n  # Set some relevant information about our model\n  # (Assuming model has a property \'models\' that can be counted)\n  mlflow.log_param("num_models", len(model.models))'}),"\n",(0,d.jsx)(i.p,{children:"inputs: \n['x1': double (required), 'x2': double (required), 'x3': double (required)]\noutputs: \n[Tensor('float64', (-1,))]\nparams: \n['dow': long (default: 1)]"}),"\n",(0,d.jsx)(i.p,{isStderr:!0,children:"Successfully registered model 'MME_DOW_model'.\nCreated version '1' of model 'MME_DOW_model'."}),"\n",(0,d.jsx)(n.h2,{id:"3---serve-our-model",children:"3 - Serve our Model"}),"\n",(0,d.jsx)(n.p,{children:"To test our endpoint, let's serve our model on our local machine."}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["Open a new shell window in the root containing ",(0,d.jsx)(n.code,{children:"mlruns"})," directory e.g. the same directory you ran this notebook."]}),"\n",(0,d.jsxs)(n.li,{children:["Ensure mlflow is installed: ",(0,d.jsx)(n.code,{children:"pip install --upgrade mlflow scikit-learn"})]}),"\n",(0,d.jsx)(n.li,{children:"Run the bash command printed below."}),"\n"]}),"\n",(0,d.jsx)(r.d,{executionCount:11,children:'PORT = 1234\nprint(\n  f"""Run the below command in a new window. You must be in the same repo as your mlruns directory and have mlflow installed...\n  mlflow models serve -m "models:/{MME_MODEL_NAME}/latest" --env-manager local -p {PORT}"""\n)'}),"\n",(0,d.jsx)(i.p,{children:'Run the below command in a new window. You must be in the same repo as your mlruns directory and have mlflow installed...\n  mlflow models serve -m "models:/MME_DOW_model/latest" --env-manager local -p 1234'}),"\n",(0,d.jsx)(n.h2,{id:"4---query-our-served-model",children:"4 - Query our Served Model"}),"\n",(0,d.jsx)(r.d,{executionCount:12,children:'def score_model(pdf, params):\n  headers = {"Content-Type": "application/json"}\n  url = f"http://127.0.0.1:{PORT}/invocations"\n  ds_dict = {"dataframe_split": pdf, "params": params}\n  data_json = json.dumps(ds_dict, allow_nan=True)\n\n  response = requests.request(method="POST", headers=headers, url=url, data=data_json)\n  response.raise_for_status()\n\n  return response.json()\n\n\nprint("Inference on dow model 1 (Tuesday):")\ninference_df = head_of_training_data.reset_index(drop=True).to_dict(orient="split")\nprint(score_model(inference_df, params={"dow": 1}))'}),"\n",(0,d.jsx)(i.p,{children:"Inference on dow model 1 (Tuesday):\n{'predictions': [-0.8571551951905747, 0.618339524354309, 0.6162515496343108, 0.2899914313294642, 0.4977814353066934]}"})]})}function f(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(p,{...e})}):p(e)}},61536:(e,n,t)=>{t.d(n,{p:()=>d});var o=t(74848);const d=e=>{let{children:n,isStderr:t}=e;return(0,o.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:n})}},86563:(e,n,t)=>{t.d(n,{Q:()=>d});var o=t(74848);const d=e=>{let{children:n}=e;return(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:n})}}}]);