"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1564],{5757:(e,l,o)=>{o.d(l,{A:()=>n});const n=o.p+"assets/images/model-registry-ui-111bfc57063e0dd58d54597daafb1b7b.png"},13565:(e,l,o)=>{o.r(l),o.d(l,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"model-registry/tutorial","title":"Model Registry Tutorials","description":"Explore the full functionality of the Model Registry in this tutorial \u2014 from registering a model and inspecting its structure, to loading a specific model version for further use.","source":"@site/docs/classic-ml/model-registry/tutorial.mdx","sourceDirName":"model-registry","slug":"/model-registry/tutorial","permalink":"/docs/latest/ml/model-registry/tutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"toc_max_heading_level":4,"sidebar_label":"Tutorial"},"sidebar":"classicMLSidebar","previous":{"title":"Overview","permalink":"/docs/latest/ml/model-registry/"},"next":{"title":"Workflow","permalink":"/docs/latest/ml/model-registry/workflow"}}');var r=o(74848),t=o(28453),i=o(49374);const a={sidebar_position:15,toc_max_heading_level:4,sidebar_label:"Tutorial"},s="Model Registry Tutorials",d={},m=[{value:"Model Registry",id:"model-registry",level:2},{value:"Step 0: Install Dependencies",id:"step-0-install-dependencies",level:3},{value:"Step 1: Register a Model",id:"step-1-register-a-model",level:3},{value:"Explore the Registered Model",id:"explore-the-registered-model",level:2},{value:"Step 1: Explore the <code>mlruns</code> Directory",id:"step-1-explore-the-mlruns-directory",level:3},{value:"Step 2: Start the Tracking Server",id:"step-2-start-the-tracking-server",level:3},{value:"Step 3: View the Tracking Server",id:"step-3-view-the-tracking-server",level:3},{value:"Load a Registered Model",id:"load-a-registered-model",level:2},{value:"Example 0: Load via Tracking Server",id:"example-0-load-via-tracking-server",level:3},{value:"Example 1: Load via Name and Version",id:"example-1-load-via-name-and-version",level:3},{value:"Example 2: Load via Model Version Alias",id:"example-2-load-via-model-version-alias",level:3}];function h(e){const l={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.header,{children:(0,r.jsx)(l.h1,{id:"model-registry-tutorials",children:"Model Registry Tutorials"})}),"\n",(0,r.jsx)(l.p,{children:"Explore the full functionality of the Model Registry in this tutorial \u2014 from registering a model and inspecting its structure, to loading a specific model version for further use."}),"\n",(0,r.jsx)(l.h2,{id:"model-registry",children:"Model Registry"}),"\n",(0,r.jsxs)(l.p,{children:["Throughout this tutorial we will leverage a local tracking server and model registry for simplicity.\nHowever, for production use cases we recommend using a\n",(0,r.jsx)(l.a,{href:"/ml/tracking/tutorials/remote-server",children:"remote tracking server"}),"."]}),"\n",(0,r.jsx)(l.h3,{id:"step-0-install-dependencies",children:"Step 0: Install Dependencies"}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",children:"pip install --upgrade mlflow\n"})}),"\n",(0,r.jsx)(l.h3,{id:"step-1-register-a-model",children:"Step 1: Register a Model"}),"\n",(0,r.jsx)(l.p,{children:"To use the MLflow model registry, you need to add your MLflow models to it. This is done through\nregistering a given model via one of the below commands:"}),"\n",(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.code,{children:"mlflow.<model_flavor>.log_model(registered_model_name=<model_name>)"}),": register the model\n",(0,r.jsx)(l.strong,{children:"while"})," logging it to the tracking server."]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.code,{children:"mlflow.register_model(<model_uri>, <model_name>)"}),": register the model ",(0,r.jsx)(l.strong,{children:"after"})," logging it to\nthe tracking server. Note that you'll have to log the model before running this command to get a\nmodel URI."]}),"\n"]}),"\n",(0,r.jsxs)(l.p,{children:["MLflow has lots of model flavors. In the below example, we'll leverage scikit-learn's\nRandomForestRegressor to demonstrate the simplest way to register a model, but note that you\ncan leverage any ",(0,r.jsx)(l.a,{href:"/ml/model#models_built-in-model-flavors",children:"supported model flavor"}),".\nIn the code snippet below, we start an mlflow run and train a random forest model. We then log some\nrelevant hyper-parameters, the model mean-squared-error (MSE), and finally log and register the\nmodel itself."]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:'from sklearn.datasets import make_regression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\n\nwith mlflow.start_run() as run:\n    X, y = make_regression(n_features=4, n_informative=2, random_state=0, shuffle=False)\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42\n    )\n\n    params = {"max_depth": 2, "random_state": 42}\n    model = RandomForestRegressor(**params)\n    model.fit(X_train, y_train)\n\n    # Log parameters and metrics using the MLflow APIs\n    mlflow.log_params(params)\n\n    y_pred = model.predict(X_test)\n    mlflow.log_metrics({"mse": mean_squared_error(y_test, y_pred)})\n\n    # Log the sklearn model and register as version 1\n    mlflow.sklearn.log_model(\n        sk_model=model,\n        name="sklearn-model",\n        input_example=X_train,\n        registered_model_name="sk-learn-random-forest-reg-model",\n    )\n'})}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",metastring:'title="Example Output"',children:"Successfully registered model 'sk-learn-random-forest-reg-model'.\nCreated version '1' of model 'sk-learn-random-forest-reg-model'.\n"})}),"\n",(0,r.jsx)(l.p,{children:"Great! We've registered a model."}),"\n",(0,r.jsx)(l.p,{children:"Before moving on, let's highlight some important implementation notes."}),"\n",(0,r.jsxs)(l.ul,{children:["\n",(0,r.jsxs)(l.li,{children:["To register a model, you can leverage the ",(0,r.jsx)(l.code,{children:"registered_model_name"})," parameter in the ",(0,r.jsx)(i.B,{fn:"mlflow.sklearn.log_model"}),"\nor call ",(0,r.jsx)(i.B,{fn:"mlflow.register_model"})," after logging the model. Generally, we suggest the former because it's more\nconcise."]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.a,{href:"/ml/model/signatures",children:"Model Signatures"}),"\nprovide validation for our model inputs and outputs. The ",(0,r.jsx)(l.code,{children:"input_example"})," in ",(0,r.jsx)(l.code,{children:"log_model()"}),"\nautomatically infers and logs a signature. Again, we suggest using this implementation because\nit's concise."]}),"\n"]}),"\n",(0,r.jsx)(l.h2,{id:"explore-the-registered-model",children:"Explore the Registered Model"}),"\n",(0,r.jsx)(l.p,{children:"Now that we've logged an experiment and registered the model associated with that experiment run,\nlet's observe how this information is actually stored both in the MLflow UI and in our local\ndirectory. Note that we can also get this information programmatically, but for explanatory purposes\nwe'll use the MLflow UI."}),"\n",(0,r.jsxs)(l.h3,{id:"step-1-explore-the-mlruns-directory",children:["Step 1: Explore the ",(0,r.jsx)(l.code,{children:"mlruns"})," Directory"]}),"\n",(0,r.jsx)(l.p,{children:"Given that we're using our local filesystem as our tracking server and model registry, let's observe\nthe directory structure created when running the python script in the prior step."}),"\n",(0,r.jsx)(l.p,{children:"Before diving in, it's import to note that MLflow is designed to abstract complexity from the user\nand this directory structure is just for illustration purposes. Furthermore, on remote deployments,\nwhich is recommended for production use cases, the tracking server will be\non object store (S3, ADLS, GCS, etc.) and the model registry will be on a relational database\n(PostgreSQL, MySQL, etc.)."}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{children:"mlruns/\n\u251c\u2500\u2500 0/                                    # Experiment ID\n\u2502   \u251c\u2500\u2500 bc6dc2a4f38d47b4b0c99d154bbc77ad/ # Run ID\n\u2502   \u2502   \u251c\u2500\u2500 metrics/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 mse                       # Example metric file for mean squared error\n\u2502   \u2502   \u251c\u2500\u2500 artifacts/                    # Artifacts associated with our run\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 sklearn-model/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 python_env.yaml\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 requirements.txt      # Python package requirements\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 MLmodel               # MLflow model file with model metadata\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 model.pkl             # Serialized model file\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 input_example.json\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 conda.yaml\n\u2502   \u2502   \u251c\u2500\u2500 tags/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.user\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.source.git.commit\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.runName\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.source.name\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.log-model.history\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 mlflow.source.type\n\u2502   \u2502   \u251c\u2500\u2500 params/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 max_depth\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 random_state\n\u2502   \u2502   \u2514\u2500\u2500 meta.yaml\n\u2502   \u2514\u2500\u2500 meta.yaml\n\u251c\u2500\u2500 models/                               # Model Registry Directory\n    \u251c\u2500\u2500 sk-learn-random-forest-reg-model/ # Registered model name\n    \u2502   \u251c\u2500\u2500 version-1/                    # Model version directory\n    \u2502   \u2502   \u2514\u2500\u2500 meta.yaml\n    \u2502   \u2514\u2500\u2500 meta.yaml\n"})}),"\n",(0,r.jsxs)(l.p,{children:["The tracking server is organized by ",(0,r.jsx)(l.em,{children:"Experiment ID"})," and ",(0,r.jsx)(l.em,{children:"Run ID"})," and is responsible for storing our\nexperiment artifacts, parameters, and metrics. The model registry, on the other hand, only stores\nmetadata with pointers to our tracking server."]}),"\n",(0,r.jsxs)(l.p,{children:["As you can see, flavors that support ",(0,r.jsx)(l.a,{href:"/ml/tracking/autolog",children:"autologging"})," provide lots of additional\ninformation out-of-the-box. Also note that even if we don't have autologging for our model of\ninterest, we can easily store this information with explicit logging calls."]}),"\n",(0,r.jsxs)(l.p,{children:["One more interesting callout is that by default you get three way to manage your model's\nenvironment: ",(0,r.jsx)(l.code,{children:"python_env.yaml"})," (python virtualenv), ",(0,r.jsx)(l.code,{children:"requirements.txt"})," (PyPi requirements), and\n",(0,r.jsx)(l.code,{children:"conda.yaml"})," (conda env)."]}),"\n",(0,r.jsx)(l.p,{children:"Ok, now that we have a very high-level understanding of what is logged, let's use the MLflow UI to\nview this information."}),"\n",(0,r.jsx)(l.h3,{id:"step-2-start-the-tracking-server",children:"Step 2: Start the Tracking Server"}),"\n",(0,r.jsxs)(l.p,{children:["In the same directory as your ",(0,r.jsx)(l.code,{children:"mlruns"})," folder, run the below command."]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-bash",children:"mlflow server --host 127.0.0.1 --port 8080\n"})}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{children:"[2024-02-05 12:43:10 -0500] [26393] [INFO] Starting gunicorn 20.1.0\n[2024-02-05 12:43:10 -0500] [26393] [INFO] Listening at: http://127.0.0.1:8080 (26393)\n[2024-02-05 12:43:10 -0500] [26393] [INFO] Using worker: sync\n[2024-02-05 12:43:10 -0500] [26414] [INFO] Booting worker with pid: 26414\n[2024-02-05 12:43:11 -0500] [26416] [INFO] Booting worker with pid: 26416\n[2024-02-05 12:43:11 -0500] [26428] [INFO] Booting worker with pid: 26428\n[2024-02-05 12:43:11 -0500] [26437] [INFO] Booting worker with pid: 26437\n"})}),"\n",(0,r.jsx)(l.h3,{id:"step-3-view-the-tracking-server",children:"Step 3: View the Tracking Server"}),"\n",(0,r.jsxs)(l.p,{children:["Assuming there are no errors, you can go to your web browser and visit ",(0,r.jsx)(l.code,{children:"http://localhost:8080"})," to\nview the MLflow UI."]}),"\n",(0,r.jsx)(l.p,{children:"First, let's leave the experiment tracking tab and visit the model registry."}),"\n",(0,r.jsx)("div",{className:"center-div",style:{width:1024,maxWidth:"100%"},children:(0,r.jsx)(l.p,{children:(0,r.jsx)(l.img,{alt:"Model information from the mlflow\nui.",src:o(5757).A+"",width:"2136",height:"1168"})})}),"\n",(0,r.jsxs)(l.p,{children:["Next, let's add tags and a model version alias to\n",(0,r.jsx)(l.a,{href:"/ml/model-registry/workflow/#deploy-and-organize-models-with-aliases-and-tags",children:"facilitate model deployment"}),".\nYou can add or edit tags and aliases by clicking on the corresponding ",(0,r.jsx)(l.code,{children:"Add"})," link or pencil icon in\nthe model version table. Let's..."]}),"\n",(0,r.jsxs)(l.ol,{children:["\n",(0,r.jsxs)(l.li,{children:["Add a model version tag with a key of ",(0,r.jsx)(l.code,{children:"problem_type"})," and value of ",(0,r.jsx)(l.code,{children:"regression"}),"."]}),"\n",(0,r.jsxs)(l.li,{children:["Add a model version alias of ",(0,r.jsx)(l.code,{children:"the_best_model_ever"}),"."]}),"\n"]}),"\n",(0,r.jsx)("div",{className:"center-div",style:{width:1024,maxWidth:"100%"},children:(0,r.jsx)(l.p,{children:(0,r.jsx)(l.img,{alt:"Model information from the mlflow\nui.",src:o(52407).A+"",width:"2620",height:"956"})})}),"\n",(0,r.jsx)(l.h2,{id:"load-a-registered-model",children:"Load a Registered Model"}),"\n",(0,r.jsx)(l.p,{children:"To perform inference on a registered model version, we need to load it into memory. There are many\nways to find our model version, but the best method differs depending on the information you have\navailable. However, in the spirit of a quickstart, the below code snippet shows the simplest way to\nload a model from the model registry via a specific model URI and perform inference."}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:'import mlflow.sklearn\nfrom sklearn.datasets import make_regression\n\nmodel_name = "sk-learn-random-forest-reg-model"\nmodel_version = "latest"\n\n# Load the model from the Model Registry\nmodel_uri = f"models:/{model_name}/{model_version}"\nmodel = mlflow.sklearn.load_model(model_uri)\n\n# Generate a new dataset for prediction and predict\nX_new, _ = make_regression(n_features=4, n_informative=2, random_state=0, shuffle=False)\ny_pred_new = model.predict(X_new)\n\nprint(y_pred_new)\n'})}),"\n",(0,r.jsxs)(l.p,{children:["Note that if you're not using sklearn, if your model flavor is supported, you should use the\nspecific model flavor load method e.g. ",(0,r.jsx)(l.code,{children:"mlflow.<flavor>.load_model()"}),". If the model flavor is\nnot supported, you should leverage ",(0,r.jsx)(i.B,{fn:"mlflow.pyfunc.load_model"}),". Throughout this tutorial\nwe leverage sklearn for demonstration purposes."]}),"\n",(0,r.jsx)(l.h3,{id:"example-0-load-via-tracking-server",children:"Example 0: Load via Tracking Server"}),"\n",(0,r.jsx)(l.p,{children:"A model URI is a unique identifier for a serialized model. Given the model artifact is stored with\nexperiments in the tracking server, you can use the below model URIs to bypass the model registry\nand load the artifact into memory."}),"\n",(0,r.jsxs)(l.ol,{children:["\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Absolute local path"}),": ",(0,r.jsx)(l.code,{children:'mlflow.sklearn.load_model("/Users/me/path/to/local/model")'})]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Relative local path"}),": ",(0,r.jsx)(l.code,{children:'mlflow.sklearn.load_model("relative/path/to/local/model")'})]}),"\n",(0,r.jsxs)(l.li,{children:[(0,r.jsx)(l.strong,{children:"Run id"}),": ",(0,r.jsx)(l.code,{children:'mlflow.sklearn.load_model(f"runs:/{mlflow_run_id}/{run_relative_path_to_model}")'})]}),"\n"]}),"\n",(0,r.jsx)(l.p,{children:"However, unless you're in the same environment that you logged the model, you typically won't have\nthe above information. Instead, you should load the model by leveraging the model's name and\nversion."}),"\n",(0,r.jsx)(l.h3,{id:"example-1-load-via-name-and-version",children:"Example 1: Load via Name and Version"}),"\n",(0,r.jsxs)(l.p,{children:["To load a model into memory via the ",(0,r.jsx)(l.code,{children:"model_name"})," and monotonically increasing ",(0,r.jsx)(l.code,{children:"model_version"}),",\nuse the below method:"]}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:'model = mlflow.sklearn.load_model(f"models:/{model_name}/{model_version}")\n'})}),"\n",(0,r.jsx)(l.p,{children:"While this method is quick and easy, the monotonically increasing model version lacks flexibility.\nOften, it's more efficient to leverage a model version alias."}),"\n",(0,r.jsx)(l.h3,{id:"example-2-load-via-model-version-alias",children:"Example 2: Load via Model Version Alias"}),"\n",(0,r.jsx)(l.p,{children:"Model version aliases are user-defined identifiers for a model version. Given they're mutable after\nmodel registration, they decouple model versions from the code that uses them."}),"\n",(0,r.jsxs)(l.p,{children:["For instance, let's say we have a model version alias called ",(0,r.jsx)(l.code,{children:"production_model"}),", corresponding to\na production model. When our team builds a better model that is ready for deployment, we don't have\nto change our serving workload code. Instead, in MLflow we reassign the ",(0,r.jsx)(l.code,{children:"production_model"})," alias\nfrom the old model version to the new one. This can be done simply in the UI. In the API, we run\n",(0,r.jsx)(l.em,{children:"client.set_registered_model_alias"})," with the same model name, alias name, and ",(0,r.jsx)(l.strong,{children:"new"})," model version\nID. It's that easy!"]}),"\n",(0,r.jsx)(l.p,{children:"In the prior page, we added a model version alias to our model, but here's a programmatic example."}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-python",children:'import mlflow.sklearn\nfrom mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Set model version alias\nmodel_name = "sk-learn-random-forest-reg-model"\nmodel_version_alias = "the_best_model_ever"\nclient.set_registered_model_alias(\n    model_name, model_version_alias, "1"\n)  # Duplicate of step in UI\n\n# Get information about the model\nmodel_info = client.get_model_version_by_alias(model_name, model_version_alias)\nmodel_tags = model_info.tags\nprint(model_tags)\n\n# Get the model version using a model URI\nmodel_uri = f"models:/{model_name}@{model_version_alias}"\nmodel = mlflow.sklearn.load_model(model_uri)\n\nprint(model)\n'})}),"\n",(0,r.jsx)(l.pre,{children:(0,r.jsx)(l.code,{className:"language-_",metastring:'title="Output"',children:"{'problem_type': 'regression'}\nRandomForestRegressor(max_depth=2, random_state=42)\n"})}),"\n",(0,r.jsxs)(l.p,{children:["Model version alias is highly dynamic and can correspond to anything that is meaningful for your\nteam. The most common example is a deployment state. For instance, let's say we have a ",(0,r.jsx)(l.code,{children:"champion"}),"\nmodel in production but are developing ",(0,r.jsx)(l.code,{children:"challenger"})," model that will hopefully out-perform our\nproduction model. You can use ",(0,r.jsx)(l.code,{children:"champion"})," and ",(0,r.jsx)(l.code,{children:"challenger"})," model version aliases to uniquely\nidentify these model versions for easy access."]}),"\n",(0,r.jsx)(l.p,{children:"That's it! You should now be comfortable..."}),"\n",(0,r.jsxs)(l.ol,{children:["\n",(0,r.jsx)(l.li,{children:"Registering a model"}),"\n",(0,r.jsx)(l.li,{children:"Finding a model and modifying the tags and model version alias via the MLflow UI"}),"\n",(0,r.jsx)(l.li,{children:"Loading the registered model for inference"}),"\n"]})]})}function c(e={}){const{wrapper:l}={...(0,t.R)(),...e.components};return l?(0,r.jsx)(l,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,l,o)=>{o.d(l,{R:()=>i,x:()=>a});var n=o(96540);const r={},t=n.createContext(r);function i(e){const l=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function a(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(t.Provider,{value:l},e.children)}},49374:(e,l,o)=>{o.d(l,{B:()=>s});o(96540);const n=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=o(86025),t=o(28774),i=o(74848);const a=e=>{const l=e.split(".");for(let o=l.length;o>0;o--){const e=l.slice(0,o).join(".");if(n[e])return e}return null};function s({fn:e,children:l}){const o=a(e);if(!o)return(0,i.jsx)(i.Fragment,{children:l});const s=(0,r.Ay)(`/${n[o]}#${e}`);return(0,i.jsx)(t.A,{to:s,target:"_blank",children:l??(0,i.jsxs)("code",{children:[e,"()"]})})}},52407:(e,l,o)=>{o.d(l,{A:()=>n});const n=o.p+"assets/images/model-alias-and-tags-0318d486b2bf16992f488de5a00ce474.png"}}]);