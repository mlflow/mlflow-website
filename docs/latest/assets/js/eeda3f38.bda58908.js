"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2402],{27774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>c,metadata:()=>l,toc:()=>h});const l=JSON.parse('{"id":"tracing/integrations/openai","title":"Tracing OpenAI","description":"OpenAI Tracing via autolog","source":"@site/docs/tracing/integrations/openai.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/openai","permalink":"/docs/latest/tracing/integrations/openai","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"OpenAI"},"sidebar":"docsSidebar","previous":{"title":"Integrations","permalink":"/docs/latest/tracing/integrations/"},"next":{"title":"LangChain","permalink":"/docs/latest/tracing/integrations/langchain"}}');var o=t(74848),a=t(28453),i=t(67756),r=(t(86294),t(61096),t(65537)),s=t(79329);const c={sidebar_position:1,sidebar_label:"OpenAI"},p="Tracing OpenAI",d={},h=[{value:"Supported APIs",id:"supported-apis",level:2},{value:"Chat Completion API",id:"chat-completion-api",level:4},{value:"Responses API",id:"responses-api",level:4},{value:"Agents SDK",id:"agents-sdk",level:4},{value:"Embedding API",id:"embedding-api",level:4},{value:"Basic Example",id:"basic-example",level:2},{value:"Streaming",id:"streaming",level:2},{value:"Async",id:"async",level:2},{value:"Function Calling",id:"function-calling",level:2},{value:"Token usage",id:"token-usage",level:2},{value:"Supported APIs:",id:"supported-apis-1",level:3},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"tracing-openai",children:"Tracing OpenAI"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"OpenAI Tracing via autolog",src:t(33801).A+"",width:"1824",height:"1080"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for OpenAI. By enabling auto tracing\nfor OpenAI by calling the ",(0,o.jsx)(i.B,{fn:"mlflow.openai.autolog"})," function, MLflow will capture traces for LLM invocation and log them to the active MLflow Experiment."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.openai.autolog()\n"})}),"\n",(0,o.jsx)(n.p,{children:"MLflow trace automatically captures the following information about OpenAI calls:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Prompts and completion responses"}),"\n",(0,o.jsx)(n.li,{children:"Latencies"}),"\n",(0,o.jsx)(n.li,{children:"Model name"}),"\n",(0,o.jsxs)(n.li,{children:["Additional metadata such as ",(0,o.jsx)(n.code,{children:"temperature"}),", ",(0,o.jsx)(n.code,{children:"max_tokens"}),", if specified."]}),"\n",(0,o.jsx)(n.li,{children:"Function calling if returned in the response"}),"\n",(0,o.jsx)(n.li,{children:"Built-in tools such as web search, file search, computer use, etc."}),"\n",(0,o.jsx)(n.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["MLflow OpenAI integration is not only about tracing. MLflow offers full tracking experience for OpenAI, including model tracking, prompt management, and evaluation. Please checkout the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/llms/openai",children:"MLflow OpenAI Flavor"})})," to learn more!"]})}),"\n",(0,o.jsx)(n.h2,{id:"supported-apis",children:"Supported APIs"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow supports automatic tracing for the following OpenAI APIs. To request support for additional APIs, please open a ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/issues",children:"feature request"})," on GitHub."]}),"\n",(0,o.jsx)(n.h4,{id:"chat-completion-api",children:"Chat Completion API"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Normal"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Function Calling"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Structured Outputs"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Streaming"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Async"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Image"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Audio"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705(>=2.21.0)"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 (>=2.15.0)"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705(>=2.21.0)"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"})]})})]}),"\n",(0,o.jsx)(n.h4,{id:"responses-api",children:"Responses API"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Normal"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Function Calling"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Structured Outputs"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Web Search"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"File Search"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Computer Use"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Reasoning"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Streaming"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Async"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Image"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"})]})})]}),"\n",(0,o.jsx)(n.p,{children:"Responses API is supported since MLflow 2.22.0."}),"\n",(0,o.jsx)(n.h4,{id:"agents-sdk",children:"Agents SDK"}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/tracing/integrations/openai-agent",children:"OpenAI Agents SDK Tracing"})," for more details."]}),"\n",(0,o.jsx)(n.h4,{id:"embedding-api",children:"Embedding API"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Normal"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Async"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]})})]}),"\n",(0,o.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(s.A,{value:"chat",label:"Chat Completion API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\n\n# Enable auto-tracing for OpenAI\nmlflow.openai.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("OpenAI")\n\nopenai_client = openai.OpenAI()\n\nmessages = [\n    {\n        "role": "user",\n        "content": "What is the capital of France?",\n    }\n]\n\nresponse = openai_client.chat.completions.create(\n    model="gpt-4o-mini",\n    messages=messages,\n    temperature=0.1,\n    max_tokens=100,\n)\n'})})}),(0,o.jsx)(s.A,{value:"responses",label:"Responses API",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\n\n# Enable auto-tracing for OpenAI\nmlflow.openai.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("OpenAI")\n\nopenai_client = openai.OpenAI()\n\nresponse = client.responses.create(\n    model="gpt-4o-mini", input="What is the capital of France?"\n)\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"streaming",children:"Streaming"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow Tracing supports streaming API of the OpenAI SDK. With the same set up of auto tracing, MLflow automatically traces the streaming response and render the concatenated output in the span UI. The actual chunks in the response stream can be found in the ",(0,o.jsx)(n.code,{children:"Event"})," tab as well."]}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(s.A,{value:"chat",label:"Chat Completion API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\n\n# Enable trace logging\nmlflow.openai.autolog()\n\nclient = openai.OpenAI()\n\nstream = client.chat.completions.create(\n    model="gpt-4o-mini",\n    messages=[\n        {"role": "user", "content": "How fast would a glass of water freeze on Titan?"}\n    ],\n    stream=True,  # Enable streaming response\n)\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or "", end="")\n'})})}),(0,o.jsx)(s.A,{value:"responses",label:"Responses API",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\n\n# Enable trace logging\nmlflow.openai.autolog()\n\nclient = openai.OpenAI()\n\nstream = client.responses.create(\n    model="gpt-4o-mini",\n    input="How fast would a glass of water freeze on Titan?",\n    stream=True,  # Enable streaming response\n)\nfor event in stream:\n    print(event)\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"async",children:"Async"}),"\n",(0,o.jsx)(n.p,{children:"MLflow Tracing supports asynchronous API of the OpenAI SDK since MLflow 2.21.0. The usage is same as the synchronous API."}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(s.A,{value:"chat",label:"Chat Completion API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\n\n# Enable trace logging\nmlflow.openai.autolog()\n\nclient = openai.AsyncOpenAI()\n\nresponse = await client.chat.completions.create(\n    model="gpt-4o-mini",\n    messages=[\n        {"role": "user", "content": "How fast would a glass of water freeze on Titan?"}\n    ],\n    # Async streaming is also supported\n    # stream=True\n)\n'})})}),(0,o.jsx)(s.A,{value:"responses",label:"Responses API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\n\n# Enable trace logging\nmlflow.openai.autolog()\n\nclient = openai.AsyncOpenAI()\n\nresponse = await client.responses.create(\n    model="gpt-4o-mini", input="How fast would a glass of water freeze on Titan?"\n)\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"function-calling",children:"Function Calling"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow Tracing automatically captures function calling response from OpenAI models. The function instruction in the response will be highlighted in the trace UI. Moreover, you can annotate the tool function with the ",(0,o.jsx)(n.code,{children:"@mlflow.trace"})," decorator to create a span for the tool execution."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"OpenAI Function Calling Trace",src:t(56165).A+"",width:"2768",height:"1422"})}),"\n",(0,o.jsx)(n.p,{children:"The following example implements a simple function calling agent using OpenAI Function Calling and MLflow Tracing for OpenAI."}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsx)(s.A,{value:"chat",label:"Chat Completion API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nfrom openai import OpenAI\nimport mlflow\nfrom mlflow.entities import SpanType\n\nclient = OpenAI()\n\n\n# Define the tool function. Decorate it with `@mlflow.trace` to create a span for its execution.\n@mlflow.trace(span_type=SpanType.TOOL)\ndef get_weather(city: str) -> str:\n    if city == "Tokyo":\n        return "sunny"\n    elif city == "Paris":\n        return "rainy"\n    return "unknown"\n\n\ntools = [\n    {\n        "type": "function",\n        "function": {\n            "name": "get_weather",\n            "parameters": {\n                "type": "object",\n                "properties": {"city": {"type": "string"}},\n            },\n        },\n    }\n]\n\n_tool_functions = {"get_weather": get_weather}\n\n\n# Define a simple tool calling agent\n@mlflow.trace(span_type=SpanType.AGENT)\ndef run_tool_agent(question: str):\n    messages = [{"role": "user", "content": question}]\n\n    # Invoke the model with the given question and available tools\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=messages,\n        tools=tools,\n    )\n    ai_msg = response.choices[0].message\n    messages.append(ai_msg)\n\n    # If the model request tool call(s), invoke the function with the specified arguments\n    if tool_calls := ai_msg.tool_calls:\n        for tool_call in tool_calls:\n            function_name = tool_call.function.name\n            if tool_func := _tool_functions.get(function_name):\n                args = json.loads(tool_call.function.arguments)\n                tool_result = tool_func(**args)\n            else:\n                raise RuntimeError("An invalid tool is returned from the assistant!")\n\n            messages.append(\n                {\n                    "role": "tool",\n                    "tool_call_id": tool_call.id,\n                    "content": tool_result,\n                }\n            )\n\n        # Sent the tool results to the model and get a new response\n        response = client.chat.completions.create(\n            model="gpt-4o-mini", messages=messages\n        )\n\n    return response.choices[0].message.content\n\n\n# Run the tool calling agent\nquestion = "What\'s the weather like in Paris today?"\nanswer = run_tool_agent(question)\n'})})}),(0,o.jsx)(s.A,{value:"responses",label:"Responses API",default:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nimport requests\nfrom openai import OpenAI\nimport mlflow\nfrom mlflow.entities import SpanType\n\nclient = OpenAI()\n\n\n# Define the tool function. Decorate it with `@mlflow.trace` to create a span for its execution.\n@mlflow.trace(span_type=SpanType.TOOL)\ndef get_weather(latitude, longitude):\n    response = requests.get(\n        f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m"\n    )\n    data = response.json()\n    return data["current"]["temperature_2m"]\n\n\ntools = [\n    {\n        "type": "function",\n        "name": "get_weather",\n        "description": "Get current temperature for provided coordinates in celsius.",\n        "parameters": {\n            "type": "object",\n            "properties": {\n                "latitude": {"type": "number"},\n                "longitude": {"type": "number"},\n            },\n            "required": ["latitude", "longitude"],\n            "additionalProperties": False,\n        },\n        "strict": True,\n    }\n]\n\n\n# Define a simple tool calling agent\n@mlflow.trace(span_type=SpanType.AGENT)\ndef run_tool_agent(question: str):\n    messages = [{"role": "user", "content": question}]\n\n    # Invoke the model with the given question and available tools\n    response = client.responses.create(\n        model="gpt-4o-mini",\n        input=question,\n        tools=tools,\n    )\n\n    # Invoke the function with the specified arguments\n    tool_call = response.output[0]\n    args = json.loads(tool_call.arguments)\n    result = get_weather(args["latitude"], args["longitude"])\n\n    # Sent the tool results to the model and get a new response\n    messages.append(tool_call)\n    messages.append(\n        {\n            "type": "function_call_output",\n            "call_id": tool_call.call_id,\n            "output": str(result),\n        }\n    )\n\n    response = client.responses.create(\n        model="gpt-4o-mini",\n        input=input_messages,\n        tools=tools,\n    )\n\n    return response.output[0].content[0].text\n\n\n# Run the tool calling agent\nquestion = "What\'s the weather like in Paris today?"\nanswer = run_tool_agent(question)\n'})})})]}),"\n",(0,o.jsx)(n.h2,{id:"token-usage",children:"Token usage"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow >= 3.1.0 supports token usage tracking for OpenAI. The token usage for each LLM call will be logged in the ",(0,o.jsx)(n.code,{children:"mlflow.chat.tokenUsage"})," attribute. The total token usage throughout the trace will be\navailable in the ",(0,o.jsx)(n.code,{children:"token_usage"})," field of the trace info object."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nimport mlflow\n\nmlflow.openai.autolog()\n\n# Run the tool calling agent defined in the previous section\nquestion = "What\'s the weather like in Paris today?"\nanswer = run_tool_agent(question)\n\n# Get the trace object just created\nlast_trace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id=last_trace_id)\n\n# Print the token usage\ntotal_usage = trace.info.token_usage\nprint("== Total token usage: ==")\nprint(f"  Input tokens: {total_usage[\'input_tokens\']}")\nprint(f"  Output tokens: {total_usage[\'output_tokens\']}")\nprint(f"  Total tokens: {total_usage[\'total_tokens\']}")\n\n# Print the token usage for each LLM call\nprint("\\n== Detailed usage for each LLM call: ==")\nfor span in trace.data.spans:\n    if usage := span.get_attribute("mlflow.chat.tokenUsage"):\n        print(f"{span.name}:")\n        print(f"  Input tokens: {usage[\'input_tokens\']}")\n        print(f"  Output tokens: {usage[\'output_tokens\']}")\n        print(f"  Total tokens: {usage[\'total_tokens\']}")\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"== Total token usage: ==\n  Input tokens: 84\n  Output tokens: 22\n  Total tokens: 106\n\n== Detailed usage for each LLM call: ==\nCompletions_1:\n  Input tokens: 45\n  Output tokens: 14\n  Total tokens: 59\nCompletions_2:\n  Input tokens: 39\n  Output tokens: 8\n  Total tokens: 47\n"})}),"\n",(0,o.jsx)(n.h3,{id:"supported-apis-1",children:"Supported APIs:"}),"\n",(0,o.jsx)(n.p,{children:"Token usage tracking is supported for the following OpenAI APIs:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Mode"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Chat Completion"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Responses"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Normal"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Streaming"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705(*1)"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Async"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["(*1) By default, OpenAI does not return token usage information for Chat Completion API when streaming. To track token usage, you need to specify ",(0,o.jsx)(n.code,{children:'stream_options={"include_usage": True}'})," in the request (",(0,o.jsx)(n.a,{href:"https://platform.openai.com/docs/api-reference/chat/create",children:"OpenAI API Reference"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,o.jsxs)(n.p,{children:["Auto tracing for OpenAI can be disabled globally by calling ",(0,o.jsx)(n.code,{children:"mlflow.openai.autolog(disable=True)"})," or ",(0,o.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},33801:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/openai-tracing-bd290b113be3e26b0841cd6a88a69462.gif"},56165:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/openai-function-calling-02bfa62e2ff7a7cc466e24698a706232.png"},67756:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const l=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(29030),a=t(56289),i=t(74848);const r=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(l[e])return e}return null};function s(e){let{fn:n,children:t}=e;const s=r(n);if(!s)return(0,i.jsx)(i.Fragment,{children:t});const c=(0,o.Ay)(`/${l[s]}#${n}`);return(0,i.jsx)(a.A,{to:c,target:"_blank",children:t??(0,i.jsxs)("code",{children:[n,"()"]})})}},86294:(e,n,t)=>{t.d(n,{Zp:()=>s,AC:()=>r,WO:()=>p,tf:()=>h,_C:()=>c,$3:()=>d,jK:()=>m});var l=t(34164);const o={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var a=t(56289),i=t(74848);const r=e=>{let{children:n,isSmall:t,cols:a}=e;return(0,i.jsx)("div",{className:(0,l.A)(o.CardGroup,t?o.AutofillColumns:a?o[`Cols${a}`]:o.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:t=""}=e;return t?(0,i.jsx)(a.A,{className:(0,l.A)(o.Link,o.Card,o.CardBordered),to:t,children:n}):(0,i.jsx)("div",{className:(0,l.A)(o.Card,o.CardBordered),children:n})},c=e=>{let{headerText:n,link:t,text:a}=e;return(0,i.jsx)(s,{link:t,children:(0,i.jsxs)("span",{children:[(0,i.jsx)("div",{className:(0,l.A)(o.CardTitle,o.BoxRoot,o.PaddingBottom4),style:{pointerEvents:"none"},children:(0,i.jsx)("div",{className:(0,l.A)(o.BoxRoot,o.FlexFlex,o.FlexAlignItemsCenter,o.FlexDirectionRow,o.FlexJustifyContentFlexStart,o.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,i.jsx)("div",{className:(0,l.A)(o.BoxRoot,o.BoxHideIfEmpty,o.MarginTop4,o.MarginLeft4),style:{pointerEvents:"auto"},children:(0,i.jsx)("span",{className:"",children:n})})})}),(0,i.jsx)("span",{className:(0,l.A)(o.TextColor,o.CardBody),children:(0,i.jsx)("p",{children:a})})]})})},p=e=>{let{description:n,children:t,link:l}=e;return(0,i.jsx)(s,{link:l,children:(0,i.jsxs)("div",{className:o.LogoCardContent,children:[(0,i.jsx)("div",{className:o.LogoCardImage,children:t}),(0,i.jsx)("p",{className:o.TextColor,children:n})]})})},d=e=>{let{children:n,link:t}=e;return(0,i.jsx)(s,{link:t,children:(0,i.jsx)("div",{className:o.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,l.A)("max-height-img-container",o.SmallLogoCardImage),children:n})})})},h=e=>{let{children:n,description:t,name:l,releaseVersion:r,learnMoreLink:c=""}=e;return(0,i.jsx)(s,{children:(0,i.jsxs)("div",{className:o.NewFeatureCardWrapper,children:[(0,i.jsxs)("div",{className:o.NewFeatureCardContent,children:[(0,i.jsxs)("div",{className:o.NewFeatureCardHeading,children:[l,(0,i.jsx)("br",{}),(0,i.jsx)("hr",{className:o.NewFeatureCardHeadingSeparator})]}),(0,i.jsx)("div",{className:o.LogoCardImage,children:n}),(0,i.jsx)("br",{}),(0,i.jsx)("p",{children:t}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("div",{className:o.NewFeatureCardTags,children:[(0,i.jsx)("div",{children:c&&(0,i.jsx)(a.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,i.jsxs)(a.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${r}`,children:["released in ",r]})]})]})})},m=e=>{let{title:n,description:t,link:a=""}=e;return(0,i.jsx)(s,{link:a,children:(0,i.jsxs)("div",{className:o.TitleCardContent,children:[(0,i.jsx)("div",{className:(0,l.A)(o.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:n}),(0,i.jsx)("hr",{className:(0,l.A)(o.TitleCardSeparator),style:{margin:"12px 0"}}),(0,i.jsx)("p",{className:(0,l.A)(o.TextColor),children:t})]})})}}}]);