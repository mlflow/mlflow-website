"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[970],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},36729:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>x,frontMatter:()=>h,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"governance/ai-gateway/index","title":"MLflow AI Gateway","description":"MLflow AI Gateway does not support Windows.","source":"@site/docs/genai/governance/ai-gateway/index.mdx","sourceDirName":"governance/ai-gateway","slug":"/governance/ai-gateway/","permalink":"/docs/latest/genai/governance/ai-gateway/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Custom Apps","permalink":"/docs/latest/genai/serving/custom-apps"},"next":{"title":"MLflow AI Gateway","permalink":"/docs/latest/genai/governance/ai-gateway/"}}');var r=i(74848),s=i(28453),o=i(49374),l=i(28774),a=i(86025),d=i(72839);const h={},c="MLflow AI Gateway",p={},m=[{value:"Tutorials and Guides",id:"tutorials-and-guides",level:2},{value:"Quickstart",id:"deployments-quickstart",level:2},{value:"Step 1: Install the MLflow AI Gateway",id:"step-1-install-the-mlflow-ai-gateway",level:3},{value:"Installing from PyPI",id:"installing-from-pypi",level:4},{value:"Step 2: Set the OpenAI API Key(s) for each provider",id:"step-2-set-the-openai-api-keys-for-each-provider",level:3},{value:"Step 3: Create a gateway server Configuration File",id:"step-3-create-a-gateway-server-configuration-file",level:3},{value:"Step 4: Start the gateway server",id:"step-4-start-the-gateway-server",level:3},{value:"Step 5: Access the Interactive API Documentation",id:"step-5-access-the-interactive-api-documentation",level:3},{value:"Step 6: Send Requests Using the Client API",id:"step-6-send-requests-using-the-client-api",level:3},{value:"Step 7: Send Requests to Endpoints via REST API",id:"step-7-send-requests-to-endpoints-via-rest-api",level:3},{value:"Step 8: Compare Provider Models",id:"step-8-compare-provider-models",level:3},{value:"Step 9: Use gateway server endpoints for model development",id:"step-9-use-gateway-server-endpoints-for-model-development",level:3},{value:"Concepts",id:"deployments-concepts",level:2},{value:"Providers",id:"deployments-providers",level:3},{value:"Supported Providers",id:"supported-providers",level:4},{value:"Endpoints",id:"deployments-endpoints",level:2},{value:"Models",id:"deployments-models",level:2},{value:"Configuring the gateway server",id:"deployments-configuration",level:2},{value:"AI Gateway server Configuration",id:"ai-gateway-server-configuration",level:3},{value:"AI Gateway server Configuration Details",id:"deployments-configuration-details",level:4},{value:"General Configuration Parameters",id:"general-configuration-parameters",level:5},{value:"Provider-Specific Configuration Parameters",id:"provider-specific-configuration-parameters",level:5},{value:"OpenAI",id:"openai",level:6},{value:"MosaicML",id:"mosaicml",level:6},{value:"Cohere",id:"cohere",level:6},{value:"HuggingFace Text Generation Inference",id:"huggingface-text-generation-inference",level:6},{value:"PaLM",id:"palm",level:6},{value:"AI21 Labs",id:"ai21-labs",level:6},{value:"Anthropic",id:"anthropic",level:6},{value:"Amazon Bedrock",id:"amazon-bedrock",level:6},{value:"MLflow Model Serving",id:"mlflow-model-serving",level:6},{value:"Azure OpenAI",id:"azure-openai",level:6},{value:"Mistral",id:"mistral",level:6},{value:"TogetherAI",id:"togetherai",level:6},{value:"Gemini",id:"gemini",level:6},{value:"Querying the AI Gateway server",id:"deployments-query",level:2},{value:"Standard Query Parameters",id:"standard-deployments-parameters",level:3},{value:"Completions",id:"completions",level:4},{value:"Chat",id:"chat",level:4},{value:"Messages",id:"deployments-chat-message-structure",level:5},{value:"Embeddings",id:"embeddings",level:4},{value:"Additional Query Parameters",id:"additional-query-parameters",level:3},{value:"Streaming",id:"streaming",level:4},{value:"Chat",id:"chat-1",level:5},{value:"Completions",id:"completions-1",level:5},{value:"FastAPI Documentation (&quot;/docs&quot;)",id:"fastapi-documentation-docs",level:3},{value:"MLflow Python Client APIs",id:"mlflow-python-client-apis",level:3},{value:"Client API",id:"deployments-client-api",level:4},{value:"LangChain Integration",id:"langchain-integration",level:4},{value:"MLflow Models",id:"deployments-mlflow-models",level:4},{value:"Using the gateway server to Query a served MLflow Model",id:"using-the-gateway-server-to-query-a-served-mlflow-model",level:5},{value:"Using an MLflow Model to Query the gateway server",id:"using-an-mlflow-model-to-query-the-gateway-server",level:5},{value:"REST API",id:"deployments-rest-api",level:4},{value:"Plugin LLM Provider",id:"deployments-plugin",level:2},{value:"Example",id:"example",level:3},{value:"MLflow AI Gateway API Documentation",id:"mlflow-ai-gateway-api-documentation",level:2},{value:"OpenAI Compatibility",id:"openai-compatibility",level:2},{value:"Unity Catalog Integration",id:"unity-catalog-integration",level:2},{value:"gateway server Security Considerations",id:"deployments-security",level:2}];function f(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mlflow-ai-gateway",children:"MLflow AI Gateway"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"MLflow AI Gateway does not support Windows."})}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway is a powerful tool designed to streamline the usage and management of\nvarious large language model (LLM) providers, such as OpenAI and Anthropic, within an organization.\nIt offers a high-level interface that simplifies the interaction with these services by providing\na unified endpoint to handle specific LLM related requests."}),"\n",(0,r.jsx)(n.p,{children:"A major advantage of using the MLflow AI Gateway is its centralized management of API keys.\nBy storing these keys in one secure location, organizations can significantly enhance their\nsecurity posture by minimizing the exposure of sensitive API keys throughout the system. It also\nhelps to prevent exposing these keys within code or requiring end-users to manage keys safely."}),"\n",(0,r.jsx)(n.p,{children:"The gateway server is designed to be flexible and adaptable, capable of easily defining and managing endpoints by updating the\nconfiguration file. This enables the easy incorporation\nof new LLM providers or provider LLM types into the system without necessitating changes to\napplications that interface with the gateway server. This level of adaptability makes the MLflow AI Gateway\nService an invaluable tool in environments that require agility and quick response to changes."}),"\n",(0,r.jsx)(n.p,{children:"This simplification and centralization of language model interactions, coupled with the added\nlayer of security for API key management, make the MLflow AI Gateway an ideal choice for\norganizations that use LLMs on a regular basis."}),"\n",(0,r.jsx)(n.h2,{id:"tutorials-and-guides",children:"Tutorials and Guides"}),"\n",(0,r.jsx)(n.p,{children:"If you're interested in diving right in to a step by step guide that will get you up and running with the MLflow AI Gateway\nas fast as possible, the guides below will be your best first stop."}),"\n",(0,r.jsx)(l.A,{className:"button button--primary",to:"/genai/governance/ai-gateway/guides",children:(0,r.jsx)("span",{children:"View the gateway server Getting Started Guide"})}),"\n",(0,r.jsx)(n.h2,{id:"deployments-quickstart",children:"Quickstart"}),"\n",(0,r.jsx)(n.p,{children:"The following guide will assist you in getting up and running, using a 3-endpoint configuration to\nOpenAI services for chat, completions, and embeddings."}),"\n",(0,r.jsx)(n.h3,{id:"step-1-install-the-mlflow-ai-gateway",children:"Step 1: Install the MLflow AI Gateway"}),"\n",(0,r.jsx)(n.p,{children:"First, you need to install the MLflow AI Gateway on your machine. You can do this using pip from PyPI or from the MLflow repository."}),"\n",(0,r.jsx)(n.h4,{id:"installing-from-pypi",children:"Installing from PyPI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"pip install 'mlflow[genai]'\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-set-the-openai-api-keys-for-each-provider",children:"Step 2: Set the OpenAI API Key(s) for each provider"}),"\n",(0,r.jsx)(n.p,{children:"The gateway server needs to communicate with the OpenAI API. To do this, it requires an API key.\nYou can create an API key from the OpenAI dashboard."}),"\n",(0,r.jsx)(n.p,{children:"For this example, we're only connecting with OpenAI. If there are additional providers within the\nconfiguration, these keys will need to be set as well."}),"\n",(0,r.jsx)(n.p,{children:"Once you have the key, you can set it as an environment variable in your terminal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"export OPENAI_API_KEY=your_api_key_here\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This sets a temporary session-based environment variable. For production use cases, it is advisable\nto store this key in the ",(0,r.jsx)(n.code,{children:".bashrc"})," or ",(0,r.jsx)(n.code,{children:".zshrc"})," files so that the key doesn't have to be re-entered upon\nsystem restart."]}),"\n",(0,r.jsx)(n.h3,{id:"step-3-create-a-gateway-server-configuration-file",children:"Step 3: Create a gateway server Configuration File"}),"\n",(0,r.jsx)(n.p,{children:"Next, you need to create a gateway server configuration file. This is a YAML file where you specify the\nendpoints that the MLflow AI Gateway should expose. Let's create a file with three endpoints using OpenAI as a provider: completions, chat, and embeddings."}),"\n",(0,r.jsxs)(n.p,{children:["For details about the configuration file's parameters (including parameters for other providers besides OpenAI), see the ",(0,r.jsx)(n.a,{href:"#deployments-configuration-details",children:"AI Gateway server Configuration Details"})," section below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: completions\n    endpoint_type: llm/v1/completions\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n    limit:\n      renewal_period: minute\n      calls: 10\n\n  - name: chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: embeddings\n    endpoint_type: llm/v1/embeddings\n    model:\n      provider: openai\n      name: text-embedding-ada-002\n      config:\n        openai_api_key: $OPENAI_API_KEY\n"})}),"\n",(0,r.jsx)(n.p,{children:"Save this file to a location on the system that is going to be running the MLflow AI Gateway."}),"\n",(0,r.jsx)(n.h3,{id:"step-4-start-the-gateway-server",children:"Step 4: Start the gateway server"}),"\n",(0,r.jsx)(n.p,{children:"You're now ready to start the gateway server!"}),"\n",(0,r.jsxs)(n.p,{children:["Use the MLflow AI Gateway ",(0,r.jsx)(n.code,{children:"start"})," command and specify the path to your configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"mlflow gateway start --config-path config.yaml --port {port} --host {host} --workers {worker count}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The configuration file can also be set using the ",(0,r.jsx)(n.code,{children:"MLFLOW_DEPLOYMENTS_CONFIG"})," environment variable:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export MLFLOW_DEPLOYMENTS_CONFIG=/path/to/config.yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you do not specify the host, a localhost address will be used."}),"\n",(0,r.jsx)(n.p,{children:"If you do not specify the port, port 5000 will be used."}),"\n",(0,r.jsx)(n.p,{children:"The worker count for gunicorn defaults to 2 workers."}),"\n",(0,r.jsx)(n.h3,{id:"step-5-access-the-interactive-api-documentation",children:"Step 5: Access the Interactive API Documentation"}),"\n",(0,r.jsxs)(n.p,{children:["The MLflow AI Gateway provides an interactive API documentation endpoint that you can use to explore\nand test the exposed endpoints. Navigate to ",(0,r.jsx)(n.code,{children:"http://{host}:{port}/"})," (or ",(0,r.jsx)(n.code,{children:"http://{host}:{port}/docs"}),") in your browser to access it."]}),"\n",(0,r.jsx)(n.p,{children:'The docs endpoint allow for direct interaction with the endpoints and permits submitting actual requests to the\nprovider services by click on the "try it now" option within the endpoint definition entry.'}),"\n",(0,r.jsx)(n.h3,{id:"step-6-send-requests-using-the-client-api",children:"Step 6: Send Requests Using the Client API"}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"#deployments-client-api",children:"Client API"})," section for further information."]}),"\n",(0,r.jsx)(n.h3,{id:"step-7-send-requests-to-endpoints-via-rest-api",children:"Step 7: Send Requests to Endpoints via REST API"}),"\n",(0,r.jsxs)(n.p,{children:["You can now send requests to the exposed endpoints.\nSee the ",(0,r.jsx)(n.a,{href:"#deployments-rest-api",children:"REST examples"})," for guidance on request formatting."]}),"\n",(0,r.jsx)(n.h3,{id:"step-8-compare-provider-models",children:"Step 8: Compare Provider Models"}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of adding a new model from a provider to determine which model instance is better for a given use case."}),"\n",(0,r.jsxs)(n.p,{children:["Firstly, update the ",(0,r.jsx)(n.a,{href:"#deployments-configuration",children:"MLflow AI Gateway config"})," YAML file with the additional endpoint definition to test:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: completions\n    endpoint_type: llm/v1/completions\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n  - name: completions-gpt4\n    endpoint_type: llm/v1/completions\n    model:\n      provider: openai\n      name: gpt-4\n      config:\n        openai_api_key: $OPENAI_API_KEY\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This updated configuration adds a new completions endpoint ",(0,r.jsx)(n.code,{children:"completions-gpt4"})," while still preserving the original ",(0,r.jsx)(n.code,{children:"completions"}),"\nendpoint that was configured with the ",(0,r.jsx)(n.code,{children:"gpt-4o-mini"})," model."]}),"\n",(0,r.jsx)(n.p,{children:"Once the configuration file is updated, simply save your changes. The gateway server will automatically create the new endpoint with zero downtime."}),"\n",(0,r.jsx)(n.p,{children:"If you no longer need an endpoint, you can delete it from the configuration YAML and save your changes. The gateway server will automatically remove the endpoint."}),"\n",(0,r.jsx)(n.h3,{id:"step-9-use-gateway-server-endpoints-for-model-development",children:"Step 9: Use gateway server endpoints for model development"}),"\n",(0,r.jsxs)(n.p,{children:["Now that you have created several gateway server endpoints, you can create MLflow Models that query these\nendpoints to build application-specific logic using techniques like prompt engineering. For more\ninformation, see ",(0,r.jsx)(n.a,{href:"#deployments-mlflow-models",children:"gateway server and MLflow Models"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"deployments-concepts",children:"Concepts"}),"\n",(0,r.jsx)(n.p,{children:"There are several concepts that are referred to within the MLflow AI Gateway APIs, the configuration definitions, examples, and documentation.\nBecoming familiar with these terms will help to simplify both configuring new endpoints and using the MLflow AI Gateway APIs."}),"\n",(0,r.jsx)(n.h3,{id:"deployments-providers",children:"Providers"}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway is designed to support a variety of model providers.\nA provider represents the source of the machine learning models, such as OpenAI, Anthropic, and so on.\nEach provider has its specific characteristics and configurations that are encapsulated within the model part of an endpoint in the MLflow AI Gateway."}),"\n",(0,r.jsx)(n.h4,{id:"supported-providers",children:"Supported Providers"}),"\n",(0,r.jsxs)(n.p,{children:["The table below presents supported corresponding endpoint type for each LLM provider within the MLflow AI Gateway.\nNote that \u2705 mark does not mean all models from the provider are compatible with the endpoint types. For example, OpenAI provider supports all three endpoint types, but the model ",(0,r.jsx)(n.code,{children:"gpt-4"})," is only compatible with the ",(0,r.jsx)(n.code,{children:"llm/v1/chat"})," endpoint types."]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Provider"}),(0,r.jsx)("th",{children:"llm/v1/completions"}),(0,r.jsx)("th",{children:"llm/v1/chat"}),(0,r.jsx)("th",{children:"llm/v1/embeddings"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"OpenAI \xa7"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Azure OpenAI"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"MosaicML"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Anthropic"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u274c"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Cohere"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"PaLM"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"MLflow"}),(0,r.jsx)("td",{children:"\u2705*"}),(0,r.jsx)("td",{children:"\u2705*"}),(0,r.jsx)("td",{children:"\u2705**"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"HuggingFace TGI"}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u274c"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"AI21 Labs"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u274c"}),(0,r.jsx)("td",{children:"\u274c"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Amazon Bedrock"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u274c"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Mistral"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"TogetherAI"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"}),(0,r.jsx)("td",{children:"\u2705"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Gemini"}),(0,r.jsx)("td",{children:"\u2705*"}),(0,r.jsx)("td",{children:"\u2705*"}),(0,r.jsx)("td",{children:"\u2705**"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["\xa7 For full compatibility references for ",(0,r.jsx)(n.code,{children:"OpenAI"}),", see the ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/docs/models/model-endpoint-compatibility",children:"OpenAI Model Compatibility Matrix"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Within each model block in the configuration file, the provider field is used to specify the name\nof the provider for that model. This is a string value that needs to correspond to a provider the MLflow AI Gateway supports."}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"*"})," MLflow Model Serving will only work for chat or completions if the output return is in an endpoint-compatible format. The\nresponse must conform to either an output of ",(0,r.jsx)(n.code,{children:'{"predictions": str}'})," or ",(0,r.jsx)(n.code,{children:'{"predictions": {"candidates": str}}'}),". Any complex return type from a model that\ndoes not conform to these structures will raise an exception at query time."]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"**"})," Embeddings support is only available for models whose response signatures conform to the structured format of ",(0,r.jsx)(n.code,{children:'{"predictions": List[float]}'}),"\nor ",(0,r.jsx)(n.code,{children:'{"predictions": List[List[float]]}'}),". Any other return type will raise an exception at query time. ",(0,r.jsx)(n.code,{children:"FeatureExtractionPipeline"})," in ",(0,r.jsx)(n.code,{children:"transformers"})," and\nmodels using the ",(0,r.jsx)(n.code,{children:"sentence_transformers"})," flavor will return the correct data structures for the embeddings endpoint."]})]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a provider configuration within an endpoint:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4\n      config:\n        openai_api_key: $OPENAI_API_KEY\n    limit:\n      renewal_period: minute\n      calls: 10\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above configuration, ",(0,r.jsx)(n.code,{children:"openai"})," is the ",(0,r.jsx)(n.em,{children:"provider"})," for the model."]}),"\n",(0,r.jsx)(n.p,{children:"As of now, the MLflow AI Gateway supports the following providers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"mosaicml"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://docs.mosaicml.com/en/latest/",children:"MosaicML"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"openai"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/",children:"OpenAI"})," and the ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-gb/azure/cognitive-services/openai/",children:"Azure"})," integrations for Azure OpenAI and Azure OpenAI with AAD."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"anthropic"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://docs.anthropic.com/claude/docs",children:"Anthropic"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"cohere"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://docs.cohere.com/docs",children:"Cohere"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"palm"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://developers.generativeai.google/api/rest/generativelanguage/models/",children:"PaLM"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"huggingface text generation inference"}),": This is used for models deployed using ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/text-generation-inference/index",children:"Huggingface Text Generation Inference"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ai21labs"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://studio.ai21.com/foundation-models",children:"AI21 Labs"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"bedrock"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://aws.amazon.com/bedrock/",children:"Amazon Bedrock"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"mistral"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://docs.mistral.ai/",children:"Mistral"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"togetherai"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://docs.together.ai/docs/",children:"TogetherAI"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gemini"}),": This is used for models offered by ",(0,r.jsx)(n.a,{href:"https://ai.google.dev/api/models#rest-resource:-models",children:"Gemini"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"More providers are being added continually. Check the latest version of the MLflow AI Gateway Docs for the\nmost up-to-date list of supported providers."}),"\n",(0,r.jsxs)(n.p,{children:["If you would like to use a LLM model that is not offered by the above providers, or if you\nwould like to integrate a private LLM model, you can create a ",(0,r.jsx)(n.a,{href:"#deployments-plugin",children:"provider plugin"}),"\nto integrate with the MLflow AI Gateway."]}),"\n",(0,r.jsx)(n.h2,{id:"deployments-endpoints",children:"Endpoints"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Endpoints"})," are central to how the MLflow AI Gateway functions. Each endpoint acts as a proxy endpoint for the\nuser, forwarding requests to the underlying ",(0,r.jsx)(n.a,{href:"#deployments-models",children:"Models"})," and ",(0,r.jsx)(n.a,{href:"#deployments-providers",children:"providers"})," specified in the configuration file."]}),"\n",(0,r.jsx)(n.p,{children:"an endpoint in the MLflow AI Gateway consists of the following fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"}),": This is the unique identifier for the endpoint. This will be part of the URL when making API calls via the MLflow AI Gateway."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"type"}),": The type of the endpoint corresponds to the type of language model interaction you desire. For instance, ",(0,r.jsx)(n.code,{children:"llm/v1/completions"})," for text completion operations, ",(0,r.jsx)(n.code,{children:"llm/v1/embeddings"})," for text embeddings, and ",(0,r.jsx)(n.code,{children:"llm/v1/chat"})," for chat operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model"}),": Defines the model to which this endpoint will forward requests. The model contains the following details:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"provider"}),": Specifies the name of the ",(0,r.jsx)(n.a,{href:"#deployments-providers",children:"provider"})," for this model. For example, ",(0,r.jsx)(n.code,{children:"openai"})," for OpenAI's ",(0,r.jsx)(n.code,{children:"GPT-4o"})," models."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"}),": The name of the model to use. For example, ",(0,r.jsx)(n.code,{children:"gpt-4o-mini"})," for OpenAI's ",(0,r.jsx)(n.code,{children:"GPT-4o-Mini"})," model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config"}),": Contains any additional configuration details required for the model. This includes specifying the API base URL and the API key."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"limit"}),": Specify the rate limit setting this endpoint will follow. The limit field contains the following fields:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"renewal_period"}),": The time unit of the rate limit, one of [second|minute|hour|day|month|year]."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"calls"}),": The number of calls this endpoint will accept within the specified time unit."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of an endpoint configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: completions\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n    limit:\n      renewal_period: minute\n      calls: 10\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the example above, a request sent to the completions endpoint would be forwarded to the\n",(0,r.jsx)(n.code,{children:"gpt-4o-mini"})," model provided by ",(0,r.jsx)(n.code,{children:"openai"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The endpoints in the configuration file can be updated at any time, and the MLflow AI Gateway will\nautomatically update its available endpoints without requiring a restart. This feature provides you\nwith the flexibility to add, remove, or modify endpoints as your needs change. It enables 'hot-swapping'\nof endpoints, providing a seamless experience for any applications or services that interact with the MLflow AI Gateway."}),"\n",(0,r.jsxs)(n.p,{children:["When defining endpoints in the configuration file, ensure that each name is unique to prevent conflicts.\nDuplicate endpoint names will raise an ",(0,r.jsx)(n.code,{children:"MlflowException"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"deployments-models",children:"Models"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"model"})," section within an ",(0,r.jsx)(n.code,{children:"endpoint"})," specifies which model to use for generating responses.\nThis configuration block needs to contain a ",(0,r.jsx)(n.code,{children:"name"})," field which is used to specify the exact model instance to be used.\nAdditionally, a ",(0,r.jsx)(n.a,{href:"#deployments-providers",children:"provider"})," needs to be specified, one that you have an authenticated access api key for."]}),"\n",(0,r.jsxs)(n.p,{children:["Different endpoint types are often associated with specific models.\nFor instance, the ",(0,r.jsx)(n.code,{children:"llm/v1/chat"})," and ",(0,r.jsx)(n.code,{children:"llm/v1/completions"})," endpoints are generally associated with\nconversational models, while ",(0,r.jsx)(n.code,{children:"llm/v1/embeddings"})," endpoints would typically be associated with\nembedding or transformer models. The model you choose should be appropriate for the type of endpoint specified."]}),"\n",(0,r.jsx)(n.p,{children:"Here's an example of a model name configuration within an endpoint:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: embeddings\n    endpoint_type: llm/v1/embeddings\n    model:\n      provider: openai\n      name: text-embedding-ada-002\n      config:\n        openai_api_key: $OPENAI_API_KEY\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above configuration, ",(0,r.jsx)(n.code,{children:"text-embedding-ada-002"})," is the model used for the embeddings endpoint."]}),"\n",(0,r.jsxs)(n.p,{children:["When specifying a model, it is critical that the provider supports the model you are requesting.\nFor instance, ",(0,r.jsx)(n.code,{children:"openai"})," as a provider supports models like ",(0,r.jsx)(n.code,{children:"text-embedding-ada-002"}),", but other providers\nmay not. If the model is not supported by the provider, the MLflow AI Gateway will return an HTTP 4xx error\nwhen trying to route requests to that model."]}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"warning",children:(0,r.jsx)(n.p,{children:"Always check the latest documentation of the specified provider to ensure that the model you want\nto use is supported for the type of endpoint you're configuring."})}),"\n",(0,r.jsx)(n.p,{children:"Remember, the model you choose directly affects the results of the responses you'll get from the\nAPI calls. Therefore, choose a model that fits your use-case requirements. For instance,\nfor generating conversational responses, you would typically choose a chat model.\nConversely, for generating embeddings of text, you would choose an embedding model."}),"\n",(0,r.jsx)(n.h2,{id:"deployments-configuration",children:"Configuring the gateway server"}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway relies on a user-provided configuration file, written in YAML,\nthat defines the endpoints and providers available to the server. The configuration file dictates\nhow the gateway server interacts with various language model providers and determines the end-points that\nusers can access."}),"\n",(0,r.jsx)(n.h3,{id:"ai-gateway-server-configuration",children:"AI Gateway server Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The configuration file includes a series of sections, each representing a unique endpoint.\nEach endpoint section has a name, a type, and a model specification, which includes the model\nprovider, name, and configuration details. The configuration section typically contains the base\nURL for the API and an environment variable for the API key."}),"\n",(0,r.jsx)(n.p,{children:"Here is an example of a single-endpoint configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n    limit:\n      renewal_period: minute\n      calls: 10\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we define an endpoint named ",(0,r.jsx)(n.code,{children:"chat"})," that corresponds to the ",(0,r.jsx)(n.code,{children:"llm/v1/chat"})," type, which\nwill use the ",(0,r.jsx)(n.code,{children:"gpt-4o-mini"})," model from OpenAI to return query responses from the OpenAI service, and accept up to 10 requests per minute."]}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway configuration is very easy to update.\nSimply edit the configuration file and save your changes, and the MLflow AI Gateway will automatically\nupdate the endpoints with zero disruption or down time. This allows you to try out new providers or model types while keeping your applications steady and reliable."}),"\n",(0,r.jsx)(n.p,{children:"In order to define an API key for a given provider, there are three primary options:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Directly include it in the YAML configuration file."}),"\n",(0,r.jsx)(n.li,{children:"Use an environment variable to store the API key and reference it in the YAML configuration file."}),"\n",(0,r.jsx)(n.li,{children:"Define your API key in a file and reference the location of that key-bearing file within the YAML configuration file."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you choose to include the API key directly, replace ",(0,r.jsx)(n.code,{children:"$OPENAI_API_KEY"})," in the YAML file with your\nactual API key."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["The MLflow AI Gateway provides direct access to billed external LLM services. It is strongly recommended to restrict access to this server. See the section on ",(0,r.jsx)(n.a,{href:"#deployments-security",children:"security"})," for guidance."]})}),"\n",(0,r.jsx)(n.p,{children:"If you prefer to use an environment variable (recommended), you can define it in your shell\nenvironment. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'export OPENAI_API_KEY="your_openai_api_key"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"}),' Replace "your_openai_api_key" with your actual OpenAI API key.']}),"\n",(0,r.jsx)(n.h4,{id:"deployments-configuration-details",children:"AI Gateway server Configuration Details"}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway relies on a user-provided configuration file. It defines how the gateway server interacts with various language model providers and dictates the endpoints that users can access."}),"\n",(0,r.jsx)(n.p,{children:"The configuration file is written in YAML and includes a series of sections, each representing a unique endpoint. Each endpoint section has a name, a type, and a model specification,\nwhich includes the provider, model name, and provider-specific configuration details."}),"\n",(0,r.jsx)(n.p,{children:"Here are the details of each configuration parameter:"}),"\n",(0,r.jsx)(n.h5,{id:"general-configuration-parameters",children:"General Configuration Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"endpoints"}),": This is a list of endpoint configurations. Each endpoint represents a unique endpoint that maps to a particular language model service."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each endpoint has the following configuration parameters:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"}),": This is the name of the endpoint. It needs to be a unique name without spaces or any non-alphanumeric characters other than hyphen and underscore."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"endpoint_type"}),": This specifies the type of service offered by this endpoint. This determines the interface for inputs to an endpoint and the returned outputs. Current supported endpoint types are:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"llm/v1/completions"'}),"\n",(0,r.jsx)(n.li,{children:'"llm/v1/chat"'}),"\n",(0,r.jsx)(n.li,{children:'"llm/v1/embeddings"'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model"}),": This defines the provider-specific details of the language model. It contains the following fields:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"provider"}),": This indicates the provider of the AI model. It accepts the following values:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'"openai"'}),"\n",(0,r.jsx)(n.li,{children:'"mosaicml"'}),"\n",(0,r.jsx)(n.li,{children:'"anthropic"'}),"\n",(0,r.jsx)(n.li,{children:'"cohere"'}),"\n",(0,r.jsx)(n.li,{children:'"palm"'}),"\n",(0,r.jsx)(n.li,{children:'"azure" / "azuread"'}),"\n",(0,r.jsx)(n.li,{children:'"mlflow-model-serving"'}),"\n",(0,r.jsx)(n.li,{children:'"huggingface-text-generation-inference"'}),"\n",(0,r.jsx)(n.li,{children:'"ai21labs"'}),"\n",(0,r.jsx)(n.li,{children:'"bedrock"'}),"\n",(0,r.jsx)(n.li,{children:'"mistral"'}),"\n",(0,r.jsx)(n.li,{children:'"togetherai"'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"}),": This is an optional field to specify the name of the model."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"config"}),": This contains provider-specific configuration details."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"provider-specific-configuration-parameters",children:"Provider-Specific Configuration Parameters"}),"\n",(0,r.jsx)(n.h6,{id:"openai",children:"OpenAI"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is the API key for the OpenAI service."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_type"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is an optional field to specify the type of OpenAI API to use."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_base"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:(0,r.jsx)(n.em,{children:(0,r.jsx)(n.a,{href:"https://api.openai.com/v1",children:"https://api.openai.com/v1"})})}),(0,r.jsx)("td",{children:"This is the base URL for the OpenAI API."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_version"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is an optional field to specify the OpenAI API version."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_organization"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is an optional field to specify the organization in OpenAI."})]})]})]}),"\n",(0,r.jsx)(n.h6,{id:"mosaicml",children:"MosaicML"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"mosaicml_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the MosaicML service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"cohere",children:"Cohere"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"cohere_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the Cohere service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"huggingface-text-generation-inference",children:"HuggingFace Text Generation Inference"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"hf_server_url"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the url of the Huggingface TGI Server."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"palm",children:"PaLM"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"palm_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the PaLM service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"ai21-labs",children:"AI21 Labs"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"ai21labs_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the AI21 Labs service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"anthropic",children:"Anthropic"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"anthropic_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the Anthropic service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"amazon-bedrock",children:"Amazon Bedrock"}),"\n",(0,r.jsxs)(n.p,{children:["Top-level model configuration for Amazon Bedrock endpoints must be one of the following two supported authentication modes: ",(0,r.jsx)(n.em,{children:"key-based"})," or ",(0,r.jsx)(n.em,{children:"role-based"}),"."]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_config"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"An object with either the key-based or role-based schema below."})]})})]}),"\n",(0,r.jsx)(n.p,{children:"To use key-based authentication, define an Amazon Bedrock endpoint with the required fields below."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"If using a configured endpoint purely for development or testing, utilizing an IAM User role or a temporary short-lived standard IAM role are recommended;\nwhile for production deployments, a standard long-expiry IAM role is recommended to ensure that the endpoint is capable of handling authentication for a long period.\nIf the authentication expires and a new set of keys need to be supplied, the endpoint must be recreated in order to persist the new keys."})}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_region"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"AWS_REGION/AWS_DEFAULT_REGION"}),(0,r.jsx)("td",{children:"The AWS Region to use for bedrock access."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_secret_access_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"AWS secret access key for the IAM user/role authorized to use bedrock."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_access_key_id"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"AWS access key ID for the IAM user/role authorized to use Bedrock."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_session_token"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"None"}),(0,r.jsx)("td",{children:"Optional session token, if required."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, for role-based authentication, an Amazon Bedrock endpoint can be defined and initialized with an a IAM Role ARN that is authorized to access Bedrock.\nThe MLflow AI Gateway will attempt to assume this role with using the standard credential provider chain and will renew the role credentials if they have expired."}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_region"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"AWS_REGION/AWS_DEFAULT_REGION"}),(0,r.jsx)("td",{children:"The AWS Region to use for bedrock access."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"aws_role_arn"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsxs)("td",{children:["An AWS role authorized to use Bedrock. The standard credential provider chain ",(0,r.jsx)(n.em,{children:"must"})," be able to find credentials authorized to assume this role."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"session_length_seconds"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"900"}),(0,r.jsx)("td",{children:"The length of session to request."})]})]})]}),"\n",(0,r.jsx)(n.h6,{id:"mlflow-model-serving",children:"MLflow Model Serving"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"model_server_url"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the url of the MLflow Model Server."})]})})]}),"\n",(0,r.jsxs)(n.p,{children:["Note that with MLflow model serving, the ",(0,r.jsx)(n.code,{children:"name"})," parameter for the ",(0,r.jsx)(n.code,{children:"model"})," definition is not used for validation and is only present for reference purposes. This alias can be\nuseful for understanding a particular version or endpoint definition that was used that can be referenced back to a deployed model. You may choose any name that you wish, provided that\nit is JSON serializable."]}),"\n",(0,r.jsx)(n.h6,{id:"azure-openai",children:"Azure OpenAI"}),"\n",(0,r.jsxs)(n.p,{children:["Azure provides two different mechanisms for integrating with OpenAI, each corresponding to a different type of security validation. One relies on an access token for validation,\nreferred to as ",(0,r.jsx)(n.code,{children:"azure"}),", while the other uses Azure Active Directory (Azure AD) integration for authentication, termed as ",(0,r.jsx)(n.code,{children:"azuread"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To match your user's interaction and security access requirements, adjust the ",(0,r.jsx)(n.code,{children:"openai_api_type"})," parameter to represent the preferred security validation model.\nThis will ensure seamless interaction and reliable security for your Azure-OpenAI integration."]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is the API key for the Azure OpenAI service."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_type"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsxs)("td",{children:["This field must be either ",(0,r.jsx)(n.code,{children:"azure"})," or ",(0,r.jsx)(n.code,{children:"azuread"})," depending on the security access protocol."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_base"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is the base URL for the Azure OpenAI API service provided by Azure."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_api_version"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"The version of the Azure OpenAI service to utilize, specified by a date."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_deployment_name"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is the name of the deployment resource for the Azure OpenAI service."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"openai_organization"})}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{}),(0,r.jsx)("td",{children:"This is an optional field to specify the organization in OpenAI."})]})]})]}),"\n",(0,r.jsx)(n.h6,{id:"mistral",children:"Mistral"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"mistral_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the Mistral service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"togetherai",children:"TogetherAI"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"togetherai_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the TogetherAI service."})]})})]}),"\n",(0,r.jsx)(n.h6,{id:"gemini",children:"Gemini"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Configuration Parameter"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"gemini_api_key"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"This is the API key for the Gemini service."})]})})]}),"\n",(0,r.jsx)(n.p,{children:"An example configuration for Azure OpenAI is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'endpoints:\n  - name: completions\n    endpoint_type: llm/v1/completions\n    model:\n      provider: openai\n      name: gpt-35-turbo\n      config:\n        openai_api_type: "azuread"\n        openai_api_key: $AZURE_AAD_TOKEN\n        openai_deployment_name: "{your_deployment_name}"\n        openai_api_base: "https://{your_resource_name}-azureopenai.openai.azure.com/"\n        openai_api_version: "2023-05-15"\n    limit:\n      renewal_period: minute\n      calls: 10\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Azure OpenAI has distinct features as compared with the direct OpenAI service. For an overview, please see ",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-gb/azure/cognitive-services/openai/how-to/switching-endpoints",children:"the comparison documentation"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"For specifying an API key, there are three options:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["(Preferred) Use an environment variable to store the API key and reference it in the YAML configuration file. This is denoted by a ",(0,r.jsx)(n.code,{children:"$"})," symbol before the name of the environment variable."]}),"\n",(0,r.jsx)(n.li,{children:"(Preferred) Define the API key in a file and reference the location of that key-bearing file within the YAML configuration file."}),"\n",(0,r.jsx)(n.li,{children:"Directly include it in the YAML configuration file."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"warning",children:(0,r.jsx)(n.p,{children:"The use of environment variables or file-based keys is recommended for better security practices. If the API key is directly included in the configuration file, it should be ensured that the file is securely stored and appropriately access controlled.\nPlease ensure that the configuration file is stored in a secure location as it contains sensitive API keys."})}),"\n",(0,r.jsx)(n.h2,{id:"deployments-query",children:"Querying the AI Gateway server"}),"\n",(0,r.jsx)(n.p,{children:"Once the MLflow AI Gateway has been configured and started, it is ready to receive traffic from users."}),"\n",(0,r.jsx)(n.h3,{id:"standard-deployments-parameters",children:"Standard Query Parameters"}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway defines standard parameters for chat, completions, and embeddings that can be\nused when querying any endpoint regardless of its provider. Each parameter has a standard range and\ndefault value. When querying an endpoint with a particular provider, the MLflow AI Gateway automatically\nscales parameter values according to the provider's value ranges for that parameter."}),"\n",(0,r.jsx)(n.h4,{id:"completions",children:"Completions"}),"\n",(0,r.jsxs)(n.p,{children:["The standard parameters for completions endpoints with type ",(0,r.jsx)(n.code,{children:"llm/v1/completions"})," are:"]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Query Parameter"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"prompt"})}),(0,r.jsx)("td",{children:"string"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"The prompt for which to generate completions."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"n"})}),(0,r.jsx)("td",{children:"integer"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"1"}),(0,r.jsx)("td",{children:"The number of completions to generate for the specified prompt, between 1 and 5."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"temperature"})}),(0,r.jsx)("td",{children:"float"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"0.0"}),(0,r.jsx)("td",{children:"The sampling temperature to use, between 0 and 1. Higher values will make the output more random, and lower values will make the output more deterministic."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"max_tokens"})}),(0,r.jsx)("td",{children:"integer"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"None"}),(0,r.jsx)("td",{children:"The maximum completion length, between 1 and infinity (unlimited)."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"stop"})}),(0,r.jsx)("td",{children:"array[string]"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"None"}),(0,r.jsx)("td",{children:"Sequences where the model should stop generating tokens and return the completion."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"chat",children:"Chat"}),"\n",(0,r.jsxs)(n.p,{children:["The standard parameters for chat endpoints with type ",(0,r.jsx)(n.code,{children:"llm/v1/chat"})," are:"]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Query Parameter"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"messages"})}),(0,r.jsx)("td",{children:"array[message]"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsxs)("td",{children:["A list of messages in a conversation from which to generate a new message (chat completion). For information about the message structure, see ",(0,r.jsx)(n.a,{href:"#deployments-chat-message-structure",children:"Messages"}),"."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"n"})}),(0,r.jsx)("td",{children:"integer"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"1"}),(0,r.jsx)("td",{children:"The number of chat completions to generate for the specified prompt, between 1 and 5."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"temperature"})}),(0,r.jsx)("td",{children:"float"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"0.0"}),(0,r.jsx)("td",{children:"The sampling temperature to use, between 0 and 1. Higher values will make the output more random, and lower values will make the output more deterministic."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"max_tokens"})}),(0,r.jsx)("td",{children:"integer"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"None"}),(0,r.jsx)("td",{children:"The maximum completion length, between 1 and infinity (unlimited)."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"stop"})}),(0,r.jsx)("td",{children:"array[string]"}),(0,r.jsx)("td",{children:"No"}),(0,r.jsx)("td",{children:"None"}),(0,r.jsx)("td",{children:"Sequences where the model should stop generating tokens and return the chat completion."})]})]})]}),"\n",(0,r.jsx)(n.h5,{id:"deployments-chat-message-structure",children:"Messages"}),"\n",(0,r.jsx)(n.p,{children:"Each chat message is a string dictionary containing the following fields:"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Field Name"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"role"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsxs)("td",{children:["The role of the conversation participant who sent the message. Must be one of: ",(0,r.jsx)(n.code,{children:'"system"'}),", ",(0,r.jsx)(n.code,{children:'"user"'}),", or ",(0,r.jsx)(n.code,{children:'"assistant"'}),"."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"content"})}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"The message content."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"embeddings",children:"Embeddings"}),"\n",(0,r.jsxs)(n.p,{children:["The standard parameters for completions endpoints with type ",(0,r.jsx)(n.code,{children:"llm/v1/embeddings"})," are:"]}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Query Parameter"}),(0,r.jsx)("th",{children:"Type"}),(0,r.jsx)("th",{children:"Required"}),(0,r.jsx)("th",{children:"Default"}),(0,r.jsx)("th",{children:"Description"})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"input"})}),(0,r.jsx)("td",{children:"string or array[string]"}),(0,r.jsx)("td",{children:"Yes"}),(0,r.jsx)("td",{children:"N/A"}),(0,r.jsx)("td",{children:"A string or list of strings for which to generate embeddings."})]})})]}),"\n",(0,r.jsx)(n.h3,{id:"additional-query-parameters",children:"Additional Query Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the ",(0,r.jsx)(n.a,{href:"#standard-deployments-parameters",children:"Standard Query Parameters"}),", you can pass any additional parameters supported by the endpoint's provider as part of your query. For example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"logit_bias"})," (supported by OpenAI, Cohere)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"top_k"})," (supported by MosaicML, Anthropic, PaLM, Cohere)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"frequency_penalty"})," (supported by OpenAI, Cohere, AI21 Labs)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"presence_penalty"})," (supported by OpenAI, Cohere, AI21 Labs)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stream"})," (supported by OpenAI, Cohere)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Below is an example of submitting a query request to an MLflow AI Gateway endpoint using additional parameters:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow.deployments import get_deploy_client\n\nclient = get_deploy_client("http://my.deployments:8888")\n\ndata = {\n    "prompt": (\n        "What would happen if an asteroid the size of "\n        "a basketball encountered the Earth traveling at 0.5c? "\n        "Please provide your answer in .rst format for the purposes of documentation."\n    ),\n    "temperature": 0.5,\n    "max_tokens": 1000,\n    "n": 1,\n    "frequency_penalty": 0.2,\n    "presence_penalty": 0.2,\n}\n\nclient.predict(endpoint="completions-gpt4", inputs=data)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The results of the query are:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'{\n    "id": "chatcmpl-8Pr33fsCAtD2L4oZHlyfOkiYHLapc",\n    "object": "text_completion",\n    "created": 1701172809,\n    "model": "gpt-4-0613",\n    "choices": [\n        {\n            "index": 0,\n            "text": "If an asteroid the size of a basketball ...",\n        }\n    ],\n    "usage": {\n        "prompt_tokens": 43,\n        "completion_tokens": 592,\n        "total_tokens": 635,\n    },\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"streaming",children:"Streaming"}),"\n",(0,r.jsx)(n.p,{children:"Some providers support streaming responses. Streaming responses are useful when you want to\nreceive responses as they are generated, rather than waiting for the entire response to be\ngenerated before receiving it. Streaming responses are supported by the following providers:"}),"\n",(0,r.jsxs)(d.X,{children:[(0,r.jsxs)("thead",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Provider"}),(0,r.jsx)("th",{colSpan:2,children:"Endpoints"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{}),(0,r.jsx)("th",{children:"llm/v1/completions"}),(0,r.jsx)("th",{children:"llm/v1/completions"})]})]}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"OpenAI"}),(0,r.jsx)("td",{children:"\u2713"}),(0,r.jsx)("td",{children:"\u2713"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Cohere"}),(0,r.jsx)("td",{children:"\u2713"}),(0,r.jsx)("td",{children:"\u2713"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Anthropic"}),(0,r.jsx)("td",{children:"\u2718"}),(0,r.jsx)("td",{children:"\u2713"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["To enable streaming responses, set the ",(0,r.jsx)(n.code,{children:"stream"})," parameter to ",(0,r.jsx)(n.code,{children:"true"})," in your request. For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://my.deployments:8888/endpoints/chat/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{"messages": [{"role": "user", "content": "hello"}], "stream": true}\'\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The results of the query follow the ",(0,r.jsx)(n.a,{href:"https://platform.openai.com/docs/api-reference/chat/streaming",children:"OpenAI schema"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"chat-1",children:"Chat"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'data: {"choices": [{"delta": {"content": null, "role": "assistant"}, "finish_reason": null, "index": 0}], "created": 1701161926, "id": "chatcmpl-8PoDWSiVE8MHNsUZF2awkW5gNGYs3", "model": "gpt-35-turbo", "object": "chat.completion.chunk"}\n\ndata: {"choices": [{"delta": {"content": "Hello", "role": null}, "finish_reason": null, "index": 0}], "created": 1701161926, "id": "chatcmpl-8PoDWSiVE8MHNsUZF2awkW5gNGYs3", "model": "gpt-35-turbo", "object": "chat.completion.chunk"}\n\ndata: {"choices": [{"delta": {"content": " there", "role": null}, "finish_reason": null, "index": 0}], "created": 1701161926, "id": "chatcmpl-8PoDWSiVE8MHNsUZF2awkW5gNGYs3", "model": "gpt-35-turbo", "object": "chat.completion.chunk"}\n\ndata: {"choices": [{"delta": {"content": null, "role": null}, "finish_reason": "stop", "index": 0}], "created": 1701161926, "id": "chatcmpl-8PoDWSiVE8MHNsUZF2awkW5gNGYs3", "model": "gpt-35-turbo", "object": "chat.completion.chunk"}\n'})}),"\n",(0,r.jsx)(n.h5,{id:"completions-1",children:"Completions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'data: {"choices": [{"delta": {"role": null, "content": null}, "finish_reason": null, "index": 0}], "created": 1701161629, "id": "chatcmpl-8Po8jVXzljc245k1Ah4UsAcm2zxQ2", "model": "gpt-35-turbo", "object": "text_completion_chunk"}\n\ndata: {"choices": [{"delta": {"role": null, "content": "If"}, "finish_reason": null, "index": 0}], "created": 1701161629, "id": "chatcmpl-8Po8jVXzljc245k1Ah4UsAcm2zxQ2", "model": "gpt-35-turbo", "object": "text_completion_chunk"}\n\ndata: {"choices": [{"delta": {"role": null, "content": " an"}, "finish_reason": null, "index": 0}], "created": 1701161629, "id": "chatcmpl-8Po8jVXzljc245k1Ah4UsAcm2zxQ2", "model": "gpt-35-turbo", "object": "text_completion_chunk"}\n\ndata: {"choices": [{"delta": {"role": null, "content": " asteroid"}, "finish_reason": null, "index": 0}], "created": 1701161629, "id": "chatcmpl-8Po8jVXzljc245k1Ah4UsAcm2zxQ2", "model": "gpt-35-turbo", "object": "text_completion_chunk"}\n\ndata: {"choices": [{"delta": {"role": null, "content": null}, "finish_reason": "length", "index": 0}], "created": 1701161629, "id": "chatcmpl-8Po8jVXzljc245k1Ah4UsAcm2zxQ2", "model": "gpt-35-turbo", "object": "text_completion_chunk"}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"fastapi-documentation-docs",children:'FastAPI Documentation ("/docs")'}),"\n",(0,r.jsxs)(n.p,{children:['FastAPI, the framework used for building the MLflow AI Gateway, provides an automatic interactive API\ndocumentation interface, which is accessible at the "/docs" endpoint (e.g., ',(0,r.jsx)(n.code,{children:"http://my.deployments:9000/docs"}),").\nThis interactive interface is very handy for exploring and testing the available API endpoints."]}),"\n",(0,r.jsxs)(n.p,{children:["As a convenience, accessing the root URL (e.g., ",(0,r.jsx)(n.code,{children:"http://my.deployments:9000"}),') redirects to this "/docs" endpoint.']}),"\n",(0,r.jsx)(n.h3,{id:"mlflow-python-client-apis",children:"MLflow Python Client APIs"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(o.B,{fn:"mlflow.deployments.MlflowDeploymentClient",children:(0,r.jsx)(n.code,{children:"MlflowDeploymentClient"})})," is the user-facing client API that is used to interact with the MLflow AI Gateway. It abstracts the HTTP requests to the gateway server via a simple, easy-to-use Python API."]}),"\n",(0,r.jsx)(n.h4,{id:"deployments-client-api",children:"Client API"}),"\n",(0,r.jsxs)(n.p,{children:["To use the ",(0,r.jsx)(n.code,{children:"MlflowDeploymentClient"})," API, see the below examples for the available API methods:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create an ",(0,r.jsx)(n.code,{children:"MlflowDeploymentClient"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow.deployments import get_deploy_client\n\nclient = get_deploy_client("http://my.deployments:8888")\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"List all endpoints:"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(o.B,{fn:"mlflow.deployments.MlflowDeploymentClient.list_endpoints",children:(0,r.jsx)(n.code,{children:"list_endpoints()"})})," method returns a list of all endpoints."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"endpoint = client.list_endpoints()\nfor endpoint in endpoints:\n    print(endpoint)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Query an endpoint:"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(o.B,{fn:"mlflow.deployments.MlflowDeploymentClient.predict",children:(0,r.jsx)(n.code,{children:"predict()"})})," method submits a query to a configured provider endpoint.\nThe data structure you send in the query depends on the endpoint."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'response = client.predict(\n    endpoint="chat",\n    inputs={"messages": [{"role": "user", "content": "Tell me a joke about rabbits"}]},\n)\nprint(response)\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"langchain-integration",children:"LangChain Integration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/langchain-ai/langchain",children:"LangChain"})," supports ",(0,r.jsx)(n.a,{href:"https://python.langchain.com/docs/integrations/providers/mlflow_tracking/",children:"an integration for MLflow Deployments"}),".\nThis integration enable users to use prompt engineering, retrieval augmented generation, and other techniques with LLMs in the gateway server."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="Example"',children:'import mlflow\nfrom langchain import LLMChain, PromptTemplate\nfrom langchain.llms import Mlflow\n\nllm = Mlflow(target_uri="http://127.0.0.1:5000", endpoint="completions")\nllm_chain = LLMChain(\n    llm=llm,\n    prompt=PromptTemplate(\n        input_variables=["adjective"],\n        template="Tell me a {adjective} joke",\n    ),\n)\nresult = llm_chain.run(adjective="funny")\nprint(result)\n\nwith mlflow.start_run():\n    model_info = mlflow.langchain.log_model(llm_chain, name="model")\n\nmodel = mlflow.pyfunc.load_model(model_info.model_uri)\nprint(model.predict([{"adjective": "funny"}]))\n'})}),"\n",(0,r.jsx)(n.h4,{id:"deployments-mlflow-models",children:"MLflow Models"}),"\n",(0,r.jsx)(n.p,{children:"Interfacing with MLflow Models can be done in two ways. With the use of a custom PyFunc Model, a query can be issued directly to a gateway server endpoint and used in a broader context within a model.\nData may be augmented, manipulated, or used in a mixture of experts paradigm. The other means of utilizing the MLflow AI Gateway along with MLflow Models is to define a served MLflow model directly as\nan endpoint within a gateway server."}),"\n",(0,r.jsx)(n.h5,{id:"using-the-gateway-server-to-query-a-served-mlflow-model",children:"Using the gateway server to Query a served MLflow Model"}),"\n",(0,r.jsxs)(n.p,{children:["For a full walkthrough and example of using the MLflow serving integration to query a model directly through the MLflow AI Gateway, please see ",(0,r.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/blob/master/examples/gateway/README.md",children:"the full example"}),".\nWithin the guide, you will see the entire end-to-end process of serving multiple models from different servers and configuring an MLflow AI Gateway instance to provide a single unified point to handle queries from."]}),"\n",(0,r.jsx)(n.h5,{id:"using-an-mlflow-model-to-query-the-gateway-server",children:"Using an MLflow Model to Query the gateway server"}),"\n",(0,r.jsxs)(n.p,{children:["You can also build and deploy MLflow Models that call the MLflow AI Gateway.\nThe example below demonstrates how to use a gateway server from within a custom ",(0,r.jsx)(n.code,{children:"pyfunc"})," model."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The custom ",(0,r.jsx)(n.code,{children:"Model"})," shown in the example below is utilizing environment variables for the gateway server's uri. These values can also be set manually within the\ndefinition or can be applied via ",(0,r.jsx)(o.B,{fn:"mlflow.deployments.get_deployments_target"})," after the uri has been set. For the example below, the value for ",(0,r.jsx)(n.code,{children:"MLFLOW_DEPLOYMENTS_TARGET"})," is\n",(0,r.jsx)(n.code,{children:"http://127.0.0.1:5000/"}),". For an actual deployment use case, this value would be set to the configured and production deployment server."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\nimport pandas as pd\nimport mlflow\n\n\ndef predict(data):\n    from mlflow.deployments import get_deploy_client\n\n    client = get_deploy_client(os.environ["MLFLOW_DEPLOYMENTS_TARGET"])\n\n    payload = data.to_dict(orient="records")\n    return [\n        client.predict(endpoint="completions", inputs=query)["choices"][0]["text"]\n        for query in payload\n    ]\n\n\ninput_example = pd.DataFrame.from_dict(\n    {"prompt": ["Where is the moon?", "What is a comet made of?"]}\n)\nsignature = mlflow.models.infer_signature(\n    input_example, ["Above our heads.", "It\'s mostly ice and rocks."]\n)\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        python_model=predict,\n        registered_model_name="anthropic_completions",\n        name="anthropic_completions",\n        input_example=input_example,\n        signature=signature,\n    )\n\ndf = pd.DataFrame.from_dict(\n    {\n        "prompt": ["Tell me about Jupiter", "Tell me about Saturn"],\n        "temperature": 0.6,\n        "max_records": 500,\n    }\n)\n\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\nprint(loaded_model.predict(df))\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This custom MLflow model can be used in the same way as any other MLflow model. It can be used within a ",(0,r.jsx)(n.code,{children:"spark_udf"}),", used with ",(0,r.jsx)(o.B,{fn:"mlflow.genai.evaluate"}),", or the deploy API like any other model."]}),"\n",(0,r.jsx)(n.h4,{id:"deployments-rest-api",children:"REST API"}),"\n",(0,r.jsx)(n.p,{children:"The REST API allows you to send HTTP requests directly to the MLflow AI Gateway. This is useful if you're not using Python or if you prefer to interact with a gateway server using HTTP directly."}),"\n",(0,r.jsx)(n.p,{children:"Here are some examples for how you might use curl to interact with the MLflow AI Gateway:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Get information about a particular endpoint: ",(0,r.jsx)(n.code,{children:"GET /api/2.0/endpoints/{name}"})]}),"\n",(0,r.jsx)(n.p,{children:"This route returns a serialized representation of the endpoint data structure.\nThis provides information about the name and type, as well as the model details for the requested endpoint."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://my.deployments:8888/api/2.0/endpoints/embeddings\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["List all endpoints: ",(0,r.jsx)(n.code,{children:"GET /api/2.0/endpoints/"})]}),"\n",(0,r.jsx)(n.p,{children:"This route returns a list of all endpoints."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://my.deployments:8888/api/2.0/endpoints/\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Query an endpoint: ",(0,r.jsx)(n.code,{children:"POST /endpoints/{name}/invocations"})]}),"\n",(0,r.jsx)(n.p,{children:'This route allows you to submit a query to a configured provider endpoint. The data structure you send in the query depends on the endpoint. Here are examples for the "completions", "chat", and "embeddings" endpoints:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Completions"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://my.deployments:8888/endpoints/completions/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{"prompt": "Describe the probability distribution of the decay chain of U-235"}\'\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Chat"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://my.deployments:8888/endpoints/chat/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{"messages": [{"role": "user", "content": "Can you write a limerick about orange flavored popsicles?"}]}\'\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"Embeddings"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://my.deployments:8888/endpoints/embeddings/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{"input": ["I would like to return my shipment of beanie babies, please", "Can I please speak to a human now?"]}\'\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Remember to replace ",(0,r.jsx)(n.code,{children:"my.deployments:8888"})," with the URL of your actual MLflow AI Gateway."]}),"\n",(0,r.jsx)(n.h2,{id:"deployments-plugin",children:"Plugin LLM Provider"}),"\n",(0,r.jsx)(n.p,{children:"The MLflow AI Gateway supports the use of custom language model providers through the use of plugins.\nA plugin is a Python package that provides a custom implementation of a language model provider.\nThis allows users to integrate their own language model services with the MLflow AI Gateway."}),"\n",(0,r.jsxs)(n.p,{children:["To create a custom plugin, you need to implement a provider class that inherits from ",(0,r.jsx)(n.code,{children:"mlflow.gateway.providers.BaseProvider"}),",\nand a config class that inherits from ",(0,r.jsx)(n.code,{children:"mlflow.gateway.base_models.ConfigModel"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="Example"',children:'import os\nfrom typing import AsyncIterable\n\nfrom mlflow.utils.pydantic_utils import field_validator\nfrom mlflow.gateway.base_models import ConfigModel\nfrom mlflow.gateway.config import RouteConfig\nfrom mlflow.gateway.providers import BaseProvider\nfrom mlflow.gateway.schemas import chat, completions, embeddings\n\n\nclass MyLLMConfig(ConfigModel):\n    # This model defines the configuration for the provider such as API keys\n    my_llm_api_key: str\n\n    @field_validator("my_llm_api_key", mode="before")\n    def validate_my_llm_api_key(cls, value):\n        return os.environ[value.lstrip("$")]\n\n\nclass MyLLMProvider(BaseProvider):\n    # Define the provider name. This will be displayed in log and error messages.\n    NAME = "my_llm"\n    # Define the config model for the provider.\n    # This must be a subclass of ConfigModel.\n    CONFIG_TYPE = MyLLMConfig\n\n    def __init__(self, config: RouteConfig) -> None:\n        super().__init__(config)\n        if config.model.config is None or not isinstance(\n            config.model.config, MyLLMConfig\n        ):\n            raise TypeError(f"Unexpected config type {config.model.config}")\n        self.my_llm_config: MyLLMConfig = config.model.config\n\n    # You can implement one or more of the following methods\n    # depending on the capabilities of your provider.\n    # Implementing `completions`, `chat` and `embeddings` will enable the respective endpoints.\n    # Implementing `completions_stream` and `chat_stream` will enable the `stream=True`\n    # option for the respective endpoints.\n    # Unimplemented methods will return a 501 Not Implemented HTTP response upon invocation.\n    async def completions_stream(\n        self, payload: completions.RequestPayload\n    ) -> AsyncIterable[completions.StreamResponsePayload]:\n        ...\n\n    async def completions(\n        self, payload: completions.RequestPayload\n    ) -> completions.ResponsePayload:\n        ...\n\n    async def chat_stream(\n        self, payload: chat.RequestPayload\n    ) -> AsyncIterable[chat.StreamResponsePayload]:\n        ...\n\n    async def chat(self, payload: chat.RequestPayload) -> chat.ResponsePayload:\n        ...\n\n    async def embeddings(\n        self, payload: embeddings.RequestPayload\n    ) -> embeddings.ResponsePayload:\n        ...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then, you need to create a Python package that contains the plugin implementation.\nYou must specify an entry point under the ",(0,r.jsx)(n.code,{children:"mlflow.gateway.providers"})," group, so that your plugin can be detected by MLflow.\nThe entry point should be in the format ",(0,r.jsx)(n.code,{children:"<name> = <module>:<class>"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="pyproject.toml"',children:'[project]\nname = "my_llm"\nversion = "1.0"\n\n[project.entry-points."mlflow.gateway.providers"]\nmy_llm = "my_llm.providers:MyLLMProvider"\n\n[tool.setuptools.packages.find]\ninclude = ["my_llm*"]\nnamespaces = false\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can specify more than one entry point in the same package if you have multiple providers.\nNote that entry point names must be globally unique. If two plugins specify the same entry point name,\nMLflow will raise an error at startup time."}),"\n",(0,r.jsxs)(n.p,{children:["MLflow already provides a number of providers by default. Your plugin name cannot be the same as any one\nof them. See ",(0,r.jsx)(n.a,{href:"#deployments-configuration-details",children:"AI Gateway server Configuration Details"})," for a complete list of default providers."]}),"\n",(0,r.jsx)(n.p,{children:"Finally, you need to install the plugin package in the same environment as the MLflow AI Gateway."}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"warning",children:(0,r.jsx)(n.p,{children:"Only install plugin packages from sources that you trust. Starting a server with a plugin provider will\nexecute any arbitrary code that is defined within the plugin package."})}),"\n",(0,r.jsx)(n.p,{children:"Then, you can specify the plugin provider according to the entry point name\nin the MLflow AI Gateway configuration file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: my_llm\n      name: my-model-0.1.2\n      config:\n        my_llm_api_key: $MY_LLM_API_KEY\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["A working example can be found in the MLflow repository at\n",(0,r.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/gateway/plugin",children:"examples/gateway/plugin"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"mlflow-ai-gateway-api-documentation",children:"MLflow AI Gateway API Documentation"}),"\n",(0,r.jsx)(l.A,{to:(0,a.Ay)("/api_reference/llms/deployments/api.html"),target:"_blank",children:"API documentation"}),"\n",(0,r.jsx)(n.h2,{id:"openai-compatibility",children:"OpenAI Compatibility"}),"\n",(0,r.jsxs)(n.p,{children:["MLflow AI Gateway is compatible with OpenAI API and supports the ",(0,r.jsx)(n.code,{children:"chat"}),", ",(0,r.jsx)(n.code,{children:"completions"}),", and ",(0,r.jsx)(n.code,{children:"embeddings"})," APIs.\nThe OpenAI client can be used to query the server as shown in the example below:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create a configuration file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: my-chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Start the server with the configuration file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"mlflow gateway start --config-path /path/to/config.yaml --port 7000\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Once the server is up and running, query the server using the OpenAI client:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from openai import OpenAI\n\nclient = OpenAI(base_url="http://localhost:7000/v1")\ncompletion = client.chat.completions.create(\n    model="my-chat",\n    messages=[{"role": "user", "content": "Hello"}],\n)\nprint(completion.choices[0].message.content)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"unity-catalog-integration",children:"Unity Catalog Integration"}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/genai/governance/unity-catalog",children:"Unity Catalog Integration"})," for how to integrate the MLflow AI Gateway with Unity Catalog."]}),"\n",(0,r.jsx)(n.h2,{id:"deployments-security",children:"gateway server Security Considerations"}),"\n",(0,r.jsx)(n.p,{children:"Remember to ensure secure access to the system that the MLflow AI Gateway is running in to protect access to these keys."}),"\n",(0,r.jsx)(n.p,{children:"An effective way to secure your gateway server is by placing it behind a reverse proxy. This will allow the reverse proxy to handle incoming requests and forward them to the MLflow AI Gateway. The reverse proxy effectively shields your application from direct exposure to Internet traffic."}),"\n",(0,r.jsxs)(n.p,{children:["A popular choice for a reverse proxy is ",(0,r.jsx)(n.em,{children:"Nginx"}),". In addition to handling the traffic to your application, ",(0,r.jsx)(n.em,{children:"Nginx"})," can also serve static files and load balance the traffic if you have multiple instances of your application running."]}),"\n",(0,r.jsx)(n.p,{children:"Furthermore, to ensure the integrity and confidentiality of data between the client and the server, it's highly recommended to enable HTTPS on your reverse proxy."}),"\n",(0,r.jsx)(n.p,{children:"In addition to the reverse proxy, it's also recommended to add an authentication layer before the requests reach the MLflow AI Gateway. This could be HTTP Basic Authentication, OAuth, or any other method that suits your needs."}),"\n",(0,r.jsx)(n.p,{children:"For example, here's a simple configuration for Nginx with Basic Authentication:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-nginx",children:'http {\n    server {\n        listen 80;\n\n        location / {\n            auth_basic "Restricted Content";\n            auth_basic_user_file /etc/nginx/.htpasswd;\n\n            proxy_pass http://localhost:5000;  # Replace with the MLflow AI Gateway port\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, ",(0,r.jsx)(n.em,{children:"/etc/nginx/.htpasswd"})," is a file that contains the username and password for authentication."]}),"\n",(0,r.jsx)(n.p,{children:"These measures, together with a proper network setup, can significantly improve the security of your system and ensure that only authorized users have access to submit requests to your LLM services."})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},49374:(e,n,i)=>{i.d(n,{B:()=>a});i(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=i(86025),s=i(28774),o=i(74848);const l=e=>{const n=e.split(".");for(let i=n.length;i>0;i--){const e=n.slice(0,i).join(".");if(t[e])return e}return null};function a({fn:e,children:n}){const i=l(e);if(!i)return(0,o.jsx)(o.Fragment,{children:n});const a=(0,r.Ay)(`/${t[i]}#${e}`);return(0,o.jsx)(s.A,{to:a,target:"_blank",children:n??(0,o.jsxs)("code",{children:[e,"()"]})})}},72839:(e,n,i)=>{i.d(n,{X:()=>r});var t=i(74848);function r({children:e}){return(0,t.jsx)("div",{className:"w-full overflow-x-auto",children:(0,t.jsx)("table",{children:e})})}}}]);