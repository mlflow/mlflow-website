"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[405],{6789:(e,t,n)=>{n.d(t,{A:()=>c});n(96540);var a=n(28774),i=n(34164);const o={tileCard:"tileCard_NHsj",tileIcon:"tileIcon_pyoR",tileLink:"tileLink_iUbu",tileImage:"tileImage_O4So"};var r=n(86025),s=n(21122),l=n(74848);function c({icon:e,image:t,imageDark:n,imageWidth:c,imageHeight:p,iconSize:m=32,containerHeight:d,title:h,description:f,href:u,linkText:_="Learn more \u2192",className:w}){if(!e&&!t)throw new Error("TileCard requires either an icon or image prop");const g=d?{height:`${d}px`}:{},x={};return c&&(x.width=`${c}px`),p&&(x.height=`${p}px`),(0,l.jsxs)(a.A,{href:u,className:(0,i.A)(o.tileCard,w),children:[(0,l.jsx)("div",{className:o.tileIcon,style:g,children:e?(0,l.jsx)(e,{size:m}):n?(0,l.jsx)(s.A,{sources:{light:(0,r.Ay)(t),dark:(0,r.Ay)(n)},alt:h,className:o.tileImage,style:x}):(0,l.jsx)("img",{src:(0,r.Ay)(t),alt:h,className:o.tileImage,style:x})}),(0,l.jsx)("h3",{children:h}),(0,l.jsx)("p",{children:f}),(0,l.jsx)("div",{className:o.tileLink,children:_})]})}},41803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>v,default:()=>b,frontMatter:()=>x,metadata:()=>a,toc:()=>j});const a=JSON.parse('{"id":"datasets/end-to-end-workflow","title":"End-to-End Workflow: Evaluation-Driven Development","description":"This guide demonstrates the complete workflow for building and evaluating GenAI applications using MLflow\'s evaluation-driven development approach.","source":"@site/docs/genai/datasets/end-to-end-workflow.mdx","sourceDirName":"datasets","slug":"/datasets/end-to-end-workflow","permalink":"/mlflow-website/docs/latest/genai/datasets/end-to-end-workflow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Evaluation Datasets","permalink":"/mlflow-website/docs/latest/genai/datasets/"},"next":{"title":"SDK Guide","permalink":"/mlflow-website/docs/latest/genai/datasets/sdk-guide"}}');var i=n(74848),o=n(28453),r=(n(11470),n(19365),n(49374)),s=(n(66927),n(47020),n(82238),n(79206),n(65592)),l=n(6789),c=n(56955),p=n(93164),m=n(96844),d=n(47792),h=n(51004),f=n(22864),u=n(44471),_=n(15977),w=n(80827),g=n(99653);const x={},v="End-to-End Workflow: Evaluation-Driven Development",y={},j=[{value:"Workflow Overview",id:"workflow-overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Build &amp; Trace Your Application",id:"step-1-build--trace-your-application",level:2},{value:"Step 2: Capture Production Traces",id:"step-2-capture-production-traces",level:2},{value:"Step 3: Add Ground Truth Expectations",id:"step-3-add-ground-truth-expectations",level:2},{value:"Step 4: Create an Evaluation Dataset",id:"step-4-create-an-evaluation-dataset",level:2},{value:"Step 5: Run Systematic Evaluation",id:"step-5-run-systematic-evaluation",level:2},{value:"Step 6: Iterate and Improve",id:"step-6-iterate-and-improve",level:2},{value:"Next Steps",id:"next-steps",level:2}];function N(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"end-to-end-workflow-evaluation-driven-development",children:"End-to-End Workflow: Evaluation-Driven Development"})}),"\n",(0,i.jsx)(t.p,{children:"This guide demonstrates the complete workflow for building and evaluating GenAI applications using MLflow's evaluation-driven development approach."}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Databricks Users"}),": This workflow uses MLflow OSS evaluation dataset APIs. For Databricks environments, use the ",(0,i.jsx)(t.code,{children:"databricks-agents"})," package instead, which provides optimized dataset management integrated with Unity Catalog."]})}),"\n",(0,i.jsx)(t.h2,{id:"workflow-overview",children:"Workflow Overview"}),"\n",(0,i.jsx)(c.A,{title:"Evaluation-Driven Development",circleSize:500,steps:[{icon:p.A,title:"Build & Trace",description:"Create your GenAI application with tracing enabled",detailedDescription:"Start with a traced GenAI application using MLflow's automatic instrumentation or manual tracing decorators to capture detailed execution data."},{icon:m.A,title:"Capture Traces",description:"Run your application to collect production traces",detailedDescription:"Execute your application with real or test scenarios to generate traces that capture inputs, outputs, and intermediate steps."},{icon:d.A,title:"Add Expectations",description:"Define ground truth for quality validation",detailedDescription:"Annotate traces with expectations that define correct behavior, using MLflow's assessment APIs to add ground truth data."},{icon:h.A,title:"Create Dataset",description:"Build reusable evaluation datasets from traces",detailedDescription:"Transform annotated traces into evaluation datasets that serve as your test suite, growing with each iteration.",isFocus:!0},{icon:f.A,title:"Evaluate",description:"Run systematic evaluations with scorers",detailedDescription:"Use MLflow's evaluation framework with built-in and custom scorers to systematically assess your application's performance."},{icon:u.A,title:"Analyze Results",description:"Review performance and identify improvements",detailedDescription:"Examine evaluation metrics, identify failure patterns, and determine areas for improvement to guide your next iteration."}],loopBackIcon:_.A,loopBackText:"Iterate & Improve",loopBackDescription:"Based on analysis insights, refine your application by improving prompts, adjusting parameters, or enhancing logic. The cycle continues as you progressively improve quality with each iteration."}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"pip install --upgrade mlflow>=3.4 openai\n"})}),"\n",(0,i.jsx)(t.h2,{id:"step-1-build--trace-your-application",children:"Step 1: Build & Trace Your Application"}),"\n",(0,i.jsxs)(t.p,{children:["Start with a traced GenAI application. This example shows a customer support bot, but the pattern applies to any LLM application. You can use the ",(0,i.jsx)(r.B,{fn:"mlflow.trace",children:"mlflow.trace decorator"})," for manual instrumentation or ",(0,i.jsx)(r.B,{fn:"mlflow.openai.autolog",children:"enable automatic tracing for OpenAI"})," as shown below."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import mlflow\nimport openai\nimport os\n\n# Configure environment\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\nmlflow.set_experiment("Customer Support Bot")\n\n# Enable automatic tracing for OpenAI\nmlflow.openai.autolog()\n\n\nclass CustomerSupportBot:\n    def __init__(self):\n        self.client = openai.OpenAI()\n        self.knowledge_base = {\n            "refund": "Full refunds within 30 days with receipt.",\n            "shipping": "Standard: 5-7 days. Express available.",\n            "warranty": "1-year manufacturer warranty included.",\n        }\n\n    @mlflow.trace\n    def answer(self, question: str) -> str:\n        # Retrieve relevant context\n        context = self._get_context(question)\n\n        # Generate response\n        response = self.client.chat.completions.create(\n            model="gpt-4o-mini",\n            messages=[\n                {"role": "system", "content": "You are a helpful support assistant."},\n                {\n                    "role": "user",\n                    "content": f"Context: {context}\\n\\nQuestion: {question}",\n                },\n            ],\n            temperature=0.3,\n        )\n        return response.choices[0].message.content\n\n    def _get_context(self, question: str) -> str:\n        # Simple keyword matching for demo\n        for key, value in self.knowledge_base.items():\n            if key in question.lower():\n                return value\n        return "General customer support information."\n\n\nbot = CustomerSupportBot()\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-2-capture-production-traces",children:"Step 2: Capture Production Traces"}),"\n",(0,i.jsxs)(t.p,{children:["Run your application with real or test scenarios to capture traces. Later, you'll use ",(0,i.jsx)(r.B,{fn:"mlflow.search_traces",children:"mlflow.search_traces()"})," to retrieve these traces for annotation and dataset creation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Test scenarios\ntest_questions = [\n    "What is your refund policy?",\n    "How long does shipping take?",\n    "Is my product under warranty?",\n    "Can I get express shipping?",\n]\n\n# Capture traces - automatically logged to the active experiment\nfor question in test_questions:\n    response = bot.answer(question)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-3-add-ground-truth-expectations",children:"Step 3: Add Ground Truth Expectations"}),"\n",(0,i.jsxs)(t.p,{children:["Add expectations to your traces to define what constitutes correct behavior. Use ",(0,i.jsx)(r.B,{fn:"mlflow.log_expectation",children:"mlflow.log_expectation()"})," to annotate traces with ground truth values that will serve as your evaluation baseline."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Search for recent traces (uses current active experiment by default)\ntraces = mlflow.search_traces(\n    max_results=10, return_type="list"  # Return list of Trace objects for iteration\n)\n\n# Add expectations to specific traces\nfor trace in traces:\n    # Get the question from the root span inputs\n    root_span = trace.data._get_root_span()\n    question = (\n        root_span.inputs.get("question", "") if root_span and root_span.inputs else ""\n    )\n\n    if "refund" in question.lower():\n        mlflow.log_expectation(\n            trace_id=trace.info.trace_id,\n            name="key_information",\n            value={"must_mention": ["30 days", "receipt"], "tone": "helpful"},\n        )\n    elif "shipping" in question.lower():\n        mlflow.log_expectation(\n            trace_id=trace.info.trace_id,\n            name="key_information",\n            value={"must_mention": ["5-7 days"], "offers_express": True},\n        )\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-4-create-an-evaluation-dataset",children:"Step 4: Create an Evaluation Dataset"}),"\n",(0,i.jsxs)(t.p,{children:["Transform your annotated traces into a reusable evaluation dataset. Use ",(0,i.jsx)(r.B,{fn:"mlflow.genai.datasets.create_dataset",children:"create_dataset()"})," to initialize your dataset and ",(0,i.jsx)(r.B,{fn:"mlflow.entities.EvaluationDataset.merge_records",children:"merge_records()"})," to add test cases from multiple sources."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from mlflow.genai.datasets import create_dataset\n\n# Create dataset from current experiment\ndataset = create_dataset(\n    name="customer_support_qa_v1",\n    experiment_id=mlflow.get_experiment_by_name("Customer Support Bot").experiment_id,\n    tags={"stage": "validation", "domain": "customer_support"},\n)\n\n# Re-fetch traces to get the attached expectations\n# The expectations are now part of the trace data\nannotated_traces = mlflow.search_traces(\n    max_results=100,\n    return_type="list",  # Need list for merge_records\n)\n\n# Add traces to dataset\ndataset.merge_records(annotated_traces)\n\n# Optionally add manual test cases\nmanual_tests = [\n    {\n        "inputs": {"question": "Can I return an item after 45 days?"},\n        "expectations": {"should_clarify": "30-day policy", "tone": "apologetic"},\n    },\n    {\n        "inputs": {"question": "Do you ship internationally?"},\n        "expectations": {"provides_alternatives": True},\n    },\n]\ndataset.merge_records(manual_tests)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-5-run-systematic-evaluation",children:"Step 5: Run Systematic Evaluation"}),"\n",(0,i.jsxs)(t.p,{children:["Evaluate your application against the dataset using built-in and custom scorers. Use ",(0,i.jsx)(r.B,{fn:"mlflow.genai.evaluate",children:"mlflow.genai.evaluate()"})," to run comprehensive evaluations with scorers like ",(0,i.jsx)(r.B,{fn:"mlflow.genai.scorers.Correctness",children:"Correctness"})," for factual accuracy assessment. You can also create custom scorers using the ",(0,i.jsx)(r.B,{fn:"mlflow.genai.scorers.scorer",children:"@scorer decorator"})," to evaluate domain-specific criteria."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from mlflow.genai import evaluate\nfrom mlflow.genai.scorers import Correctness, Guidelines, scorer\n\n\n# Define custom scorer for your specific needs\n@scorer\ndef contains_required_info(outputs: str, expectations: dict) -> float:\n    """Check if response contains required information."""\n    if "must_mention" not in expectations:\n        return 1.0\n\n    output_lower = outputs.lower()\n    mentioned = [term for term in expectations["must_mention"] if term in output_lower]\n    return len(mentioned) / len(expectations["must_mention"])\n\n\n# Configure evaluation\nscorers = [\n    Correctness(name="factual_accuracy"),\n    Guidelines(\n        name="support_quality",\n        guidelines="Response must be helpful, accurate, and professional",\n    ),\n    contains_required_info,\n]\n\n# Run evaluation\nresults = evaluate(\n    data=dataset,\n    predict_fn=bot.answer,\n    scorers=scorers,\n    model_id="customer-support-bot-v1",\n)\n\n# Access results\nmetrics = results.metrics\ndetailed_results = results.tables["eval_results_table"]\n'})}),"\n",(0,i.jsx)(t.h2,{id:"step-6-iterate-and-improve",children:"Step 6: Iterate and Improve"}),"\n",(0,i.jsx)(t.p,{children:"Use evaluation results to improve your application, then re-evaluate using the same dataset."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Analyze results\nlow_scores = detailed_results[detailed_results["factual_accuracy/score"] < 0.8]\nif not low_scores.empty:\n    # Identify patterns in failures\n    failed_questions = low_scores["inputs.question"].tolist()\n\n    # Example improvements based on failure analysis\n    bot.knowledge_base[\n        "refund"\n    ] = "Full refunds available within 30 days with original receipt. Store credit offered after 30 days."\n    bot.client.temperature = 0.2  # Reduce temperature for more consistent responses\n\n    # Re-evaluate with same dataset for comparison\n    improved_results = evaluate(\n        data=dataset,\n        predict_fn=bot.answer,  # Updated bot\n        scorers=scorers,\n        model_id="customer-support-bot-v2",\n    )\n\n    # Compare versions\n    improvement = (\n        improved_results.metrics["factual_accuracy/score"]\n        - metrics["factual_accuracy/score"]\n    )\n'})}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(l.A,{icon:p.A,iconSize:48,title:"Custom Scorers",description:"Build sophisticated scorers for complex evaluation criteria",href:"/genai/eval-monitor/scorers",linkText:"Learn more \u2192",containerHeight:64}),(0,i.jsx)(l.A,{icon:w.A,iconSize:48,title:"SDK Reference",description:"Deep dive into dataset management APIs",href:"/genai/datasets/sdk-guide",linkText:"View guide \u2192",containerHeight:64}),(0,i.jsx)(l.A,{icon:g.A,iconSize:48,title:"Production Monitoring",description:"Set up continuous evaluation for production",href:"/genai/tracing/prod-tracing",linkText:"Learn more \u2192",containerHeight:64})]})]})}function b(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(N,{...e})}):N(e)}},47020:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);const a={wrapper:"wrapper_sf5q"};var i=n(74848);function o({children:e}){return(0,i.jsx)("div",{className:a.wrapper,children:e})}},49374:(e,t,n)=>{n.d(t,{B:()=>s});n(96540);const a=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.agno":"api_reference/python_api/mlflow.agno.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.webhooks":"api_reference/python_api/mlflow.webhooks.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.typescript":"api_reference/typescript_api/index.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var i=n(86025),o=n(74848);const r=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(a[e])return e}return null};function s({fn:e,children:t,hash:n}){const s=r(e);if(!s)return(0,o.jsx)(o.Fragment,{children:t});const l=(0,i.Ay)(`/${a[s]}#${n??e}`);return(0,o.jsx)("a",{href:l,target:"_blank",children:t??(0,o.jsxs)("code",{children:[e,"()"]})})}},56955:(e,t,n)=>{n.d(t,{A:()=>P});var a=n(96540);const i="loopContainer_P7aD",o="loopTitle_JPUj",r="loopContent_d_OB",s="circleContainer_r3vu",l="svgCanvas_uDoP",c="arrowPath_C9al",p="arrowHead_pHvN",m="stepNode_dfTI",d="stepNodeContent_qttg",h="highlighted_oNtg",f="focusNode_z3RB",u="stepNumber_LNrP",_="stepLabel_vl8R",w="centerIcon_KAOa",g="loopIconWrapper_xBPW",x="loopText_T4eg",v="tooltip_UzKu",y="tooltipTitle_HAKW",j="tooltipDescription_EDYJ",N="tooltipArrow_WNhr",b="centerTooltip_R18b",k="centerTooltipDescription_ttXB",A="mobileLinearContent_PCYK",C="mobileStepItem_x9mX",S="mobileStepIndicator_zWzO",I="mobileStepNumber_HnjD",D="mobileFocusNode_FTRa",T="mobileStepConnector_kK9y",q="mobileStepContent_jmKx",E="mobileStepTitle_P2DM",B="mobileStepDescription_qbMN",L="mobileLoopBack_nXtn",M="mobileLoopIcon_FAGz",R="mobileLoopContent_BRFV",$="mobileLoopTitle_JcCt",z="mobileLoopDescription_5B8T";var G=n(74848);const P=({steps:e,title:t,loopBackIcon:n,loopBackText:P,loopBackDescription:H,circleSize:O=400})=>{const[W,F]=(0,a.useState)(null),[U,K]=(0,a.useState)(!1),[Y,J]=(0,a.useState)({x:0,y:0}),[X,V]=(0,a.useState)(!1),Z=(0,a.useRef)(null);a.useEffect(()=>{const e=()=>{V(window.innerWidth<=768)};return e(),window.addEventListener("resize",e),()=>window.removeEventListener("resize",e)},[]);const Q=X?280:O,ee=(()=>{const t=O/2,n=X?100:140,a=X?130:220,i=Math.min(1.2,.8+.05*e.length),o=(t-(X?50:80))*i;return Math.max(n,Math.min(a,o))})(),te=Q/2,ne=Q/2,ae=t=>{const n=2*t*Math.PI/e.length-Math.PI/2;return{x:te+ee*Math.cos(n),y:ne+ee*Math.sin(n)}},ie=(e,t)=>{const n=ae(e),a=ae(t),i=a.x-n.x,o=a.y-n.y,r=(n.x+a.x)/2,s=(n.y+a.y)/2,l=Math.sqrt(i*i+o*o),c=i/l,p=o/l;return`M ${r-10*c} ${s-10*p} L ${r+10*c} ${s+10*p}`},oe=()=>{F(null)};return X?(0,G.jsxs)("div",{className:i,children:[t&&(0,G.jsx)("h3",{className:o,children:t}),(0,G.jsxs)("div",{className:A,children:[e.map((t,n)=>(0,G.jsxs)("div",{className:C,children:[(0,G.jsxs)("div",{className:S,children:[(0,G.jsx)("div",{className:`${I} ${t.isFocus?D:""}`,children:t.icon?(0,G.jsx)(t.icon,{size:20}):(0,G.jsx)("span",{children:n+1})}),n<e.length-1&&(0,G.jsx)("div",{className:T})]}),(0,G.jsxs)("div",{className:q,children:[(0,G.jsx)("h4",{className:E,children:t.title}),(0,G.jsx)("p",{className:B,children:t.detailedDescription||t.description})]})]},n)),n&&H&&(0,G.jsxs)("div",{className:L,children:[(0,G.jsx)("div",{className:M,children:(0,G.jsx)(n,{size:24})}),(0,G.jsxs)("div",{className:R,children:[(0,G.jsx)("h4",{className:$,children:P||"Iterate"}),(0,G.jsx)("p",{className:z,children:H})]})]})]})]}):(0,G.jsxs)("div",{className:i,children:[t&&(0,G.jsx)("h3",{className:o,children:t}),(0,G.jsx)("div",{className:r,children:(0,G.jsxs)("div",{className:s,ref:Z,style:{width:`${Q}px`,height:`${Q}px`},children:[(0,G.jsxs)("svg",{width:Q,height:Q,className:l,children:[e.map((t,n)=>{const a=(n+1)%e.length;return(0,G.jsxs)("g",{children:[(0,G.jsx)("defs",{children:(0,G.jsx)("marker",{id:`arrowhead-${n}`,markerWidth:"6",markerHeight:"6",refX:"5",refY:"3",orient:"auto",children:(0,G.jsx)("path",{d:"M 0 0 L 6 3 L 0 6 L 1.5 3 Z",fill:"currentColor",opacity:"1",className:p})})}),(0,G.jsx)("path",{d:ie(n,a),fill:"none",stroke:"currentColor",strokeWidth:"2",strokeDasharray:"0",opacity:"0.9",markerEnd:`url(#arrowhead-${n})`,className:c})]},`arrow-${n}`)}),n&&(0,G.jsxs)("g",{className:w,onMouseEnter:()=>K(!0),onMouseLeave:()=>K(!1),style:{cursor:"pointer"},children:[(0,G.jsx)("foreignObject",{x:te-35,y:ne-35,width:"70",height:"70",children:(0,G.jsx)("div",{className:g,children:(0,G.jsx)(n,{size:32})})}),P&&(0,G.jsx)("text",{x:te,y:ne+50,textAnchor:"middle",className:x,children:P})]})]}),e.map((e,t)=>{const n=ae(t);return(0,G.jsxs)("div",{className:`${m} ${e.highlight?h:""} ${e.isFocus?f:""}`,style:{left:`${n.x}px`,top:`${n.y}px`,transform:"translate(-50%, -50%)"},onMouseEnter:e=>(e=>{if(F(e),Z.current){Z.current.getBoundingClientRect();const t=ae(e);J({x:t.x,y:t.y})}})(t),onMouseLeave:oe,children:[(0,G.jsx)("div",{className:d,children:e.icon?(0,G.jsx)(e.icon,{size:24}):(0,G.jsx)("span",{className:u,children:t+1})}),(0,G.jsx)("div",{className:_,children:e.title})]},t)}),null!==W&&(0,G.jsxs)("div",{className:v,style:{left:`${Y.x}px`,top:`${Y.y}px`,transform:"translate(-50%, -120%)"},children:[(0,G.jsx)("h4",{className:y,children:e[W].title}),(0,G.jsx)("p",{className:j,children:e[W].detailedDescription||e[W].description}),(0,G.jsx)("div",{className:N})]}),U&&H&&(0,G.jsx)("div",{className:b,style:{left:`${te}px`,top:`${ne}px`,transform:"translate(-50%, -50%)"},children:(0,G.jsx)("p",{className:k,children:H})})]})})]})}},65592:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var a=n(34164);const i={tilesGrid:"tilesGrid_hB9N"};var o=n(74848);function r({children:e,className:t}){return(0,o.jsx)("div",{className:(0,a.A)(i.tilesGrid,t),children:e})}},66927:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);const a={container:"container_JwLF",imageWrapper:"imageWrapper_RfGN",image:"image_bwOA",caption:"caption_jo2G"};var i=n(86025),o=n(74848);function r({src:e,alt:t,width:n,caption:r,className:s}){return(0,o.jsxs)("div",{className:`${a.container} ${s||""}`,children:[(0,o.jsx)("div",{className:a.imageWrapper,style:n?{width:n}:{},children:(0,o.jsx)("img",{src:(0,i.Ay)(e),alt:t,className:a.image})}),r&&(0,o.jsx)("p",{className:a.caption,children:r})]})}},79206:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);const a={conceptOverview:"conceptOverview_x8T_",overviewTitle:"overviewTitle_HyAI",conceptGrid:"conceptGrid_uJNV",conceptCard:"conceptCard_oday",conceptHeader:"conceptHeader_HCk5",conceptIcon:"conceptIcon_gejw",conceptTitle:"conceptTitle_TGMM",conceptDescription:"conceptDescription_ZyDn"};var i=n(74848);function o({concepts:e,title:t}){return(0,i.jsxs)("div",{className:a.conceptOverview,children:[t&&(0,i.jsx)("h3",{className:a.overviewTitle,children:t}),(0,i.jsx)("div",{className:a.conceptGrid,children:e.map((e,t)=>(0,i.jsxs)("div",{className:a.conceptCard,children:[(0,i.jsxs)("div",{className:a.conceptHeader,children:[e.icon&&(0,i.jsx)("div",{className:a.conceptIcon,children:(0,i.jsx)(e.icon,{size:20})}),(0,i.jsx)("h4",{className:a.conceptTitle,children:e.title})]}),(0,i.jsx)("p",{className:a.conceptDescription,children:e.description})]},t))})]})}},82238:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);const a={featureHighlights:"featureHighlights_Ardf",highlightItem:"highlightItem_XPnN",highlightIcon:"highlightIcon_SUR8",highlightContent:"highlightContent_d0XP"};var i=n(74848);function o({features:e}){return(0,i.jsx)("div",{className:a.featureHighlights,children:e.map((e,t)=>(0,i.jsxs)("div",{className:a.highlightItem,children:[e.icon&&(0,i.jsx)("div",{className:a.highlightIcon,children:(0,i.jsx)(e.icon,{size:24})}),(0,i.jsxs)("div",{className:a.highlightContent,children:[(0,i.jsx)("h4",{children:e.title}),(0,i.jsx)("p",{children:e.description})]})]},t))})}}}]);