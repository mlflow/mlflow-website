"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8085],{24278:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/openai-agent-tracing-function-calling-a01f7b2fb8f5c73f54d43b2a8e2d63de.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(96540);const l={},i=a.createContext(l);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},30662:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/openai-agent-tracing-guardrail-c35d8df829459ed5a5927866c6b745d8.png"},62534:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/openai-agent-tracing-abaaf17d1cba0a11363d63b29a979cbb.png"},67756:(e,n,t)=>{t.d(n,{B:()=>p});t(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=t(29030),i=t(56289),o=t(74848);const r=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(a[e])return e}return null};function p(e){let{fn:n,children:t}=e;const p=r(n);if(!p)return(0,o.jsx)(o.Fragment,{children:t});const s=(0,l.Ay)(`/${a[p]}#${n}`);return(0,o.jsx)(i.A,{to:s,target:"_blank",children:t??(0,o.jsxs)("code",{children:[n,"()"]})})}},71365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"tracing/integrations/openai-agent","title":"Tracing OpenAI Agent\ud83e\udd16","description":"OpenAI Tracing via autolog","source":"@site/docs/tracing/integrations/openai-agent.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/openai-agent","permalink":"/docs/latest/tracing/integrations/openai-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"OpenAI Agents SDK"},"sidebar":"docsSidebar","previous":{"title":"LangGraph","permalink":"/docs/latest/tracing/integrations/langgraph"},"next":{"title":"LlamaIndex","permalink":"/docs/latest/tracing/integrations/llama_index"}}');var l=t(74848),i=t(28453),o=t(67756);const r={sidebar_position:3,sidebar_label:"OpenAI Agents SDK"},p="Tracing OpenAI Agent\ud83e\udd16",s={},m=[{value:"Basic Example",id:"basic-example",level:2},{value:"Function Calling",id:"function-calling",level:2},{value:"Guardrails",id:"guardrails",level:2},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tracing-openai-agent",children:"Tracing OpenAI Agent\ud83e\udd16"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"OpenAI Tracing via autolog",src:t(62534).A+"",width:"1494",height:"710"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for ",(0,l.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/agents-sdk",children:"OpenAI Agents SDK"}),", a multi-agent framework developed by OpenAI. By enabling auto tracing\nfor OpenAI by calling the ",(0,l.jsx)(o.B,{fn:"mlflow.openai.autolog"})," function, MLflow will capture traces and log them to the active MLflow Experiment."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.openai.autolog()\n"})}),"\n",(0,l.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,l.jsx)(n.p,{children:"The following example demonstrates how to use the OpenAI Agents SDK with MLflow tracing for simple multi-language chat agents. The three agents collaborate to determine the language of the input and handoff to the appropriate sub-agent that speaks the language. MLflow captures how the agents interact with each other and make calls to the OpenAI API."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport asyncio\nfrom agents import Agent, Runner\n\n# Enable auto tracing for OpenAI Agents SDK\nmlflow.openai.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("OpenAI Agent")\n\n# Define a simple multi-agent workflow\nspanish_agent = Agent(\n    name="Spanish agent",\n    instructions="You only speak Spanish.",\n)\n\nenglish_agent = Agent(\n    name="English agent",\n    instructions="You only speak English",\n)\n\ntriage_agent = Agent(\n    name="Triage agent",\n    instructions="Handoff to the appropriate agent based on the language of the request.",\n    handoffs=[spanish_agent, english_agent],\n)\n\n\nasync def main():\n    result = await Runner.run(triage_agent, input="Hola, \xbfc\xf3mo est\xe1s?")\n    print(result.final_output)\n\n\n# If you are running this code in a Jupyter notebook, replace this with `await main()`.\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,l.jsx)(n.h2,{id:"function-calling",children:"Function Calling"}),"\n",(0,l.jsx)(n.p,{children:"OpenAI Agents SDK support defining functions that can be called by the agent. MLflow captures the function calls and display what functions are available to the agent, which of them are called, and the inputs and outputs of the function calls."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import asyncio\n\nfrom agents import Agent, Runner, function_tool\n\n# Enable auto tracing for OpenAI Agents SDK\nmlflow.openai.autolog()\n\n\n@function_tool\ndef get_weather(city: str) -> str:\n    return f"The weather in {city} is sunny."\n\n\nagent = Agent(\n    name="Hello world",\n    instructions="You are a helpful agent.",\n    tools=[get_weather],\n)\n\n\nasync def main():\n    result = await Runner.run(agent, input="What\'s the weather in Tokyo?")\n    print(result.final_output)\n    # The weather in Tokyo is sunny.\n\n\n# If you are running this code in a Jupyter notebook, replace this with `await main()`.\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"OpenAI Tracing via autolog",src:t(24278).A+"",width:"1536",height:"906"})}),"\n",(0,l.jsx)(n.h2,{id:"guardrails",children:"Guardrails"}),"\n",(0,l.jsx)(n.p,{children:"OpenAI Agents SDK support defining guardrails that can be used to check the input and output of the agent. MLflow captures the guardrail checks and display the reasoning behind the guardrail check and whether the guardrail was tripped."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from pydantic import BaseModel\nfrom agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    InputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    TResponseInputItem,\n    input_guardrail,\n)\n\n# Enable auto tracing for OpenAI Agents SDK\nmlflow.openai.autolog()\n\n\nclass MathHomeworkOutput(BaseModel):\n    is_math_homework: bool\n    reasoning: str\n\n\nguardrail_agent = Agent(\n    name="Guardrail check",\n    instructions="Check if the user is asking you to do their math homework.",\n    output_type=MathHomeworkOutput,\n)\n\n\n@input_guardrail\nasync def math_guardrail(\n    ctx: RunContextWrapper[None], agent: Agent, input\n) -> GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, input, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output,\n        tripwire_triggered=result.final_output.is_math_homework,\n    )\n\n\nagent = Agent(\n    name="Customer support agent",\n    instructions="You are a customer support agent. You help customers with their questions.",\n    input_guardrails=[math_guardrail],\n)\n\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, "Hello, can you help me solve for x: 2x + 3 = 11?")\n        print("Guardrail didn\'t trip - this is unexpected")\n\n    except InputGuardrailTripwireTriggered:\n        print("Math homework guardrail tripped")\n\n\n# If you are running this code in a Jupyter notebook, replace this with `await main()`.\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"OpenAI Tracing via autolog",src:t(30662).A+"",width:"1372",height:"692"})}),"\n",(0,l.jsx)(n.h2,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,l.jsxs)(n.p,{children:["Auto tracing for OpenAI Agents SDK can be disabled globally by calling ",(0,l.jsx)(n.code,{children:"mlflow.openai.autolog(disable=True)"})," or ",(0,l.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);