"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[516],{11470:(e,r,n)=>{n.d(r,{A:()=>v});var t=n(96540),a=n(34164),i=n(23104),s=n(56347),l=n(205),o=n(57485),c=n(31682),m=n(70679);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:r,children:n}=e;return(0,t.useMemo)((()=>{const e=r??function(e){return p(e).map((({props:{value:e,label:r,attributes:n,default:t}})=>({value:e,label:r,attributes:n,default:t})))}(n);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function u({value:e,tabValues:r}){return r.some((r=>r.value===e))}function d({queryString:e=!1,groupId:r}){const n=(0,s.W6)(),a=function({queryString:e=!1,groupId:r}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:e,groupId:r});return[(0,o.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(n.location.search);r.set(a,e),n.replace({...n.location,search:r.toString()})}),[a,n])]}function f(e){const{defaultValue:r,queryString:n=!1,groupId:a}=e,i=h(e),[s,o]=(0,t.useState)((()=>function({defaultValue:e,tabValues:r}){if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:i}))),[c,p]=d({queryString:n,groupId:a}),[f,_]=function({groupId:e}){const r=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,m.Dv)(r);return[n,(0,t.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:a}),y=(()=>{const e=c??f;return u({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{y&&o(y)}),[y]);return{selectedValue:s,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),_(e)}),[p,_,i]),tabValues:i}}var _=n(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=n(74848);function g({className:e,block:r,selectedValue:n,selectValue:t,tabValues:s}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const r=e.currentTarget,a=l.indexOf(r),i=s[a].value;i!==n&&(o(r),t(i))},m=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;r=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;r=l[n]??l[l.length-1];break}}r?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},e),children:s.map((({value:e,label:r,attributes:t})=>(0,w.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:m,onClick:c,...t,className:(0,a.A)("tabs__item",y.tabItem,t?.className,{"tabs__item--active":n===e}),children:r??e},e)))})}function x({lazy:e,children:r,selectedValue:n}){const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===n));return e?(0,t.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,t.cloneElement)(e,{key:r,hidden:e.props.value!==n})))})}function b(e){const r=f(e);return(0,w.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,w.jsx)(g,{...r,...e}),(0,w.jsx)(x,{...r,...e})]})}function v(e){const r=(0,_.A)();return(0,w.jsx)(b,{...e,children:p(e.children)},String(r))}},19365:(e,r,n)=>{n.d(r,{A:()=>s});n(96540);var t=n(34164);const a={tabItem:"tabItem_Ymn6"};var i=n(74848);function s({children:e,hidden:r,className:n}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(a.tabItem,n),hidden:r,children:e})}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>l});var t=n(96540);const a={},i=t.createContext(a);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},44237:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"tracing/observe-with-traces/query-via-sdk","title":"Query Traces via SDK","description":"This guide shows you how to programmatically query traces using the MLflow SDK for debugging, monitoring, and analysis. While the Search Traces guide covers comprehensive search functionality, this page focuses on practical SDK usage patterns for observability workflows. To learn more about detailed search syntax and filtering capabilities, see the Search Traces guide.","source":"@site/docs/genai/tracing/observe-with-traces/query-via-sdk.mdx","sourceDirName":"tracing/observe-with-traces","slug":"/tracing/observe-with-traces/query-via-sdk","permalink":"/docs/latest/genai/tracing/observe-with-traces/query-via-sdk","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"MLflow Tracing UI","permalink":"/docs/latest/genai/tracing/observe-with-traces/ui"},"next":{"title":"Lightweight Tracing SDK","permalink":"/docs/latest/genai/tracing/lightweight-sdk"}}');var a=n(74848),i=n(28453),s=n(49374);n(11470),n(19365);const l={},o="Query Traces via SDK",c={},m=[{value:"Why Query Traces Programmatically?",id:"why-query-traces-programmatically",level:2},{value:"Basic Query Methods",id:"basic-query-methods",level:2},{value:"Choosing the Right Return Type",id:"choosing-the-right-return-type",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Finding and Analyzing Errors",id:"finding-and-analyzing-errors",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"User Session Analysis",id:"user-session-analysis",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"query-traces-via-sdk",children:"Query Traces via SDK"})}),"\n",(0,a.jsx)(r.admonition,{type:"note",children:(0,a.jsxs)(r.p,{children:["This guide shows you how to programmatically query traces using the MLflow SDK for debugging, monitoring, and analysis. While the ",(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})," guide covers comprehensive search functionality, this page focuses on practical SDK usage patterns for observability workflows. To learn more about detailed search syntax and filtering capabilities, see the ",(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})," guide."]})}),"\n",(0,a.jsx)(r.h2,{id:"why-query-traces-programmatically",children:"Why Query Traces Programmatically?"}),"\n",(0,a.jsx)(r.p,{children:"The MLflow UI is great for interactive exploration, but programmatic access enables automation and integration with your existing workflows. You can analyze error patterns across thousands of traces, monitor performance trends over time, and build custom analysis workflows."}),"\n",(0,a.jsxs)(r.admonition,{type:"important",children:[(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"search_traces"})," API returns a pandas DataFrame by default (if pandas is installed), but can also return a list of Trace objects when ",(0,a.jsx)(r.code,{children:'return_type="list"'})," is specified."]}),(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Syntax Differences"}),": When using DataFrame return type, the column names used in ",(0,a.jsx)(r.code,{children:"filter_string"})," differ from those in the returned DataFrame:"]}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["Filter: ",(0,a.jsx)(r.code,{children:"status"})," \u2192 DataFrame: ",(0,a.jsx)(r.code,{children:"state"})]}),"\n",(0,a.jsxs)(r.li,{children:["Filter: ",(0,a.jsx)(r.code,{children:"timestamp_ms"})," \u2192 DataFrame: ",(0,a.jsx)(r.code,{children:"request_time"})]}),"\n",(0,a.jsxs)(r.li,{children:["Filter: ",(0,a.jsx)(r.code,{children:"execution_time_ms"})," \u2192 DataFrame: ",(0,a.jsx)(r.code,{children:"execution_duration"})]}),"\n"]})]}),"\n",(0,a.jsx)(r.h2,{id:"basic-query-methods",children:"Basic Query Methods"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(s.B,{fn:"mlflow.search_traces"})," function returns trace data in two formats:"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"pandas DataFrame"})," (default if pandas is installed): Perfect for data analysis and quick insights"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"List of Trace objects"}),": Useful when you need to work with the full Trace object structure"]}),"\n"]}),"\n",(0,a.jsxs)(r.p,{children:["You can control the return type using the ",(0,a.jsx)(r.code,{children:"return_type"})," parameter:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import mlflow\n\n# Default: Get traces as a pandas DataFrame (if pandas is installed)\nerror_traces_df = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="status = \'ERROR\'", max_results=100\n)\n\n# Easy analysis with pandas\nprint(f"Found {len(error_traces_df)} errors")\nprint(f"Average execution time: {error_traces_df[\'execution_duration\'].mean():.1f}ms")\n\n# Alternative: Get traces as a list of Trace objects\nerror_traces_list = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="status = \'ERROR\'",\n    max_results=100,\n    return_type="list",\n)\n\n# Work with Trace objects directly\nfor trace in error_traces_list[:3]:\n    print(f"Trace {trace.info.trace_id}: {trace.info.execution_duration}ms")\n'})}),"\n",(0,a.jsx)(r.h3,{id:"choosing-the-right-return-type",children:"Choosing the Right Return Type"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Use DataFrame (default) when"}),":"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"You need to perform statistical analysis on trace data"}),"\n",(0,a.jsx)(r.li,{children:"You want to aggregate metrics across multiple traces"}),"\n",(0,a.jsx)(r.li,{children:"You're creating visualizations or reports"}),"\n",(0,a.jsx)(r.li,{children:"You're familiar with pandas and want to leverage its powerful data manipulation capabilities"}),"\n"]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Use List of Trace objects when"}),":"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"You need access to the full Trace object methods and properties"}),"\n",(0,a.jsx)(r.li,{children:"You're integrating with other MLflow APIs that expect Trace objects"}),"\n",(0,a.jsx)(r.li,{children:"You want to work with individual traces in detail"}),"\n",(0,a.jsx)(r.li,{children:"pandas is not installed in your environment"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsx)(r.h3,{id:"finding-and-analyzing-errors",children:"Finding and Analyzing Errors"}),"\n",(0,a.jsx)(r.p,{children:"When you need to understand what's going wrong in your application, start with simple queries to identify patterns:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import mlflow\nfrom datetime import datetime, timedelta\n\n# Get errors from the last 24 hours\nyesterday = datetime.now() - timedelta(days=1)\ntimestamp_ms = int(yesterday.timestamp() * 1000)\n\nerror_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string=f"status = \'ERROR\' AND timestamp_ms > {timestamp_ms}",\n    order_by=["timestamp_ms DESC"],\n)\n\nprint(f"Found {len(error_traces)} errors in the last 24 hours")\n\n# Look at error distribution by tags\nif not error_traces.empty:\n    # Count errors by user if user tags exist\n    if "tags" in error_traces.columns:\n        print("\\nError patterns:")\n        tag_analysis = {}\n        for tags in error_traces["tags"].dropna():\n            if isinstance(tags, dict):\n                user = tags.get("user_id", "unknown")\n                tag_analysis[user] = tag_analysis.get(user, 0) + 1\n\n        for user, count in sorted(\n            tag_analysis.items(), key=lambda x: x[1], reverse=True\n        )[:5]:\n            print(f"  {user}: {count} errors")\n'})}),"\n",(0,a.jsx)(r.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,a.jsx)(r.p,{children:"Track how your application performs over time and identify bottlenecks:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'# Get successful traces to analyze performance\nrecent_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="status = \'OK\'",\n    order_by=["timestamp_ms DESC"],\n    max_results=1000,\n)\n\nif not recent_traces.empty:\n    # Basic performance metrics\n    avg_time = recent_traces["execution_duration"].mean()\n    p95_time = recent_traces["execution_duration"].quantile(0.95)\n\n    print(f"Average execution time: {avg_time:.1f}ms")\n    print(f"95th percentile: {p95_time:.1f}ms")\n\n    # Find slowest traces\n    slow_traces = recent_traces[recent_traces["execution_duration"] > p95_time]\n    print(f"Found {len(slow_traces)} slow traces (>{p95_time:.1f}ms)")\n'})}),"\n",(0,a.jsx)(r.h3,{id:"user-session-analysis",children:"User Session Analysis"}),"\n",(0,a.jsx)(r.p,{children:"Understand how users interact with your application by analyzing their sessions:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'# Analyze traces for a specific user\nuser_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="tags.user_id = \'user123\'",\n    order_by=["timestamp_ms ASC"],\n)\n\nif not user_traces.empty:\n    print(f"User has {len(user_traces)} interactions")\n\n    # Calculate session metrics\n    total_time = user_traces["execution_duration"].sum()\n    error_count = len(user_traces[user_traces["state"] == "ERROR"])\n\n    print(f"Total execution time: {total_time:.1f}ms")\n    print(\n        f"Error rate: {error_count}/{len(user_traces)} ({error_count/len(user_traces)*100:.1f}%)"\n    )\n\n    # Show recent activity\n    print("\\nRecent traces:")\n    for _, trace in user_traces.tail(3).iterrows():\n        status = "\u2705" if trace["state"] == "OK" else "\u274c"\n        print(f"  {status} {trace[\'execution_duration\']:.1f}ms")\n'})}),"\n",(0,a.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Start Simple"}),": Begin with basic queries and gradually add complexity as needed. Most monitoring can be done with simple filters and pandas operations."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Use Time Windows"}),": Always filter by timestamp_ms when analyzing recent data to keep queries fast and relevant."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Handle Missing Data"}),": Production traces may have missing fields, so always check if data exists before using it."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Keep Queries Focused"}),": Use specific filters to get only the data you need rather than retrieving everything and filtering in memory."]}),"\n",(0,a.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(r.p,{children:"Add basic error handling to make your scripts more robust:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import pandas as pd\n\n\ndef safe_trace_query(experiment_ids, filter_string=None):\n    """Query traces with basic error handling"""\n    try:\n        return mlflow.search_traces(\n            experiment_ids=experiment_ids, filter_string=filter_string\n        )\n    except Exception as e:\n        print(f"Error querying traces: {e}")\n        return pd.DataFrame()  # Return empty DataFrame on error\n\n\n# Usage\ntraces = safe_trace_query(["1"], "status = \'ERROR\'")\nif not traces.empty:\n    print(f"Found {len(traces)} traces")\nelse:\n    print("No traces found or query failed")\n'})}),"\n",(0,a.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(r.p,{children:"Programmatic trace querying with the MLflow SDK enables powerful automation for debugging, monitoring, and analysis. Start with simple queries to understand your data, then build up to more sophisticated analysis workflows."}),"\n",(0,a.jsx)(r.p,{children:"The key is to focus on actionable insights that help you understand and improve your application's behavior in production."}),"\n",(0,a.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/observe-with-traces/ui",children:"MLflow Tracing UI"})}),": Learn the web interface for interactive trace exploration"]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})}),": Master advanced search and filtering techniques"]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/observe-with-traces/delete-traces",children:"Delete and Manage Traces"})}),": Understand trace lifecycle management"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},49374:(e,r,n)=>{n.d(r,{B:()=>l});n(96540);const t=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var a=n(86025),i=n(74848);const s=e=>{const r=e.split(".");for(let n=r.length;n>0;n--){const e=r.slice(0,n).join(".");if(t[e])return e}return null};function l({fn:e,children:r,hash:n}){const l=s(e);if(!l)return(0,i.jsx)(i.Fragment,{children:r});const o=(0,a.Ay)(`/${t[l]}#${n??e}`);return(0,i.jsx)("a",{href:o,target:"_blank",children:r??(0,i.jsxs)("code",{children:[e,"()"]})})}}}]);