"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2291],{7964:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/langchain_model_from_code-8813a0926cbf8c6d8d03b2fe5dcd6d91.png"},8664:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/basic_model_from_code_ui-d31f6ac1bd0841c97400f569fdb779cb.png"},9605:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/model_from_code_code_paths-3b33bcd962d79ed834c40fa25fa14988.png"},23316:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/models_from_code_journey-de9843c474c53ab2434d43a56b6ac3be.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},l=o.createContext(i);function a(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(l.Provider,{value:n},e.children)}},65537:(e,n,t)=>{t.d(n,{A:()=>v});var o=t(96540),i=t(34164),l=t(65627),a=t(56347),r=t(50372),s=t(30604),d=t(11861),c=t(78749);function h(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:i}}=e;return{value:n,label:t,attributes:o,default:i}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(l),(0,o.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(i.location.search);n.set(l,e),i.replace({...i.location,search:n.toString()})}),[l,i])]}function u(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,l=m(e),[a,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:l}))),[d,h]=f({queryString:t,groupId:i}),[u,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,l]=(0,c.Dv)(t);return[i,(0,o.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:i}),w=(()=>{const e=d??u;return p({value:e,tabValues:l})?e:null})();(0,r.A)((()=>{w&&s(w)}),[w]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),h(e),g(e)}),[h,g,l]),tabValues:l}}var g=t(9136);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function x(e){let{className:n,block:t,selectedValue:o,selectValue:a,tabValues:r}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),c=e=>{const n=e.currentTarget,t=s.indexOf(n),i=r[t].value;i!==o&&(d(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:l}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{s.push(e)},onKeyDown:h,onClick:c,...l,className:(0,i.A)("tabs__item",w.tabItem,l?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:l}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===l));return e?(0,o.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function b(e){const n=u(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",w.tabList),children:[(0,y.jsx)(x,{...n,...e}),(0,y.jsx)(j,{...n,...e})]})}function v(e){const n=(0,g.A)();return(0,y.jsx)(b,{...e,children:h(e.children)},String(n))}},67756:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const o=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var i=t(29030),l=t(56289),a=t(74848);const r=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(o[e])return e}return null};function s(e){let{fn:n,children:t}=e;const s=r(n);if(!s)return(0,a.jsx)(a.Fragment,{children:t});const d=(0,i.Ay)(`/${o[s]}#${n}`);return(0,a.jsx)(l.A,{to:d,target:"_blank",children:t??(0,a.jsxs)("code",{children:[n,"()"]})})}},74704:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>h,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"model/models-from-code/index","title":"Models From Code","description":"Models from Code is available in MLflow 2.12.2 and above. If you are using a version earlier than what supports this feature,","source":"@site/docs/model/models-from-code/index.mdx","sourceDirName":"model/models-from-code","slug":"/model/models-from-code/","permalink":"/docs/latest/model/models-from-code/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Dependency Management","permalink":"/docs/latest/model/dependencies/"},"next":{"title":"Custom Python Model","permalink":"/docs/latest/model/python_model"}}');var i=t(74848),l=t(28453),a=t(56289),r=t(65537),s=t(79329),d=t(67756);const c={sidebar_position:3},h="Models From Code",m={},p=[{value:"Differences with Legacy serialization",id:"differences-with-legacy-serialization",level:2},{value:"Core requirements for using Models From Code",id:"core-requirements-for-using-models-from-code",level:2},{value:"Using Models From Code in a Jupyter Notebook",id:"using-models-from-code-in-a-jupyter-notebook",level:2},{value:"Examples of Using Models From Code",id:"examples-of-using-models-from-code",level:2},{value:"Building a simple Models From Code model",id:"building-a-simple-models-from-code-model",level:3},{value:"Using Models from Code with code_paths dependencies",id:"using-models-from-code-with-code_paths-dependencies",level:3},{value:"Defining a dependent code script",id:"defining-a-dependent-code-script",level:4},{value:"Defining the model as a Python file",id:"defining-the-model-as-a-python-file",level:4},{value:"Logging the Model from Code",id:"logging-the-model-from-code",level:4},{value:"Loading and Viewing the model",id:"loading-and-viewing-the-model",level:4},{value:"MLflow&#39;s native LangChain Models from Code support",id:"mlflows-native-langchain-models-from-code-support",level:3},{value:"Defining the Model with LCEL",id:"defining-the-model-with-lcel",level:4},{value:"Logging the model using Models from Code",id:"logging-the-model-using-models-from-code",level:4},{value:"Loading and Viewing the Model",id:"loading-and-viewing-the-model-1",level:4},{value:"FAQ for Models from Code",id:"faq-for-models-from-code",level:2},{value:"Dependency Management and Requirements",id:"dependency-management-and-requirements",level:3},{value:"Why did I get a NameError when loading my model from a saved script?",id:"why-did-i-get-a-nameerror-when-loading-my-model-from-a-saved-script",level:4},{value:"Loading my model is giving me an ImportError.",id:"loading-my-model-is-giving-me-an-importerror",level:4},{value:"Why is my requirements.txt file filled with packages that my model isn&#39;t using?",id:"why-is-my-requirementstxt-file-filled-with-packages-that-my-model-isnt-using",level:4},{value:"Logging using Models From Code",id:"logging-using-models-from-code",level:3},{value:"I accidentally included an API Key in my script. What do I do?",id:"i-accidentally-included-an-api-key-in-my-script-what-do-i-do",level:4},{value:"Why is my model getting executed when I log it?",id:"why-is-my-model-getting-executed-when-i-log-it",level:4},{value:"Additional Resources",id:"additional-resources",level:2}];function f(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"models-from-code",children:"Models From Code"})}),"\n",(0,i.jsx)(n.admonition,{title:"attention",type:"warning",children:(0,i.jsxs)(n.p,{children:["Models from Code is available in MLflow 2.12.2 and above. If you are using a version earlier than what supports this feature,\nyou are required to use the legacy serialization methods outlined in the ",(0,i.jsx)(n.a,{href:"/model#custom-python-models",children:"Custom Python Model"})," documentation."]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Models from code is only available for ",(0,i.jsx)(n.a,{href:"/llms/langchain",children:"LangChain"}),", ",(0,i.jsx)(n.a,{href:"/llms/llama-index",children:"LlamaIndex"}),", and custom Python agents\nor GenAI apps written using ",(0,i.jsx)(n.code,{children:"pyfunc"}),". For other use cases (e.g. classic ML with xgboost), if you are using ML libraries\ndirectly, using the saving and logging functionality within the corresponding model flavor is recommended."]})}),"\n",(0,i.jsxs)(n.p,{children:["The models from code feature is a comprehensive overhaul of the process of defining, storing, and loading both custom models and specific flavor\nimplementations that do not depend on serialized model weights (such as ",(0,i.jsx)(n.a,{href:"/llms/langchain",children:"LangChain"})," and\n",(0,i.jsx)(n.a,{href:"/llms/llama-index",children:"LlamaIndex"}),"). If you are writing a custom Python model or GenAI agent/app, you should use models from\ncode."]}),"\n",(0,i.jsx)(n.p,{children:"The key difference between Models from Code and legacy serialization of these models is in how a model is represented during serialization."}),"\n",(0,i.jsxs)(n.p,{children:["In the legacy approach, serialization is done on the model object using either ",(0,i.jsx)(n.code,{children:"cloudpickle"})," (custom pyfunc and LangChain) or a custom serializer that has incomplete coverage\n(in the case of LlamaIndex) of all functionality within the underlying package. For custom pyfunc, the usage of ",(0,i.jsx)(n.code,{children:"cloudpickle"})," to serialize object instances creates a binary file that is used to reconstruct the object when loaded."]}),"\n",(0,i.jsx)(n.p,{children:"In models from code, for the model types that are supported, a simple script is saved with the definition of either the custom pyfunc or the flavor's\ninterface (i.e., in the case of LangChain, we can define and mark an LCEL chain directly as a model within a script)."}),"\n",(0,i.jsxs)(n.p,{children:["The greatest gain associated with using models from code for custom ",(0,i.jsx)(n.code,{children:"pyfunc"})," and supported library implementations is in the reduction of repetitive trial-and-error debugging\nthat can occur when working on an implementation. The workflow shown below illustrates how these two methdologies compare when working on a solution for a custom model:"]}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Models from code comparison with legacy serialization",src:t(23316).A+"",width:"1305",height:"1072"})})}),"\n",(0,i.jsx)(n.h2,{id:"differences-with-legacy-serialization",children:"Differences with Legacy serialization"}),"\n",(0,i.jsxs)(n.p,{children:["In the legacy mode for custom models, an instance of your subclassed ",(0,i.jsx)(d.B,{fn:"mlflow.pyfunc.PythonModel",children:(0,i.jsx)(n.code,{children:"mlflow.pyfunc.PythonModel"})})," is submitted in the call to ",(0,i.jsx)(n.code,{children:"log_model"}),". When called via an object\nreference, MLflow will utilize ",(0,i.jsx)(n.code,{children:"cloudpickle"})," to attempt to serialize your object."]}),"\n",(0,i.jsxs)(n.p,{children:["In the native flavor serialization for ",(0,i.jsx)(n.code,{children:"LangChain"}),", ",(0,i.jsx)(n.code,{children:"cloudpickle"})," is used to store object references. However, only a subset of all object types that can be\nused within ",(0,i.jsx)(n.code,{children:"LangChain"})," are available for serializing due to external state references or the use of lambda functions within the APIs. ",(0,i.jsx)(n.code,{children:"LlamaIndex"}),", on the\nother hand, utilizes a custom serializer in the native implementation of the flavor that does not cover all possible uses of the library due to the need for\nexcessively complex implementations to support edge case features within the library."]}),"\n",(0,i.jsxs)(n.p,{children:["In models from code, instead of passing an object reference to an instance of your custom model, you will simply pass a path reference to a script that\ncontains your model definition. When this mode is employed, MLflow will simply execute this script (along with any ",(0,i.jsx)(n.code,{children:"code_paths"})," dependencies prior to running\nthe main script) in the execution environment and instantiating whichever object you define in the call to ",(0,i.jsx)(d.B,{fn:"mlflow.models.set_model"}),", assigning that\nobject as the inference target."]}),"\n",(0,i.jsxs)(n.p,{children:["At no point in this process are there dependencies on serialization libraries such as ",(0,i.jsx)(n.a,{href:"https://docs.python.org/3/library/pickle.html",children:"pickle"})," or\n",(0,i.jsx)(n.a,{href:"https://pypi.org/project/cloudpickle/1.1.1",children:"cloudpickle"}),", removing the broad limitations that these serialization packages have, such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Portability and Compatibility"}),": Loading a pickle or cloudpickle file in a Python version that was different than the one used to serialize the object does not guarantee compatibility."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex Object Serialization"}),": File handles, sockets, external connections, dynamic references, lambda functions and system resources are unavailable for pickling."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Readability"}),": Pickle and CloudPickle both store their serialized objects in a binary format that is impossible to read by humans."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Object serialization and dependency inspection can be very slow, particularly for complex implementations with many code reference dependencies."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-requirements-for-using-models-from-code",children:"Core requirements for using Models From Code"}),"\n",(0,i.jsx)(n.p,{children:"There are some important concepts to be aware of when using the models from code feature, as there are operations that are performed when logging a model\nvia a script that may not be immediately apparent."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Imports"}),": Models from code does not capture external references for non-pip installable packages, just as the legacy ",(0,i.jsx)(n.code,{children:"cloudpickle"})," implementation does not. If you have external references (see the examples below), you must define these dependencies via ",(0,i.jsx)(n.code,{children:"code_paths"})," arguments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execution during logging"}),": In order to validate that the script file that you're logging is valid, the code will be executed before being written to disk, exactly as other methods of model logging."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Requirements inference"}),": Packages that are imported at the top of your defined model script will be inferred as requirements if they are installable from PyPI, regardless of whether you use them in the model execution logic or not."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"If you define import statements that are never used within your script, these will still be included in the requirements listing. It is recommended to use a linter\nthat is capable of determining unused import statements while writing your implementation so that you are not including irrelevant package dependencies."})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"When logging models from code, make sure that your code does not contain any sensitive information, such as API keys, passwords, or other confidential data. The code will be stored in plain text in the MLflow model artifact, and anyone with access to the artifact will be able to view the code."})}),"\n",(0,i.jsx)(n.h2,{id:"using-models-from-code-in-a-jupyter-notebook",children:"Using Models From Code in a Jupyter Notebook"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://jupyter.org",children:"Jupyter"})," (IPython Notebooks) are a very convenient way to work with AI applications and modeling in general. One slight limitation that they\nhave is in their cell-based execution model. Due to the nature of how they are defined and run, the models from code feature does not directly support defining\na notebook as a model. Rather, this feature requires that models are defined as Python scripts (the file extension ",(0,i.jsx)(n.strong,{children:"must end in '.py'"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["Fortunately, the folks that maintain the core kernel that Jupyter uses (",(0,i.jsx)(n.a,{href:"https://ipython.readthedocs.io/en/stable/interactive/magics.html",children:"IPython"}),") have created a\nnumber of magic commands that are usable within notebooks to enhance the usability of notebooks as a development environment for AI practitioners. One of the most\nuseful magic commands that can be used within any notebook environment that is based upon IPython (",(0,i.jsx)(n.code,{children:"Jupyter"}),", ",(0,i.jsx)(n.code,{children:"Databricks Notebooks"}),", etc.) is the ",(0,i.jsx)(n.code,{children:"%%writefile"})," command."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://ipython.readthedocs.io/en/stable/interactive/magics.html#cellmagic-writefile",children:"%%writefile"})," magic command, when written as the first line of a notebook\ncell, will capture the contents of the cell (not the entire notebook, mind you, only the current cell scope) with the exception of the magic command itself and write\nthose contents to the file that you define."]}),"\n",(0,i.jsx)(n.p,{children:"For example, running the following in a notebook:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'%%writefile "./hello.py"\n\nprint("hello!")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Will result in a file being created, located in the same directory as your notebook, that contains:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'print("hello!")\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["There is an optional ",(0,i.jsx)(n.code,{children:"-a"})," append command that can be used with the ",(0,i.jsx)(n.code,{children:"%%writefile"})," magic command. This option will ",(0,i.jsx)(n.strong,{children:"append"})," the cell contents to the file\nbeing targeted for saving the cell contents to. It is ",(0,i.jsx)(n.strong,{children:"not recommended"})," to use this option due to the chances of creating difficult-to-debug overrides within\na script that could contain multiple copies of your model definition logic. It is recommended to use the default behavior of ",(0,i.jsx)(n.code,{children:"%%writefile"}),", which is to overwrite\nthe local file each time that the cell is executed to ensure that the state of your cell's contents are always reflected in the saved script file."]})}),"\n",(0,i.jsx)(n.h2,{id:"examples-of-using-models-from-code",children:"Examples of Using Models From Code"}),"\n",(0,i.jsxs)(n.p,{children:["Each of these examples will show usage of the ",(0,i.jsx)(n.code,{children:"%%writefile"})," magic command at the top of the script definition cell block in order to simulate defining the model code or other\ndependencies from within a single notebook. If you are writing your implementations within an IDE or a text editor, do not place this magic command at the top of your\nscript."]}),"\n",(0,i.jsxs)(r.A,{children:[(0,i.jsxs)(s.A,{label:"Simple Example",value:"simple-example",children:[(0,i.jsx)(n.h3,{id:"building-a-simple-models-from-code-model",children:"Building a simple Models From Code model"}),(0,i.jsxs)(n.p,{children:["In this example, we will define a very basic  model that, when called via ",(0,i.jsx)(n.code,{children:"predict()"}),", will utilize the input float value as an exponent to the number ",(0,i.jsx)(n.code,{children:"2"}),".\nThe first code block, representing a discrete notebook cell, will create a file named ",(0,i.jsx)(n.code,{children:"basic.py"})," in the same directory as the notebook. The contents of this\nfile will be the model definition ",(0,i.jsx)(n.code,{children:"BasicModel"}),", as well as the import statements and the MLflow function ",(0,i.jsx)(n.code,{children:"set_model"})," that will instantiate an instance of\nthis model to be used for inference."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter or Databricks notebook cell, uncomment the following line:\n# %%writefile "./basic.py"\n\nimport pandas as pd\nfrom typing import List, Dict\nfrom mlflow.pyfunc import PythonModel\nfrom mlflow.models import set_model\n\n\nclass BasicModel(PythonModel):\n    def exponential(self, numbers):\n        return {f"{x}": 2**x for x in numbers}\n\n    def predict(self, context, model_input) -> Dict[str, float]:\n        if isinstance(model_input, pd.DataFrame):\n            model_input = model_input.to_dict()[0].values()\n        return self.exponential(model_input)\n\n\n# Specify which definition in this script represents the model instance\nset_model(BasicModel())\n'})}),(0,i.jsx)(n.p,{children:"The next section shows another cell that contains the logging logic."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Basic Model From Code")\n\nmodel_path = "basic.py"\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        python_model=model_path,  # Define the model as the path to the script that was just saved\n        name="arithmetic_model",\n        input_example=[42.0, 24.0],\n    )\n'})}),(0,i.jsx)(n.p,{children:"Looking at this stored model within the MLflow UI, we can see that the script in the first cell was recorded as an artifact to the run."}),(0,i.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The MLflow UI showing the stored model code as a serialized python script",src:t(8664).A+"",width:"1672",height:"756"})})}),(0,i.jsxs)(n.p,{children:["When we load this model via ",(0,i.jsx)(n.code,{children:"mlflow.pyfunc.load_model()"}),", this script will be executed and an instance of ",(0,i.jsx)(n.code,{children:"BasicModel"})," will be constructed, exposing the ",(0,i.jsx)(n.code,{children:"predict"}),"\nmethod as our entry point for inference, just as with the alternative legacy mode of logging a custom model."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"my_model = mlflow.pyfunc.load_model(model_info.model_uri)\nmy_model.predict([2.2, 3.1, 4.7])\n\n# or, with a Pandas DataFrame input\nmy_model.predict(pd.DataFrame([5.0, 6.0, 7.0]))\n"})})]}),(0,i.jsxs)(s.A,{label:"Models with Code Paths dependencies",value:"models-with-code-paths-dependencies",children:[(0,i.jsx)(n.h3,{id:"using-models-from-code-with-code_paths-dependencies",children:"Using Models from Code with code_paths dependencies"}),(0,i.jsxs)(n.p,{children:["In this example, we will explore a more complex scenario that demonstrates how to work with multiple Python scripts and leverage the ",(0,i.jsx)(n.code,{children:"code_paths"}),"\nfeature in MLflow for model management. Specifically, we will define a simple script that contains a function that performs basic arithmetic\noperations, and then use this function within an ",(0,i.jsx)(n.code,{children:"AddModel"})," custom ",(0,i.jsx)(n.code,{children:"PythonModel"})," that we will define in a separate script.\nThis model will be logged with MLflow, allowing us to perform predictions using the stored model."]}),(0,i.jsxs)(n.p,{children:["To learn more about the ",(0,i.jsx)(n.code,{children:"code_paths"})," feature in MLflow, see the ",(0,i.jsx)(n.a,{href:"/model/dependencies#caveats-of-code_paths-option",children:"guidelines on usage here"}),"."]}),(0,i.jsx)(n.p,{children:"This tutorial will show you how to:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create multiple Python files from within a Jupyter notebook."}),"\n",(0,i.jsx)(n.li,{children:"Log a custom model with MLflow that relies on external code defined in another file."}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"code_paths"})," feature to include additional scripts when logging the model, ensuring that all dependencies are available when the model is loaded for inference."]}),"\n"]}),(0,i.jsx)(n.h4,{id:"defining-a-dependent-code-script",children:"Defining a dependent code script"}),(0,i.jsxs)(n.p,{children:["In the first step, we define our ",(0,i.jsx)(n.code,{children:"add"})," function in a file named ",(0,i.jsx)(n.code,{children:"calculator.py"}),", including the magic ",(0,i.jsx)(n.code,{children:"%%writefile"})," command if we're running in a notebook cell:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter or Databricks notebook cell, uncomment the following line:\n# %%writefile "./calculator.py"\n\n\ndef add(x, y):\n    return x + y\n'})}),(0,i.jsx)(n.h4,{id:"defining-the-model-as-a-python-file",children:"Defining the model as a Python file"}),(0,i.jsxs)(n.p,{children:["Next, we create a new file, ",(0,i.jsx)(n.code,{children:"math_model.py"}),", which contains the ",(0,i.jsx)(n.code,{children:"AddModel"})," class. This script will be responsible for importing the ",(0,i.jsx)(n.code,{children:"add"})," function from our external script, defining our model,\nperforming predictions, and validating the input data types. The predict method will leverage the ",(0,i.jsx)(n.code,{children:"add"})," function to perform the addition of two numbers provided as input."]}),(0,i.jsxs)(n.p,{children:["The following code block writes the ",(0,i.jsx)(n.code,{children:"AddModel"})," class definition to ",(0,i.jsx)(n.code,{children:"math_model.py"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter or Databricks notebook cell, uncomment the following line:\n# %%writefile "./math_model.py"\n\nfrom mlflow.pyfunc import PythonModel\nfrom mlflow.models import set_model\n\nfrom calculator import add\n\n\nclass AddModel(PythonModel):\n    def predict(self, context, model_input, params=None):\n        return add(model_input["x"], model_input["y"])\n\n\nset_model(AddModel())\n'})}),(0,i.jsx)(n.p,{children:"This model introduces error handling by checking the existence and types of the inputs, ensuring robustness. It serves as a practical example of\nhow custom logic can be encapsulated within an MLflow model while leveraging external dependencies."}),(0,i.jsx)(n.h4,{id:"logging-the-model-from-code",children:"Logging the Model from Code"}),(0,i.jsxs)(n.p,{children:["Once the ",(0,i.jsx)(n.code,{children:"AddModel"})," custom Python model is defined, we can proceed to log it with MLflow. This process involves specifying the path to the ",(0,i.jsx)(n.code,{children:"math_model.py"}),"\nscript and using the ",(0,i.jsx)(n.code,{children:"code_paths"})," parameter to include ",(0,i.jsx)(n.code,{children:"calculator.py"})," as a dependency. This ensures that when the model is loaded in\na different environment or on another machine, all necessary code files are available for proper execution."]}),(0,i.jsx)(n.p,{children:"The following code block demonstrates how to log the model using MLflow:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Arithmetic Model From Code")\n\nmodel_path = "math_model.py"\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        python_model=model_path,  # The model is defined as the path to the script containing the model definition\n        name="arithmetic_model",\n        code_paths=[\n            "calculator.py"\n        ],  # dependency definition included for the model to successfully import the implementation\n    )\n'})}),(0,i.jsxs)(n.p,{children:["This step registers the ",(0,i.jsx)(n.code,{children:"AddModel"})," model with MLflow, ensuring that both the primary model script and its dependencies are stored as\nartifacts. By including ",(0,i.jsx)(n.code,{children:"calculator.py"})," in the ",(0,i.jsx)(n.code,{children:"code_paths"})," argument, we ensure that the model can be reliably reloaded and used for\npredictions, regardless of the environment in which it is deployed."]}),(0,i.jsx)(n.h4,{id:"loading-and-viewing-the-model",children:"Loading and Viewing the model"}),(0,i.jsxs)(n.p,{children:["After logging the model, it can be loaded back into the notebook or any other environment that has access to the MLflow tracking server.\nWhen the model is loaded, the ",(0,i.jsx)(n.code,{children:"calculator.py"})," script will be executed along with the ",(0,i.jsx)(n.code,{children:"math_model.py"})," script, ensuring that the\n",(0,i.jsx)(n.code,{children:"add"})," function is available for use by the ",(0,i.jsx)(n.code,{children:"ArithmeticModel"}),"'s script's import statement."]}),(0,i.jsx)(n.p,{children:"The following code block demonstrates how to load the model and make predictions:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'my_model_from_code = mlflow.pyfunc.load_model(model_info.model_uri)\nmy_model_from_code.predict({"x": 42, "y": 9001})\n'})}),(0,i.jsx)(n.p,{children:"This example showcases the model's ability to handle different numerical inputs, perform addition, and maintain a history of calculations.\nThe output of these predictions includes both the result of the arithmetic operation and the history log, which can be useful for auditing and\ntracing the computations performed by the model."}),(0,i.jsxs)(n.p,{children:["Looking at the stored model within the MLflow UI, you can see that both the ",(0,i.jsx)(n.code,{children:"math_model.py"})," and ",(0,i.jsx)(n.code,{children:"calculator.py"})," scripts are recorded as\nartifacts in the run. This comprehensive logging allows you to track not just the model's parameters and metrics but also the code that\ndefines its behavior, making it visible and debuggable directly from within the UI."]}),(0,i.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The MLflow UI showing models from code usage along with dependent code_paths script stored in the model artifacts",src:t(9605).A+"",width:"1682",height:"577"})})})]}),(0,i.jsxs)(s.A,{label:"Models From Code with LangChain",value:"models-from-code-with-langchain",children:[(0,i.jsx)(n.h3,{id:"mlflows-native-langchain-models-from-code-support",children:"MLflow's native LangChain Models from Code support"}),(0,i.jsxs)(n.p,{children:["In this slightly more advanced example, we will explore how to use the ",(0,i.jsx)(n.a,{href:"/llms/langchain",children:"MLflow LangChain integration"})," to define\nand manage a chain of operations for an AI model. This chain will help generate landscape design recommendations based on specific regional\nand area-based inputs. The example showcases how to define a custom prompt, use a large language model (LLM) for generating responses, and\nlog the entire setup as a model using MLflow's tracking features."]}),(0,i.jsx)(n.p,{children:"This tutorial will guide you through:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Writing a script to define a custom LangChain model that processes input data to generate landscape design recommendations."}),"\n",(0,i.jsx)(n.li,{children:"Logging the model with MLflow using the langchain integration, ensuring the entire chain of operations is captured."}),"\n",(0,i.jsx)(n.li,{children:"Loading and using the logged model for making predictions in different contexts."}),"\n"]}),(0,i.jsx)(n.h4,{id:"defining-the-model-with-lcel",children:"Defining the Model with LCEL"}),(0,i.jsxs)(n.p,{children:["First, we will create a Python script named ",(0,i.jsx)(n.code,{children:"mfc.py"}),", which defines the chain of operations for generating landscape design recommendations.\nThis script utilizes the LangChain library along with MLflow's ",(0,i.jsx)(n.code,{children:"autolog"})," feature for enabling the ",(0,i.jsx)(n.a,{href:"/tracing",children:"capture of traces"}),"."]}),(0,i.jsx)(n.p,{children:"In this script:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Custom Functions"})," (get_region and get_area): These functions extract specific pieces of information (region and area) from the input data."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prompt Template"}),": A ",(0,i.jsx)(n.code,{children:"PromptTemplate"})," is defined to structure the input for the language model, specifying the task and context in which the model will operate."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model Definition"}),": We use the ",(0,i.jsx)(n.code,{children:"ChatOpenAI"})," model to generate responses based on the structured prompt."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chain Creation"}),": The chain is created by connecting the input processing, prompt template, model invocation, and output parsing steps."]}),"\n"]}),(0,i.jsx)(n.p,{children:"The following code block writes this chain definition to the mfc.py file:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter or Databricks notebook cell, uncomment the following line:\n# %%writefile "./mfc.py"\n\nimport os\nfrom operator import itemgetter\n\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.runnables import RunnableLambda\nfrom langchain_openai import ChatOpenAI\n\nimport mlflow\n\n\ndef get_region(input_data):\n    default = "Virginia, USA"\n    if isinstance(input_data[0], dict):\n        return input_data[0].get("content").get("region", default)\n    return default\n\n\ndef get_area(input_data):\n    default = "5000 square feet"\n    if isinstance(input_data[0], dict):\n        return input_data[0].get("content").get("area", default)\n    return default\n\n\nprompt = PromptTemplate(\n    template="You are a highly accomplished landscape designer that provides suggestions for landscape design decisions in a particular"\n    " geographic region. Your goal is to suggest low-maintenance hardscape and landscape options that involve the use of materials and"\n    " plants that are native to the region mentioned. As part of the recommendations, a general estimate for the job of creating the"\n    " project should be provided based on the square footage estimate. The region is: {region} and the square footage estimate is:"\n    " {area}. Recommendations should be for a moderately sophisticated suburban housing community within the region.",\n    input_variables=["region", "area"],\n)\n\nmodel = ChatOpenAI(model="gpt-4o", temperature=0.95, max_tokens=4096)\n\nchain = (\n    {\n        "region": itemgetter("messages") | RunnableLambda(get_region),\n        "area": itemgetter("messages") | RunnableLambda(get_area),\n    }\n    | prompt\n    | model\n    | StrOutputParser()\n)\n\nmlflow.models.set_model(chain)\n'})}),(0,i.jsxs)(n.p,{children:["This script encapsulates the logic required to construct the full chain using the\n",(0,i.jsx)(n.a,{href:"https://python.langchain.com/v0.1/docs/expression_language",children:"LangChain Expression Language (LCEL)"}),", as well as the custom default logic\nthat the chain will use for input processing. The defined chain is then specified as the model's interface object using the ",(0,i.jsx)(n.code,{children:"set_model"})," function."]}),(0,i.jsx)(n.h4,{id:"logging-the-model-using-models-from-code",children:"Logging the model using Models from Code"}),(0,i.jsxs)(n.p,{children:["Once the chain is defined in ",(0,i.jsx)(n.code,{children:"mfc.py"}),", we log it using MLflow. This step involves specifying the path to the script that contains the chain\ndefinition and using MLflow's ",(0,i.jsx)(n.code,{children:"langchain"})," integration to ensure that all aspects of the chain are captured."]}),(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"input_example"})," provided to the logging function serves as a template to demonstrate how the model should be invoked. This example is\nalso stored as part of the logged model, making it easier to understand and replicate the model's use case."]}),(0,i.jsx)(n.p,{children:"The following code block demonstrates how to log the LangChain model using MLflow:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Landscaping")\n\nchain_path = "./mfc.py"\n\ninput_example = {\n    "messages": [\n        {\n            "role": "user",\n            "content": {\n                "region": "Austin, TX, USA",\n                "area": "1750 square feet",\n            },\n        }\n    ]\n}\n\nwith mlflow.start_run():\n    info = mlflow.langchain.log_model(\n        lc_model=chain_path,  # Defining the model as the script containing the chain definition and the set_model call\n        name="chain",\n        input_example=input_example,\n    )\n'})}),(0,i.jsx)(n.p,{children:"In this step, the entire chain of operations, from input processing to AI model inference, is logged as a single, cohesive model. Avoiding the\npotential complexities associated with object serialization of the defined chain components, using the models from code feature ensures that\nthe exact code and logic that were used to develop and test a chain is what is executed when deploying the application without the risk of\nincomplete or non-existent serialization capabilities."}),(0,i.jsx)(n.h4,{id:"loading-and-viewing-the-model-1",children:"Loading and Viewing the Model"}),(0,i.jsx)(n.p,{children:"After logging the model, it can be loaded back into your environment for inference. This step demonstrates how to load the chain and\nuse it to generate landscape design recommendations based on new input data."}),(0,i.jsx)(n.p,{children:"The following code block shows how to load the model and run predictions:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Load the model and run inference\nlandscape_chain = mlflow.langchain.load_model(model_uri=info.model_uri)\n\nquestion = {\n    "messages": [\n        {\n            "role": "user",\n            "content": {\n                "region": "Raleigh, North Carolina USA",\n                "area": "3850 square feet",\n            },\n        },\n    ]\n}\n\nresponse = landscape_chain.invoke(question)\n'})}),(0,i.jsx)(n.p,{children:"This code block demonstrates how to invoke the loaded chain with new data, generating a response that provides landscape design suggestions\ntailored to the specified region and area."}),(0,i.jsxs)(n.p,{children:["Once the model is logged, you can explore its details in the MLflow UI. The interface will show the script ",(0,i.jsx)(n.code,{children:"mfc.py"})," as an artifact of the\nlogged model, along with the chain definition and associated metadata. This allows you to easily review the model's components,\ninput examples, and other key information."]}),(0,i.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"The MLflow UI showing models from code usage and the mfc.py script that defines the LangChain LCEL chain definition",src:t(7964).A+"",width:"1678",height:"954"})})}),(0,i.jsxs)(n.p,{children:["When you load this model using ",(0,i.jsx)(d.B,{fn:"mlflow.langchain.load_model"}),", the entire chain defined in ",(0,i.jsx)(n.code,{children:"mfc.py"})," is executed, and the model\nbehaves as expected, generating AI-driven recommendations for landscape design."]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"faq-for-models-from-code",children:"FAQ for Models from Code"}),"\n",(0,i.jsx)(n.p,{children:"There are several aspects of using the models from code feature for logging models that you should be aware of. While the behavior is similar to that of\nusing legacy model serialization, there are a few notable differences that you will need to make to your development workflow and code architecture."}),"\n",(0,i.jsx)(n.h3,{id:"dependency-management-and-requirements",children:"Dependency Management and Requirements"}),"\n",(0,i.jsx)(n.p,{children:"Proper management of dependencies and requirements is crucial for ensuring that your model can be loaded or deployed in new environments."}),"\n",(0,i.jsx)(n.h4,{id:"why-did-i-get-a-nameerror-when-loading-my-model-from-a-saved-script",children:"Why did I get a NameError when loading my model from a saved script?"}),"\n",(0,i.jsxs)(n.p,{children:["When defining the script (or cell, if developing in a notebook), ensure that all of the required import statements are defined within the script.\nFailing to include the import dependencies will not only result in a name resolution error, but the requirement dependencies will not be included\nin the model's ",(0,i.jsx)(n.code,{children:"requirements.txt"})," file."]}),"\n",(0,i.jsx)(n.h4,{id:"loading-my-model-is-giving-me-an-importerror",children:"Loading my model is giving me an ImportError."}),"\n",(0,i.jsxs)(n.p,{children:["If you have external dependencies to your model definition script that are not available on PyPI, you must include these references using the\n",(0,i.jsx)(n.code,{children:"code_paths"})," argument when logging or saving your model. You may need to manually add import dependencies from these external scripts to the\n",(0,i.jsx)(n.code,{children:"extra_pip_requirements"})," argument when logging your model to ensure that all required dependencies are available to your model during loading."]}),"\n",(0,i.jsx)(n.h4,{id:"why-is-my-requirementstxt-file-filled-with-packages-that-my-model-isnt-using",children:"Why is my requirements.txt file filled with packages that my model isn't using?"}),"\n",(0,i.jsx)(n.p,{children:"MLflow will build the list of requirements from a models from code script based on the module-level import statements. There isn't an inspection\nprocess that runs to validate whether your model's logic requires everything that is stated as an import. It is highly recommended to prune your\nimports within these scripts to only include the minimal required import statements that your model requires to function. Having excessive imports\nof large packages will introduce installation delays when loading or deploying your model as well as increased memory pressure in your deployed\ninference environment."}),"\n",(0,i.jsx)(n.h3,{id:"logging-using-models-from-code",children:"Logging using Models From Code"}),"\n",(0,i.jsx)(n.p,{children:"When logging models from a defined Python file, you will encounter some slight differences between the legacy model serialization process of\nsupplying an object reference."}),"\n",(0,i.jsx)(n.h4,{id:"i-accidentally-included-an-api-key-in-my-script-what-do-i-do",children:"I accidentally included an API Key in my script. What do I do?"}),"\n",(0,i.jsx)(n.p,{children:"Due to the fact that the models from code feature stores your script definition in plain text, completely visible within the MLflow UI's artifact viewer,\nincluding sensitive data such as access keys or other authorization-based secrets is a security risk. If you have accidentally left a sensitive\nkey defined directly in your script when logging your model, it is advisable to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Delete the MLflow run that contains the leaked key. You can do this via the UI or through ",(0,i.jsx)(d.B,{fn:"mlflow.client.MlflowClient.delete_run",children:"the delete_run API"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Delete the artifacts associated with the run. You can do this via the ",(0,i.jsx)(a.A,{to:"/api_reference/cli.html#mlflow-gc",target:"_blank",children:"mlflow gc"})," cli command."]}),"\n",(0,i.jsx)(n.li,{children:"Rotate your sensitive keys by generating a new key and deleting the leaked secret from the source system administration interface."}),"\n",(0,i.jsx)(n.li,{children:"Re-log the model to a new run, making sure to not set sensitive keys in your model definition script."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"why-is-my-model-getting-executed-when-i-log-it",children:"Why is my model getting executed when I log it?"}),"\n",(0,i.jsxs)(n.p,{children:["In order to validate that the code is executable within the python file that defines a model, MLflow will instantiate the object that is defined as a model within\nthe ",(0,i.jsx)(n.code,{children:"set_model"})," API. If you have external calls that are made during the initialization of your model, these will be made to ensure that your code is executable\nprior to logging. If such calls require authenticated access to services, please ensure that the environment that you are logging your model from has the\nappropriate authentication configured so that your code can run."]}),"\n",(0,i.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,i.jsx)(n.p,{children:'For additional related context topics that can enhance your understanding of MLflow\'s "Models From Code" feature, consider exploring the following sections in the MLflow documentation:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/model#model-api",children:"Model API Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/model/dependencies",children:"Managing Dependencies in MLflow Models"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},79329:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var o=t(34164);const i={tabItem:"tabItem_Ymn6"};var l=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,a),hidden:t,children:n})}}}]);