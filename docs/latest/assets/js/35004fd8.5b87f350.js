"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6601],{67075:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/anthropic-tool-calling-e6041af25796ba10c96fc0b6719a6307.png"},67756:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const l=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(29030),a=t(56289),r=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(l[e])return e}return null};function s(e){let{fn:n,children:t}=e;const s=i(n);if(!s)return(0,r.jsx)(r.Fragment,{children:t});const c=(0,o.Ay)(`/${l[s]}#${n}`);return(0,r.jsx)(a.A,{to:c,target:"_blank",children:t??(0,r.jsxs)("code",{children:[n,"()"]})})}},82538:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/anthropic-tracing-7b02a80b9cdd323dafdb413542b2b70b.png"},86294:(e,n,t)=>{t.d(n,{Zp:()=>s,AC:()=>i,WO:()=>p,tf:()=>h,_C:()=>c,$3:()=>m,jK:()=>d});var l=t(34164);const o={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var a=t(56289),r=t(74848);const i=e=>{let{children:n,isSmall:t,cols:a}=e;return(0,r.jsx)("div",{className:(0,l.A)(o.CardGroup,t?o.AutofillColumns:a?o[`Cols${a}`]:o.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:t=""}=e;return t?(0,r.jsx)(a.A,{className:(0,l.A)(o.Link,o.Card,o.CardBordered),to:t,children:n}):(0,r.jsx)("div",{className:(0,l.A)(o.Card,o.CardBordered),children:n})},c=e=>{let{headerText:n,link:t,text:a}=e;return(0,r.jsx)(s,{link:t,children:(0,r.jsxs)("span",{children:[(0,r.jsx)("div",{className:(0,l.A)(o.CardTitle,o.BoxRoot,o.PaddingBottom4),style:{pointerEvents:"none"},children:(0,r.jsx)("div",{className:(0,l.A)(o.BoxRoot,o.FlexFlex,o.FlexAlignItemsCenter,o.FlexDirectionRow,o.FlexJustifyContentFlexStart,o.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,r.jsx)("div",{className:(0,l.A)(o.BoxRoot,o.BoxHideIfEmpty,o.MarginTop4,o.MarginLeft4),style:{pointerEvents:"auto"},children:(0,r.jsx)("span",{className:"",children:n})})})}),(0,r.jsx)("span",{className:(0,l.A)(o.TextColor,o.CardBody),children:(0,r.jsx)("p",{children:a})})]})})},p=e=>{let{description:n,children:t,link:l}=e;return(0,r.jsx)(s,{link:l,children:(0,r.jsxs)("div",{className:o.LogoCardContent,children:[(0,r.jsx)("div",{className:o.LogoCardImage,children:t}),(0,r.jsx)("p",{className:o.TextColor,children:n})]})})},m=e=>{let{children:n,link:t}=e;return(0,r.jsx)(s,{link:t,children:(0,r.jsx)("div",{className:o.SmallLogoCardContent,children:(0,r.jsx)("div",{className:(0,l.A)("max-height-img-container",o.SmallLogoCardImage),children:n})})})},h=e=>{let{children:n,description:t,name:l,releaseVersion:i,learnMoreLink:c=""}=e;return(0,r.jsx)(s,{children:(0,r.jsxs)("div",{className:o.NewFeatureCardWrapper,children:[(0,r.jsxs)("div",{className:o.NewFeatureCardContent,children:[(0,r.jsxs)("div",{className:o.NewFeatureCardHeading,children:[l,(0,r.jsx)("br",{}),(0,r.jsx)("hr",{className:o.NewFeatureCardHeadingSeparator})]}),(0,r.jsx)("div",{className:o.LogoCardImage,children:n}),(0,r.jsx)("br",{}),(0,r.jsx)("p",{children:t}),(0,r.jsx)("br",{})]}),(0,r.jsxs)("div",{className:o.NewFeatureCardTags,children:[(0,r.jsx)("div",{children:c&&(0,r.jsx)(a.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,r.jsxs)(a.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${i}`,children:["released in ",i]})]})]})})},d=e=>{let{title:n,description:t,link:a=""}=e;return(0,r.jsx)(s,{link:a,children:(0,r.jsxs)("div",{className:o.TitleCardContent,children:[(0,r.jsx)("div",{className:(0,l.A)(o.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:n}),(0,r.jsx)("hr",{className:(0,l.A)(o.TitleCardSeparator),style:{margin:"12px 0"}}),(0,r.jsx)("p",{className:(0,l.A)(o.TextColor),children:t})]})})}},91103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});const l=JSON.parse('{"id":"tracing/integrations/anthropic","title":"Tracing Anthropic","description":"OpenAI Tracing via autolog","source":"@site/docs/tracing/integrations/anthropic.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/anthropic","permalink":"/docs/latest/tracing/integrations/anthropic","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"sidebar_label":"Anthropic"},"sidebar":"docsSidebar","previous":{"title":"PydanticAI","permalink":"/docs/latest/tracing/integrations/pydantic_ai"},"next":{"title":"LiteLLM","permalink":"/docs/latest/tracing/integrations/litellm"}}');var o=t(74848),a=t(28453),r=t(67756);t(86294),t(61096),t(65537),t(79329);const i={sidebar_position:8,sidebar_label:"Anthropic"},s="Tracing Anthropic",c={},p=[{value:"Supported APIs",id:"supported-apis",level:2},{value:"Basic Example",id:"basic-example",level:2},{value:"Async",id:"async",level:2},{value:"Advanced Example: Tool Calling Agent",id:"advanced-example-tool-calling-agent",level:2},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"tracing-anthropic",children:"Tracing Anthropic"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"OpenAI Tracing via autolog",src:t(82538).A+"",width:"1555",height:"893"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for Anthropic LLMs. By enabling auto tracing\nfor Anthropic by calling the ",(0,o.jsx)(r.B,{fn:"mlflow.anthropic.autolog"})," function, MLflow will capture nested traces and log them to the active MLflow Experiment upon invocation of Anthropic Python SDK."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.anthropic.autolog()\n"})}),"\n",(0,o.jsx)(n.p,{children:"MLflow trace automatically captures the following information about Anthropic calls:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Prompts and completion responses"}),"\n",(0,o.jsx)(n.li,{children:"Latencies"}),"\n",(0,o.jsx)(n.li,{children:"Model name"}),"\n",(0,o.jsxs)(n.li,{children:["Additional metadata such as ",(0,o.jsx)(n.code,{children:"temperature"}),", ",(0,o.jsx)(n.code,{children:"max_tokens"}),", if specified."]}),"\n",(0,o.jsx)(n.li,{children:"Function calling if returned in the response"}),"\n",(0,o.jsx)(n.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Currently, MLflow Anthropic integration only support tracing for synchronous calls for text interactions. Async APIs are not traced, and full inputs cannot be recorded for multi-modal inputs."})}),"\n",(0,o.jsx)(n.h2,{id:"supported-apis",children:"Supported APIs"}),"\n",(0,o.jsx)(n.p,{children:"MLflow supports automatic tracing for the following Anthropic APIs:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Chat Completion"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Function Calling"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Streaming"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Async"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Image"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Batch"})]})}),(0,o.jsx)(n.tbody,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 (*1)"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"})]})})]}),"\n",(0,o.jsx)("div",{style:{fontSize:"0.9em",marginTop:"10px"},children:(0,o.jsx)(n.p,{children:"(*1) Async support was added in MLflow 2.21.0."})}),"\n",(0,o.jsxs)(n.p,{children:["To request support for additional APIs, please open a ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/issues",children:"feature request"})," on GitHub."]}),"\n",(0,o.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import anthropic\nimport mlflow\n\n# Enable auto-tracing for Anthropic\nmlflow.anthropic.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("Anthropic")\n\n# Configure your API key.\nclient = anthropic.Anthropic(api_key=os.environ["ANTHROPIC_API_KEY"])\n\n# Use the create method to create new message.\nmessage = client.messages.create(\n    model="claude-3-5-sonnet-20241022",\n    max_tokens=1024,\n    messages=[\n        {"role": "user", "content": "Hello, Claude"},\n    ],\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"async",children:"Async"}),"\n",(0,o.jsx)(n.p,{children:"MLflow Tracing has supported the asynchronous API of the Anthropic SDK since MLflow 2.21.0. Its usage is the same as the synchronous API."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import anthropic\n\n# Enable trace logging\nmlflow.anthropic.autolog()\n\nclient = anthropic.AsyncAnthropic()\n\nresponse = await client.messages.create(\n    model="claude-3-5-sonnet-20241022",\n    max_tokens=1024,\n    messages=[\n        {"role": "user", "content": "Hello, Claude"},\n    ],\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-example-tool-calling-agent",children:"Advanced Example: Tool Calling Agent"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow Tracing automatically captures tool calling response from Anthropic models. The function instruction in the response will be highlighted in the trace UI. Moreover, you can annotate the tool function with the ",(0,o.jsx)(n.code,{children:"@mlflow.trace"})," decorator to create a span for the tool execution."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Anthropic Tool Calling Trace",src:t(67075).A+"",width:"2374",height:"1354"})}),"\n",(0,o.jsx)(n.p,{children:"The following example implements a simple function calling agent using Anthropic Tool Calling and MLflow Tracing for Anthropic. The example further uses the asynchronous Anthropic SDK so that the agent can handle concurrent invocations without blocking."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import json\nimport anthropic\nimport mlflow\nimport asyncio\nfrom mlflow.entities import SpanType\n\nclient = anthropic.AsyncAnthropic()\nmodel_name = "claude-3-5-sonnet-20241022"\n\n\n# Define the tool function. Decorate it with `@mlflow.trace` to create a span for its execution.\n@mlflow.trace(span_type=SpanType.TOOL)\nasync def get_weather(city: str) -> str:\n    if city == "Tokyo":\n        return "sunny"\n    elif city == "Paris":\n        return "rainy"\n    return "unknown"\n\n\ntools = [\n    {\n        "name": "get_weather",\n        "description": "Returns the weather condition of a given city.",\n        "input_schema": {\n            "type": "object",\n            "properties": {"city": {"type": "string"}},\n            "required": ["city"],\n        },\n    }\n]\n\n_tool_functions = {"get_weather": get_weather}\n\n\n# Define a simple tool calling agent\n@mlflow.trace(span_type=SpanType.AGENT)\nasync def run_tool_agent(question: str):\n    messages = [{"role": "user", "content": question}]\n\n    # Invoke the model with the given question and available tools\n    ai_msg = await client.messages.create(\n        model=model_name,\n        messages=messages,\n        tools=tools,\n        max_tokens=2048,\n    )\n    messages.append({"role": "assistant", "content": ai_msg.content})\n\n    # If the model requests tool call(s), invoke the function with the specified arguments\n    tool_calls = [c for c in ai_msg.content if c.type == "tool_use"]\n    for tool_call in tool_calls:\n        if tool_func := _tool_functions.get(tool_call.name):\n            tool_result = await tool_func(**tool_call.input)\n        else:\n            raise RuntimeError("An invalid tool is returned from the assistant!")\n\n        messages.append(\n            {\n                "role": "user",\n                "content": [\n                    {\n                        "type": "tool_result",\n                        "tool_use_id": tool_call.id,\n                        "content": tool_result,\n                    }\n                ],\n            }\n        )\n\n    # Send the tool results to the model and get a new response\n    response = await client.messages.create(\n        model=model_name,\n        messages=messages,\n        max_tokens=2048,\n    )\n\n    return response.content[-1].text\n\n\n# Run the tool calling agent\ncities = ["Tokyo", "Paris", "Sydney"]\nquestions = [f"What\'s the weather like in {city} today?" for city in cities]\nanswers = await asyncio.gather(*(run_tool_agent(q) for q in questions))\n\nfor city, answer in zip(cities, answers):\n    print(f"{city}: {answer}")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,o.jsxs)(n.p,{children:["Auto tracing for Anthropic can be disabled globally by calling ",(0,o.jsx)(n.code,{children:"mlflow.anthropic.autolog(disable=True)"})," or ",(0,o.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);