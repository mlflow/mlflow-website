"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2191],{6911:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/search-traces-on-ui-0b3c9f96553ea37d8c654c5b33fe22f8.png"},60104:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tracing/api/search","title":"Query Traces","description":"This page describes how to query traces logged to MLflow in both UI and API.","source":"@site/docs/tracing/api/search.mdx","sourceDirName":"tracing/api","slug":"/tracing/api/search","permalink":"/docs/latest/tracing/api/search","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Query Traces"},"sidebar":"docsSidebar","previous":{"title":"Manual Tracing","permalink":"/docs/latest/tracing/api/manual-instrumentation"},"next":{"title":"How-to Guide","permalink":"/docs/latest/tracing/api/how-to"}}');var a=r(74848),l=r(28453),i=r(67756),s=(r(86294),r(61096),r(65537)),o=r(79329);const c={sidebar_position:2,sidebar_label:"Query Traces"},m="Query Traces",p={},d=[{value:"Filter Syntax",id:"filter-syntax",level:2},{value:"Filter by Name",id:"filter-by-name",level:3},{value:"Filter by Timestamp",id:"filter-by-timestamp",level:3},{value:"Filter by Status",id:"filter-by-status",level:3},{value:"Filter by Tags",id:"filter-by-tags",level:3},{value:"Combine Multiple Conditions",id:"combine-multiple-conditions",level:3},{value:"Find Traces associated with an MLflow Run",id:"find-traces-associated-with-an-mlflow-run",level:2},{value:"Searching Traces via API",id:"searching-traces-via-api",level:2},{value:"Return Types",id:"return-types",level:3},{value:"DataFrame Schema",id:"dataframe-schema",level:4},{value:"Order Traces",id:"order-traces",level:3},{value:"Unpack Span Fields into DataFrame",id:"unpack-span-fields-into-dataframe",level:3},{value:"Pagination",id:"pagination",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"query-traces",children:"Query Traces"})}),"\n",(0,a.jsx)(n.p,{children:"This page describes how to query traces logged to MLflow in both UI and API."}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"ui",label:"Filtering Traces on UI",children:[(0,a.jsx)(n.p,{children:"Use the search box in the MLflow Trace UI to filter traces by various criteria."}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Search Traces UI",src:r(6911).A+"",width:"1387",height:"439"})})]}),(0,a.jsxs)(o.A,{value:"api",label:"Filtering Traces on API",children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(i.B,{fn:"mlflow.search_traces"})," API allows you to programmatically search for traces across experiments:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Search traces in the current experiment\ntraces = mlflow.search_traces(filter_string="status = \'ERROR\'")\n\n# Search traces in specific experiments\ntraces = mlflow.search_traces(\n    experiment_ids=["experiment_id_1", "experiment_id_2"],\n    filter_string="name = \'predict\'",\n)\n'})}),(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"#filter-syntax",children:"Filter Syntax"})," section below for more details on filtering options."]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"filter-syntax",children:"Filter Syntax"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"filter_string"})," argument allows you to create powerful search queries using a SQL-like syntax. Here are the most common filter patterns:"]}),"\n",(0,a.jsx)(n.h3,{id:"filter-by-name",children:"Filter by Name"}),"\n",(0,a.jsx)(n.p,{children:"Search for traces by their name:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"mlflow.search_traces(filter_string=\"trace.name = 'predict'\")\n"})}),"\n",(0,a.jsx)(n.h3,{id:"filter-by-timestamp",children:"Filter by Timestamp"}),"\n",(0,a.jsx)(n.p,{children:"Search traces created within a specific time range:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Get traces created after a specific timestamp (in milliseconds)\ntimestamp = int(time.time() * 1000)\nmlflow.search_traces(\n    filter_string=f"trace.timestamp > {timestamp - 3600000}"  # Last hour\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"filter-by-status",children:"Filter by Status"}),"\n",(0,a.jsx)(n.p,{children:"Search for traces by their execution status:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Get successful traces\nmlflow.search_traces(filter_string=\"trace.status = 'OK'\")\n\n# Get failed traces\nmlflow.search_traces(filter_string=\"trace.status = 'ERROR'\")\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Trace status must be one of ",(0,a.jsx)(n.code,{children:'["OK", "ERROR", "IN_PROGRESS"]'}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"filter-by-tags",children:"Filter by Tags"}),"\n",(0,a.jsx)(n.p,{children:"Filter traces that have specific tag values:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"mlflow.search_traces(filter_string=\"tag.model_name = 'gpt-4'\")\n"})}),"\n",(0,a.jsx)(n.h3,{id:"combine-multiple-conditions",children:"Combine Multiple Conditions"}),"\n",(0,a.jsx)(n.p,{children:"Combine multiple filters using logical operators:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"mlflow.search_traces(filter_string=\"trace.status = 'OK' AND tag.importance = 'high'\")\n"})}),"\n",(0,a.jsx)(n.h2,{id:"find-traces-associated-with-an-mlflow-run",children:"Find Traces associated with an MLflow Run"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(o.A,{value:"ui-run",label:"UI",children:[(0,a.jsx)(n.p,{children:"To view traces associated with a specific run:"}),(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Navigate to the run details page"}),"\n",(0,a.jsx)(n.li,{children:'Click on the "Traces" tab to see all traces associated with that run'}),"\n"]})]}),(0,a.jsxs)(o.A,{value:"api-run",label:"API",children:[(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.code,{children:"run_id"})," parameter to search for traces associated with a specific run:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Search traces associated with a specific run\ntraces = mlflow.search_traces(run_id="run_id_123456")\n'})})]})]}),"\n",(0,a.jsx)(n.h2,{id:"searching-traces-via-api",children:"Searching Traces via API"}),"\n",(0,a.jsxs)(n.p,{children:["This section provides a detailed guide on using the ",(0,a.jsx)(i.B,{fn:"mlflow.search_traces"})," API for programmatic trace retrieval."]}),"\n",(0,a.jsx)(n.p,{children:"First, let's create some sample traces to demonstrate the search functionality:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import time\nimport mlflow\nfrom mlflow.entities import SpanType\n\n\n# Define methods to be traced\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "morning"})\ndef morning_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good morning {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "evening"})\ndef evening_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good evening {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL)\ndef goodbye():\n    raise Exception("Cannot say goodbye")\n\n\n# Execute the methods within different experiments\nmorning_experiment = mlflow.set_experiment("Morning Experiment")\nmorning_greeting("Tom")\n\n# Get the timestamp in milliseconds\nmorning_time = int(time.time() * 1000)\n\nevening_experiment = mlflow.set_experiment("Evening Experiment")\nexperiment_ids = [morning_experiment.experiment_id, evening_experiment.experiment_id]\nevening_greeting("Mary")\ngoodbye()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"return-types",children:"Return Types"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(i.B,{fn:"mlflow.search_traces"})," API can return results in two formats, controlled by the ",(0,a.jsx)(n.code,{children:"return_type"})," parameter:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Default: Return as Pandas DataFrame\ntrace_df = mlflow.search_traces(experiment_ids=[morning_experiment.experiment_id])\n\n# Return as list of Trace objects\ntrace_list = mlflow.search_traces(\n    experiment_ids=[morning_experiment.experiment_id], return_type="list"\n)\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"return_type"})," parameter is only available in MLflow version 2.21.1 and later. If you are using an older version, the ",(0,a.jsx)(i.B,{fn:"mlflow.search_traces"}),"\nAPI will always return a Pandas DataFrame. To get a list of Trace objects, you can use the ",(0,a.jsx)(i.B,{fn:"mlflow.client.MlflowClient.search_traces",children:(0,a.jsx)(n.code,{children:"MlflowClient.search_traces()"})})," API instead."]})}),"\n",(0,a.jsx)(n.h4,{id:"dataframe-schema",children:"DataFrame Schema"}),"\n",(0,a.jsxs)(n.p,{children:["When using ",(0,a.jsx)(n.code,{children:'return_type="pandas"'})," (default), the returned DataFrame includes these columns:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"request_id"}),": A primary identifier of a trace"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"trace"}),": A trace object"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"timestamp_ms"}),": The start time of the trace in milliseconds"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"status"}),": The status of the trace"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"execution_time_ms"}),": The duration of the trace in milliseconds"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"request"}),": The input to the traced logic"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"response"}),": The output of the traced logic"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"request_metadata"}),": Key-value pairs associated with the trace"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"spans"}),": Spans in the trace"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"tags"}),": Tags associated with the trace"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"order-traces",children:"Order Traces"}),"\n",(0,a.jsxs)(n.p,{children:["You can order the search results using the ",(0,a.jsx)(n.code,{children:"order_by"})," parameter:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'mlflow.search_traces(\n    experiment_ids=experiment_ids, order_by=["timestamp_ms DESC"]  # Most recent first\n)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Pass multiple columns to the ",(0,a.jsx)(n.code,{children:"order_by"})," parameter to sort by multiple fields:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'mlflow.search_traces(\n    experiment_ids=experiment_ids, order_by=["timestamp_ms DESC", "status ASC"]\n)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"unpack-span-fields-into-dataframe",children:"Unpack Span Fields into DataFrame"}),"\n",(0,a.jsxs)(n.p,{children:["When using the DataFrame return type, you can extract specific fields from spans into separate columns using the ",(0,a.jsx)(n.code,{children:"extract_fields"})," parameter:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'traces = mlflow.search_traces(\n    extract_fields=[\n        # Extract the "name" field in the "morning_greeting" span inputs\n        "morning_greeting.inputs.name",\n        # Extract all output fields in the "morning_greeting" span\n        "morning_greeting.outputs",\n    ],\n    experiment_ids=[morning_experiment.experiment_id],\n)\n\nprint(traces)\n'})}),"\n",(0,a.jsx)(n.p,{children:"The output Pandas DataFrame will contain additional columns for the extracted span fields:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"    request_id                              ...     morning_greeting.inputs.name   morning_greeting.outputs\n0   053adf2f5f5e4ad68d432e06e254c8a4        ...     'Tom'                          'Good morning Tom.'\n"})}),"\n",(0,a.jsx)(n.p,{children:"This feature is particularly useful for creating evaluation datasets:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'eval_data = traces.rename(\n    columns={\n        "morning_greeting.inputs.name": "inputs",\n        "morning_greeting.outputs": "ground_truth",\n    }\n)\nresults = mlflow.evaluate(\n    model,\n    eval_data,\n    targets="ground_truth",\n    model_type="question-answering",\n)\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"extract_fields"})," parameter is only supported when using ",(0,a.jsx)(n.code,{children:'return_type="pandas"'}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,a.jsxs)(n.p,{children:["For large result sets, use the ",(0,a.jsx)(i.B,{fn:"mlflow.client.MlflowClient.search_traces",children:(0,a.jsx)(n.code,{children:"MlflowClient.search_traces()"})})," API for pagination:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from mlflow import MlflowClient\n\nclient = MlflowClient()\npage_token = None\n\nwhile True:\n    results = client.search_traces(\n        experiment_ids=experiment_ids,\n        page_token=page_token,\n        max_results=100,  # Number of results per page\n    )\n\n    # Process the current page of results\n    for trace in results:\n        # Do something with each trace\n        print(trace.request_id)\n\n    # Check if there are more pages\n    if not results.token:\n        break\n\n    page_token = results.token\n"})})]})}function f(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},67756:(e,n,r)=>{r.d(n,{B:()=>o});r(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.fastai":"api_reference/python_api/mlflow.fastai.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.mleap":"api_reference/python_api/mlflow.mleap.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow.recipes":"api_reference/python_api/mlflow.recipes.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var a=r(29030),l=r(56289),i=r(74848);const s=e=>{const n=e.split(".");for(let r=n.length;r>0;r--){const e=n.slice(0,r).join(".");if(t[e])return e}return null};function o(e){let{fn:n,children:r}=e;const o=s(n);if(!o)return(0,i.jsx)(i.Fragment,{children:r});const c=(0,a.Ay)(`/${t[o]}#${n}`);return(0,i.jsx)(l.A,{to:c,target:"_blank",children:r??(0,i.jsxs)("code",{children:[n,"()"]})})}},86294:(e,n,r)=>{r.d(n,{Zp:()=>o,AC:()=>s,WO:()=>m,tf:()=>d,_C:()=>c,$3:()=>p});var t=r(34164);const a={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k"};var l=r(56289),i=r(74848);const s=e=>{let{children:n,isSmall:r}=e;return(0,i.jsx)("div",{className:(0,t.A)(a.CardGroup,r?a.AutofillColumns:a.MaxThreeColumns),children:n})},o=e=>{let{children:n,link:r=""}=e;return r?(0,i.jsx)(l.A,{className:(0,t.A)(a.Link,a.Card,a.CardBordered),to:r,children:n}):(0,i.jsx)("div",{className:(0,t.A)(a.Card,a.CardBordered),children:n})},c=e=>{let{headerText:n,link:r,text:l}=e;return(0,i.jsx)(o,{link:r,children:(0,i.jsxs)("span",{children:[(0,i.jsx)("div",{className:(0,t.A)(a.CardTitle,a.BoxRoot,a.PaddingBottom4),style:{pointerEvents:"none"},children:(0,i.jsx)("div",{className:(0,t.A)(a.BoxRoot,a.FlexFlex,a.FlexAlignItemsCenter,a.FlexDirectionRow,a.FlexJustifyContentFlexStart,a.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,i.jsx)("div",{className:(0,t.A)(a.BoxRoot,a.BoxHideIfEmpty,a.MarginTop4,a.MarginLeft4),style:{pointerEvents:"auto"},children:(0,i.jsx)("span",{className:"",children:n})})})}),(0,i.jsx)("span",{className:(0,t.A)(a.TextColor,a.CardBody),children:(0,i.jsx)("p",{children:l})})]})})},m=e=>{let{description:n,children:r,link:t}=e;return(0,i.jsx)(o,{link:t,children:(0,i.jsxs)("div",{className:a.LogoCardContent,children:[(0,i.jsx)("div",{className:a.LogoCardImage,children:r}),(0,i.jsx)("p",{className:a.TextColor,children:n})]})})},p=e=>{let{children:n,link:r}=e;return(0,i.jsx)(o,{link:r,children:(0,i.jsx)("div",{className:a.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,t.A)("max-height-img-container",a.SmallLogoCardImage),children:n})})})},d=e=>{let{children:n,description:r,name:t,releaseVersion:s,learnMoreLink:c=""}=e;return(0,i.jsx)(o,{children:(0,i.jsxs)("div",{className:a.NewFeatureCardWrapper,children:[(0,i.jsxs)("div",{className:a.NewFeatureCardContent,children:[(0,i.jsxs)("div",{className:a.NewFeatureCardHeading,children:[t,(0,i.jsx)("br",{}),(0,i.jsx)("hr",{className:a.NewFeatureCardHeadingSeparator})]}),(0,i.jsx)("div",{className:a.LogoCardImage,children:n}),(0,i.jsx)("br",{}),(0,i.jsx)("p",{children:r}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("div",{className:a.NewFeatureCardTags,children:[(0,i.jsx)("div",{children:c&&(0,i.jsx)(l.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,i.jsxs)(l.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${s}`,children:["released in ",s]})]})]})})}}}]);