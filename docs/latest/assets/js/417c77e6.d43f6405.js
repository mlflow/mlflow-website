"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1127],{10493:(e,a,n)=>{n.d(a,{Zp:()=>s,AC:()=>i,WO:()=>m,_C:()=>p,$3:()=>c,jK:()=>d});var l=n(34164);const t={CardGroup:"CardGroup_P84T",NoGap:"NoGap_O9Dj",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardRounded:"SmallLogoCardRounded_X50_",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardHeader:"TitleCardHeader_fUQy",TitleCardHeaderRight:"TitleCardHeaderRight_iBLX",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var o=n(28774),r=n(74848);const i=({children:e,isSmall:a,cols:n,noGap:o})=>(0,r.jsx)("div",{className:(0,l.A)(t.CardGroup,a?t.AutofillColumns:n?t[`Cols${n}`]:t.MaxThreeColumns,o&&t.NoGap),children:e}),s=({children:e,link:a=""})=>a?(0,r.jsx)(o.A,{className:(0,l.A)(t.Link,t.Card,t.CardBordered),to:a,children:e}):(0,r.jsx)("div",{className:(0,l.A)(t.Card,t.CardBordered),children:e}),p=({headerText:e,link:a,text:n})=>(0,r.jsx)(s,{link:a,children:(0,r.jsxs)("span",{children:[(0,r.jsx)("div",{className:(0,l.A)(t.CardTitle,t.BoxRoot,t.PaddingBottom4),style:{pointerEvents:"none"},children:(0,r.jsx)("div",{className:(0,l.A)(t.BoxRoot,t.FlexFlex,t.FlexAlignItemsCenter,t.FlexDirectionRow,t.FlexJustifyContentFlexStart,t.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,r.jsx)("div",{className:(0,l.A)(t.BoxRoot,t.BoxHideIfEmpty,t.MarginTop4,t.MarginLeft4),style:{pointerEvents:"auto"},children:(0,r.jsx)("span",{className:"",children:e})})})}),(0,r.jsx)("span",{className:(0,l.A)(t.TextColor,t.CardBody),children:(0,r.jsx)("p",{children:n})})]})}),m=({description:e,children:a,link:n})=>(0,r.jsx)(s,{link:n,children:(0,r.jsxs)("div",{className:t.LogoCardContent,children:[(0,r.jsx)("div",{className:t.LogoCardImage,children:a}),(0,r.jsx)("p",{className:t.TextColor,children:e})]})}),c=({children:e,link:a})=>(0,r.jsx)("div",{className:(0,l.A)(t.Card,t.CardBordered,t.SmallLogoCardRounded),children:a?(0,r.jsx)(o.A,{className:(0,l.A)(t.Link),to:a,children:(0,r.jsx)("div",{className:t.SmallLogoCardContent,children:(0,r.jsx)("div",{className:(0,l.A)("max-height-img-container",t.SmallLogoCardImage),children:e})})}):(0,r.jsx)("div",{className:t.SmallLogoCardContent,children:(0,r.jsx)("div",{className:(0,l.A)("max-height-img-container",t.SmallLogoCardImage),children:e})})}),d=({title:e,description:a,link:n="",headerRight:o,children:i})=>(0,r.jsx)(s,{link:n,children:(0,r.jsxs)("div",{className:t.TitleCardContent,children:[(0,r.jsxs)("div",{className:(0,l.A)(t.TitleCardHeader),children:[(0,r.jsx)("div",{className:(0,l.A)(t.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:e}),(0,r.jsx)("div",{className:t.TitleCardHeaderRight,children:o})]}),(0,r.jsx)("hr",{className:(0,l.A)(t.TitleCardSeparator),style:{margin:"12px 0"}}),i?(0,r.jsx)("div",{className:(0,l.A)(t.TextColor),children:i}):(0,r.jsx)("p",{className:(0,l.A)(t.TextColor),dangerouslySetInnerHTML:{__html:a}})]})})},26256:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"tracing/integrations/listing/haystack","title":"Tracing Haystack","description":"Haystack is an open-source AI orchestration framework developed by deepset, designed to help Python developers build production-ready LLM-powered applications.","source":"@site/docs/genai/tracing/integrations/listing/haystack.mdx","sourceDirName":"tracing/integrations/listing","slug":"/tracing/integrations/listing/haystack","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/haystack","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"sidebar_label":"Haystack"},"sidebar":"genAISidebar","previous":{"title":"Anthropic","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/anthropic"},"next":{"title":"LiteLLM","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/litellm"}}');var t=n(74848),o=n(28453),r=n(49374),i=(n(10493),n(66927));n(14252),n(11470),n(19365);const s={sidebar_position:8,sidebar_label:"Haystack"},p="Tracing Haystack",m={},c=[{value:"Basic Example",id:"basic-example",level:3},{value:"Token usage",id:"token-usage",level:2},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:3}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"tracing-haystack",children:"Tracing Haystack"})}),"\n",(0,t.jsx)(i.A,{src:"/images/llms/haystack/haystack-tracing.png",alt:"Haystack Tracing via autolog"}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.a,{href:"https://github.com/deepset-ai/haystack",children:"Haystack"})," is an open-source AI orchestration framework developed by deepset, designed to help Python developers build production-ready LLM-powered applications.\nIt features a modular architecture - built around components and pipelines for building everything from retrieval-augmented generation (RAG) workflows to autonomous agentic systems and scalable search engines."]}),"\n",(0,t.jsxs)(a.p,{children:[(0,t.jsx)(a.a,{href:"../../",children:"MLflow Tracing"})," provides automatic tracing capability when using Haystack pipelines and components.\nWhen Haystack auto-tracing is enabled by calling the ",(0,t.jsx)(r.B,{fn:"mlflow.haystack.autolog"})," function,\nusage of Haystack pipelines and components will automatically record generated traces during interactive development."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:"import mlflow\n\nmlflow.haystack.autolog()\n"})}),"\n",(0,t.jsx)(a.p,{children:"MLflow trace automatically captures the following information:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Pipelines and Components"}),"\n",(0,t.jsx)(a.li,{children:"Latencies"}),"\n",(0,t.jsx)(a.li,{children:"Metadata about the different components added, such as tool names"}),"\n",(0,t.jsx)(a.li,{children:"Token usages and cost"}),"\n",(0,t.jsx)(a.li,{children:"Cache hit"}),"\n",(0,t.jsx)(a.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,t.jsx)(a.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'import mlflow\n\nfrom haystack import Document, Pipeline\nfrom haystack.components.builders.chat_prompt_builder import ChatPromptBuilder\nfrom haystack.components.generators.chat import OpenAIChatGenerator\nfrom haystack.components.retrievers.in_memory import InMemoryBM25Retriever\nfrom haystack.dataclasses import ChatMessage\nfrom haystack.document_stores.in_memory import InMemoryDocumentStore\nfrom haystack.utils import Secret\n\nmlflow.haystack.autolog()\nmlflow.set_experiment("Haystack Tracing")\n\n# Write documents to InMemoryDocumentStore\ndocument_store = InMemoryDocumentStore()\ndocument_store.write_documents(\n    [\n        Document(content="My name is Jean and I live in Paris."),\n        Document(content="My name is Mark and I live in Berlin."),\n        Document(content="My name is Giorgio and I live in Rome."),\n    ]\n)\n\n# Build a RAG pipeline\nprompt_template = [\n    ChatMessage.from_system("You are a helpful assistant."),\n    ChatMessage.from_user(\n        "Given these documents, answer the question.\\n"\n        "Documents:\\n{% for doc in documents %}{{ doc.content }}{% endfor %}\\n"\n        "Question: {{question}}\\n"\n        "Answer:"\n    ),\n]\n\n# Define required variables explicitly\nprompt_builder = ChatPromptBuilder(\n    template=prompt_template, required_variables={"question", "documents"}\n)\n\nretriever = InMemoryBM25Retriever(document_store=document_store)\nllm = OpenAIChatGenerator(api_key=Secret.from_env_var("OPENAI_API_KEY"))\n\nrag_pipeline = Pipeline()\nrag_pipeline.add_component("retriever", retriever)\nrag_pipeline.add_component("prompt_builder", prompt_builder)\nrag_pipeline.add_component("llm", llm)\nrag_pipeline.connect("retriever", "prompt_builder.documents")\nrag_pipeline.connect("prompt_builder", "llm.messages")\n\n# Ask a question\nquestion = "Who lives in Paris?"\nresults = rag_pipeline.run(\n    {\n        "retriever": {"query": question},\n        "prompt_builder": {"question": question},\n    }\n)\n\nprint(results["llm"]["replies"])\n'})}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsx)(a.img,{alt:"Haystack Tracing via autolog",src:n(70793).A+"",width:"3136",height:"1786"})}),"\n",(0,t.jsx)(a.h2,{id:"token-usage",children:"Token usage"}),"\n",(0,t.jsxs)(a.p,{children:["MLflow >= 3.4.0 supports token usage tracking for Haystack. The token usage for each LLM call will be logged in the ",(0,t.jsx)(a.code,{children:"mlflow.chat.tokenUsage"})," attribute. The total token usage throughout the trace will be\navailable in the ",(0,t.jsx)(a.code,{children:"token_usage"})," field of the trace info object."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-python",children:'question = "Who lives in Paris?"\nresults = rag_pipeline.run(\n    {\n        "retriever": {"query": question},\n        "prompt_builder": {"question": question},\n    }\n)\n\nprint(results["llm"]["replies"])\n\nlast_trace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id=last_trace_id)\n\n# Print the token usage\ntotal_usage = trace.info.token_usage\nprint("== Total token usage: ==")\nprint(f"  Input tokens: {total_usage[\'input_tokens\']}")\nprint(f"  Output tokens: {total_usage[\'output_tokens\']}")\nprint(f"  Total tokens: {total_usage[\'total_tokens\']}")\n\n# Print the token usage for each LLM call\nprint("\\n== Detailed usage for each LLM call: ==")\nfor span in trace.data.spans:\n    if usage := span.get_attribute("mlflow.chat.tokenUsage"):\n        print(f"{span.name}:")\n        print(f"  Input tokens: {usage[\'input_tokens\']}")\n        print(f"  Output tokens: {usage[\'output_tokens\']}")\n        print(f"  Total tokens: {usage[\'total_tokens\']}")\n'})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"== Total token usage: ==\n  Input tokens: 64\n  Output tokens: 5\n  Total tokens: 69\n\n== Detailed usage for each LLM call: ==\nOpenAIChatGenerator:\n  Input tokens: 64\n  Output tokens: 5\n"})}),"\n",(0,t.jsx)(a.h3,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,t.jsxs)(a.p,{children:["Auto tracing for Haystack can be disabled globally by calling ",(0,t.jsx)(a.code,{children:"mlflow.haystack.autolog(disable=True)"})," or ",(0,t.jsx)(a.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function h(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},49374:(e,a,n)=>{n.d(a,{B:()=>i});n(96540);const l=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.agno":"api_reference/python_api/mlflow.agno.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.webhooks":"api_reference/python_api/mlflow.webhooks.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.typescript":"api_reference/typescript_api/index.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var t=n(86025),o=n(74848);const r=e=>{const a=e.split(".");for(let n=a.length;n>0;n--){const e=a.slice(0,n).join(".");if(l[e])return e}return null};function i({fn:e,children:a,hash:n}){const i=r(e);if(!i)return(0,o.jsx)(o.Fragment,{children:a});const s=(0,t.Ay)(`/${l[i]}#${n??e}`);return(0,o.jsx)("a",{href:s,target:"_blank",children:a??(0,o.jsxs)("code",{children:[e,"()"]})})}},66927:(e,a,n)=>{n.d(a,{A:()=>r});n(96540);const l={container:"container_JwLF",imageWrapper:"imageWrapper_RfGN",image:"image_bwOA",caption:"caption_jo2G"};var t=n(86025),o=n(74848);function r({src:e,alt:a,width:n,caption:r,className:i}){return(0,o.jsxs)("div",{className:`${l.container} ${i||""}`,children:[(0,o.jsx)("div",{className:l.imageWrapper,style:n?{width:n}:{},children:(0,o.jsx)("img",{src:(0,t.Ay)(e),alt:a,className:l.image})}),r&&(0,o.jsx)("p",{className:l.caption,children:r})]})}},70793:(e,a,n)=>{n.d(a,{A:()=>l});const l=n.p+"assets/images/haystack-basic-tracing-cc6d8017b6b96aefb71c5df7cdce81b1.png"}}]);