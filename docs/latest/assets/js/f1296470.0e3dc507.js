"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{11470:(e,t,n)=>{n.d(t,{A:()=>b});var a=n(96540),r=n(34164),s=n(23104),l=n(56347),i=n(205),o=n(57485),c=n(31682),p=n(70679);function d(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return d(e).map(({props:{value:e,label:t,attributes:n,default:a}})=>({value:e,label:t,attributes:n,default:a}))}(n);return function(e){const t=(0,c.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function m({value:e,tabValues:t}){return t.some(t=>t.value===e)}function u({queryString:e=!1,groupId:t}){const n=(0,l.W6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(r),(0,a.useCallback)(e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})},[r,n])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,s=h(e),[l,o]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s})),[c,d]=u({queryString:n,groupId:r}),[f,x]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,p.Dv)(t);return[n,(0,a.useCallback)(e=>{t&&r.set(e)},[t,r])]}({groupId:r}),w=(()=>{const e=c??f;return m({value:e,tabValues:s})?e:null})();(0,i.A)(()=>{w&&o(w)},[w]);return{selectedValue:l,selectValue:(0,a.useCallback)(e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),x(e)},[d,x,s]),tabValues:s}}var x=n(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(74848);function y({className:e,block:t,selectedValue:n,selectValue:a,tabValues:l}){const i=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const t=e.currentTarget,r=i.indexOf(t),s=l[r].value;s!==n&&(o(t),a(s))},p=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},e),children:l.map(({value:e,label:t,attributes:a})=>(0,j.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{i.push(e)},onKeyDown:p,onClick:c,...a,className:(0,r.A)("tabs__item",w.tabItem,a?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function _({lazy:e,children:t,selectedValue:n}){const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function g(e){const t=f(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",w.tabList),children:[(0,j.jsx)(y,{...t,...e}),(0,j.jsx)(_,{...t,...e})]})}function b(e){const t=(0,x.A)();return(0,j.jsx)(g,{...e,children:d(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var a=n(34164);const r={tabItem:"tabItem_Ymn6"};var s=n(74848);function l({children:e,hidden:t,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,n),hidden:t,children:e})}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(96540);const r={},s=a.createContext(r);function l(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(s.Provider,{value:t},e.children)}},42072:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/search_spans_by_type-ddb1e2356a4b8ba83b6cb59c04fffc89.png"},47020:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);const a={wrapper:"wrapper_sf5q"};var r=n(74848);function s({children:e}){return(0,r.jsx)("div",{className:a.wrapper,children:e})}},49374:(e,t,n)=>{n.d(t,{B:()=>i});n(96540);const a=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var r=n(86025),s=n(74848);const l=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(a[e])return e}return null};function i({fn:e,children:t,hash:n}){const i=l(e);if(!i)return(0,s.jsx)(s.Fragment,{children:t});const o=(0,r.Ay)(`/${a[i]}#${n??e}`);return(0,s.jsx)("a",{href:o,target:"_blank",children:t??(0,s.jsxs)("code",{children:[e,"()"]})})}},66927:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);const a={container:"container_JwLF",imageWrapper:"imageWrapper_RfGN",image:"image_bwOA",caption:"caption_jo2G"};var r=n(86025),s=n(74848);function l({src:e,alt:t,width:n,caption:l,className:i}){return(0,s.jsxs)("div",{className:`${a.container} ${i||""}`,children:[(0,s.jsx)("div",{className:a.imageWrapper,style:n?{width:n}:{},children:(0,s.jsx)("img",{src:(0,r.Ay)(e),alt:t,className:a.image})}),l&&(0,s.jsx)("p",{className:a.caption,children:l})]})}},77566:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>h,default:()=>x,frontMatter:()=>d,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"tracing/concepts/span","title":"Spans","description":"What is a Span?","source":"@site/docs/genai/tracing/concepts/span.mdx","sourceDirName":"tracing/concepts","slug":"/tracing/concepts/span","permalink":"/mlflow-website/docs/latest/genai/tracing/concepts/span","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Trace","permalink":"/mlflow-website/docs/latest/genai/tracing/concepts/trace"},"next":{"title":"Feedback","permalink":"/mlflow-website/docs/latest/genai/tracing/concepts/feedback"}}');var r=n(74848),s=n(28453),l=n(11470),i=n(19365),o=n(66927),c=n(47020),p=n(49374);const d={},h="Spans",m={},u=[{value:"What is a Span?",id:"what-is-a-span",level:2},{value:"Span Object Schema",id:"span-object-schema",level:2},{value:"Span Attributes",id:"span-attributes",level:2},{value:"Span Types",id:"span-types",level:2},{value:"Specialized Span Schemas",id:"specialized-span-schemas",level:2},{value:"Retriever Spans",id:"retriever-spans",level:3},{value:"Example Usage",id:"example-usage",level:4}];function f(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"spans",children:"Spans"})}),"\n",(0,r.jsx)(t.h2,{id:"what-is-a-span",children:"What is a Span?"}),"\n",(0,r.jsxs)(t.p,{children:["The Span object is a fundamental building block in the ",(0,r.jsx)(t.a,{href:"/genai/tracing/concepts/trace",children:"Trace"})," data model. It is a container for the information about the individual steps of the trace, such as LLM calls, tool execution, retrieval, etc. Spans form a hierarchical tree structure within a single trace, which represents the execution flow of the trace."]}),"\n",(0,r.jsx)(o.A,{src:"/images/llms/tracing/schema/span_architecture.png",alt:"Example of a Span for a Tool Calling Agent",width:"80%",caption:"Example of a Span for a Tool Calling Agent"}),"\n",(0,r.jsx)(t.p,{children:"For example, the above picture illustrates a set of spans that are organized in a tree structure in a trace. Each line represents a span, where the tree-structure is formed by the curly edges between lines."}),"\n",(0,r.jsx)(t.h2,{id:"span-object-schema",children:"Span Object Schema"}),"\n",(0,r.jsxs)(t.p,{children:["MLflow's Span object is designed to be compatible with the ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces#spans",children:"OpenTelemetry Span spec"}),". It is a dataclass object that is mostly same as the OpenTelemetry span object, but with some additional convenience accessors and methods to support GenAI use cases. When exported to OpenTelemetry-compatible backend, the Span object is serialized into the strict OpenTelemetry export format (OTLP)."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Field"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"span_id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsx)(t.td,{children:"A unique identifier that is generated for each span within a trace."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"trace_id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsx)(t.td,{children:"The unique identifier that links this span to its parent trace."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"parent_id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Optional[str]"})}),(0,r.jsxs)(t.td,{children:["The identifier that establishes the hierarchical association of a given span with its parent span. If the span is the root span, this field is ",(0,r.jsx)(t.code,{children:"None"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"name"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsx)(t.td,{children:"The name of the span, either user-defined or automatically generated based on the function or method being instrumented."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"start_time_ns"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsx)(t.td,{children:"The unix timestamp (in nanoseconds) when the span was started."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"end_time_ns"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsx)(t.td,{children:"The unix timestamp (in nanoseconds) when the span was ended."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"status"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"SpanStatus"})}),(0,r.jsx)(t.td,{children:"The status of a span with values of OK, UNSET, or ERROR. The span status object contains an optional description if the status_code is reflecting an error that occurred."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"inputs"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Optional[Any]"})}),(0,r.jsx)(t.td,{children:"The input data that is passed into the particular stage of your application."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"outputs"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Optional[Any]"})}),(0,r.jsx)(t.td,{children:"The output data that is passed out of the particular stage of your application."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"attributes"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Dict[str, Any]"})}),(0,r.jsx)(t.td,{children:"Attributes are metadata that are associated with a given step within your application. These are key-value pairs that provide insight into behavioral modifications for function and method calls."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"events"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"List[SpanEvent]"})}),(0,r.jsx)(t.td,{children:"Events are a system-level property that is optionally applied to a span only if there was an issue during the execution of the span. These events contain information about exceptions that were thrown in the instrumented call, as well as the stack trace."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"span-attributes",children:"Span Attributes"}),"\n",(0,r.jsx)(t.p,{children:"Span attributes are key-value pairs that provide insight into behavioral modifications for function and method calls."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'span.set_attributes(\n    {\n        "ai.model.name": "o3-mini",\n        "ai.model.version": "2024-01-01",\n        "ai.model.provider": "openai",\n        "ai.model.temperature": 0.7,\n        "ai.model.max_tokens": 1000,\n        "infrastructure.gpu.type": "A100",\n        "infrastructure.memory.used_mb": 2048,\n    }\n)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"span-types",children:"Span Types"}),"\n",(0,r.jsx)(t.p,{children:"Span types are a way to categorize spans within a trace. MLflow provides a set of predefined span types for common use cases, while also allowing you to set custom span types."}),"\n",(0,r.jsx)(c.A,{children:(0,r.jsxs)(l.A,{children:[(0,r.jsx)(i.A,{value:"built-in",label:"Built-in Types",default:!0,children:(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Span Type"})}),(0,r.jsx)(t.th,{children:(0,r.jsx)(t.strong,{children:"Description"})})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"CHAT_MODEL"'})}),(0,r.jsx)(t.td,{children:"Represents a query to a chat model. This is a special case of an LLM interaction."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"CHAIN"'})}),(0,r.jsx)(t.td,{children:"Represents a chain of operations."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"AGENT"'})}),(0,r.jsx)(t.td,{children:"Represents an autonomous agent operation."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"TOOL"'})}),(0,r.jsx)(t.td,{children:"Represents a tool execution (typically by an agent), such as querying a search engine."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"EMBEDDING"'})}),(0,r.jsx)(t.td,{children:"Represents a text embedding operation."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"RETRIEVER"'})}),(0,r.jsx)(t.td,{children:"Represents a context retrieval operation, such as querying a vector database."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"PARSER"'})}),(0,r.jsx)(t.td,{children:"Represents a parsing operation, transforming text into a structured format."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"RERANKER"'})}),(0,r.jsx)(t.td,{children:"Represents a re-ranking operation, ordering the retrieved contexts based on relevance."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"MEMORY"'})}),(0,r.jsx)(t.td,{children:"Represents a memory operation, such as persisting context in a long-term memory db."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'"UNKNOWN"'})}),(0,r.jsx)(t.td,{children:"A default span type that is used when no other span type is specified."})]})]})]})}),(0,r.jsxs)(i.A,{value:"usage",label:"Setting Span Types",children:[(0,r.jsxs)(t.p,{children:["When you are using ",(0,r.jsx)(t.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"automatic tracing"}),", the span type is automatically set by MLflow.\nTo set a span type for manually created spans, you can pass the ",(0,r.jsx)(t.code,{children:"span_type"})," parameter to the ",(0,r.jsx)(p.B,{fn:"mlflow.trace"})," decorator or ",(0,r.jsx)(p.B,{fn:"mlflow.start_span"})," context manager. When you are using ",(0,r.jsx)(t.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"automatic tracing"}),", the span type is automatically set by MLflow."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\n# Setting a span type with the decorator\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_documents(query: str):\n    ...\n\n\n# Setting a span type with the context manager\nwith mlflow.start_span(name="add", span_type=SpanType.TOOL) as span:\n    span.set_inputs({"x": x, "y": y})\n    z = x + y\n    span.set_outputs({"z": z})\n\n\n# You can also define a custom span type string\n@mlflow.trace(span_type="ROUTER")\ndef route_request(request):\n    ...\n'})})]}),(0,r.jsxs)(i.A,{value:"search",label:"Search Spans by Type",children:[(0,r.jsx)(t.p,{children:"Span type is useful for searching and filtering particular spans in a large trace. MLflow supports both UI and programmatic span search by span type."}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Searching spans by SDK:"})}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\ntrace = mlflow.get_trace("<trace_id>")\nretriever_spans = trace.search_spans(span_type=SpanType.RETRIEVER)\n'})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Searching spans on UI:"})}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Search Spans by Type",src:n(42072).A+"",width:"488",height:"264"})})]})]})}),"\n",(0,r.jsx)(t.h2,{id:"specialized-span-schemas",children:"Specialized Span Schemas"}),"\n",(0,r.jsx)(t.p,{children:"MLflow has predefined types of spans, and certain span types have properties that are required in order to enable additional functionality within the UI and downstream tasks such as evaluation."}),"\n",(0,r.jsx)(t.h3,{id:"retriever-spans",children:"Retriever Spans"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," span type is used for operations involving retrieving data from a data store (for example, querying documents from a vector store). The output of a ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," span is expected to be a list of documents."]}),"\n",(0,r.jsx)(t.p,{children:"Each document in the list should be a dictionary with the following structure:"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"page_content"})})," (str): The text content of the retrieved document chunk."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"metadata"})})," (Optional[Dict[str, Any]]): A dictionary of additional metadata associated with the document. MLflow UI and evaluation metrics may specifically look for:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"doc_uri"})," (str): A string URI for the document source"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"chunk_id"})," (str): A string identifier if the document is part of a larger chunked document"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"id"})})," (Optional[str]): An optional unique identifier for the document chunk itself."]}),"\n",(0,r.jsx)(t.h4,{id:"example-usage",children:"Example Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType, Document\n\n\ndef search_store(query: str) -> list[tuple[str, str]]:\n    # Simulate retrieving documents (e.g., from a vector database)\n    return [\n        (\n            "MLflow Tracing helps debug GenAI applications...",\n            "docs/mlflow/tracing_intro.md",\n        ),\n        (\n            "Key components of a trace include spans...",\n            "docs/mlflow/tracing_datamodel.md",\n        ),\n        ("MLflow provides automatic instrumentation...", "docs/mlflow/auto_trace.md"),\n    ]\n\n\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_relevant_documents(query: str):\n    # Get documents from the search store\n    docs = search_store(query)\n\n    # Get the current active span (created by @mlflow.trace)\n    span = mlflow.get_current_active_span()\n\n    # Set the outputs of the span in accordance with the tracing schema\n    outputs = [\n        Document(page_content=doc, metadata={"doc_uri": uri}) for doc, uri in docs\n    ]\n    span.set_outputs(outputs)\n\n    # Return the original format for downstream usage\n    return docs\n\n\n# Example usage\nuser_query = "MLflow Tracing benefits"\nretrieved_docs = retrieve_relevant_documents(user_query)\n'})})]})}function x(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}}}]);