"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2930],{16581:(t,e,n)=>{n.d(e,{p:()=>a});var r=n(74848);const a=({children:t,isStderr:e})=>(0,r.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:t})},27594:(t,e,n)=>{n.d(e,{O:()=>i});var r=n(96540),a=n(74848);function i({children:t,href:e}){const n=(0,r.useCallback)((async t=>{if(t.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:e})}catch{}const n=await fetch(e),r=await n.blob(),a=window.URL.createObjectURL(r),i=document.createElement("a");i.style.display="none",i.href=a;const s=e.split("/").pop();i.download=s,document.body.appendChild(i),i.click(),window.URL.revokeObjectURL(a),document.body.removeChild(i)}),[e]);return(0,a.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:e,download:!0,onClick:n,children:t})}},71221:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>h,default:()=>g,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"traditional-ml/sklearn/quickstart/quickstart-sklearn-ipynb","title":"Get Started with MLflow + Scikit-learn","description":"Download this notebook","source":"@site/docs/classic-ml/traditional-ml/sklearn/quickstart/quickstart-sklearn-ipynb.mdx","sourceDirName":"traditional-ml/sklearn/quickstart","slug":"/traditional-ml/sklearn/quickstart/quickstart-sklearn","permalink":"/docs/latest/ml/traditional-ml/sklearn/quickstart/quickstart-sklearn","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/sklearn/quickstart/quickstart-sklearn.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/sklearn/quickstart/quickstart-sklearn.ipynb","slug":"quickstart-sklearn"},"sidebar":"classicMLSidebar","previous":{"title":"MLflow Scikit-learn Integration","permalink":"/docs/latest/ml/traditional-ml/sklearn/"},"next":{"title":"Scikit Learn within MLflow","permalink":"/docs/latest/ml/traditional-ml/sklearn/guide/"}}');var a=n(74848),i=n(28453),s=n(75983),l=n(16581),d=n(81226),o=n(27594);const c={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/sklearn/quickstart/quickstart-sklearn.ipynb",slug:"quickstart-sklearn"},h="Get Started with MLflow + Scikit-learn",m={},u=[{value:"Install dependencies",id:"install-dependencies",level:2},{value:"Load and prepare the dataset",id:"load-and-prepare-the-dataset",level:2},{value:"Define the Model",id:"define-the-model",level:2},{value:"Connect to MLflow Tracking Server",id:"connect-to-mlflow-tracking-server",level:2},{value:"Logging with MLflow",id:"logging-with-mlflow",level:2},{value:"View results",id:"view-results",level:2}];function p(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"get-started-with-mlflow--scikit-learn",children:"Get Started with MLflow + Scikit-learn"})}),"\n",(0,a.jsx)(o.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/classic-ml/traditional-ml/sklearn/quickstart/quickstart-sklearn.ipynb",children:"Download this notebook"}),"\n",(0,a.jsx)(e.p,{children:"In this guide, we will show you how to train a model with scikit-learn and log your training using MLflow."}),"\n",(0,a.jsxs)(e.p,{children:["We will be using the ",(0,a.jsx)(e.a,{href:"https://mlflow.org/docs/latest/ml/getting-started/databricks-trial.html",children:"Databricks Free Trial"}),", which has built-in support for MLflow. The Databricks Free Trial provides an opportunity to use Databricks platform for free. If you haven't already, please register for an account via ",(0,a.jsx)(e.a,{href:"https://signup.databricks.com/?destination_url=/ml/experiments-signup?source=OSS_DOCS&dbx_source=TRY_MLFLOW&signup_experience_step=EXPRESS&provider=MLFLOW",children:"this link"}),"."]}),"\n",(0,a.jsx)(e.p,{children:"You can run code in this guide from cloud-based notebooks like Databricks notebook or Google Colab, or run it on your local machine."}),"\n",(0,a.jsx)(e.h2,{id:"install-dependencies",children:"Install dependencies"}),"\n",(0,a.jsxs)(e.p,{children:["Let's install the ",(0,a.jsx)(e.code,{children:"mlflow"})," package."]}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:"%pip install mlflow"}),"\n",(0,a.jsx)(e.p,{children:"Then let's import the packages"}),"\n",(0,a.jsx)(s.d,{executionCount:" ",children:"from sklearn.datasets import load_iris\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow"}),"\n",(0,a.jsx)(e.h2,{id:"load-and-prepare-the-dataset",children:"Load and prepare the dataset"}),"\n",(0,a.jsxs)(e.p,{children:["We will train a simple multi-class classification model for Iris flowers using the ",(0,a.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Iris_flower_data_set",children:"iris dataset"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["Let's load the dataset using ",(0,a.jsx)(e.code,{children:"load_iris()"})," into a pandas Dataframe and take a look at the data."]}),"\n",(0,a.jsx)(s.d,{executionCount:3,children:"iris_df = load_iris(as_frame=True).frame\niris_df"}),"\n",(0,a.jsx)(d.Q,{children:(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>sepal length (cm)</th>\n    <th>sepal width (cm)</th>\n    <th>petal length (cm)</th>\n    <th>petal width (cm)</th>\n    <th>target</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>5.1</td>\n    <td>3.5</td>\n    <td>1.4</td>\n    <td>0.2</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>1</th>\n    <td>4.9</td>\n    <td>3.0</td>\n    <td>1.4</td>\n    <td>0.2</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>2</th>\n    <td>4.7</td>\n    <td>3.2</td>\n    <td>1.3</td>\n    <td>0.2</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>3</th>\n    <td>4.6</td>\n    <td>3.1</td>\n    <td>1.5</td>\n    <td>0.2</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>4</th>\n    <td>5.0</td>\n    <td>3.6</td>\n    <td>1.4</td>\n    <td>0.2</td>\n    <td>0</td>\n  </tr>\n  <tr>\n    <th>...</th>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n  <tr>\n    <th>145</th>\n    <td>6.7</td>\n    <td>3.0</td>\n    <td>5.2</td>\n    <td>2.3</td>\n    <td>2</td>\n  </tr>\n  <tr>\n    <th>146</th>\n    <td>6.3</td>\n    <td>2.5</td>\n    <td>5.0</td>\n    <td>1.9</td>\n    <td>2</td>\n  </tr>\n  <tr>\n    <th>147</th>\n    <td>6.5</td>\n    <td>3.0</td>\n    <td>5.2</td>\n    <td>2.0</td>\n    <td>2</td>\n  </tr>\n  <tr>\n    <th>148</th>\n    <td>6.2</td>\n    <td>3.4</td>\n    <td>5.4</td>\n    <td>2.3</td>\n    <td>2</td>\n  </tr>\n  <tr>\n    <th>149</th>\n    <td>5.9</td>\n    <td>3.0</td>\n    <td>5.1</td>\n    <td>1.8</td>\n    <td>2</td>\n  </tr>\n</tbody>\n</table>\n<p>150 rows \xd7 5 columns</p>\n</div>'}})}),"\n",(0,a.jsx)(e.p,{children:"Now we'll split our dataset into training and testing sets"}),"\n",(0,a.jsx)(s.d,{executionCount:4,children:"# Split into 80% training and 20% testing\ntrain_df, test_df = train_test_split(iris_df, test_size=0.2, random_state=42)\ntrain_df.shape, test_df.shape"}),"\n",(0,a.jsx)(l.p,{children:"((120, 5), (30, 5))"}),"\n",(0,a.jsx)(s.d,{executionCount:5,children:'# Separate the target column for the training set\ntrain_dataset = mlflow.data.from_pandas(train_df, name="train")\ntrain_x = train_dataset.df.drop(["target"], axis=1)\ntrain_y = train_dataset.df[["target"]]\n\ntrain_x.shape, train_y.shape'}),"\n",(0,a.jsx)(l.p,{children:"((120, 4), (120, 1))"}),"\n",(0,a.jsx)(s.d,{executionCount:6,children:'# Separate the target column for the testing set\ntest_dataset = mlflow.data.from_pandas(test_df, name="test")\ntest_x = test_dataset.df.drop(["target"], axis=1)\ntest_y = test_dataset.df[["target"]]\n\ntest_x.shape, test_y.shape'}),"\n",(0,a.jsx)(l.p,{children:"((30, 4), (30, 1))"}),"\n",(0,a.jsx)(e.h2,{id:"define-the-model",children:"Define the Model"}),"\n",(0,a.jsx)(e.p,{children:"For this example, we'll use an ElasticNet model with some pre-defined hyperparameters. Let's also define a helper function to compute some metrics to evaluate our model's performance."}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:"lr = ElasticNet(alpha=0.5, l1_ratio=0.5, random_state=42)"}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:"def compute_metrics(actual, predicted):\n  rmse = mean_squared_error(actual, predicted)\n  mae = mean_absolute_error(actual, predicted)\n  r2 = r2_score(actual, predicted)\n\n  return rmse, mae, r2"}),"\n",(0,a.jsx)(e.h2,{id:"connect-to-mlflow-tracking-server",children:"Connect to MLflow Tracking Server"}),"\n",(0,a.jsxs)(e.p,{children:["Before training, we need to configure the MLflow tracking server because we will log data into MLflow. In this tutorial, we will use Databricks Free Trial for MLflow tracking server. For other options such as using your local MLflow server, please read the ",(0,a.jsx)(e.a,{href:"https://mlflow.org/docs/latest/ml/getting-started/tracking-server-overview/",children:"Tracking Server Overview"}),"."]}),"\n",(0,a.jsxs)(e.p,{children:["If you have not, please set up your account and access token of the Databricks Free Trial by following ",(0,a.jsx)(e.a,{href:"https://mlflow.org/docs/latest/ml/getting-started/tracking-server-overview/",children:"this guide"}),". It should take no longer than 5 mins to register. For this guide, we need the ML experiment dashboard for us to track our training progress."]}),"\n",(0,a.jsx)(e.p,{children:"After successfully registering an account on the Databricks Free Trial, let's connnect MLflow to the Databricks Workspace. You will need to enter following information:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Databricks Host"}),": https://<your workspace host>.cloud.databricks.com"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Token"}),": You Personal Access Token"]}),"\n"]}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:"mlflow.login()"}),"\n",(0,a.jsx)(e.p,{children:"Now this notebook is connected to the hosted tracking server. Let's configure some MLflow metadata. Two things to set up:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"mlflow.set_tracking_uri"}),': always use "databricks".']}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"mlflow.set_experiment"}),": pick up a name you like, start with ",(0,a.jsx)(e.code,{children:"/Users/<your email>/"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:'mlflow.set_tracking_uri("databricks")\nmlflow.set_experiment("/Users/<your email>/mlflow-sklearn-quickstart")'}),"\n",(0,a.jsx)(e.h2,{id:"logging-with-mlflow",children:"Logging with MLflow"}),"\n",(0,a.jsx)(e.p,{children:"MLflow has powerful tracking APIs that let's us log runs and models along with their associated metadata such as parameters and metrics. Let's first start a training run to train our model."}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:'# Start a training run\nwith mlflow.start_run() as training_run:\n  # Log the parameters for our model\n  mlflow.log_param("alpha", 0.5)\n  mlflow.log_param("l1_ratio", 0.5)\n\n  # Train and log our model, which inherits the parameters\n  lr.fit(train_x, train_y)\n  model_info = mlflow.sklearn.log_model(sk_model=lr, name="elasticnet", input_example=train_x)\n\n  # Evaluate the model on the training dataset and log metrics\n  # These metrics will be linked to both the model and run\n  predictions = lr.predict(train_x)\n  (rmse, mae, r2) = compute_metrics(train_y, predictions)\n  mlflow.log_metrics(\n      metrics={\n          "rmse": rmse,\n          "r2": r2,\n          "mae": mae,\n      },\n      dataset=train_dataset,\n  )'}),"\n",(0,a.jsx)(e.p,{children:"Let's now evaluate our model on the test dataset"}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:'# Start an evaluation run\nwith mlflow.start_run() as evaluation_run:\n  # Load our previous model\n  logged_model = mlflow.sklearn.load_model(f"models:/{model_info.model_id}")\n\n  # Evaluate the model on the training dataset and log metrics\n  predictions = logged_model.predict(test_x)\n  (rmse, mae, r2) = compute_metrics(test_y, predictions)\n  mlflow.log_metrics(\n      metrics={\n          "rmse": rmse,\n          "r2": r2,\n          "mae": mae,\n      },\n      dataset=test_dataset,\n      model_id=model_info.model_id,\n  )'}),"\n",(0,a.jsx)(e.h2,{id:"view-results",children:"View results"}),"\n",(0,a.jsxs)(e.p,{children:["Let's look at our training and testing results. Log in to your Databricks Workspace, and click on the ",(0,a.jsx)(e.code,{children:"Experiments"})," tab from the left menu. The initial page displays a list of runs, where we can see our training and evaluation runs."]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://imgur.com/xtIRa9P.png",alt:"runs page"})}),"\n",(0,a.jsx)(e.p,{children:"Now let's head to the models tab, where we can see the model that we logged"}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://imgur.com/hapuVHr.png",alt:"models page"})}),"\n",(0,a.jsx)(e.p,{children:"Clicking on the model name will take you to the model details page, with information on its parameters, metrics across both runs, and other metadata."}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://imgur.com/dAXNEWV.png",alt:"model details page"})}),"\n",(0,a.jsx)(e.p,{children:"We can also inspect our model using the API"}),"\n",(0,a.jsx)(s.d,{executionCount:0,children:"logged_model = mlflow.get_logged_model(model_info.model_id)\n\nlogged_model, logged_model.metrics, logged_model.params"})]})}function g(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}},75983:(t,e,n)=>{n.d(e,{d:()=>s});var r=n(21028);const a="codeBlock_oJcR";var i=n(74848);const s=({children:t,executionCount:e})=>(0,i.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,i.jsx)(r.A,{className:a,language:"python",children:t})})},81226:(t,e,n)=>{n.d(e,{Q:()=>a});var r=n(74848);const a=({children:t})=>(0,r.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:t})}}]);