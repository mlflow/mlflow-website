"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3041],{11470:(e,n,t)=>{t.d(n,{A:()=>b});var r=t(96540),s=t(34164),i=t(23104),l=t(56347),a=t(205),o=t(57485),c=t(31682),d=t(70679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,l.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=h(e),[l,o]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[c,u]=m({queryString:t,groupId:s}),[g,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),x=(()=>{const e=c??g;return p({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{x&&o(x)}),[x]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function _({className:e,block:n,selectedValue:t,selectValue:r,tabValues:l}){const a=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const n=e.currentTarget,s=a.indexOf(n),i=l[s].value;i!==t&&(o(n),r(i))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:l.map((({value:e,label:n,attributes:r})=>(0,j.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...r,className:(0,s.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,j.jsx)(_,{...n,...e}),(0,j.jsx)(y,{...n,...e})]})}function b(e){const n=(0,f.A)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var r=t(34164);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function l({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:n,children:e})}},24446:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/quickstart_ui_screenshot-3ea56ba2b1c9970e1ff466b8dc57b37d.png"},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(96540);const s={},i=r.createContext(s);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(i.Provider,{value:n},e.children)}},81236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"plugins/index","title":"MLflow Plugins","description":"MLflow\'s plugin architecture enables seamless integration with third-party tools and custom infrastructure. As a framework-agnostic platform, MLflow provides developer APIs for extending functionality across storage, authentication, execution backends, and model evaluation.","source":"@site/docs/classic-ml/plugins/index.mdx","sourceDirName":"plugins","slug":"/plugins/","permalink":"/docs/latest/ml/plugins/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"MLflow Projects \ud83d\udce6","permalink":"/docs/latest/ml/projects/"},"next":{"title":"External Tutorials","permalink":"/docs/latest/ml/tutorials-and-examples/"}}');var s=t(74848),i=t(28453),l=t(11470),a=t(19365);const o={},c="MLflow Plugins",d={},u=[{value:"Quick Start",id:"quick-start",level:2},{value:"Installing and Using a Plugin",id:"installing-and-using-a-plugin",level:3},{value:"Plugin Types &amp; Use Cases",id:"plugin-types--use-cases",level:2},{value:"<strong>Storage &amp; Persistence</strong>",id:"storage--persistence",level:3},{value:"<strong>Authentication &amp; Headers</strong>",id:"authentication--headers",level:3},{value:"<strong>Execution &amp; Evaluation</strong>",id:"execution--evaluation",level:3},{value:"Developing Custom Plugins",id:"developing-custom-plugins",level:2},{value:"Plugin Structure",id:"plugin-structure",level:3},{value:"Storage Plugins",id:"storage-plugins",level:3},{value:"Authentication Plugins",id:"authentication-plugins",level:3},{value:"Execution Plugins",id:"execution-plugins",level:3},{value:"Project Backend Plugin",id:"project-backend-plugin",level:4},{value:"Model Evaluation Plugin",id:"model-evaluation-plugin",level:3},{value:"Popular Community Plugins",id:"popular-community-plugins",level:3},{value:"<strong>SQL Server Plugin</strong>",id:"sql-server-plugin",level:4},{value:"<strong>Alibaba Cloud OSS Plugin</strong>",id:"alibaba-cloud-oss-plugin",level:4},{value:"<strong>XetHub Plugin</strong>",id:"xethub-plugin",level:4},{value:"<strong>Elasticsearch Plugin</strong>",id:"elasticsearch-plugin",level:4},{value:"<strong>Giskard Plugin</strong>",id:"giskard-plugin",level:4},{value:"<strong>Trubrics Plugin</strong>",id:"trubrics-plugin",level:4},{value:"<strong>JFrog Artifactory Plugin</strong>",id:"jfrog-artifactory-plugin",level:4},{value:"Testing Your Plugin",id:"testing-your-plugin",level:2},{value:"Distribution &amp; Publishing",id:"distribution--publishing",level:2},{value:"Package Structure",id:"package-structure",level:3},{value:"Publishing to PyPI",id:"publishing-to-pypi",level:3},{value:"Documentation Template",id:"documentation-template",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Features",id:"features",level:2},{value:"Examples",id:"examples",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"<strong>Plugin Development</strong>",id:"plugin-development",level:3},{value:"<strong>Performance Optimization</strong>",id:"performance-optimization",level:3},{value:"<strong>Security Considerations</strong>",id:"security-considerations",level:3},{value:"<strong>Testing Strategy</strong>",id:"testing-strategy",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mlflow-plugins",children:"MLflow Plugins"})}),"\n",(0,s.jsx)(n.p,{children:"MLflow's plugin architecture enables seamless integration with third-party tools and custom infrastructure. As a framework-agnostic platform, MLflow provides developer APIs for extending functionality across storage, authentication, execution backends, and model evaluation."}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"installing-and-using-a-plugin",children:"Installing and Using a Plugin"}),"\n",(0,s.jsx)(n.p,{children:"Try the built-in test plugin to see how plugins work:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Clone MLflow and install example plugin\ngit clone https://github.com/mlflow/mlflow\ncd mlflow\npip install -e tests/resources/mlflow-test-plugin\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Use the plugin with custom tracking URI scheme\nMLFLOW_TRACKING_URI=file-plugin:$(PWD)/mlruns python examples/quickstart/mlflow_tracking.py\n\n# Launch MLflow UI to view results\nmlflow server --backend-store-uri ./mlruns\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.a,{href:"http://localhost:5000",children:"http://localhost:5000"})," to see your tracked experiment:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Quickstart UI",src:t(24446).A+"",width:"2422",height:"1000"})}),"\n",(0,s.jsx)(n.admonition,{title:"Plugin Benefits",type:"tip",children:(0,s.jsx)(n.p,{children:"Plugins let you integrate MLflow with your existing infrastructure without modifying core MLflow code, ensuring smooth upgrades and maintenance."})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-types--use-cases",children:"Plugin Types & Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"MLflow supports eight types of plugins, each addressing different integration needs:"}),"\n",(0,s.jsx)(n.h3,{id:"storage--persistence",children:(0,s.jsx)(n.strong,{children:"Storage & Persistence"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Plugin Type"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Example Use Cases"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Tracking Store"})}),(0,s.jsx)(n.td,{children:"Custom experiment data storage"}),(0,s.jsx)(n.td,{children:"Enterprise databases, cloud data warehouses"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Artifact Repository"})}),(0,s.jsx)(n.td,{children:"Custom artifact storage"}),(0,s.jsx)(n.td,{children:"In-house blob storage, specialized file systems"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Model Registry Store"})}),(0,s.jsx)(n.td,{children:"Custom model registry backend"}),(0,s.jsx)(n.td,{children:"Enterprise model catalogs, version control systems"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"authentication--headers",children:(0,s.jsx)(n.strong,{children:"Authentication & Headers"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Plugin Type"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Example Use Cases"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Request Auth Provider"})}),(0,s.jsx)(n.td,{children:"Custom authentication"}),(0,s.jsx)(n.td,{children:"OAuth, API keys, certificate-based auth"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Request Header Provider"})}),(0,s.jsx)(n.td,{children:"Custom HTTP headers"}),(0,s.jsx)(n.td,{children:"Environment identification, compliance headers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Run Context Provider"})}),(0,s.jsx)(n.td,{children:"Automatic run metadata"}),(0,s.jsx)(n.td,{children:"Git info, environment details, custom tags"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"execution--evaluation",children:(0,s.jsx)(n.strong,{children:"Execution & Evaluation"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Plugin Type"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Example Use Cases"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Project Backend"})}),(0,s.jsx)(n.td,{children:"Custom execution environments"}),(0,s.jsx)(n.td,{children:"Internal clusters, job schedulers, cloud platforms"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Model Evaluator"})}),(0,s.jsx)(n.td,{children:"Custom evaluation metrics"}),(0,s.jsx)(n.td,{children:"Domain-specific validation, custom test suites"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Deployment"})}),(0,s.jsx)(n.td,{children:"Custom serving platforms"}),(0,s.jsx)(n.td,{children:"Internal serving infrastructure, edge deployment"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"developing-custom-plugins",children:"Developing Custom Plugins"}),"\n",(0,s.jsx)(n.h3,{id:"plugin-structure",children:"Plugin Structure"}),"\n",(0,s.jsx)(n.p,{children:"Create a plugin as a standalone Python package:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# setup.py\nfrom setuptools import setup\n\nsetup(\n    name="my-mlflow-plugin",\n    version="0.1.0",\n    install_requires=["mlflow>=2.0.0"],\n    entry_points={\n        # Define plugin entry points\n        "mlflow.tracking_store": "my-scheme=my_plugin.store:MyTrackingStore",\n        "mlflow.artifact_repository": "my-scheme=my_plugin.artifacts:MyArtifactRepo",\n        "mlflow.run_context_provider": "unused=my_plugin.context:MyContextProvider",\n        "mlflow.request_auth_provider": "unused=my_plugin.auth:MyAuthProvider",\n        "mlflow.model_evaluator": "my-evaluator=my_plugin.evaluator:MyEvaluator",\n        "mlflow.project_backend": "my-backend=my_plugin.backend:MyBackend",\n        "mlflow.deployments": "my-target=my_plugin.deployment",\n        "mlflow.app": "my-app=my_plugin.app:create_app",\n    },\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"storage-plugins",children:"Storage Plugins"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(a.A,{value:"tracking-store",label:"Tracking Store",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/store.py\nfrom mlflow.store.tracking.abstract_store import AbstractStore\n\n\nclass MyTrackingStore(AbstractStore):\n    """Custom tracking store for scheme \'my-scheme://\'"""\n\n    def __init__(self, store_uri):\n        super().__init__()\n        self.store_uri = store_uri\n        # Initialize your custom storage backend\n\n    def create_experiment(self, name, artifact_location=None, tags=None):\n        # Implement experiment creation logic\n        pass\n\n    def log_metric(self, run_id, metric):\n        # Implement metric logging logic\n        pass\n\n    def log_param(self, run_id, param):\n        # Implement parameter logging logic\n        pass\n\n    # Implement other required AbstractStore methods...\n'})})}),(0,s.jsx)(a.A,{value:"artifact-repo",label:"Artifact Repository",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/artifacts.py\nfrom mlflow.store.artifact.artifact_repo import ArtifactRepository\n\n\nclass MyArtifactRepo(ArtifactRepository):\n    """Custom artifact repository for scheme \'my-scheme://\'"""\n\n    def __init__(self, artifact_uri):\n        super().__init__(artifact_uri)\n        # Initialize your artifact storage backend\n\n    def log_artifact(self, local_file, artifact_path=None):\n        # Upload file to your storage system\n        pass\n\n    def log_artifacts(self, local_dir, artifact_path=None):\n        # Upload directory to your storage system\n        pass\n\n    def list_artifacts(self, path=None):\n        # List artifacts in your storage system\n        pass\n\n    def download_artifacts(self, artifact_path, dst_path=None):\n        # Download artifacts from your storage system\n        pass\n'})})}),(0,s.jsx)(a.A,{value:"model-registry",label:"Model Registry Store",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/registry.py\nfrom mlflow.store.model_registry.abstract_store import AbstractStore\n\n\nclass MyModelRegistryStore(AbstractStore):\n    """Custom model registry store for scheme \'my-scheme://\'"""\n\n    def __init__(self, store_uri):\n        super().__init__()\n        self.store_uri = store_uri\n        # Initialize your model registry backend\n\n    def create_registered_model(self, name, tags=None, description=None):\n        # Implement model registration logic\n        pass\n\n    def create_model_version(\n        self, name, source, run_id=None, tags=None, run_link=None, description=None\n    ):\n        # Implement model version creation logic\n        pass\n\n    def get_registered_model(self, name):\n        # Implement model retrieval logic\n        pass\n\n    # Implement other required AbstractStore methods...\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"authentication-plugins",children:"Authentication Plugins"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsxs)(a.A,{value:"request-auth",label:"Request Auth Provider",default:!0,children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/auth.py\nfrom mlflow.tracking.request_auth.abstract_request_auth_provider import (\n    RequestAuthProvider,\n)\n\n\nclass MyAuthProvider(RequestAuthProvider):\n    """Custom authentication provider"""\n\n    def get_name(self):\n        return "my_auth_provider"\n\n    def get_auth(self):\n        # Return authentication object for HTTP requests\n        # Can be anything that requests.auth accepts\n        return MyCustomAuth()\n\n\nclass MyCustomAuth:\n    """Custom authentication class"""\n\n    def __call__(self, request):\n        # Add authentication headers to request\n        token = self._get_token()\n        request.headers["Authorization"] = f"Bearer {token}"\n        return request\n\n    def _get_token(self):\n        # Implement token retrieval logic\n        # E.g., read from file, environment, or API call\n        pass\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"export MLFLOW_TRACKING_AUTH=my_auth_provider\npython your_mlflow_script.py\n"})})]}),(0,s.jsx)(a.A,{value:"run-context",label:"Run Context Provider",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/context.py\nfrom mlflow.tracking.context.abstract_context import RunContextProvider\n\n\nclass MyContextProvider(RunContextProvider):\n    """Automatically add custom tags to runs"""\n\n    def in_context(self):\n        # Return True if this context applies\n        return True\n\n    def tags(self):\n        # Return dictionary of tags to add to runs\n        return {\n            "environment": self._get_environment(),\n            "team": self._get_team(),\n            "cost_center": self._get_cost_center(),\n        }\n\n    def _get_environment(self):\n        # Detect environment (dev/staging/prod)\n        pass\n\n    def _get_team(self):\n        # Get team from environment or config\n        pass\n\n    def _get_cost_center(self):\n        # Get cost center for billing\n        pass\n'})})}),(0,s.jsx)(a.A,{value:"request-headers",label:"Request Header Provider",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/headers.py\nfrom mlflow.tracking.request_header.abstract_request_header_provider import (\n    RequestHeaderProvider,\n)\n\n\nclass MyHeaderProvider(RequestHeaderProvider):\n    """Add custom headers to MLflow requests"""\n\n    def in_context(self):\n        return True\n\n    def request_headers(self):\n        return {\n            "X-Client-Version": self._get_client_version(),\n            "X-Environment": self._get_environment(),\n            "X-User-Agent": "MyOrganization-MLflow-Client",\n        }\n\n    def _get_client_version(self):\n        # Return your client version\n        return "1.0.0"\n\n    def _get_environment(self):\n        # Detect environment context\n        return os.getenv("DEPLOYMENT_ENV", "development")\n'})})})]}),"\n",(0,s.jsx)(n.h3,{id:"execution-plugins",children:"Execution Plugins"}),"\n",(0,s.jsx)(n.h4,{id:"project-backend-plugin",children:"Project Backend Plugin"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/backend.py\nfrom mlflow.projects.backend import AbstractBackend\nfrom mlflow.projects.submitted_run import SubmittedRun\n\n\nclass MyBackend(AbstractBackend):\n    """Custom execution backend for MLflow Projects"""\n\n    def run(\n        self,\n        project_uri,\n        entry_point,\n        parameters,\n        version,\n        backend_config,\n        tracking_uri,\n        experiment_id,\n    ):\n        """Execute project on custom infrastructure"""\n\n        # Parse backend configuration\n        cluster_config = backend_config.get("cluster_config", {})\n\n        # Submit job to your execution system\n        job_id = self._submit_job(\n            project_uri=project_uri,\n            entry_point=entry_point,\n            parameters=parameters,\n            cluster_config=cluster_config,\n        )\n\n        # Return SubmittedRun for monitoring\n        return MySubmittedRun(job_id, tracking_uri)\n\n    def _submit_job(self, project_uri, entry_point, parameters, cluster_config):\n        # Implement job submission to your infrastructure\n        # Return job ID for monitoring\n        pass\n\n\nclass MySubmittedRun(SubmittedRun):\n    """Handle for submitted run"""\n\n    def __init__(self, job_id, tracking_uri):\n        self.job_id = job_id\n        self.tracking_uri = tracking_uri\n        super().__init__()\n\n    def wait(self):\n        # Wait for job completion and return success status\n        return self._poll_job_status()\n\n    def cancel(self):\n        # Cancel the running job\n        self._cancel_job()\n\n    def get_status(self):\n        # Get current job status\n        return self._get_job_status()\n'})}),"\n",(0,s.jsx)(n.h3,{id:"model-evaluation-plugin",children:"Model Evaluation Plugin"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# my_plugin/evaluator.py\nfrom mlflow.models.evaluation import ModelEvaluator\nfrom mlflow.models import EvaluationResult\n\n\nclass MyEvaluator(ModelEvaluator):\n    """Custom model evaluator"""\n\n    def can_evaluate(self, *, model_type, evaluator_config, **kwargs):\n        """Check if this evaluator can handle the model type"""\n        supported_types = ["classifier", "regressor"]\n        return model_type in supported_types\n\n    def evaluate(\n        self, *, model, model_type, dataset, run_id, evaluator_config, **kwargs\n    ):\n        """Perform custom evaluation"""\n\n        # Get predictions\n        predictions = model.predict(dataset.features_data)\n\n        # Compute custom metrics\n        metrics = self._compute_custom_metrics(\n            predictions, dataset.labels_data, evaluator_config\n        )\n\n        # Generate custom artifacts\n        artifacts = self._generate_artifacts(predictions, dataset, evaluator_config)\n\n        return EvaluationResult(metrics=metrics, artifacts=artifacts)\n\n    def _compute_custom_metrics(self, predictions, labels, config):\n        # Implement domain-specific metrics\n        return {\n            "custom_score": self._calculate_custom_score(predictions, labels),\n            "business_metric": self._calculate_business_metric(predictions, labels),\n        }\n\n    def _generate_artifacts(self, predictions, dataset, config):\n        # Generate custom plots, reports, etc.\n        return {}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"popular-community-plugins",children:"Popular Community Plugins"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsxs)(a.A,{value:"storage-solutions",label:"Storage Solutions",default:!0,children:[(0,s.jsx)(n.h4,{id:"sql-server-plugin",children:(0,s.jsx)(n.strong,{children:"SQL Server Plugin"})}),(0,s.jsx)(n.p,{children:"Store artifacts directly in SQL Server databases:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow[sqlserver]\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Use SQL Server as artifact store\ndb_uri = "mssql+pyodbc://user:pass@host:port/db?driver=ODBC+Driver+17+for+SQL+Server"\nmlflow.create_experiment("sql_experiment", artifact_location=db_uri)\n\nwith mlflow.start_run():\n    mlflow.onnx.log_model(model, name="model")  # Stored as BLOB in SQL Server\n'})}),(0,s.jsx)(n.h4,{id:"alibaba-cloud-oss-plugin",children:(0,s.jsx)(n.strong,{children:"Alibaba Cloud OSS Plugin"})}),(0,s.jsx)(n.p,{children:"Integrate with Aliyun Object Storage Service:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow[aliyun-oss]\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import os\nimport mlflow\n\n# Configure OSS credentials\nos.environ["MLFLOW_OSS_ENDPOINT_URL"] = "https://oss-region.aliyuncs.com"\nos.environ["MLFLOW_OSS_KEY_ID"] = "your_access_key"\nos.environ["MLFLOW_OSS_KEY_SECRET"] = "your_secret_key"\n\n# Use OSS as artifact store\nmlflow.create_experiment("oss_experiment", artifact_location="oss://bucket/path")\n'})}),(0,s.jsx)(n.h4,{id:"xethub-plugin",children:(0,s.jsx)(n.strong,{children:"XetHub Plugin"})}),(0,s.jsx)(n.p,{children:"Use XetHub for versioned artifact storage:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow[xethub]\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Authenticate with XetHub (via CLI or environment variables)\nmlflow.create_experiment(\n    "xet_experiment", artifact_location="xet://username/repo/branch"\n)\n'})}),(0,s.jsx)(n.h4,{id:"elasticsearch-plugin",children:(0,s.jsx)(n.strong,{children:"Elasticsearch Plugin"})}),(0,s.jsx)(n.p,{children:"Use Elasticsearch for experiment tracking:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow-elasticsearchstore\n"})})]}),(0,s.jsxs)(a.A,{value:"deployment",label:"Model Deployment",children:[(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Plugin"}),(0,s.jsx)(n.th,{children:"Target Platform"}),(0,s.jsx)(n.th,{children:"Installation"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"mlflow-redisai"})}),(0,s.jsx)(n.td,{children:"RedisAI"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pip install mlflow-redisai"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"mlflow-torchserve"})}),(0,s.jsx)(n.td,{children:"TorchServe"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pip install mlflow-torchserve"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"mlflow-ray-serve"})}),(0,s.jsx)(n.td,{children:"Ray Serve"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pip install mlflow-ray-serve"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"mlflow-azureml"})}),(0,s.jsx)(n.td,{children:"Azure ML"}),(0,s.jsx)(n.td,{children:"Built-in with Azure ML"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"oci-mlflow"})}),(0,s.jsx)(n.td,{children:"Oracle Cloud"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pip install oci-mlflow"})})]})]})]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example deployment usage:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow.deployments\n\n# Deploy to custom target\nclient = mlflow.deployments.get_deploy_client("redisai")\nclient.create_deployment(\n    name="my_model", model_uri="models:/MyModel/1", config={"device": "GPU"}\n)\n'})})]}),(0,s.jsxs)(a.A,{value:"evaluation",label:"Model Evaluation",children:[(0,s.jsx)(n.h4,{id:"giskard-plugin",children:(0,s.jsx)(n.strong,{children:"Giskard Plugin"})}),(0,s.jsx)(n.p,{children:"Comprehensive model validation and bias detection:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow-giskard\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Evaluate with Giskard\nresult = mlflow.evaluate(\n    model,\n    eval_data,\n    evaluators=["giskard"],\n    evaluator_config={\n        "giskard": {\n            "test_suite": "full_suite",\n            "bias_tests": True,\n            "performance_tests": True,\n        }\n    },\n)\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Detects vulnerabilities:"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Performance bias"}),"\n",(0,s.jsx)(n.li,{children:"Ethical bias"}),"\n",(0,s.jsx)(n.li,{children:"Data leakage"}),"\n",(0,s.jsx)(n.li,{children:"Overconfidence/Underconfidence"}),"\n",(0,s.jsx)(n.li,{children:"Spurious correlations"}),"\n"]}),(0,s.jsx)(n.h4,{id:"trubrics-plugin",children:(0,s.jsx)(n.strong,{children:"Trubrics Plugin"})}),(0,s.jsx)(n.p,{children:"Advanced model validation framework:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install trubrics-sdk\n"})})]}),(0,s.jsxs)(a.A,{value:"execution",label:"Execution Backends",children:[(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Plugin"}),(0,s.jsx)(n.th,{children:"Platform"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"mlflow-yarn"})}),(0,s.jsx)(n.td,{children:"Hadoop/YARN"}),(0,s.jsx)(n.td,{children:"Big data processing clusters"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"oci-mlflow"})}),(0,s.jsx)(n.td,{children:"Oracle Cloud"}),(0,s.jsx)(n.td,{children:"Oracle Cloud Infrastructure"})]})]})]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example usage:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run MLflow project on YARN\nmlflow run . --backend yarn --backend-config yarn-config.json\n"})})]}),(0,s.jsxs)(a.A,{value:"enterprise",label:"Enterprise Solutions",children:[(0,s.jsx)(n.h4,{id:"jfrog-artifactory-plugin",children:(0,s.jsx)(n.strong,{children:"JFrog Artifactory Plugin"})}),(0,s.jsx)(n.p,{children:"Enterprise artifact governance:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install mlflow[jfrog]\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Artifacts stored in JFrog Artifactory"}),"\n",(0,s.jsx)(n.li,{children:"Full lifecycle management"}),"\n",(0,s.jsx)(n.li,{children:"Enterprise security and compliance"}),"\n",(0,s.jsx)(n.li,{children:"Integration with JFrog platform tools"}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Setup:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export ARTIFACTORY_AUTH_TOKEN="your_token"\n\nmlflow server \\\n  --host 0.0.0.0 \\\n  --port 5000 \\\n  --artifacts-destination "artifactory://artifactory.company.com/artifactory/ml-models"\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom transformers import pipeline\n\nmlflow.set_tracking_uri("http://your-mlflow-server:5000")\nclassifier = pipeline("sentiment-analysis", model="bert-base-uncased")\n\nwith mlflow.start_run():\n    mlflow.transformers.log_model(\n        transformers_model=classifier, name="model"\n    )  # Automatically stored in JFrog Artifactory\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Configuration:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Optional: Use HTTP instead of HTTPS\nexport ARTIFACTORY_NO_SSL=true\n\n# Optional: Enable debug logging\nexport ARTIFACTORY_DEBUG=true\n\n# Optional: Skip artifact deletion during garbage collection\nexport ARTIFACTORY_ARTIFACTS_DELETE_SKIP=true\n"})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-plugin",children:"Testing Your Plugin"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(a.A,{value:"unit-testing",label:"Unit Testing",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# tests/test_my_plugin.py\nimport pytest\nimport mlflow\nfrom my_plugin.store import MyTrackingStore\n\n\nclass TestMyTrackingStore:\n    def setup_method(self):\n        self.store = MyTrackingStore("my-scheme://test")\n\n    def test_create_experiment(self):\n        experiment_id = self.store.create_experiment("test_exp")\n        assert experiment_id is not None\n\n    def test_log_metric(self):\n        experiment_id = self.store.create_experiment("test_exp")\n        run = self.store.create_run(experiment_id, "user", "test_run")\n\n        metric = mlflow.entities.Metric("accuracy", 0.95, 12345, 0)\n        self.store.log_metric(run.info.run_id, metric)\n\n        # Verify metric was logged correctly\n        stored_run = self.store.get_run(run.info.run_id)\n        assert "accuracy" in stored_run.data.metrics\n        assert stored_run.data.metrics["accuracy"] == 0.95\n\n    def test_log_artifact(self):\n        # Test artifact logging functionality\n        pass\n'})})}),(0,s.jsx)(a.A,{value:"integration-testing",label:"Integration Testing",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# tests/test_integration.py\nimport tempfile\nimport mlflow\nfrom my_plugin import setup_test_environment\n\n\ndef test_end_to_end_workflow():\n    with setup_test_environment():\n        # Set tracking URI to use your plugin\n        mlflow.set_tracking_uri("my-scheme://test")\n\n        # Test full MLflow workflow\n        with mlflow.start_run():\n            mlflow.log_param("alpha", 0.5)\n            mlflow.log_metric("rmse", 0.8)\n\n            # Create and log a simple model\n            with tempfile.NamedTemporaryFile() as f:\n                f.write(b"model data")\n                f.flush()\n                mlflow.log_artifact(f.name, "model")\n\n        # Verify everything was stored correctly\n        runs = mlflow.search_runs()\n        assert len(runs) == 1\n        assert runs.iloc[0]["params.alpha"] == "0.5"\n        assert runs.iloc[0]["metrics.rmse"] == 0.8\n'})})}),(0,s.jsx)(a.A,{value:"performance-testing",label:"Performance Testing",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# tests/test_performance.py\nimport time\nimport mlflow\nimport pytest\nimport threading\nfrom my_plugin.store import MyTrackingStore\n\n\nclass TestPerformance:\n    def test_bulk_logging_performance(self):\n        store = MyTrackingStore("my-scheme://perf-test")\n        experiment_id = store.create_experiment("perf_test")\n        run = store.create_run(experiment_id, "user", "perf_run")\n\n        # Test bulk metric logging\n        start_time = time.time()\n        for i in range(1000):\n            metric = mlflow.entities.Metric(f"metric_{i}", i * 0.1, 12345, i)\n            store.log_metric(run.info.run_id, metric)\n\n        elapsed = time.time() - start_time\n        assert elapsed < 10.0  # Should complete within 10 seconds\n\n        # Verify all metrics were logged\n        stored_run = store.get_run(run.info.run_id)\n        assert len(stored_run.data.metrics) == 1000\n\n    def test_concurrent_access(self):\n        store = MyTrackingStore("my-scheme://concurrent-test")\n        results = []\n\n        def create_experiment(name):\n            exp_id = store.create_experiment(f"concurrent_{name}")\n            results.append(exp_id)\n\n        threads = [\n            threading.Thread(target=create_experiment, args=[i]) for i in range(10)\n        ]\n\n        for t in threads:\n            t.start()\n        for t in threads:\n            t.join()\n\n        assert len(set(results)) == 10  # All unique experiment IDs\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"distribution--publishing",children:"Distribution & Publishing"}),"\n",(0,s.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"my-mlflow-plugin/\n\u251c\u2500\u2500 setup.py                    # Package configuration\n\u251c\u2500\u2500 README.md                   # Plugin documentation\n\u251c\u2500\u2500 my_plugin/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 store.py               # Tracking store implementation\n\u2502   \u251c\u2500\u2500 artifacts.py           # Artifact repository implementation\n\u2502   \u251c\u2500\u2500 auth.py                # Authentication provider\n\u2502   \u2514\u2500\u2500 evaluator.py           # Model evaluator\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 test_store.py\n\u2502   \u251c\u2500\u2500 test_artifacts.py\n\u2502   \u2514\u2500\u2500 test_integration.py\n\u2514\u2500\u2500 examples/\n    \u2514\u2500\u2500 example_usage.py\n"})}),"\n",(0,s.jsx)(n.h3,{id:"publishing-to-pypi",children:"Publishing to PyPI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Build distribution packages\npython setup.py sdist bdist_wheel\n\n# Upload to PyPI\npip install twine\ntwine upload dist/*\n"})}),"\n",(0,s.jsx)(n.h3,{id:"documentation-template",children:"Documentation Template"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markdown",children:"# My MLflow Plugin\n\n## Installation\n```bash\npip install my-mlflow-plugin\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'export MY_PLUGIN_CONFIG="value"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_tracking_uri("my-scheme://config")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Feature 1"}),"\n",(0,s.jsx)(n.li,{children:"Feature 2"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"See examples/ directory for complete usage examples."}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"plugin-development",children:(0,s.jsx)(n.strong,{children:"Plugin Development"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Follow MLflow interfaces"})," - Implement all required abstract methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle errors gracefully"})," - Provide clear error messages for configuration issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Support authentication"})," - Integrate with existing credential systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add comprehensive logging"})," - Help users debug configuration problems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version compatibility"})," - Test against multiple MLflow versions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-optimization",children:(0,s.jsx)(n.strong,{children:"Performance Optimization"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch operations"})," - Implement efficient bulk logging when possible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection pooling"})," - Reuse connections to external systems"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Async operations"})," - Use async I/O for storage operations when beneficial"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Caching"})," - Cache frequently accessed metadata"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"security-considerations",children:(0,s.jsx)(n.strong,{children:"Security Considerations"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Credential management"})," - Never log or expose sensitive credentials"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input validation"})," - Validate all user inputs and URIs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Access controls"})," - Respect existing authentication and authorization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Secure communication"})," - Use TLS/SSL for network communications"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-strategy",children:(0,s.jsx)(n.strong,{children:"Testing Strategy"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unit tests"})," - Test individual plugin components"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration tests"})," - Test full workflows with MLflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance tests"})," - Verify acceptable performance characteristics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compatibility tests"})," - Test with different MLflow versions"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ready to extend MLflow?"})," Start with the ",(0,s.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/tests/resources/mlflow-test-plugin",children:"example test plugin"})," to see all plugin types in action, then build your custom integration!"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);