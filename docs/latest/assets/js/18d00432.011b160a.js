"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3135],{11470:(e,n,t)=>{t.d(n,{A:()=>k});var o=t(96540),i=t(34164),a=t(23104),r=t(56347),l=t(205),s=t(57485),c=t(31682),p=t(70679);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return d(e).map((({props:{value:e,label:n,attributes:t,default:o}})=>({value:e,label:n,attributes:t,default:o})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const t=(0,r.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s.aZ)(i),(0,o.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=m(e),[r,s]=(0,o.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a}))),[c,d]=u({queryString:t,groupId:i}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,p.Dv)(n);return[t,(0,o.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:i}),_=(()=>{const e=c??f;return h({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{_&&s(_)}),[_]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),d(e),g(e)}),[d,g,a]),tabValues:a}}var g=t(92303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=t(74848);function v({className:e,block:n,selectedValue:t,selectValue:o,tabValues:r}){const l=[],{blockElementScrollPositionUntilNextRender:s}=(0,a.a_)(),c=e=>{const n=e.currentTarget,i=l.indexOf(n),a=r[i].value;a!==t&&(s(n),o(a))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:r.map((({value:e,label:n,attributes:o})=>(0,w.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:p,onClick:c,...o,className:(0,i.A)("tabs__item",_.tabItem,o?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function x(e){const n=f(e);return(0,w.jsxs)("div",{className:(0,i.A)("tabs-container",_.tabList),children:[(0,w.jsx)(v,{...n,...e}),(0,w.jsx)(y,{...n,...e})]})}function k(e){const n=(0,g.A)();return(0,w.jsx)(x,{...e,children:d(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var o=t(34164);const i={tabItem:"tabItem_Ymn6"};var a=t(74848);function r({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(96540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const o=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var i=t(86025),a=t(28774),r=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(o[e])return e}return null};function s({fn:e,children:n}){const t=l(e);if(!t)return(0,r.jsx)(r.Fragment,{children:n});const s=(0,i.Ay)(`/${o[t]}#${e}`);return(0,r.jsx)(a.A,{to:s,target:"_blank",children:n??(0,r.jsxs)("code",{children:[e,"()"]})})}},50349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"prompt-version-mgmt/version-tracking/track-application-versions-with-mlflow","title":"Track Application Versions with MLflow","description":"Learn how to version GenAI applications using MLflow LoggedModel as a metadata hub, linking external code with traces and evaluations via mlflow.set_active_model().","source":"@site/docs/genai/prompt-version-mgmt/version-tracking/track-application-versions-with-mlflow.mdx","sourceDirName":"prompt-version-mgmt/version-tracking","slug":"/prompt-version-mgmt/version-tracking/track-application-versions-with-mlflow","permalink":"/docs/latest/genai/prompt-version-mgmt/version-tracking/track-application-versions-with-mlflow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Track Application Versions with MLflow","description":"Learn how to version GenAI applications using MLflow LoggedModel as a metadata hub, linking external code with traces and evaluations via mlflow.set_active_model()."},"sidebar":"genAISidebar","previous":{"title":"Quickstart","permalink":"/docs/latest/genai/prompt-version-mgmt/version-tracking/quickstart"},"next":{"title":"Compare App Versions","permalink":"/docs/latest/genai/prompt-version-mgmt/version-tracking/compare-app-versions"}}');var i=t(74848),a=t(28453),r=t(49374),l=t(11470),s=t(19365);const c={title:"Track Application Versions with MLflow",description:"Learn how to version GenAI applications using MLflow LoggedModel as a metadata hub, linking external code with traces and evaluations via mlflow.set_active_model()."},p="Track Application Versions with Externally Managed Code",d={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Configure Databricks Authentication",id:"configure-databricks-authentication",level:3},{value:"Configure API Keys",id:"configure-api-keys",level:3},{value:"Configure MLflow Tracking",id:"configure-mlflow-tracking",level:3},{value:"Step 1: Create a <APILink>LoggedModel</APILink> (Metadata Hub)",id:"step-1-create-a-loggedmodel-metadata-hub",level:2},{value:"Step 2: Record Parameters for the Model Version",id:"step-2-record-parameters-for-the-model-version",level:2},{value:"Step 3: Link Traces to the Application Version",id:"step-3-link-traces-to-the-application-version",level:2},{value:"Step 4: Retrieve and Inspect the LoggedModel",id:"step-4-retrieve-and-inspect-the-loggedmodel",level:2},{value:"Step 5: Link Evaluation Results to the Application Version",id:"step-5-link-evaluation-results-to-the-application-version",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"track-application-versions-with-externally-managed-code",children:"Track Application Versions with Externally Managed Code"})}),"\n",(0,i.jsxs)(n.p,{children:["This guide demonstrates MLflow's primary approach for versioning GenAI applications when your core application code resides in an external version control system (VCS) like Git. In this workflow, an MLflow ",(0,i.jsx)(n.code,{children:"LoggedModel"})," acts as a ",(0,i.jsx)(n.strong,{children:"metadata hub"}),", linking a conceptual application version to its specific external code (e.g., a Git commit), configurations, and associated MLflow entities like traces and evaluation results."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"mlflow.set_active_model()"})," function is key to this process, establishing a context so that subsequent traces and evaluations are automatically associated with the correct application version."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"This guide requires the following packages:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"mlflow>=3.1"}),": Core MLflow functionality with GenAI features. MLflow 2.x is not supported as it lacks the version tracking features with ",(0,i.jsx)(n.code,{children:"LoggedModel"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"openai>=1.0.0"}),": Required for the OpenAI-based examples in this guide (if using other LLM providers, install their respective SDKs instead)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Install the required packages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install --upgrade "mlflow>=3.1" openai>=1.0.0\n'})}),"\n",(0,i.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,i.jsx)(n.p,{children:"Before running the examples below, configure your environment:"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(s.A,{value:"oss",label:"Open Source MLflow",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nimport mlflow\n\n# Optional: Set MLflow tracking URI if using a local or remote tracking server\nmlflow.set_tracking_uri("http://localhost:5000")\n\n# Set experiment (creates it if it doesn\u2019t exist)\nmlflow.set_experiment("my_genai_app_versions")\n\n# Set your LLM provider API key (e.g., OpenAI)\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\n'})})}),(0,i.jsxs)(s.A,{value:"databricks",label:"Databricks",children:[(0,i.jsx)(n.h3,{id:"configure-databricks-authentication",children:"Configure Databricks Authentication"}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you're running this code ",(0,i.jsx)(n.strong,{children:"inside a Databricks notebook"}),", you can skip this authentication setup. MLflow will automatically use your notebook's authentication context."]})}),(0,i.jsxs)(n.p,{children:["If you're running this code ",(0,i.jsx)(n.strong,{children:"outside of Databricks"})," (e.g., in your local IDE), you need to set up authentication:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\n# Set Databricks authentication (only needed when running outside Databricks)\nos.environ[\n    "DATABRICKS_HOST"\n] = "https://your-workspace.databricks.com"  # Your workspace URL\nos.environ["DATABRICKS_TOKEN"] = "your-databricks-token"  # Your access token\n'})}),(0,i.jsx)(n.h3,{id:"configure-api-keys",children:"Configure API Keys"}),(0,i.jsx)(n.p,{children:"Set your LLM provider API keys as environment variables:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\n# Set your OpenAI API key (required for this guide)\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\n'})}),(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"You can also set these environment variables in your shell before running your script:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# For Databricks authentication (if running outside Databricks)\nexport DATABRICKS_HOST="https://your-workspace.databricks.com"\nexport DATABRICKS_TOKEN="your-databricks-token"\n\n# For LLM providers\nexport OPENAI_API_KEY="your-api-key-here"\n'})})]}),(0,i.jsx)(n.h3,{id:"configure-mlflow-tracking",children:"Configure MLflow Tracking"}),(0,i.jsx)(n.p,{children:"Set up MLflow to connect to your tracking server and experiment:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Set MLflow tracking URI and experiment\nmlflow.set_tracking_uri("http://127.0.0.1:5000")\nmlflow.set_experiment("my_genai_app_versions")\n'})})]})]}),"\n",(0,i.jsxs)(n.h2,{id:"step-1-create-a-loggedmodel-metadata-hub",children:["Step 1: Create a ",(0,i.jsx)(r.B,{fn:"mlflow.entities.LoggedModel",children:"LoggedModel"})," (Metadata Hub)"]}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"LoggedModel"})," version serves as a central record (metadata hub) for a specific iteration of your application. It doesn't need to store the application code itself; instead, it points to where your code is managed (e.g., a Git commit hash)."]}),"\n",(0,i.jsxs)(n.p,{children:["We use ",(0,i.jsx)(n.code,{children:"mlflow.set_active_model()"})," to declare which ",(0,i.jsx)(n.code,{children:"LoggedModel"})," we are currently working with, or to create a new one if it doesn't already exist. This function returns an ",(0,i.jsx)(n.code,{children:"ActiveModel"})," object containing the ",(0,i.jsx)(n.code,{children:"model_id"})," which is useful for subsequent operations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import subprocess\n\n# Define your application and its version identifier\napp_name = "customer_support_agent"\n\n# Get current git commit hash for versioning\ntry:\n    git_commit = (\n        subprocess.check_output(["git", "rev-parse", "HEAD"])\n        .decode("ascii")\n        .strip()[:8]\n    )\n    version_identifier = f"git-{git_commit}"\nexcept subprocess.CalledProcessError:\n    version_identifier = "local-dev"  # Fallback if not in a git repo\n\nlogged_model_name = f"{app_name}-{version_identifier}"\n\n# Set the active model context\nactive_model_info = mlflow.set_active_model(name=logged_model_name)\nprint(\n    f"Active LoggedModel: \'{active_model_info.name}\', Model ID: \'{active_model_info.model_id}\'"\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"LoggedModel"})," (",(0,i.jsx)(n.code,{children:"customer_support_agent-git-xxxxxxx"})," or ",(0,i.jsx)(n.code,{children:"customer_support_agent-local-dev"}),") now acts as the reference for this specific version of your externally managed code."]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-record-parameters-for-the-model-version",children:"Step 2: Record Parameters for the Model Version"}),"\n",(0,i.jsxs)(n.p,{children:["You can log key configuration parameters that define this version of your application directly to the ",(0,i.jsx)(n.code,{children:"LoggedModel"})," using ",(0,i.jsx)(n.code,{children:"mlflow.log_model_params()"}),". This is useful for recording things like LLM names, temperature settings, or retrieval strategies that are tied to this code version."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Log key parameters defining this application version\napp_params = {\n    "llm": "gpt-4o-mini",\n    "temperature": 0.7,\n    "retrieval_strategy": "vector_search_v3",\n}\n\nmlflow.log_model_params(model_id=active_model_info.model_id, params=app_params)\nprint(f"Logged parameters to LoggedModel ID: {active_model_info.model_id}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-link-traces-to-the-application-version",children:"Step 3: Link Traces to the Application Version"}),"\n",(0,i.jsxs)(n.p,{children:["With an active ",(0,i.jsx)(n.code,{children:"LoggedModel"})," set, any traces generated by MLflow's autologging (or manual tracing) will be automatically associated with this specific ",(0,i.jsx)(n.code,{children:"LoggedModel"})," version."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport openai\n\n# Enable autologging for OpenAI\nmlflow.openai.autolog()\n\n\n# Define your agent function\ndef simple_agent_call(user_query):\n    client = openai.OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",  # Matches "llm" param\n        messages=[{"role": "user", "content": user_query}],\n        temperature=0.7,  # Matches "temperature" param\n        max_tokens=150,\n    )\n    return response.choices[0].message.content\n\n\n# Example agent invocation\nprint("\\nSimulating agent call...")\nagent_response = simple_agent_call("How can I track my package?")\nprint(f"Agent response: {agent_response}")\nprint(\n    f"Trace for this call is automatically linked to LoggedModel \'{active_model_info.name}\'."\n)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The trace generated by this ",(0,i.jsx)(n.code,{children:"openai"})," call is now linked to ",(0,i.jsx)(n.code,{children:"customer_support_agent-git-xxxxxxx"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"step-4-retrieve-and-inspect-the-loggedmodel",children:"Step 4: Retrieve and Inspect the LoggedModel"}),"\n",(0,i.jsxs)(n.p,{children:["You can fetch the LoggedModel back using ",(0,i.jsx)(n.code,{children:"mlflow.get_logged_model()"})," to inspect its properties, parameters, and associated metadata. This is useful for verifying what was logged or for retrieving configuration information."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Fetch the LoggedModel using its ID\nlogged_model = mlflow.get_logged_model(model_id=active_model_info.model_id)\n\n# Inspect basic properties\nprint(f"\\n=== LoggedModel Information ===")\nprint(f"Model ID: {logged_model.model_id}")\nprint(f"Name: {logged_model.name}")\nprint(f"Experiment ID: {logged_model.experiment_id}")\nprint(f"Status: {logged_model.status}")\nprint(f"Model Type: {logged_model.model_type}")\n\n# Access the parameters\nprint(f"\\n=== Model Parameters ===")\nfor param_name, param_value in logged_model.params.items():\n    print(f"{param_name}: {param_value}")\n\n# Check creation timestamp\nfrom datetime import datetime\n\ncreation_time = datetime.fromtimestamp(logged_model.creation_timestamp / 1000)\nprint(f"\\n=== Timestamps ===")\nprint(f"Created at: {creation_time}")\n\n# Access tags if any were set\nif logged_model.tags:\n    print(f"\\n=== Model Tags ===")\n    for tag_key, tag_value in logged_model.tags.items():\n        print(f"{tag_key}: {tag_value}")\n\n# You can also search for all LoggedModels in the experiment\nfrom mlflow import search_logged_models\n\nall_models = search_logged_models(\n    experiment_ids=[logged_model.experiment_id],\n    filter_string=f"name = \'{app_name}\'",\n    output_format="list",\n)\nprint(f"\\n=== All \'{app_name}\' versions in experiment ===")\nfor model in all_models:\n    print(\n        f"- {model.name} (ID: {model.model_id}, Created: {datetime.fromtimestamp(model.creation_timestamp / 1000)})"\n    )\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"LoggedModel"})," object provides access to all the metadata about your application version, making it easy to programmatically retrieve configuration details or build automated workflows around your versioned applications."]}),"\n",(0,i.jsx)(n.h2,{id:"step-5-link-evaluation-results-to-the-application-version",children:"Step 5: Link Evaluation Results to the Application Version"}),"\n",(0,i.jsxs)(n.p,{children:["You can evaluate your application and link the results to this ",(0,i.jsx)(n.code,{children:"LoggedModel"})," version using ",(0,i.jsx)(n.code,{children:"mlflow.genai.evaluate()"})," to assess your application's performance and automatically associate the metrics, evaluation tables, and traces with your specific ",(0,i.jsx)(n.code,{children:"LoggedModel"})," version."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/genai/prompt-version-mgmt/version-tracking/compare-app-versions",children:"Compare Application Versions"})}),": Learn how to compare different ",(0,i.jsx)(n.code,{children:"LoggedModel"})," versions."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);