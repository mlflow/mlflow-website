"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8104],{11470:(e,n,t)=>{t.d(n,{A:()=>j});var r=t(96540),i=t(34164),a=t(23104),l=t(56347),s=t(205),o=t(57485),c=t(31682),d=t(70679);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function g({queryString:e=!1,groupId:n}){const t=(0,l.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(i),(0,r.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,a=m(e),[l,o]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:a})),[c,h]=g({queryString:t,groupId:i}),[f,u]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,d.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),_=(()=>{const e=c??f;return p({value:e,tabValues:a})?e:null})();(0,s.A)(()=>{_&&o(_)},[_]);return{selectedValue:l,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),u(e)},[h,u,a]),tabValues:a}}var u=t(92303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function w({className:e,block:n,selectedValue:t,selectValue:r,tabValues:l}){const s=[],{blockElementScrollPositionUntilNextRender:o}=(0,a.a_)(),c=e=>{const n=e.currentTarget,i=s.indexOf(n),a=l[i].value;a!==t&&(o(n),r(a))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:l.map(({value:e,label:n,attributes:r})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:d,onClick:c,...r,className:(0,i.A)("tabs__item",_.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",_.tabList),children:[(0,x.jsx)(w,{...n,...e}),(0,x.jsx)(v,{...n,...e})]})}function j(e){const n=(0,u.A)();return(0,x.jsx)(y,{...e,children:h(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var r=t(34164);const i={tabItem:"tabItem_Ymn6"};var a=t(74848);function l({children:e,hidden:n,className:t}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}},29225:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/trace-set-tag-c0cbad6b75c04328db03a8f1eb4c3a09.gif"},42814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>h,default:()=>f,frontMatter:()=>d,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"tracing/attach-tags/index","title":"Setting Trace Tags","description":"Tags are mutable key-value pairs that you can attach to traces to add valuable metadata and context. This metadata is useful for organizing, searching, and filtering your traces. For example, you might tag your traces based on the topic of the user\'s input, the environment they\'re running in, or the model version being used.","source":"@site/docs/genai/tracing/attach-tags/index.mdx","sourceDirName":"tracing/attach-tags","slug":"/tracing/attach-tags/","permalink":"/mlflow-website/docs/latest/genai/tracing/attach-tags/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"User Feedback Collection","permalink":"/mlflow-website/docs/latest/genai/tracing/collect-user-feedback/"},"next":{"title":"Delete Traces","permalink":"/mlflow-website/docs/latest/genai/tracing/observe-with-traces/delete-traces"}}');var i=t(74848),a=t(28453),l=t(49374),s=t(72839),o=t(11470),c=t(19365);const d={},h="Setting Trace Tags",m={},p=[{value:"When to Use Trace Tags",id:"when-to-use-trace-tags",level:2},{value:"Setting Tags on Active Traces",id:"setting-tags-on-active-traces",level:2},{value:"Example: Setting Service Tags in Production System",id:"example-setting-service-tags-in-production-system",level:3},{value:"Setting Tags on Finished Traces",id:"setting-tags-on-finished-traces",level:2},{value:"Available APIs",id:"available-apis",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Batch Tagging",id:"batch-tagging",level:3},{value:"Performance Analysis Tagging",id:"performance-analysis-tagging",level:3},{value:"Using the MLflow UI",id:"using-the-mlflow-ui",level:3},{value:"Searching and Filtering with Tags",id:"searching-and-filtering-with-tags",level:2},{value:"Basic Tag Filtering",id:"basic-tag-filtering",level:3},{value:"Complex Tag-Based Queries",id:"complex-tag-based-queries",level:3},{value:"Operational Monitoring Queries",id:"operational-monitoring-queries",level:3},{value:"Analytics and Reporting",id:"analytics-and-reporting",level:3},{value:"Best Practices for Trace Tags",id:"best-practices-for-trace-tags",level:2},{value:"1. Consistent Naming Conventions",id:"1-consistent-naming-conventions",level:3},{value:"2. Hierarchical Organization",id:"2-hierarchical-organization",level:3},{value:"3. Temporal Information",id:"3-temporal-information",level:3},{value:"4. Operational Monitoring",id:"4-operational-monitoring",level:3},{value:"5. Experiment Tracking",id:"5-experiment-tracking",level:3},{value:"Common Tag Categories",id:"common-tag-categories",level:2},{value:"Tag Naming Guidelines",id:"tag-naming-guidelines",level:2},{value:"Summary",id:"summary",level:2}];function g(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"setting-trace-tags",children:"Setting Trace Tags"})}),"\n",(0,i.jsx)(n.p,{children:"Tags are mutable key-value pairs that you can attach to traces to add valuable metadata and context. This metadata is useful for organizing, searching, and filtering your traces. For example, you might tag your traces based on the topic of the user's input, the environment they're running in, or the model version being used."}),"\n",(0,i.jsx)(n.p,{children:"MLflow provides the flexibility to add, update, or remove tags at any point\u2014even after a trace is logged\u2014through its APIs or the MLflow UI."}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-trace-tags",children:"When to Use Trace Tags"}),"\n",(0,i.jsx)(n.p,{children:"Trace tags are particularly useful for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session Management"}),": Group traces by conversation sessions or user interactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Environment Tracking"}),": Distinguish between production, staging, and development traces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model Versioning"}),": Track which model version generated specific traces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Context"}),": Associate traces with specific users or customer segments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Monitoring"}),": Tag traces based on performance characteristics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"A/B Testing"}),": Differentiate between different experimental variants"]}),"\n"]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsxs)(c.A,{value:"active-traces",label:"Active Traces",default:!0,children:[(0,i.jsx)(n.h2,{id:"setting-tags-on-active-traces",children:"Setting Tags on Active Traces"}),(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(l.B,{fn:"mlflow.update_current_trace"})," to add tags during trace execution."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\n@mlflow.trace\ndef my_func(x):\n    mlflow.update_current_trace(tags={"fruit": "apple"})\n    return x + 1\n\n\nresult = my_func(5)\n'})}),(0,i.jsx)(n.h3,{id:"example-setting-service-tags-in-production-system",children:"Example: Setting Service Tags in Production System"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\n\n@mlflow.trace\ndef process_user_request(user_id: str, session_id: str, request_text: str):\n    # Add comprehensive tags for production monitoring\n    mlflow.update_current_trace(\n        tags={\n            "user_id": user_id,\n            "session_id": session_id,\n            "environment": os.getenv("ENVIRONMENT", "development"),\n            "model_version": os.getenv("MODEL_VERSION", "1.0.0"),\n            "request_type": "chat_completion",\n            "priority": "high" if "urgent" in request_text.lower() else "normal",\n        }\n    )\n\n    response = f"Processed: {request_text}"\n    return response\n'})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(l.B,{fn:"mlflow.update_current_trace"})," function adds the specified tag(s) to the current trace when the key is not already present. If the key is already present, it updates the key with the new value."]})})]}),(0,i.jsxs)(c.A,{value:"finished-traces",label:"Finished Traces",children:[(0,i.jsx)(n.h2,{id:"setting-tags-on-finished-traces",children:"Setting Tags on Finished Traces"}),(0,i.jsx)(n.p,{children:"Add or modify tags on traces that have already been completed and logged."}),(0,i.jsx)(n.h3,{id:"available-apis",children:"Available APIs"}),(0,i.jsxs)(s.X,{children:[(0,i.jsx)("thead",{children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"API"}),(0,i.jsx)("th",{children:"Use Case"})]})}),(0,i.jsxs)("tbody",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(l.B,{fn:"mlflow.set_trace_tag"})}),(0,i.jsx)("td",{children:"Fluent API for setting tags"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)(l.B,{fn:"mlflow.client.MlflowClient.set_trace_tag"})}),(0,i.jsx)("td",{children:"Client API for setting tags"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:"MLflow UI"}),(0,i.jsx)("td",{children:"Visual tag management"})]})]})]}),(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow import MlflowClient\n\n# Using fluent API\nmlflow.set_trace_tag(trace_id="your-trace-id", key="tag_key", value="tag_value")\nmlflow.delete_trace_tag(trace_id="your-trace-id", key="tag_key")\n\n# Using client API\nclient = MlflowClient()\nclient.set_trace_tag(trace_id="your-trace-id", key="tag_key", value="tag_value")\nclient.delete_trace_tag(trace_id="your-trace-id", key="tag_key")\n'})}),(0,i.jsx)(n.h3,{id:"batch-tagging",children:"Batch Tagging"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Find traces that need to be tagged\ntraces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="status = \'ERROR\'", max_results=100\n)\n\n# Add tags to all error traces\nfor trace in traces:\n    client.set_trace_tag(trace_id=trace.info.trace_id, key="needs_review", value="true")\n    client.set_trace_tag(\n        trace_id=trace.info.trace_id, key="review_priority", value="high"\n    )\n'})}),(0,i.jsx)(n.h3,{id:"performance-analysis-tagging",children:"Performance Analysis Tagging"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow import MlflowClient\nfrom datetime import datetime\n\nclient = MlflowClient()\n\n# Get slow traces for analysis\ntraces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="execution_time_ms > 5000", max_results=50\n)\n\n# Tag based on performance analysis\nfor trace in traces:\n    execution_time = trace.info.execution_time_ms\n\n    if execution_time > 10000:\n        performance_tag = "very_slow"\n    elif execution_time > 7500:\n        performance_tag = "slow"\n    else:\n        performance_tag = "moderate"\n\n    client.set_trace_tag(\n        trace_id=trace.info.trace_id, key="performance_category", value=performance_tag\n    )\n'})}),(0,i.jsx)(n.h3,{id:"using-the-mlflow-ui",children:"Using the MLflow UI"}),(0,i.jsx)(n.p,{children:"Navigate to the trace details page and click the pencil icon next to tags to edit them visually."}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Traces tag update",src:t(29225).A+"",width:"1188",height:"720"})}),(0,i.jsx)(n.p,{children:"UI capabilities:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add new tags"}),' by clicking the "+" button']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edit existing tags"})," by clicking the pencil icon"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delete tags"})," by clicking the trash icon"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"View all tags"})," associated with a trace"]}),"\n"]})]}),(0,i.jsxs)(c.A,{value:"search-filter",label:"Search & Filter",children:[(0,i.jsx)(n.h2,{id:"searching-and-filtering-with-tags",children:"Searching and Filtering with Tags"}),(0,i.jsx)(n.p,{children:"Use tags to find specific traces quickly and efficiently."}),(0,i.jsx)(n.h3,{id:"basic-tag-filtering",children:"Basic Tag Filtering"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Find traces by environment\nproduction_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.environment = \'production\'"\n)\n\n# Find traces by user\nuser_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.user_id = \'user_123\'"\n)\n\n# Find high-priority traces\nurgent_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.priority = \'high\'"\n)\n'})}),(0,i.jsx)(n.h3,{id:"complex-tag-based-queries",children:"Complex Tag-Based Queries"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Combine tag filters with other conditions\nslow_production_errors = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="""\n        tags.environment = \'production\'\n        AND status = \'ERROR\'\n        AND execution_time_ms > 5000\n    """,\n)\n\n# Find traces that need review\nreview_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="tags.needs_review = \'true\'",\n    order_by=["timestamp_ms DESC"],\n)\n\n# Find specific user sessions\nsession_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="tags.session_id = \'session_456\'",\n    order_by=["timestamp_ms ASC"],\n)\n'})}),(0,i.jsx)(n.h3,{id:"operational-monitoring-queries",children:"Operational Monitoring Queries"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Monitor A/B test performance\ncontrol_group = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.experiment_variant = \'control\'"\n)\n\ntreatment_group = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.experiment_variant = \'treatment\'"\n)\n\n# Find traces needing escalation\nescalation_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="""\n        tags.sla_tier = \'critical\'\n        AND execution_time_ms > 30000\n    """,\n)\n'})}),(0,i.jsx)(n.h3,{id:"analytics-and-reporting",children:"Analytics and Reporting"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Generate performance reports by model version\nmodel_v1_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.model_version = \'v1.0.0\'"\n)\n\nmodel_v2_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="tags.model_version = \'v2.0.0\'"\n)\n\n# Compare performance\nv1_avg_time = sum(t.info.execution_time_ms for t in model_v1_traces) / len(\n    model_v1_traces\n)\nv2_avg_time = sum(t.info.execution_time_ms for t in model_v2_traces) / len(\n    model_v2_traces\n)\n\nprint(f"V1 average time: {v1_avg_time:.2f}ms")\nprint(f"V2 average time: {v2_avg_time:.2f}ms")\n'})})]}),(0,i.jsxs)(c.A,{value:"best-practices",label:"Best Practices",children:[(0,i.jsx)(n.h2,{id:"best-practices-for-trace-tags",children:"Best Practices for Trace Tags"}),(0,i.jsx)(n.h3,{id:"1-consistent-naming-conventions",children:"1. Consistent Naming Conventions"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Good: Consistent naming\ntags = {\n    "environment": "production",  # lowercase\n    "model_version": "v2.1.0",  # semantic versioning\n    "user_segment": "premium",  # descriptive names\n    "processing_stage": "preprocessing",  # clear context\n}\n\n# Avoid: Inconsistent naming\ntags = {\n    "env": "PROD",  # abbreviation + uppercase\n    "ModelVer": "2.1",  # mixed case + different format\n    "user_type": "premium",  # different terminology\n    "stage": "pre",  # unclear abbreviation\n}\n'})}),(0,i.jsx)(n.h3,{id:"2-hierarchical-organization",children:"2. Hierarchical Organization"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Use dots for hierarchical organization\ntags = {\n    "service.name": "chat_api",\n    "service.version": "1.2.0",\n    "service.region": "us-east-1",\n    "user.segment": "enterprise",\n    "user.plan": "premium",\n    "request.type": "completion",\n    "request.priority": "high",\n}\n'})}),(0,i.jsx)(n.h3,{id:"3-temporal-information",children:"3. Temporal Information"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import datetime\n\ntags = {\n    "deployment_date": "2024-01-15",\n    "quarter": "Q1_2024",\n    "week": "2024-W03",\n    "shift": "evening",  # for operational monitoring\n}\n'})}),(0,i.jsx)(n.h3,{id:"4-operational-monitoring",children:"4. Operational Monitoring"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Tags for monitoring and alerting\ntags = {\n    "sla_tier": "critical",  # for SLA monitoring\n    "cost_center": "ml_platform",  # for cost attribution\n    "alert_group": "ml_ops",  # for alert routing\n    "escalation": "tier_1",  # for incident management\n}\n'})}),(0,i.jsx)(n.h3,{id:"5-experiment-tracking",children:"5. Experiment Tracking"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Tags for A/B testing and experiments\ntags = {\n    "experiment_name": "prompt_optimization_v2",\n    "variant": "control",\n    "hypothesis": "improved_context_helps",\n    "feature_flag": "new_prompt_engine",\n}\n'})}),(0,i.jsx)(n.h2,{id:"common-tag-categories",children:"Common Tag Categories"}),(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Category"}),(0,i.jsx)(n.th,{children:"Example Tags"}),(0,i.jsx)(n.th,{children:"Use Case"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Environment"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"environment: production/staging/dev"})}),(0,i.jsx)(n.td,{children:"Deployment tracking"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"User Context"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"user_id"}),", ",(0,i.jsx)(n.code,{children:"session_id"}),", ",(0,i.jsx)(n.code,{children:"user_segment"})]}),(0,i.jsx)(n.td,{children:"User behavior analysis"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Model Info"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"model_version"}),", ",(0,i.jsx)(n.code,{children:"model_type"}),", ",(0,i.jsx)(n.code,{children:"checkpoint"})]}),(0,i.jsx)(n.td,{children:"Model performance tracking"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Request Type"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"request_type"}),", ",(0,i.jsx)(n.code,{children:"complexity"}),", ",(0,i.jsx)(n.code,{children:"priority"})]}),(0,i.jsx)(n.td,{children:"Request categorization"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"latency_tier"}),", ",(0,i.jsx)(n.code,{children:"cost_category"}),", ",(0,i.jsx)(n.code,{children:"sla_tier"})]}),(0,i.jsx)(n.td,{children:"Performance monitoring"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Business Logic"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"feature_flag"}),", ",(0,i.jsx)(n.code,{children:"experiment_variant"}),", ",(0,i.jsx)(n.code,{children:"routing"})]}),(0,i.jsx)(n.td,{children:"A/B testing and routing"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Operational"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"region"}),", ",(0,i.jsx)(n.code,{children:"deployment_id"}),", ",(0,i.jsx)(n.code,{children:"instance_type"})]}),(0,i.jsx)(n.td,{children:"Infrastructure tracking"})]})]})]}),(0,i.jsx)(n.h2,{id:"tag-naming-guidelines",children:"Tag Naming Guidelines"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use lowercase"})," with underscores for consistency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Be descriptive"})," but concise"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use semantic versioning"})," for versions (v1.2.3)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Include units"})," when relevant (time_seconds, size_mb)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use hierarchical naming"})," for related concepts (service.name, service.version)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid abbreviations"})," unless they're well-known in your domain"]}),"\n"]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:"Trace tags provide a powerful way to add context and metadata to your MLflow traces, enabling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Better Organization"}),": Group related traces together"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Powerful Filtering"}),": Find specific traces quickly using search"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operational Monitoring"}),": Track performance and issues by category"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User Analytics"}),": Understand user behavior patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging"}),": Add context that helps with troubleshooting"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Whether you're adding tags during trace execution or after the fact, tags make your tracing data more valuable and actionable for production monitoring and analysis."})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},49374:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const r=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var i=t(86025),a=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function s({fn:e,children:n,hash:t}){const s=l(e);if(!s)return(0,a.jsx)(a.Fragment,{children:n});const o=(0,i.Ay)(`/${r[s]}#${t??e}`);return(0,a.jsx)("a",{href:o,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}},72839:(e,n,t)=>{t.d(n,{X:()=>i});var r=t(74848);function i({children:e}){return(0,r.jsx)("div",{className:"w-full overflow-x-auto",children:(0,r.jsx)("table",{children:e})})}}}]);