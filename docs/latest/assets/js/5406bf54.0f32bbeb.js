"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4461],{16581:(t,e,n)=>{n.d(e,{p:()=>i});var o=n(74848);const i=({children:t,isStderr:e})=>(0,o.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:t})},17965:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>m,default:()=>f,frontMatter:()=>c,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction-ipynb","title":"Creating a Custom Model: \\"Add N\\" Model","description":"Download this notebook","source":"@site/docs/classic-ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction-ipynb.mdx","sourceDirName":"traditional-ml/tutorials/creating-custom-pyfunc/notebooks","slug":"/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction","permalink":"/docs/latest/ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction.ipynb","slug":"introduction"},"sidebar":"classicMLSidebar","previous":{"title":"Introduction to PythonModel","permalink":"/docs/latest/ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/basic-pyfunc"},"next":{"title":"Customizing the `predict` method","permalink":"/docs/latest/ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/override-predict"}}');var i=n(74848),d=n(28453),a=n(75983),l=n(16581),s=n(81226),r=n(27594);const c={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction.ipynb",slug:"introduction"},m='Creating a Custom Model: "Add N" Model',u={},h=[{value:"Step 1: Define the Model Class",id:"step-1-define-the-model-class",level:4},{value:"Step 2: Save the Model",id:"step-2-save-the-model",level:4},{value:"Step 3: Load the Model",id:"step-3-load-the-model",level:4},{value:"Step 4: Evaluate the Model",id:"step-4-evaluate-the-model",level:4},{value:"Conclusion",id:"conclusion",level:4}];function p(t){const e={h1:"h1",h4:"h4",header:"header",p:"p",...(0,d.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"creating-a-custom-model-add-n-model",children:'Creating a Custom Model: "Add N" Model'})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(r.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/classic-ml/traditional-ml/tutorials/creating-custom-pyfunc/notebooks/introduction.ipynb",children:"Download this notebook"}),"\nOur first example is simple yet illustrative. We'll create a model that adds a specified numeric value, n, to all columns of a Pandas DataFrame input. This will demonstrate the process of defining a custom model, saving it, loading it back, and performing predictions."]}),"\n",(0,i.jsx)(e.h4,{id:"step-1-define-the-model-class",children:"Step 1: Define the Model Class"}),"\n",(0,i.jsx)(e.p,{children:"We begin by defining a Python class for our model. This class should inherit from mlflow.pyfunc.PythonModel and implement the necessary methods."}),"\n",(0,i.jsx)(a.d,{executionCount:1,children:'import mlflow.pyfunc\n\n\nclass AddN(mlflow.pyfunc.PythonModel):\n  """\n  A custom model that adds a specified value `n` to all columns of the input DataFrame.\n\n  Attributes:\n  -----------\n  n : int\n      The value to add to input columns.\n  """\n\n  def __init__(self, n):\n      """\n      Constructor method. Initializes the model with the specified value `n`.\n\n      Parameters:\n      -----------\n      n : int\n          The value to add to input columns.\n      """\n      self.n = n\n\n  def predict(self, context, model_input, params=None):\n      """\n      Prediction method for the custom model.\n\n      Parameters:\n      -----------\n      context : Any\n          Ignored in this example. It\'s a placeholder for additional data or utility methods.\n\n      model_input : pd.DataFrame\n          The input DataFrame to which `n` should be added.\n\n      params : dict, optional\n          Additional prediction parameters. Ignored in this example.\n\n      Returns:\n      --------\n      pd.DataFrame\n          The input DataFrame with `n` added to all columns.\n      """\n      return model_input.apply(lambda column: column + self.n)'}),"\n",(0,i.jsx)(e.h4,{id:"step-2-save-the-model",children:"Step 2: Save the Model"}),"\n",(0,i.jsx)(e.p,{children:"Now that our model class is defined, we can instantiate it and save it using MLflow."}),"\n",(0,i.jsx)(a.d,{executionCount:2,children:'# Define the path to save the model\nmodel_path = "/tmp/add_n_model"\n\n# Create an instance of the model with `n=5`\nadd5_model = AddN(n=5)\n\n# Save the model using MLflow\nmlflow.pyfunc.save_model(path=model_path, python_model=add5_model)'}),"\n",(0,i.jsx)(l.p,{isStderr:!0,children:'/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\nwarnings.warn("Setuptools is replacing distutils.")'}),"\n",(0,i.jsx)(e.h4,{id:"step-3-load-the-model",children:"Step 3: Load the Model"}),"\n",(0,i.jsx)(e.p,{children:"With our model saved, we can load it back using MLflow and then use it for predictions."}),"\n",(0,i.jsx)(a.d,{executionCount:3,children:"# Load the saved model\nloaded_model = mlflow.pyfunc.load_model(model_path)"}),"\n",(0,i.jsx)(e.h4,{id:"step-4-evaluate-the-model",children:"Step 4: Evaluate the Model"}),"\n",(0,i.jsx)(e.p,{children:"Let's now use our loaded model to perform predictions on a sample input and verify its correctness."}),"\n",(0,i.jsx)(a.d,{executionCount:4,children:"import pandas as pd\n\n# Define a sample input DataFrame\nmodel_input = pd.DataFrame([range(10)])\n\n# Use the loaded model to make predictions\nmodel_output = loaded_model.predict(model_input)"}),"\n",(0,i.jsx)(a.d,{executionCount:5,children:"model_output"}),"\n",(0,i.jsx)(s.Q,{children:(0,i.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>0</th>\n    <th>1</th>\n    <th>2</th>\n    <th>3</th>\n    <th>4</th>\n    <th>5</th>\n    <th>6</th>\n    <th>7</th>\n    <th>8</th>\n    <th>9</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>5</td>\n    <td>6</td>\n    <td>7</td>\n    <td>8</td>\n    <td>9</td>\n    <td>10</td>\n    <td>11</td>\n    <td>12</td>\n    <td>13</td>\n    <td>14</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,i.jsx)(e.h4,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(e.p,{children:"This simple example demonstrates the power and flexibility of MLflow's custom pyfunc. By encapsulating arbitrary Python code and its dependencies, custom pyfunc models ensure a consistent and unified interface for a wide range of use cases. Whether you're working with a niche machine learning framework, need custom preprocessing steps, or want to integrate unique prediction logic, pyfunc is the tool for the job."})]})}function f(t={}){const{wrapper:e}={...(0,d.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(p,{...t})}):p(t)}},27594:(t,e,n)=>{n.d(e,{O:()=>d});var o=n(96540),i=n(74848);function d({children:t,href:e}){const n=(0,o.useCallback)((async t=>{if(t.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:e})}catch{}const n=await fetch(e),o=await n.blob(),i=window.URL.createObjectURL(o),d=document.createElement("a");d.style.display="none",d.href=i;const a=e.split("/").pop();d.download=a,document.body.appendChild(d),d.click(),window.URL.revokeObjectURL(i),document.body.removeChild(d)}),[e]);return(0,i.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:e,download:!0,onClick:n,children:t})}},75983:(t,e,n)=>{n.d(e,{d:()=>a});var o=n(21028);const i="codeBlock_oJcR";var d=n(74848);const a=({children:t,executionCount:e})=>(0,d.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,d.jsx)(o.A,{className:i,language:"python",children:t})})},81226:(t,e,n)=>{n.d(e,{Q:()=>i});var o=n(74848);const i=({children:t})=>(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:t})}}]);