"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5928],{11470:(e,n,l)=>{l.d(n,{A:()=>v});var r=l(96540),t=l(34164),i=l(23104),o=l(56347),a=l(205),s=l(57485),c=l(31682),d=l(70679);function m(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:l}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:l,default:r}})=>({value:e,label:n,attributes:l,default:r})))}(l);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,l])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function f({queryString:e=!1,groupId:n}){const l=(0,o.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s.aZ)(t),(0,r.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(l.location.search);n.set(t,e),l.replace({...l.location,search:n.toString()})}),[t,l])]}function g(e){const{defaultValue:n,queryString:l=!1,groupId:t}=e,i=h(e),[o,s]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:i}))),[c,m]=f({queryString:l,groupId:t}),[g,u]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[l,t]=(0,d.Dv)(n);return[l,(0,r.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),x=(()=>{const e=c??g;return p({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{x&&s(x)}),[x]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),u(e)}),[m,u,i]),tabValues:i}}var u=l(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=l(74848);function j({className:e,block:n,selectedValue:l,selectValue:r,tabValues:o}){const a=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=a.indexOf(n),i=o[t].value;i!==l&&(s(n),r(i))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const l=a.indexOf(e.currentTarget)+1;n=a[l]??a[0];break}case"ArrowLeft":{const l=a.indexOf(e.currentTarget)-1;n=a[l]??a[a.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:r})=>(0,_.jsx)("li",{role:"tab",tabIndex:l===e?0:-1,"aria-selected":l===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...r,className:(0,t.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":l===e}),children:n??e},e)))})}function w({lazy:e,children:n,selectedValue:l}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===l));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function y(e){const n=g(e);return(0,_.jsxs)("div",{className:(0,t.A)("tabs-container",x.tabList),children:[(0,_.jsx)(j,{...n,...e}),(0,_.jsx)(w,{...n,...e})]})}function v(e){const n=(0,u.A)();return(0,_.jsx)(y,{...e,children:m(e.children)},String(n))}},19365:(e,n,l)=>{l.d(n,{A:()=>o});l(96540);var r=l(34164);const t={tabItem:"tabItem_Ymn6"};var i=l(74848);function o({children:e,hidden:n,className:l}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,l),hidden:n,children:e})}},28453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>a});var r=l(96540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},49374:(e,n,l)=>{l.d(n,{B:()=>s});l(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var t=l(86025),i=l(28774),o=l(74848);const a=e=>{const n=e.split(".");for(let l=n.length;l>0;l--){const e=n.slice(0,l).join(".");if(r[e])return e}return null};function s({fn:e,children:n}){const l=a(e);if(!l)return(0,o.jsx)(o.Fragment,{children:n});const s=(0,t.Ay)(`/${r[l]}#${e}`);return(0,o.jsx)(i.A,{to:s,target:"_blank",children:n??(0,o.jsxs)("code",{children:[e,"()"]})})}},72839:(e,n,l)=>{l.d(n,{X:()=>t});var r=l(74848);function t({children:e}){return(0,r.jsx)("div",{className:"w-full overflow-x-auto",children:(0,r.jsx)("table",{children:e})})}},80869:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>h,contentTitle:()=>m,default:()=>g,frontMatter:()=>d,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"tracking/tracking-api/index","title":"MLflow Tracking APIs","description":"MLflow Tracking provides comprehensive APIs across multiple programming languages to capture your machine learning experiments. Whether you prefer automatic instrumentation or granular control, MLflow adapts to your workflow.","source":"@site/docs/classic-ml/tracking/tracking-api/index.mdx","sourceDirName":"tracking/tracking-api","slug":"/tracking/tracking-api/","permalink":"/docs/latest/ml/tracking/tracking-api/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"System Metrics \ud83c\udf21\ufe0f","permalink":"/docs/latest/ml/tracking/system-metrics/"},"next":{"title":"Overview","permalink":"/docs/latest/ml/model/"}}');var t=l(74848),i=l(28453),o=(l(28774),l(11470)),a=l(19365),s=l(49374),c=l(72839);const d={},m="MLflow Tracking APIs",h={},p=[{value:"Choose Your Approach",id:"choose-your-approach",level:2},{value:"<strong>\ud83e\udd16 Automatic Logging</strong> - Zero Setup, Maximum Coverage",id:"-automatic-logging---zero-setup-maximum-coverage",level:3},{value:"<strong>\ud83d\udee0\ufe0f Manual Logging</strong> - Complete Control, Custom Workflows",id:"\ufe0f-manual-logging---complete-control-custom-workflows",level:3},{value:"Core Logging Functions",id:"core-logging-functions",level:2},{value:"Setup &amp; Configuration",id:"setup--configuration",level:3},{value:"Run Management",id:"run-management",level:3},{value:"Data Logging",id:"data-logging",level:3},{value:"Artifact Management",id:"artifact-management",level:3},{value:"Model Management (New in MLflow 3)",id:"model-management-new-in-mlflow-3",level:3},{value:"Active Model Management (New in MLflow 3)",id:"active-model-management-new-in-mlflow-3",level:3},{value:"Language-Specific API Coverage",id:"language-specific-api-coverage",level:3},{value:"Advanced Tracking Patterns",id:"advanced-tracking-patterns",level:2},{value:"Working with Logged Models (New in MLflow 3)",id:"working-with-logged-models-new-in-mlflow-3",level:3},{value:"Creating and Managing External Models",id:"creating-and-managing-external-models",level:4},{value:"Advanced Model Lifecycle Management",id:"advanced-model-lifecycle-management",level:4},{value:"Searching and Querying Logged Models",id:"searching-and-querying-logged-models",level:4},{value:"Precise Metric Tracking",id:"precise-metric-tracking",level:3},{value:"Experiment Organization",id:"experiment-organization",level:3},{value:"Hierarchical Runs with Parent-Child Relationships",id:"hierarchical-runs-with-parent-child-relationships",level:3},{value:"Parallel Execution Strategies",id:"parallel-execution-strategies",level:3},{value:"Smart Tagging for Organization",id:"smart-tagging-for-organization",level:3},{value:"System Tags Reference",id:"system-tags-reference",level:3},{value:"Integration with Auto Logging",id:"integration-with-auto-logging",level:3},{value:"Language-Specific Guides",id:"language-specific-guides",level:2}];function f(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"mlflow-tracking-apis",children:"MLflow Tracking APIs"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/ml/tracking",children:"MLflow Tracking"})," provides comprehensive APIs across multiple programming languages to capture your machine learning experiments. Whether you prefer automatic instrumentation or granular control, MLflow adapts to your workflow."]}),"\n",(0,t.jsx)(n.h2,{id:"choose-your-approach",children:"Choose Your Approach"}),"\n",(0,t.jsx)(n.p,{children:"MLflow offers two primary methods for experiment tracking, each optimized for different use cases:"}),"\n",(0,t.jsxs)(n.h3,{id:"-automatic-logging---zero-setup-maximum-coverage",children:[(0,t.jsx)(n.strong,{children:"\ud83e\udd16 Automatic Logging"})," - Zero Setup, Maximum Coverage"]}),"\n",(0,t.jsx)(n.p,{children:"Perfect for getting started quickly or when using supported ML libraries. Just add one line and MLflow captures everything automatically."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.autolog()  # That's it!\n\n# Your existing training code works unchanged\nmodel.fit(X_train, y_train)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What gets logged automatically:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Model parameters and hyperparameters"}),"\n",(0,t.jsx)(n.li,{children:"Training and validation metrics"}),"\n",(0,t.jsx)(n.li,{children:"Model artifacts and checkpoints"}),"\n",(0,t.jsx)(n.li,{children:"Training plots and visualizations"}),"\n",(0,t.jsx)(n.li,{children:"Framework-specific metadata"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported libraries:"})," Scikit-learn, XGBoost, LightGBM, PyTorch, Keras/TensorFlow, Spark, and more."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/ml/tracking/autolog",children:(0,t.jsx)(n.strong,{children:"\u2192 Explore Auto Logging"})})}),"\n",(0,t.jsxs)(n.h3,{id:"\ufe0f-manual-logging---complete-control-custom-workflows",children:[(0,t.jsx)(n.strong,{children:"\ud83d\udee0\ufe0f Manual Logging"})," - Complete Control, Custom Workflows"]}),"\n",(0,t.jsx)(n.p,{children:"Ideal for custom training loops, advanced experimentation, or when you need precise control over what gets tracked."}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsx)(a.A,{default:!0,label:"Python",value:"python",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nwith mlflow.start_run():\n    # Log parameters\n    mlflow.log_param("learning_rate", 0.01)\n    mlflow.log_param("batch_size", 32)\n\n    # Your training logic here\n    for epoch in range(num_epochs):\n        train_loss = train_model()\n        val_loss = validate_model()\n\n        # Log metrics with step tracking\n        mlflow.log_metrics({"train_loss": train_loss, "val_loss": val_loss}, step=epoch)\n\n    # Log final model\n    mlflow.sklearn.log_model(model, name="model")\n'})})}),(0,t.jsx)(a.A,{label:"Java",value:"java",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'MlflowClient client = new MlflowClient();\nRunInfo run = client.createRun();\n\n// Log parameters\nclient.logParam(run.getRunId(), "learning_rate", "0.01");\nclient.logParam(run.getRunId(), "batch_size", "32");\n\n// Log metrics with timesteps\nfor (int epoch = 0; epoch < numEpochs; epoch++) {\n    double trainLoss = trainModel();\n    client.logMetric(run.getRunId(), "train_loss", trainLoss,\n                    System.currentTimeMillis(), epoch);\n}\n'})})}),(0,t.jsx)(a.A,{label:"R",value:"r",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-r",children:'library(mlflow)\n\nwith(mlflow_start_run(), {\n  # Log parameters\n  mlflow_log_param("learning_rate", 0.01)\n  mlflow_log_param("batch_size", 32)\n\n  # Training loop\n  for (epoch in 1:num_epochs) {\n    train_loss <- train_model()\n    mlflow_log_metric("train_loss", train_loss, step = epoch)\n  }\n})\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"core-logging-functions",children:"Core Logging Functions"}),"\n",(0,t.jsx)(n.h3,{id:"setup--configuration",children:"Setup & Configuration"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.set_tracking_uri"})}),(0,t.jsx)(n.td,{children:"Connect to tracking server or database"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.set_tracking_uri("http://localhost:5000")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.get_tracking_uri"})}),(0,t.jsx)(n.td,{children:"Get current tracking URI"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uri = mlflow.get_tracking_uri()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.create_experiment"})}),(0,t.jsx)(n.td,{children:"Create new experiment"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'exp_id = mlflow.create_experiment("my-experiment")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.set_experiment"})}),(0,t.jsx)(n.td,{children:"Set active experiment"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.set_experiment("fraud-detection")'})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"run-management",children:"Run Management"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.start_run"})}),(0,t.jsx)(n.td,{children:"Start new run (with context manager)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"with mlflow.start_run(): ..."})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.end_run"})}),(0,t.jsx)(n.td,{children:"End current run"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.end_run(status="FINISHED")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.active_run"})}),(0,t.jsx)(n.td,{children:"Get currently active run"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"run = mlflow.active_run()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.last_active_run"})}),(0,t.jsx)(n.td,{children:"Get last completed run"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"last_run = mlflow.last_active_run()"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"data-logging",children:"Data Logging"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(s.B,{fn:"mlflow.log_param"})," / ",(0,t.jsx)(s.B,{fn:"mlflow.log_params"})]}),(0,t.jsx)(n.td,{children:"Log hyperparameters"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.log_param("lr", 0.01)'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(s.B,{fn:"mlflow.log_metric"})," / ",(0,t.jsx)(s.B,{fn:"mlflow.log_metrics"})]}),(0,t.jsx)(n.td,{children:"Log performance metrics"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.log_metric("accuracy", 0.95, step=10)'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.log_input"})}),(0,t.jsx)(n.td,{children:"Log dataset information"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.log_input(dataset)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(s.B,{fn:"mlflow.set_tag"})," / ",(0,t.jsx)(s.B,{fn:"mlflow.set_tags"})]}),(0,t.jsx)(n.td,{children:"Add metadata tags"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.set_tag("model_type", "CNN")'})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"artifact-management",children:"Artifact Management"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.log_artifact"})}),(0,t.jsx)(n.td,{children:"Log single file/directory"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.log_artifact("model.pkl")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.log_artifacts"})}),(0,t.jsx)(n.td,{children:"Log entire directory"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.log_artifacts("./plots/")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.get_artifact_uri"})}),(0,t.jsx)(n.td,{children:"Get artifact storage location"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uri = mlflow.get_artifact_uri()"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"model-management-new-in-mlflow-3",children:"Model Management (New in MLflow 3)"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.initialize_logged_model"})}),(0,t.jsx)(n.td,{children:"Initialize a logged model in PENDING state"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'model = mlflow.initialize_logged_model(name="my_model")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.create_external_model"})}),(0,t.jsx)(n.td,{children:"Create external model (artifacts stored outside MLflow)"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'model = mlflow.create_external_model(name="agent")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.finalize_logged_model"})}),(0,t.jsx)(n.td,{children:"Update model status to READY or FAILED"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.finalize_logged_model(model_id, "READY")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.get_logged_model"})}),(0,t.jsx)(n.td,{children:"Retrieve logged model by ID"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"model = mlflow.get_logged_model(model_id)"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.last_logged_model"})}),(0,t.jsx)(n.td,{children:"Get most recently logged model"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"model = mlflow.last_logged_model()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.search_logged_models"})}),(0,t.jsx)(n.td,{children:"Search for logged models"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"models = mlflow.search_logged_models(filter_string=\"name='my_model'\")"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.log_model_params"})}),(0,t.jsx)(n.td,{children:"Log parameters to a specific model"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.log_model_params({"param": "value"}, model_id)'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.set_logged_model_tags"})}),(0,t.jsx)(n.td,{children:"Set tags on a logged model"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.set_logged_model_tags(model_id, {"key": "value"})'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.delete_logged_model_tag"})}),(0,t.jsx)(n.td,{children:"Delete tag from a logged model"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.delete_logged_model_tag(model_id, "key")'})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"active-model-management-new-in-mlflow-3",children:"Active Model Management (New in MLflow 3)"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Function"}),(0,t.jsx)(n.th,{children:"Purpose"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.set_active_model"})}),(0,t.jsx)(n.td,{children:"Set active model for trace linking"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'mlflow.set_active_model(name="my_model")'})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.get_active_model_id"})}),(0,t.jsx)(n.td,{children:"Get current active model ID"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"model_id = mlflow.get_active_model_id()"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(s.B,{fn:"mlflow.clear_active_model"})}),(0,t.jsx)(n.td,{children:"Clear active model"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.clear_active_model()"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"language-specific-api-coverage",children:"Language-Specific API Coverage"}),"\n",(0,t.jsxs)(c.X,{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Capability"}),(0,t.jsx)("th",{children:"Python"}),(0,t.jsx)("th",{children:"Java"}),(0,t.jsx)("th",{children:"R"}),(0,t.jsx)("th",{children:"REST API"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Basic Logging"})}),(0,t.jsx)("td",{children:"\u2705 Full"}),(0,t.jsx)("td",{children:"\u2705 Full"}),(0,t.jsx)("td",{children:"\u2705 Full"}),(0,t.jsx)("td",{children:"\u2705 Full"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Auto Logging"})}),(0,t.jsx)("td",{children:"\u2705 15+ Libraries"}),(0,t.jsx)("td",{children:"\u274c Not Available"}),(0,t.jsx)("td",{children:"\u2705 Limited"}),(0,t.jsx)("td",{children:"\u274c Not Available"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Model Logging"})}),(0,t.jsx)("td",{children:"\u2705 20+ Flavors"}),(0,t.jsx)("td",{children:"\u2705 Basic Support"}),(0,t.jsx)("td",{children:"\u2705 Basic Support"}),(0,t.jsx)("td",{children:"\u2705 Via Artifacts"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Logged Model Management"})}),(0,t.jsx)("td",{children:"\u2705 Full (MLflow 3)"}),(0,t.jsx)("td",{children:"\u274c Not Available"}),(0,t.jsx)("td",{children:"\u274c Not Available"}),(0,t.jsx)("td",{children:"\u2705 Basic"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Dataset Tracking"})}),(0,t.jsx)("td",{children:"\u2705 Full"}),(0,t.jsx)("td",{children:"\u2705 Basic"}),(0,t.jsx)("td",{children:"\u2705 Basic"}),(0,t.jsx)("td",{children:"\u2705 Basic"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.strong,{children:"Search & Query"})}),(0,t.jsx)("td",{children:"\u2705 Advanced"}),(0,t.jsx)("td",{children:"\u2705 Basic"}),(0,t.jsx)("td",{children:"\u2705 Basic"}),(0,t.jsx)("td",{children:"\u2705 Full"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{title:"api-parity",type:"note",children:(0,t.jsx)(n.p,{children:"The Python API provides the most comprehensive feature set. Java and R APIs offer core functionality with ongoing feature additions in each release."})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-tracking-patterns",children:"Advanced Tracking Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"working-with-logged-models-new-in-mlflow-3",children:"Working with Logged Models (New in MLflow 3)"}),"\n",(0,t.jsx)(n.p,{children:"MLflow 3 introduces powerful logged model management capabilities for tracking models independently of runs:"}),"\n",(0,t.jsx)(n.h4,{id:"creating-and-managing-external-models",children:"Creating and Managing External Models"}),"\n",(0,t.jsx)(n.p,{children:"For models stored outside MLflow (like deployed agents or external model artifacts):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Create an external model for tracking without storing artifacts in MLflow\nmodel = mlflow.create_external_model(\n    name="chatbot_agent",\n    model_type="agent",\n    tags={"version": "v1.0", "environment": "production"},\n)\n\n# Log parameters specific to this model\nmlflow.log_model_params(\n    {"temperature": "0.7", "max_tokens": "1000"}, model_id=model.model_id\n)\n\n# Set as active model for automatic trace linking\nmlflow.set_active_model(model_id=model.model_id)\n\n\n@mlflow.trace\ndef chat_with_agent(message):\n    # This trace will be automatically linked to the active model\n    return agent.chat(message)\n\n\n# Traces are now linked to your external model\ntraces = mlflow.search_traces(model_id=model.model_id)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"advanced-model-lifecycle-management",children:"Advanced Model Lifecycle Management"}),"\n",(0,t.jsx)(n.p,{children:"For models that require custom preparation or validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import LoggedModelStatus\n\n# Initialize model in PENDING state\nmodel = mlflow.initialize_logged_model(\n    name="custom_neural_network",\n    model_type="neural_network",\n    tags={"architecture": "transformer", "dataset": "custom"},\n)\n\ntry:\n    # Custom model preparation logic\n    train_model()\n    validate_model()\n\n    # Save model artifacts using standard MLflow model logging\n    mlflow.pytorch.log_model(\n        pytorch_model=model_instance,\n        name="model",\n        model_id=model.model_id,  # Link to the logged model\n    )\n\n    # Finalize model as READY\n    mlflow.finalize_logged_model(model.model_id, LoggedModelStatus.READY)\n\nexcept Exception as e:\n    # Mark model as FAILED if issues occur\n    mlflow.finalize_logged_model(model.model_id, LoggedModelStatus.FAILED)\n    raise\n\n# Retrieve and work with the logged model\nfinal_model = mlflow.get_logged_model(model.model_id)\nprint(f"Model {final_model.name} is {final_model.status}")\n'})}),"\n",(0,t.jsx)(n.h4,{id:"searching-and-querying-logged-models",children:"Searching and Querying Logged Models"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Find all production-ready transformer models\nproduction_models = mlflow.search_logged_models(\n    filter_string="tags.environment = \'production\' AND model_type = \'transformer\'",\n    order_by=[{"field_name": "creation_time", "ascending": False}],\n    output_format="pandas",\n)\n\n# Search for models with specific performance metrics\nhigh_accuracy_models = mlflow.search_logged_models(\n    filter_string="metrics.accuracy > 0.95",\n    datasets=[{"dataset_name": "test_set"}],  # Only consider test set metrics\n    max_results=10,\n)\n\n# Get the most recently logged model in current session\nlatest_model = mlflow.last_logged_model()\nif latest_model:\n    print(f"Latest model: {latest_model.name} (ID: {latest_model.model_id})")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"precise-metric-tracking",children:"Precise Metric Tracking"}),"\n",(0,t.jsx)(n.p,{children:"Control exactly when and how metrics are recorded with custom timestamps and steps:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import time\nfrom datetime import datetime\n\n# Log with custom step (training iteration/epoch)\nfor epoch in range(100):\n    loss = train_epoch()\n    mlflow.log_metric("train_loss", loss, step=epoch)\n\n# Log with custom timestamp\nnow = int(time.time() * 1000)  # MLflow expects milliseconds\nmlflow.log_metric("inference_latency", latency, timestamp=now)\n\n# Log with both step and timestamp\nmlflow.log_metric("gpu_utilization", gpu_usage, step=epoch, timestamp=now)\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Step Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Must be a valid 64-bit integer"}),"\n",(0,t.jsx)(n.li,{children:"Can be negative or out of order"}),"\n",(0,t.jsx)(n.li,{children:"Supports gaps in sequences (e.g., 1, 5, 75, -20)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"experiment-organization",children:"Experiment Organization"}),"\n",(0,t.jsx)(n.p,{children:"Structure your experiments for easy comparison and analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Method 1: Environment variables\nimport os\n\nos.environ["MLFLOW_EXPERIMENT_NAME"] = "fraud-detection-v2"\n\n# Method 2: Explicit experiment setting\nmlflow.set_experiment("hyperparameter-tuning")\n\n# Method 3: Create with custom configuration\nexperiment_id = mlflow.create_experiment(\n    "production-models",\n    artifact_location="s3://my-bucket/experiments/",\n    tags={"team": "data-science", "environment": "prod"},\n)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"hierarchical-runs-with-parent-child-relationships",children:"Hierarchical Runs with Parent-Child Relationships"}),"\n",(0,t.jsx)(n.p,{children:"Organize complex experiments like hyperparameter sweeps or cross-validation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Parent run for the entire experiment\nwith mlflow.start_run(run_name="hyperparameter_sweep") as parent_run:\n    mlflow.log_param("search_strategy", "random")\n\n    best_score = 0\n    best_params = {}\n\n    # Child runs for each parameter combination\n    for lr in [0.001, 0.01, 0.1]:\n        for batch_size in [16, 32, 64]:\n            with mlflow.start_run(\n                nested=True, run_name=f"lr_{lr}_bs_{batch_size}"\n            ) as child_run:\n                mlflow.log_params({"learning_rate": lr, "batch_size": batch_size})\n\n                # Train and evaluate\n                model = train_model(lr, batch_size)\n                score = evaluate_model(model)\n                mlflow.log_metric("accuracy", score)\n\n                # Track best configuration in parent\n                if score > best_score:\n                    best_score = score\n                    best_params = {"learning_rate": lr, "batch_size": batch_size}\n\n    # Log best results to parent run\n    mlflow.log_params(best_params)\n    mlflow.log_metric("best_accuracy", best_score)\n\n# Query child runs\nchild_runs = mlflow.search_runs(\n    filter_string=f"tags.mlflow.parentRunId = \'{parent_run.info.run_id}\'"\n)\nprint("Child run results:")\nprint(child_runs[["run_id", "params.learning_rate", "metrics.accuracy"]])\n'})}),"\n",(0,t.jsx)(n.h3,{id:"parallel-execution-strategies",children:"Parallel Execution Strategies"}),"\n",(0,t.jsx)(n.p,{children:"Handle multiple runs efficiently with different parallelization approaches:"}),"\n",(0,t.jsxs)(o.A,{children:[(0,t.jsxs)(a.A,{default:!0,label:"Sequential Runs",value:"sequential",children:[(0,t.jsx)(n.p,{children:"Perfect for simple hyperparameter sweeps or A/B testing:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'configs = [\n    {"model": "RandomForest", "n_estimators": 100},\n    {"model": "XGBoost", "max_depth": 6},\n    {"model": "LogisticRegression", "C": 1.0},\n]\n\nfor config in configs:\n    with mlflow.start_run(run_name=config["model"]):\n        mlflow.log_params(config)\n        model = train_model(config)\n        score = evaluate_model(model)\n        mlflow.log_metric("f1_score", score)\n'})})]}),(0,t.jsxs)(a.A,{label:"Multiprocessing",value:"multiprocessing",children:[(0,t.jsx)(n.p,{children:"Scale training across multiple CPU cores:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import multiprocessing as mp\n\n\ndef train_with_config(config):\n    # Set tracking URI in each process (required for spawn method)\n    mlflow.set_tracking_uri("http://localhost:5000")\n    mlflow.set_experiment("parallel-training")\n\n    with mlflow.start_run():\n        mlflow.log_params(config)\n        model = train_model(config)\n        score = evaluate_model(model)\n        mlflow.log_metric("accuracy", score)\n        return score\n\n\nif __name__ == "__main__":\n    configs = [{"lr": lr, "bs": bs} for lr in [0.01, 0.1] for bs in [16, 32]]\n\n    with mp.Pool(processes=4) as pool:\n        results = pool.map(train_with_config, configs)\n\n    print(f"Completed {len(results)} experiments")\n'})})]}),(0,t.jsxs)(a.A,{label:"Multithreading",value:"multithreading",children:[(0,t.jsx)(n.p,{children:"Use child runs for thread-safe parallel execution:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import threading\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndef train_worker(config):\n    with mlflow.start_run(nested=True):\n        mlflow.log_params(config)\n        model = train_model(config)\n        score = evaluate_model(model)\n        mlflow.log_metric("accuracy", score)\n        return score\n\n\n# Start parent run\nwith mlflow.start_run(run_name="threaded_experiment"):\n    configs = [{"lr": 0.01, "epochs": e} for e in range(10, 101, 10)]\n\n    with ThreadPoolExecutor(max_workers=4) as executor:\n        futures = [executor.submit(train_worker, config) for config in configs]\n        results = [future.result() for future in futures]\n\n    # Log summary to parent run\n    mlflow.log_metric("avg_accuracy", sum(results) / len(results))\n    mlflow.log_metric("max_accuracy", max(results))\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"smart-tagging-for-organization",children:"Smart Tagging for Organization"}),"\n",(0,t.jsx)(n.p,{children:"Use tags strategically to organize and filter experiments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'with mlflow.start_run():\n    # Descriptive tags for filtering\n    mlflow.set_tags(\n        {\n            "model_family": "transformer",\n            "dataset_version": "v2.1",\n            "environment": "production",\n            "team": "nlp-research",\n            "gpu_type": "V100",\n            "experiment_phase": "hyperparameter_tuning",\n        }\n    )\n\n    # Special notes tag for documentation\n    mlflow.set_tag(\n        "mlflow.note.content",\n        "Baseline transformer model with attention dropout. "\n        "Testing different learning rate schedules.",\n    )\n\n    # Training code here...\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Search experiments by tags:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Find all transformer experiments\ntransformer_runs = mlflow.search_runs(filter_string=\"tags.model_family = 'transformer'\")\n\n# Find production-ready models\nprod_models = mlflow.search_runs(\n    filter_string=\"tags.environment = 'production' AND metrics.accuracy > 0.95\"\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"system-tags-reference",children:"System Tags Reference"}),"\n",(0,t.jsx)(n.p,{children:"MLflow automatically sets several system tags to capture execution context:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Tag"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"When Set"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.source.name"})}),(0,t.jsx)(n.td,{children:"Source file or notebook name"}),(0,t.jsx)(n.td,{children:"Always"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.source.type"})}),(0,t.jsx)(n.td,{children:"Source type (NOTEBOOK, JOB, LOCAL, etc.)"}),(0,t.jsx)(n.td,{children:"Always"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.user"})}),(0,t.jsx)(n.td,{children:"User who created the run"}),(0,t.jsx)(n.td,{children:"Always"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.source.git.commit"})}),(0,t.jsx)(n.td,{children:"Git commit hash"}),(0,t.jsx)(n.td,{children:"When run from git repo"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.source.git.branch"})}),(0,t.jsx)(n.td,{children:"Git branch name"}),(0,t.jsx)(n.td,{children:"MLflow Projects only"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.parentRunId"})}),(0,t.jsx)(n.td,{children:"Parent run ID for nested runs"}),(0,t.jsx)(n.td,{children:"Child runs only"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.docker.image.name"})}),(0,t.jsx)(n.td,{children:"Docker image used"}),(0,t.jsx)(n.td,{children:"Docker environments"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mlflow.note.content"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"User-editable"})," description"]}),(0,t.jsx)(n.td,{children:"Manual only"})]})]})]}),"\n",(0,t.jsx)(n.admonition,{title:"pro-tip",type:"tip",children:(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"mlflow.note.content"})," to document experiment insights, hypotheses, or results directly in the MLflow UI. This tag appears in a dedicated Notes section on the run page."]})}),"\n",(0,t.jsx)(n.h3,{id:"integration-with-auto-logging",children:"Integration with Auto Logging"}),"\n",(0,t.jsx)(n.p,{children:"Combine auto logging with manual tracking for the best of both worlds:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\n# Enable auto logging\nmlflow.autolog()\n\nwith mlflow.start_run():\n    # Auto logging captures model training automatically\n    model = RandomForestClassifier(n_estimators=100)\n    model.fit(X_train, y_train)\n\n    # Add custom metrics and artifacts\n    predictions = model.predict(X_test)\n\n    # Log custom evaluation metrics\n    report = classification_report(y_test, predictions, output_dict=True)\n    mlflow.log_metrics(\n        {\n            "precision_macro": report["macro avg"]["precision"],\n            "recall_macro": report["macro avg"]["recall"],\n            "f1_macro": report["macro avg"]["f1-score"],\n        }\n    )\n\n    # Log custom artifacts\n    feature_importance = pd.DataFrame(\n        {"feature": feature_names, "importance": model.feature_importances_}\n    )\n    feature_importance.to_csv("feature_importance.csv")\n    mlflow.log_artifact("feature_importance.csv")\n\n    # Access the auto-logged run for additional processing\n    current_run = mlflow.active_run()\n    print(f"Auto-logged run ID: {current_run.info.run_id}")\n\n# Access the completed run\nlast_run = mlflow.last_active_run()\nprint(f"Final run status: {last_run.info.status}")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"language-specific-guides",children:"Language-Specific Guides"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Python"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:3000/api_reference/python_api/index.html",children:"Complete Python API Reference"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Java"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:3000/api_reference/java_api/index.html",children:"Java API Documentation"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"R"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:3000/api_reference/R-api.html",children:"R API Documentation"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"REST"}),": ",(0,t.jsx)(n.a,{href:"http://localhost:3000/api_reference/rest-api.html",children:"REST API Reference"})]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ml/tracking/server",children:"Set up MLflow Tracking Server"})," for team collaboration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ml/tracking/autolog",children:"Explore Auto Logging"})," for supported frameworks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/ml/search/search-runs",children:"Learn advanced search patterns"})," for experiment analysis"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}}}]);