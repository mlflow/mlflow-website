"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[132],{16734:(e,t,n)=>{n.d(t,{d:()=>l});var o=n(58069);const i="codeBlock_oJcR";var a=n(74848);const l=e=>{let{children:t,executionCount:n}=e;return(0,a.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,a.jsx)(o.A,{className:i,language:"python",children:t})})}},20723:(e,t,n)=>{n.d(t,{O:()=>a});var o=n(96540),i=n(74848);function a(e){let{children:t,href:n}=e;const a=(0,o.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:n})}catch{}const t=await fetch(n),o=await t.blob(),i=window.URL.createObjectURL(o),a=document.createElement("a");a.style.display="none",a.href=i;const l=n.split("/").pop();a.download=l,document.body.appendChild(a),a.click(),window.URL.revokeObjectURL(i),document.body.removeChild(a)}),[n]);return(0,i.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:n,download:!0,onClick:a,children:t})}},37568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"llms/llm-evaluate/notebooks/rag-evaluation-llama2-ipynb","title":"LLM RAG Evaluation with MLflow using llama2-as-judge Example Notebook","description":"Download this notebook","source":"@site/docs/llms/llm-evaluate/notebooks/rag-evaluation-llama2-ipynb.mdx","sourceDirName":"llms/llm-evaluate/notebooks","slug":"/llms/llm-evaluate/notebooks/rag-evaluation-llama2","permalink":"/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation-llama2","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/llm-evaluate/notebooks/rag-evaluation-llama2.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/llm-evaluate/notebooks/rag-evaluation-llama2.ipynb","slug":"rag-evaluation-llama2"},"sidebar":"docsSidebar","previous":{"title":"LLM RAG Evaluation with MLflow Example Notebook","permalink":"/docs/latest/llms/llm-evaluate/notebooks/rag-evaluation"},"next":{"title":"Production Monitoring","permalink":"/docs/latest/tracing/production"}}');var i=n(74848),a=n(28453),l=n(16734),s=n(61536),r=(n(86563),n(20723));const d={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/llm-evaluate/notebooks/rag-evaluation-llama2.ipynb",slug:"rag-evaluation-llama2"},c="LLM RAG Evaluation with MLflow using llama2-as-judge Example Notebook",u={},h=[{value:"Notebook compatibility",id:"notebook-compatibility",level:3},{value:"Installing Requirements",id:"installing-requirements",level:4},{value:"Configuration",id:"configuration",level:3},{value:"Create a RAG system",id:"create-a-rag-system",level:2},{value:"Evaluate the RAG system using <code>mlflow.evaluate()</code>",id:"evaluate-the-rag-system-using-mlflowevaluate",level:2}];function m(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"llm-rag-evaluation-with-mlflow-using-llama2-as-judge-example-notebook",children:"LLM RAG Evaluation with MLflow using llama2-as-judge Example Notebook"})}),"\n",(0,i.jsx)(r.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/llms/llm-evaluate/notebooks/rag-evaluation-llama2.ipynb",children:"Download this notebook"}),"\n",(0,i.jsx)(t.p,{children:"In this notebook, we will demonstrate how to evaluate various a RAG system with MLflow. We will use llama2-70b as the judge model, via a Databricks serving endpoint."}),"\n",(0,i.jsx)(t.h3,{id:"notebook-compatibility",children:"Notebook compatibility"}),"\n",(0,i.jsxs)(t.p,{children:["With rapidly changing libraries such as ",(0,i.jsx)(t.code,{children:"langchain"}),", examples can become outdated rather quickly and will no longer work. For the purposes of demonstration, here are the critical dependencies that are recommended to use to effectively run this notebook:"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Package"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Version"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"langchain"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"0.1.16"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"lanchain-community"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"0.0.33"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"langchain-openai"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"0.0.8"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"openai"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"1.12.0"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"mlflow"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"2.12.1"})})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"If you attempt to execute this notebook with different versions, it may function correctly, but it is recommended to use the precise versions above to ensure that your code executes properly."}),"\n",(0,i.jsx)(t.h4,{id:"installing-requirements",children:"Installing Requirements"}),"\n",(0,i.jsx)(t.p,{children:"Before proceeding with this tutorial, ensure that your versions of the installed packages meet the requirements listed above."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"    pip install langchain==0.1.16 langchain-community==0.0.33 langchain-openai==0.0.8 openai==1.12.0\n"})}),"\n",(0,i.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(t.p,{children:"We need to set our OpenAI API key."}),"\n",(0,i.jsx)(t.p,{children:"In order to set your private key safely, please be sure to either export your key through a command-line terminal for your current instance, or, for a permanent addition to all user-based sessions, configure your favored environment management configuration file (i.e., .bashrc, .zshrc) to have the following entry:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"OPENAI_API_KEY=<your openai API key>"})}),"\n",(0,i.jsxs)(t.p,{children:["In order to run this notebook, using a Databricks hosted Llama2 model, you will need to set your host and personal access token. Please ensure that these are set either using the Databricks SDK ",(0,i.jsx)(t.em,{children:(0,i.jsx)(t.strong,{children:"or"})})," setting the environment variables:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"DATABRICKS_HOST=<your Databricks workspace URI>"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"DATABRICKS_TOKEN=<your personal access token>"})}),"\n",(0,i.jsx)(l.d,{executionCount:1,children:"import pandas as pd\nfrom langchain.chains import RetrievalQA\nfrom langchain.document_loaders import WebBaseLoader\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\nfrom langchain_openai import OpenAI, OpenAIEmbeddings\n\nimport mlflow\nfrom mlflow.deployments import set_deployments_target\nfrom mlflow.metrics.genai import EvaluationExample, faithfulness, relevance"}),"\n",(0,i.jsx)(t.p,{children:'Set the deployment target to "databricks" for use with Databricks served models.'}),"\n",(0,i.jsx)(l.d,{executionCount:2,children:'set_deployments_target("databricks")'}),"\n",(0,i.jsx)(t.h2,{id:"create-a-rag-system",children:"Create a RAG system"}),"\n",(0,i.jsx)(t.p,{children:"Use Langchain and Chroma to create a RAG system that answers questions based on the MLflow documentation."}),"\n",(0,i.jsx)(l.d,{executionCount:3,children:'loader = WebBaseLoader("https://mlflow.org/docs/latest/index.html")\n\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\ndocsearch = Chroma.from_documents(texts, embeddings)\n\nqa = RetrievalQA.from_chain_type(\n  llm=OpenAI(temperature=0),\n  chain_type="stuff",\n  retriever=docsearch.as_retriever(),\n  return_source_documents=True,\n)'}),"\n",(0,i.jsxs)(t.h2,{id:"evaluate-the-rag-system-using-mlflowevaluate",children:["Evaluate the RAG system using ",(0,i.jsx)(t.code,{children:"mlflow.evaluate()"})]}),"\n",(0,i.jsx)(t.p,{children:"Create a simple function that runs each input through the RAG chain"}),"\n",(0,i.jsx)(l.d,{executionCount:4,children:'def model(input_df):\n  answer = []\n  for index, row in input_df.iterrows():\n      answer.append(qa(row["questions"]))\n\n  return answer'}),"\n",(0,i.jsx)(t.p,{children:"Create an eval dataset"}),"\n",(0,i.jsx)(l.d,{executionCount:5,children:'eval_df = pd.DataFrame(\n  {\n      "questions": [\n          "What is MLflow?",\n          "How to run mlflow.evaluate()?",\n          "How to log_table()?",\n          "How to load_table()?",\n      ],\n  }\n)'}),"\n",(0,i.jsxs)(t.p,{children:["Create a faithfulness metric using ",(0,i.jsx)(t.code,{children:"databricks-llama2-70b-chat"})," as the judge"]}),"\n",(0,i.jsx)(l.d,{executionCount:6,children:'# Create a good and bad example for faithfulness in the context of this problem\nfaithfulness_examples = [\n  EvaluationExample(\n      input="How do I disable MLflow autologging?",\n      output="mlflow.autolog(disable=True) will disable autologging for all functions. In Databricks, autologging is enabled by default. ",\n      score=2,\n      justification="The output provides a working solution, using the mlflow.autolog() function that is provided in the context.",\n      grading_context={\n          "context": "mlflow.autolog(log_input_examples: bool = False, log_model_signatures: bool = True, log_models: bool = True, log_datasets: bool = True, disable: bool = False, exclusive: bool = False, disable_for_unsupported_versions: bool = False, silent: bool = False, extra_tags: Optional[Dict[str, str]] = None) \u2192 None[source] Enables (or disables) and configures autologging for all supported integrations. The parameters are passed to any autologging integrations that support them. See the tracking docs for a list of supported autologging integrations. Note that framework-specific configurations set at any point will take precedence over any configurations set by this function."\n      },\n  ),\n  EvaluationExample(\n      input="How do I disable MLflow autologging?",\n      output="mlflow.autolog(disable=True) will disable autologging for all functions.",\n      score=5,\n      justification="The output provides a solution that is using the mlflow.autolog() function that is provided in the context.",\n      grading_context={\n          "context": "mlflow.autolog(log_input_examples: bool = False, log_model_signatures: bool = True, log_models: bool = True, log_datasets: bool = True, disable: bool = False, exclusive: bool = False, disable_for_unsupported_versions: bool = False, silent: bool = False, extra_tags: Optional[Dict[str, str]] = None) \u2192 None[source] Enables (or disables) and configures autologging for all supported integrations. The parameters are passed to any autologging integrations that support them. See the tracking docs for a list of supported autologging integrations. Note that framework-specific configurations set at any point will take precedence over any configurations set by this function."\n      },\n  ),\n]\n\nfaithfulness_metric = faithfulness(\n  model="endpoints:/databricks-llama-2-70b-chat", examples=faithfulness_examples\n)\nprint(faithfulness_metric)'}),"\n",(0,i.jsx)(s.p,{children:"EvaluationMetric(name=faithfulness, greater_is_better=True, long_name=faithfulness, version=v1, metric_details=\nTask:\nYou must return the following fields in your response in two lines, one below the other:\nscore: Your numerical score for the model's faithfulness based on the rubric\njustification: Your reasoning about the model's faithfulness score\n\nYou are an impartial judge. You will be given an input that was sent to a machine\nlearning model, and you will be given an output that the model produced. You\nmay also be given additional information that was used by the model to generate the output.\n\nYour task is to determine a numerical score called faithfulness based on the input and output.\nA definition of faithfulness and a grading rubric are provided below.\nYou must use the grading rubric to determine your score. You must also justify your score.\n\nExamples could be included below for reference. Make sure to use them as references and to\nunderstand them before completing the task.\n\nInput:\n{input}\n\nOutput:\n{output}\n\n{grading_context_columns}\n\nMetric definition:\nFaithfulness is only evaluated with the provided output and provided context, please ignore the provided input entirely when scoring faithfulness. Faithfulness assesses how much of the provided output is factually consistent with the provided context. A higher score indicates that a higher proportion of claims present in the output can be derived from the provided context. Faithfulness does not consider how much extra information from the context is not present in the output.\n\nGrading rubric:\nFaithfulness: Below are the details for different scores:\n- Score 1: None of the claims in the output can be inferred from the provided context.\n- Score 2: Some of the claims in the output can be inferred from the provided context, but the majority of the output is missing from, inconsistent with, or contradictory to the provided context.\n- Score 3: Half or more of the claims in the output can be inferred from the provided context.\n- Score 4: Most of the claims in the output can be inferred from the provided context, with very little information that is not directly supported by the provided context.\n- Score 5: All of the claims in the output are directly supported by the provided context, demonstrating high faithfulness to the provided context.\n\nExamples:\n\nExample Output:\nmlflow.autolog(disable=True) will disable autologging for all functions. In Databricks, autologging is enabled by default. \n\nAdditional information used by the model:\nkey: context\nvalue:\nmlflow.autolog(log_input_examples: bool = False, log_model_signatures: bool = True, log_models: bool = True, log_datasets: bool = True, disable: bool = False, exclusive: bool = False, disable_for_unsupported_versions: bool = False, silent: bool = False, extra_tags: Optional[Dict[str, str]] = None) \u2192 None[source] Enables (or disables) and configures autologging for all supported integrations. The parameters are passed to any autologging integrations that support them. See the tracking docs for a list of supported autologging integrations. Note that framework-specific configurations set at any point will take precedence over any configurations set by this function.\n\nExample score: 2\nExample justification: The output provides a working solution, using the mlflow.autolog() function that is provided in the context.\n      \n\nExample Output:\nmlflow.autolog(disable=True) will disable autologging for all functions.\n\nAdditional information used by the model:\nkey: context\nvalue:\nmlflow.autolog(log_input_examples: bool = False, log_model_signatures: bool = True, log_models: bool = True, log_datasets: bool = True, disable: bool = False, exclusive: bool = False, disable_for_unsupported_versions: bool = False, silent: bool = False, extra_tags: Optional[Dict[str, str]] = None) \u2192 None[source] Enables (or disables) and configures autologging for all supported integrations. The parameters are passed to any autologging integrations that support them. See the tracking docs for a list of supported autologging integrations. Note that framework-specific configurations set at any point will take precedence over any configurations set by this function.\n\nExample score: 5\nExample justification: The output provides a solution that is using the mlflow.autolog() function that is provided in the context.\n      \n\nYou must return the following fields in your response in two lines, one below the other:\nscore: Your numerical score for the model's faithfulness based on the rubric\njustification: Your reasoning about the model's faithfulness score\n\nDo not add additional new lines. Do not add any other fields.\n  )"}),"\n",(0,i.jsxs)(t.p,{children:["Create a relevance metric using ",(0,i.jsx)(t.code,{children:"databricks-llama2-70b-chat"})," as the judge"]}),"\n",(0,i.jsx)(l.d,{executionCount:7,children:'relevance_metric = relevance(model="endpoints:/databricks-llama-2-70b-chat")\nprint(relevance_metric)'}),"\n",(0,i.jsx)(s.p,{children:"EvaluationMetric(name=relevance, greater_is_better=True, long_name=relevance, version=v1, metric_details=\nTask:\nYou must return the following fields in your response in two lines, one below the other:\nscore: Your numerical score for the model's relevance based on the rubric\njustification: Your reasoning about the model's relevance score\n\nYou are an impartial judge. You will be given an input that was sent to a machine\nlearning model, and you will be given an output that the model produced. You\nmay also be given additional information that was used by the model to generate the output.\n\nYour task is to determine a numerical score called relevance based on the input and output.\nA definition of relevance and a grading rubric are provided below.\nYou must use the grading rubric to determine your score. You must also justify your score.\n\nExamples could be included below for reference. Make sure to use them as references and to\nunderstand them before completing the task.\n\nInput:\n{input}\n\nOutput:\n{output}\n\n{grading_context_columns}\n\nMetric definition:\nRelevance encompasses the appropriateness, significance, and applicability of the output with respect to both the input and context. Scores should reflect the extent to which the output directly addresses the question provided in the input, given the provided context.\n\nGrading rubric:\nRelevance: Below are the details for different scores:- Score 1: The output doesn't mention anything about the question or is completely irrelevant to the provided context.\n- Score 2: The output provides some relevance to the question and is somehow related to the provided context.\n- Score 3: The output mostly answers the question and is largely consistent with the provided context.\n- Score 4: The output answers the question and is consistent with the provided context.\n- Score 5: The output answers the question comprehensively using the provided context.\n\nExamples:\n\nExample Input:\nHow is MLflow related to Databricks?\n\nExample Output:\nDatabricks is a data engineering and analytics platform designed to help organizations process and analyze large amounts of data. Databricks is a company specializing in big data and machine learning solutions.\n\nAdditional information used by the model:\nkey: context\nvalue:\nMLflow is an open-source platform for managing the end-to-end machine learning (ML) lifecycle. It was developed by Databricks, a company that specializes in big data and machine learning solutions. MLflow is designed to address the challenges that data scientists and machine learning engineers face when developing, training, and deploying machine learning models.\n\nExample score: 2\nExample justification: The output provides relevant information about Databricks, mentioning it as a company specializing in big data and machine learning solutions. However, it doesn't directly address how MLflow is related to Databricks, which is the specific question asked in the input. Therefore, the output is only somewhat related to the provided context.\n      \n\nExample Input:\nHow is MLflow related to Databricks?\n\nExample Output:\nMLflow is a product created by Databricks to enhance the efficiency of machine learning processes.\n\nAdditional information used by the model:\nkey: context\nvalue:\nMLflow is an open-source platform for managing the end-to-end machine learning (ML) lifecycle. It was developed by Databricks, a company that specializes in big data and machine learning solutions. MLflow is designed to address the challenges that data scientists and machine learning engineers face when developing, training, and deploying machine learning models.\n\nExample score: 4\nExample justification: The output provides a relevant and accurate statement about the relationship between MLflow and Databricks. While it doesn't provide extensive detail, it still offers a substantial and meaningful response. To achieve a score of 5, the response could be further improved by providing additional context or details about how MLflow specifically functions within the Databricks ecosystem.\n      \n\nYou must return the following fields in your response in two lines, one below the other:\nscore: Your numerical score for the model's relevance based on the rubric\njustification: Your reasoning about the model's relevance score\n\nDo not add additional new lines. Do not add any other fields.\n  )"}),"\n",(0,i.jsx)(l.d,{executionCount:8,children:'results = mlflow.evaluate(\n  model,\n  eval_df,\n  model_type="question-answering",\n  evaluators="default",\n  predictions="result",\n  extra_metrics=[faithfulness_metric, relevance_metric, mlflow.metrics.latency()],\n  evaluator_config={\n      "col_mapping": {\n          "inputs": "questions",\n          "context": "source_documents",\n      }\n  },\n)\nprint(results.metrics)'}),"\n",(0,i.jsx)(s.p,{isStderr:!0,children:"2024/04/23 14:24:36 INFO mlflow.models.evaluation.base: Evaluating the model with the default evaluator.\n2024/04/23 14:24:36 INFO mlflow.models.evaluation.default_evaluator: Computing model predictions.\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/langchain_core/_api/deprecation.py:117: LangChainDeprecationWarning: The function `__call__` was deprecated in LangChain 0.1.0 and will be removed in 0.2.0. Use invoke instead.\nwarn_deprecated(\n2024/04/23 14:24:46 INFO mlflow.models.evaluation.default_evaluator: Testing metrics on first row...\n2024/04/23 14:24:50 WARNING mlflow.metrics.metric_definitions: Failed to load 'toxicity' metric (error: RuntimeError(\"Failed to import transformers.pipelines because of the following error (look up to see its traceback):\ncannot import name 'DEFAULT_CIPHERS' from 'urllib3.util.ssl_' (/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/urllib3/util/ssl_.py)\")), skipping metric logging.\n2024/04/23 14:24:50 WARNING mlflow.models.evaluation.default_evaluator: Did not log builtin metric 'toxicity' because it returned None.\n2024/04/23 14:24:50 WARNING mlflow.models.evaluation.default_evaluator: Did not log builtin metric 'exact_match' because it returned None."}),"\n",(0,i.jsx)(s.p,{children:"  0%|          | 0/1 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(s.p,{isStderr:!0,children:"/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3464: RuntimeWarning: Mean of empty slice.\nreturn _methods._mean(a, axis=axis, dtype=dtype,\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/numpy/core/_methods.py:192: RuntimeWarning: invalid value encountered in scalar divide\nret = ret.dtype.type(ret / rcount)\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3747: RuntimeWarning: Degrees of freedom <= 0 for slice\nreturn _methods._var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in divide\narrmean = um.true_divide(arrmean, div, out=arrmean,\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/numpy/core/_methods.py:261: RuntimeWarning: invalid value encountered in scalar divide\nret = ret.dtype.type(ret / rcount)"}),"\n",(0,i.jsx)(s.p,{children:"  0%|          | 0/1 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(s.p,{isStderr:!0,children:"2024/04/23 14:24:50 WARNING mlflow.metrics.metric_definitions: Failed to load 'toxicity' metric (error: RuntimeError(\"Failed to import transformers.pipelines because of the following error (look up to see its traceback):\ncannot import name 'DEFAULT_CIPHERS' from 'urllib3.util.ssl_' (/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/urllib3/util/ssl_.py)\")), skipping metric logging.\n2024/04/23 14:24:50 WARNING mlflow.models.evaluation.default_evaluator: Did not log builtin metric 'toxicity' because it returned None.\n2024/04/23 14:24:50 WARNING mlflow.models.evaluation.default_evaluator: Did not log builtin metric 'exact_match' because it returned None."}),"\n",(0,i.jsx)(s.p,{children:"  0%|          | 0/4 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(s.p,{children:"  0%|          | 0/4 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(s.p,{children:"{'latency/mean': 2.329627513885498, 'latency/variance': 6.333362589765358, 'latency/p90': 5.018124270439149, 'flesch_kincaid_grade_level/v1/mean': 3.7, 'flesch_kincaid_grade_level/v1/variance': 42.96, 'flesch_kincaid_grade_level/v1/p90': 10.9, 'ari_grade_level/v1/mean': 5.25, 'ari_grade_level/v1/variance': 71.20249999999999, 'ari_grade_level/v1/p90': 14.8, 'faithfulness/v1/mean': nan, 'faithfulness/v1/variance': nan, 'relevance/v1/mean': nan, 'relevance/v1/variance': nan}"}),"\n",(0,i.jsx)(l.d,{executionCount:" ",children:'results.tables["eval_results_table"]'}),"\n",(0,i.jsx)(s.p,{children:"Downloading artifacts:   0%|          | 0/1 [00:00<?, ?it/s]"})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},61536:(e,t,n)=>{n.d(t,{p:()=>i});var o=n(74848);const i=e=>{let{children:t,isStderr:n}=e;return(0,o.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:t})}},86563:(e,t,n)=>{n.d(t,{Q:()=>i});var o=n(74848);const i=e=>{let{children:t}=e;return(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:t})}}}]);