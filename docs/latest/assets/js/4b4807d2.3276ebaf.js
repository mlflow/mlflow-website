"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[516],{11470:(e,r,t)=>{t.d(r,{A:()=>b});var n=t(96540),a=t(34164),s=t(23104),i=t(56347),l=t(205),o=t(57485),c=t(31682),m=t(70679);function p(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return p(e).map((({props:{value:e,label:r,attributes:t,default:n}})=>({value:e,label:r,attributes:t,default:n})))}(t);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function h({value:e,tabValues:r}){return r.some((r=>r.value===e))}function f({queryString:e=!1,groupId:r}){const t=(0,i.W6)(),a=function({queryString:e=!1,groupId:r}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:e,groupId:r});return[(0,o.aZ)(a),(0,n.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(t.location.search);r.set(a,e),t.replace({...t.location,search:r.toString()})}),[a,t])]}function d(e){const{defaultValue:r,queryString:t=!1,groupId:a}=e,s=u(e),[i,o]=(0,n.useState)((()=>function({defaultValue:e,tabValues:r}){if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:r,tabValues:s}))),[c,p]=f({queryString:t,groupId:a}),[d,_]=function({groupId:e}){const r=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,m.Dv)(r);return[t,(0,n.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:a}),g=(()=>{const e=c??d;return h({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),_(e)}),[p,_,s]),tabValues:s}}var _=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function w({className:e,block:r,selectedValue:t,selectValue:n,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const r=e.currentTarget,a=l.indexOf(r),s=i[a].value;s!==t&&(o(r),n(s))},m=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},e),children:i.map((({value:e,label:r,attributes:n})=>(0,y.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:m,onClick:c,...n,className:(0,a.A)("tabs__item",g.tabItem,n?.className,{"tabs__item--active":t===e}),children:r??e},e)))})}function v({lazy:e,children:r,selectedValue:t}){const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,n.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==t})))})}function x(e){const r=d(e);return(0,y.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,y.jsx)(w,{...r,...e}),(0,y.jsx)(v,{...r,...e})]})}function b(e){const r=(0,_.A)();return(0,y.jsx)(x,{...e,children:p(e.children)},String(r))}},19365:(e,r,t)=>{t.d(r,{A:()=>i});t(96540);var n=t(34164);const a={tabItem:"tabItem_Ymn6"};var s=t(74848);function i({children:e,hidden:r,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.A)(a.tabItem,t),hidden:r,children:e})}},28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>l});var n=t(96540);const a={},s=n.createContext(a);function i(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:r},e.children)}},44237:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"tracing/observe-with-traces/query-via-sdk","title":"Query Traces via SDK","description":"This guide shows you how to programmatically query traces using the MLflow SDK for debugging, monitoring, and analysis. While the Search Traces guide covers comprehensive search functionality, this page focuses on practical SDK usage patterns for observability workflows. To learn more about detailed search syntax and filtering capabilities, see the Search Traces guide.","source":"@site/docs/genai/tracing/observe-with-traces/query-via-sdk.mdx","sourceDirName":"tracing/observe-with-traces","slug":"/tracing/observe-with-traces/query-via-sdk","permalink":"/docs/latest/genai/tracing/observe-with-traces/query-via-sdk","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"MLflow Tracing UI","permalink":"/docs/latest/genai/tracing/observe-with-traces/ui"},"next":{"title":"Lightweight Tracing SDK","permalink":"/docs/latest/genai/tracing/lightweight-sdk"}}');var a=t(74848),s=t(28453),i=t(49374);t(11470),t(19365);const l={},o="Query Traces via SDK",c={},m=[{value:"Why Query Traces Programmatically?",id:"why-query-traces-programmatically",level:2},{value:"Basic Query Methods",id:"basic-query-methods",level:2},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Finding and Analyzing Errors",id:"finding-and-analyzing-errors",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"User Session Analysis",id:"user-session-analysis",level:3},{value:"Building Evaluation Datasets",id:"building-evaluation-datasets",level:2},{value:"Simple Monitoring Setup",id:"simple-monitoring-setup",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"query-traces-via-sdk",children:"Query Traces via SDK"})}),"\n",(0,a.jsx)(r.admonition,{type:"note",children:(0,a.jsxs)(r.p,{children:["This guide shows you how to programmatically query traces using the MLflow SDK for debugging, monitoring, and analysis. While the ",(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})," guide covers comprehensive search functionality, this page focuses on practical SDK usage patterns for observability workflows. To learn more about detailed search syntax and filtering capabilities, see the ",(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})," guide."]})}),"\n",(0,a.jsx)(r.h2,{id:"why-query-traces-programmatically",children:"Why Query Traces Programmatically?"}),"\n",(0,a.jsx)(r.p,{children:"The MLflow UI is great for interactive exploration, but programmatic access enables automation and integration with your existing workflows. You can analyze error patterns across thousands of traces, monitor performance trends over time, create evaluation datasets from real production data, and build custom alerts for your monitoring systems."}),"\n",(0,a.jsx)(r.h2,{id:"basic-query-methods",children:"Basic Query Methods"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(i.B,{fn:"mlflow.search_traces"})," function returns a pandas DataFrame that's perfect for data analysis and quick insights:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import mlflow\n\n# Get recent error traces as a DataFrame\nerror_traces = mlflow.search_traces(\n    experiment_ids=["1"], filter_string="status = \'ERROR\'", max_results=100\n)\n\n# Easy analysis with pandas\nprint(f"Found {len(error_traces)} errors")\nprint(f"Average execution time: {error_traces[\'execution_time_ms\'].mean():.1f}ms")\n'})}),"\n",(0,a.jsx)(r.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,a.jsx)(r.h3,{id:"finding-and-analyzing-errors",children:"Finding and Analyzing Errors"}),"\n",(0,a.jsx)(r.p,{children:"When you need to understand what's going wrong in your application, start with simple queries to identify patterns:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'import mlflow\nfrom datetime import datetime, timedelta\n\n# Get errors from the last 24 hours\nyesterday = datetime.now() - timedelta(days=1)\ntimestamp_ms = int(yesterday.timestamp() * 1000)\n\nerror_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string=f"status = \'ERROR\' AND timestamp_ms > {timestamp_ms}",\n    order_by=["timestamp_ms DESC"],\n)\n\nprint(f"Found {len(error_traces)} errors in the last 24 hours")\n\n# Look at error distribution by tags\nif not error_traces.empty:\n    # Count errors by user if user tags exist\n    if "tags" in error_traces.columns:\n        print("\\nError patterns:")\n        tag_analysis = {}\n        for tags in error_traces["tags"].dropna():\n            if isinstance(tags, dict):\n                user = tags.get("user_id", "unknown")\n                tag_analysis[user] = tag_analysis.get(user, 0) + 1\n\n        for user, count in sorted(\n            tag_analysis.items(), key=lambda x: x[1], reverse=True\n        )[:5]:\n            print(f"  {user}: {count} errors")\n'})}),"\n",(0,a.jsx)(r.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,a.jsx)(r.p,{children:"Track how your application performs over time and identify bottlenecks:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'# Get successful traces to analyze performance\nrecent_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="status = \'OK\'",\n    order_by=["timestamp_ms DESC"],\n    max_results=1000,\n)\n\nif not recent_traces.empty:\n    # Basic performance metrics\n    avg_time = recent_traces["execution_time_ms"].mean()\n    p95_time = recent_traces["execution_time_ms"].quantile(0.95)\n\n    print(f"Average execution time: {avg_time:.1f}ms")\n    print(f"95th percentile: {p95_time:.1f}ms")\n\n    # Find slowest traces\n    slow_traces = recent_traces[recent_traces["execution_time_ms"] > p95_time]\n    print(f"Found {len(slow_traces)} slow traces (>{p95_time:.1f}ms)")\n'})}),"\n",(0,a.jsx)(r.h3,{id:"user-session-analysis",children:"User Session Analysis"}),"\n",(0,a.jsx)(r.p,{children:"Understand how users interact with your application by analyzing their sessions:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'# Analyze traces for a specific user\nuser_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="tags.user_id = \'user123\'",\n    order_by=["timestamp_ms ASC"],\n)\n\nif not user_traces.empty:\n    print(f"User has {len(user_traces)} interactions")\n\n    # Calculate session metrics\n    total_time = user_traces["execution_time_ms"].sum()\n    error_count = len(user_traces[user_traces["status"] == "ERROR"])\n\n    print(f"Total execution time: {total_time:.1f}ms")\n    print(\n        f"Error rate: {error_count}/{len(user_traces)} ({error_count/len(user_traces)*100:.1f}%)"\n    )\n\n    # Show recent activity\n    print("\\nRecent traces:")\n    for _, trace in user_traces.tail(3).iterrows():\n        status = "\u2705" if trace["status"] == "OK" else "\u274c"\n        print(f"  {status} {trace[\'execution_time_ms\']:.1f}ms")\n'})}),"\n",(0,a.jsx)(r.h2,{id:"building-evaluation-datasets",children:"Building Evaluation Datasets"}),"\n",(0,a.jsx)(r.p,{children:"Use real production traces to create evaluation datasets that reflect actual user interactions:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'# Get successful traces from recent production usage\nproduction_traces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="status = \'OK\'",\n    extract_fields=["llm_call.inputs.messages", "llm_call.outputs.response"],\n    max_results=500,\n)\n\n# Convert to evaluation format\neval_examples = []\nfor _, trace in production_traces.iterrows():\n    messages = trace.get("llm_call.inputs.messages")\n    response = trace.get("llm_call.outputs.response")\n\n    if messages and response:\n        # Extract user message\n        user_message = ""\n        if isinstance(messages, list):\n            for msg in messages:\n                if msg.get("role") == "user":\n                    user_message = msg.get("content", "")\n                    break\n\n        if user_message:\n            eval_examples.append(\n                {\n                    "input": user_message,\n                    "output": response,\n                    "trace_id": trace.get("request_id"),\n                }\n            )\n\nprint(f"Created evaluation dataset with {len(eval_examples)} examples")\n\n# Save for later use\nimport pandas as pd\n\neval_df = pd.DataFrame(eval_examples)\neval_df.to_csv("evaluation_dataset.csv", index=False)\n'})}),"\n",(0,a.jsx)(r.h2,{id:"simple-monitoring-setup",children:"Simple Monitoring Setup"}),"\n",(0,a.jsx)(r.p,{children:"Create basic monitoring that alerts you to issues:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'def check_app_health(experiment_ids, alert_threshold_error_rate=0.05):\n    """Simple health check for trace data"""\n\n    # Get traces from last hour\n    one_hour_ago = int((datetime.now() - timedelta(hours=1)).timestamp() * 1000)\n\n    recent_traces = mlflow.search_traces(\n        experiment_ids=experiment_ids,\n        filter_string=f"timestamp_ms > {one_hour_ago}",\n        max_results=1000,\n    )\n\n    if recent_traces.empty:\n        print("\u26a0\ufe0f  No traces found in the last hour")\n        return\n\n    # Calculate basic metrics\n    total_traces = len(recent_traces)\n    error_count = len(recent_traces[recent_traces["status"] == "ERROR"])\n    error_rate = error_count / total_traces\n\n    print(f"Last hour: {total_traces} traces, {error_count} errors ({error_rate:.1%})")\n\n    # Alert on high error rate\n    if error_rate > alert_threshold_error_rate:\n        print(\n            f"\ud83d\udea8 HIGH ERROR RATE: {error_rate:.1%} (threshold: {alert_threshold_error_rate:.1%})"\n        )\n    else:\n        print("\u2705 Error rate within normal range")\n\n    # Show average performance\n    successful_traces = recent_traces[recent_traces["status"] == "OK"]\n    if not successful_traces.empty:\n        avg_time = successful_traces["execution_time_ms"].mean()\n        print(f"Average response time: {avg_time:.1f}ms")\n\n\n# Run health check\ncheck_app_health(["1"])\n'})}),"\n",(0,a.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Start Simple"}),": Begin with basic queries and gradually add complexity as needed. Most monitoring can be done with simple filters and pandas operations."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Use Time Windows"}),": Always filter by timestamp when analyzing recent data to keep queries fast and relevant."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Handle Missing Data"}),": Production traces may have missing fields, so always check if data exists before using it."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Keep Queries Focused"}),": Use specific filters to get only the data you need rather than retrieving everything and filtering in memory."]}),"\n",(0,a.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(r.p,{children:"Add basic error handling to make your scripts more robust:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:'def safe_trace_query(experiment_ids, filter_string=None):\n    """Query traces with basic error handling"""\n    try:\n        return mlflow.search_traces(\n            experiment_ids=experiment_ids, filter_string=filter_string\n        )\n    except Exception as e:\n        print(f"Error querying traces: {e}")\n        return pd.DataFrame()  # Return empty DataFrame on error\n\n\n# Usage\ntraces = safe_trace_query(["1"], "status = \'ERROR\'")\nif not traces.empty:\n    print(f"Found {len(traces)} traces")\nelse:\n    print("No traces found or query failed")\n'})}),"\n",(0,a.jsx)(r.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(r.p,{children:"Programmatic trace querying with the MLflow SDK enables powerful automation for debugging, monitoring, and analysis. Start with simple queries to understand your data, then build up to more sophisticated monitoring and evaluation workflows."}),"\n",(0,a.jsx)(r.p,{children:"The key is to focus on actionable insights that help you understand and improve your application's behavior in production."}),"\n",(0,a.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/observe-with-traces/ui",children:"MLflow Tracing UI"})}),": Learn the web interface for interactive trace exploration"]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})}),": Master advanced search and filtering techniques"]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:(0,a.jsx)(r.a,{href:"/genai/tracing/observe-with-traces/delete-traces",children:"Delete and Manage Traces"})}),": Understand trace lifecycle management"]})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},49374:(e,r,t)=>{t.d(r,{B:()=>o});t(96540);const n=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var a=t(86025),s=t(28774),i=t(74848);const l=e=>{const r=e.split(".");for(let t=r.length;t>0;t--){const e=r.slice(0,t).join(".");if(n[e])return e}return null};function o({fn:e,children:r}){const t=l(e);if(!t)return(0,i.jsx)(i.Fragment,{children:r});const o=(0,a.Ay)(`/${n[t]}#${e}`);return(0,i.jsx)(s.A,{to:o,target:"_blank",children:r??(0,i.jsxs)("code",{children:[e,"()"]})})}}}]);