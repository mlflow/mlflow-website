"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8921],{2888:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/quickstart-our-experiment-4030e609705bc2c15a92e983b3b2b057.png"},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function l(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:t},e.children)}},30862:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/quickstart-our-run-a5018336e67fbd0d31a1c5ac972ba0e4.png"},50397:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"getting-started/intro-quickstart/index","title":"MLflow Tracking Quickstart","description":"Welcome to MLflow!","source":"@site/docs/getting-started/intro-quickstart/index.mdx","sourceDirName":"getting-started/intro-quickstart","slug":"/getting-started/intro-quickstart/","permalink":"/docs/latest/getting-started/intro-quickstart/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Getting Started with MLflow","permalink":"/docs/latest/getting-started/"},"next":{"title":"Introduction","permalink":"/docs/latest/introduction/"}}');var a=n(74848),i=n(28453);n(86294);const l={sidebar_position:2},s="MLflow Tracking Quickstart",o={},d=[{value:"What you will learn",id:"what-you-will-learn",level:2},{value:"Step 1 - Get MLflow",id:"step-1---get-mlflow",level:2},{value:"Installing Stable Release",id:"installing-stable-release",level:3},{value:"Installing a Release Candidate (RC)",id:"installing-a-release-candidate-rc",level:3},{value:"Step 2 - Start a Tracking Server",id:"step-2---start-a-tracking-server",level:2},{value:"Using a Managed MLflow Tracking Server",id:"using-a-managed-mlflow-tracking-server",level:3},{value:"(Optional) Run a local Tracking Server",id:"optional-run-a-local-tracking-server",level:3},{value:"Set the Tracking Server URI (if not using a Databricks Managed MLflow Tracking Server)",id:"set-the-tracking-server-uri-if-not-using-a-databricks-managed-mlflow-tracking-server",level:3},{value:"Step 3 - Train a model and prepare metadata for logging",id:"step-3---train-a-model-and-prepare-metadata-for-logging",level:2},{value:"Step 4 - Log the model and its metadata to MLflow",id:"step-4---log-the-model-and-its-metadata-to-mlflow",level:2},{value:"Step 5 - Load the model as a Python Function (pyfunc) and use it for inference",id:"step-5---load-the-model-as-a-python-function-pyfunc-and-use-it-for-inference",level:2},{value:"Step 6 - View the Run in the MLflow UI",id:"step-6---view-the-run-in-the-mlflow-ui",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"mlflow-tracking-quickstart",children:"MLflow Tracking Quickstart"})}),"\n",(0,a.jsx)(t.p,{children:"Welcome to MLflow!"}),"\n",(0,a.jsx)(t.p,{children:"The purpose of this quickstart is to provide a quick guide to the most essential core APIs of MLflow Tracking.\nSpecifically, those that enable the logging, registering, and loading of a model for inference."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["For a more in-depth and tutorial-based approach (if that is your style), please see the\n",(0,a.jsx)(t.a,{href:"/getting-started/logging-first-model",children:"Getting Started with MLflow"})," tutorial. We recommend that you start here first, though, as this quickstart\nuses the most common and frequently-used APIs for MLflow Tracking and serves as a good foundation for the other tutorials in the documentation."]})}),"\n",(0,a.jsx)(t.h2,{id:"what-you-will-learn",children:"What you will learn"}),"\n",(0,a.jsx)(t.p,{children:"In just a few minutes of following along with this quickstart, you will learn:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["How to ",(0,a.jsx)(t.strong,{children:"log"})," parameters, metrics, and a model"]}),"\n",(0,a.jsxs)(t.li,{children:["The basics of the ",(0,a.jsx)(t.strong,{children:"MLflow fluent API"})]}),"\n",(0,a.jsxs)(t.li,{children:["How to ",(0,a.jsx)(t.strong,{children:"register"})," a model during logging"]}),"\n",(0,a.jsxs)(t.li,{children:["How to navigate to a model in the ",(0,a.jsx)(t.strong,{children:"MLflow UI"})]}),"\n",(0,a.jsxs)(t.li,{children:["How to ",(0,a.jsx)(t.strong,{children:"load"})," a logged model for inference"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"step-1---get-mlflow",children:"Step 1 - Get MLflow"}),"\n",(0,a.jsx)(t.p,{children:"MLflow is available on PyPI."}),"\n",(0,a.jsx)(t.h3,{id:"installing-stable-release",children:"Installing Stable Release"}),"\n",(0,a.jsx)(t.p,{children:"If you don't already have it installed on your system, you can install it with:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"pip install mlflow\n"})}),"\n",(0,a.jsx)(t.h3,{id:"installing-a-release-candidate-rc",children:"Installing a Release Candidate (RC)"}),"\n",(0,a.jsx)(t.p,{children:"If you are eager to test out new features and validate that an upcoming release of MLflow will work well in your infrastructure, installing the latest\nrelease candidate may be of interest to you."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Release Candidate builds are not recommended for actual use, rather they are intended only for testing validation."})}),"\n",(0,a.jsx)(t.p,{children:"To install the latest version of MLflow's release candidates for a given version, see the example below that uses MLflow 2.14.0 as an example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# install the latest release candidate\npip install --pre mlflow\n\n# or install a specific rc version\npip install mlflow==2.14.0rc0\n"})}),"\n",(0,a.jsx)(t.h2,{id:"step-2---start-a-tracking-server",children:"Step 2 - Start a Tracking Server"}),"\n",(0,a.jsx)(t.h3,{id:"using-a-managed-mlflow-tracking-server",children:"Using a Managed MLflow Tracking Server"}),"\n",(0,a.jsxs)(t.p,{children:["For details on options for using a managed MLflow Tracking Server, including how to create a Databricks Free Trial account with\nmanaged MLflow, ",(0,a.jsx)(t.a,{href:"/getting-started/running-notebooks/",children:"see the guide for tracking server options"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"optional-run-a-local-tracking-server",children:"(Optional) Run a local Tracking Server"}),"\n",(0,a.jsx)(t.p,{children:"We're going to start a local MLflow Tracking Server, which we will connect to for logging our data for this quickstart.\nFrom a terminal, run:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"mlflow server --host 127.0.0.1 --port 8080\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"You can choose any port that you would like, provided that it's not already in use."})}),"\n",(0,a.jsx)(t.h3,{id:"set-the-tracking-server-uri-if-not-using-a-databricks-managed-mlflow-tracking-server",children:"Set the Tracking Server URI (if not using a Databricks Managed MLflow Tracking Server)"}),"\n",(0,a.jsx)(t.p,{children:"If you're using a managed MLflow Tracking Server that is not provided by Databricks, or if you're running a local tracking server,\nensure that you set the tracking server's uri using:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_tracking_uri(uri="http://<host>:<port>")\n'})}),"\n",(0,a.jsx)(t.p,{children:"If this is not set within your notebook or runtime environment, the runs will be logged to your local file system."}),"\n",(0,a.jsx)(t.h2,{id:"step-3---train-a-model-and-prepare-metadata-for-logging",children:"Step 3 - Train a model and prepare metadata for logging"}),"\n",(0,a.jsx)(t.p,{children:"In this section, we're going to log a model with MLflow. A quick overview of the steps are:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Load and prepare the Iris dataset for modeling."}),"\n",(0,a.jsx)(t.li,{children:"Train a Logistic Regression model and evaluate its performance."}),"\n",(0,a.jsx)(t.li,{children:"Prepare the model hyperparameters and calculate metrics for logging."}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.models import infer_signature\n\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n\n# Load the Iris dataset\nX, y = datasets.load_iris(return_X_y=True)\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\n# Define the model hyperparameters\nparams = {\n    "solver": "lbfgs",\n    "max_iter": 1000,\n    "multi_class": "auto",\n    "random_state": 8888,\n}\n\n# Train the model\nlr = LogisticRegression(**params)\nlr.fit(X_train, y_train)\n\n# Predict on the test set\ny_pred = lr.predict(X_test)\n\n# Calculate metrics\naccuracy = accuracy_score(y_test, y_pred)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"step-4---log-the-model-and-its-metadata-to-mlflow",children:"Step 4 - Log the model and its metadata to MLflow"}),"\n",(0,a.jsx)(t.p,{children:"In this next step, we're going to use the model that we trained, the hyperparameters that we specified for the model's fit, and the\nloss metrics that were calculated by evaluating the model's performance on the test data to log to MLflow."}),"\n",(0,a.jsx)(t.p,{children:"The steps that we will take are:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Initiate an MLflow ",(0,a.jsx)(t.strong,{children:"run"})," context to start a new run that we will log the model and metadata to."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Log"})," model ",(0,a.jsx)(t.strong,{children:"parameters"})," and performance ",(0,a.jsx)(t.strong,{children:"metrics"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Tag"})," the run for easy retrieval."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Register"})," the model in the MLflow Model Registry while ",(0,a.jsx)(t.strong,{children:"logging"})," (saving) the model."]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["While it can be valid to wrap the entire code within the ",(0,a.jsx)(t.code,{children:"start_run"})," block, this is ",(0,a.jsx)(t.strong,{children:"not recommended"}),". If there as in issue with the\ntraining of the model or any other portion of code that is unrelated to MLflow-related actions, an empty or partially-logged run will be\ncreated, which will necessitate manual cleanup of the invalid run. It is best to keep the training execution outside of the run context block\nto ensure that the loggable content (parameters, metrics, artifacts, and the model) are fully materialized prior to logging."]})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Set our tracking server uri for logging\nmlflow.set_tracking_uri(uri="http://127.0.0.1:8080")\n\n# Create a new MLflow Experiment\nmlflow.set_experiment("MLflow Quickstart")\n\n# Start an MLflow run\nwith mlflow.start_run():\n    # Log the hyperparameters\n    mlflow.log_params(params)\n\n    # Log the loss metric\n    mlflow.log_metric("accuracy", accuracy)\n\n    # Set a tag that we can use to remind ourselves what this run was for\n    mlflow.set_tag("Training Info", "Basic LR model for iris data")\n\n    # Infer the model signature\n    signature = infer_signature(X_train, lr.predict(X_train))\n\n    # Log the model\n    model_info = mlflow.sklearn.log_model(\n        sk_model=lr,\n        name="iris_model",\n        signature=signature,\n        input_example=X_train,\n        registered_model_name="tracking-quickstart",\n    )\n'})}),"\n",(0,a.jsx)(t.h2,{id:"step-5---load-the-model-as-a-python-function-pyfunc-and-use-it-for-inference",children:"Step 5 - Load the model as a Python Function (pyfunc) and use it for inference"}),"\n",(0,a.jsx)(t.p,{children:"After logging the model, we can perform inference by:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Loading"})," the model using MLflow's ",(0,a.jsx)(t.code,{children:"pyfunc"})," flavor."]}),"\n",(0,a.jsxs)(t.li,{children:["Running ",(0,a.jsx)(t.strong,{children:"Predict"})," on new data using the loaded model."]}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsxs)(t.p,{children:["The iris training data that we used was a numpy array structure. However, we can submit a Pandas DataFrame as well to the ",(0,a.jsx)(t.code,{children:"predict"})," method, as shown\nbelow."]})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'# Load the model back for predictions as a generic Python Function model\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\npredictions = loaded_model.predict(X_test)\n\niris_feature_names = datasets.load_iris().feature_names\n\nresult = pd.DataFrame(X_test, columns=iris_feature_names)\nresult["actual_class"] = y_test\nresult["predicted_class"] = predictions\n\nresult[:4]\n'})}),"\n",(0,a.jsx)(t.p,{children:"The output of this code will look something like this:"}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:"sepal length (cm)"}),(0,a.jsx)("th",{children:"sepal width (cm)"}),(0,a.jsx)("th",{children:"petal length (cm)"}),(0,a.jsx)("th",{children:"petal width (cm)"}),(0,a.jsx)("th",{children:"actual_class"}),(0,a.jsx)("th",{children:"predicted_class"})]})}),(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"6.1"}),(0,a.jsx)("td",{children:"2.8"}),(0,a.jsx)("td",{children:"4.7"}),(0,a.jsx)("td",{children:"1.2"}),(0,a.jsx)("td",{children:"1"}),(0,a.jsx)("td",{children:"1"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"5.7"}),(0,a.jsx)("td",{children:"3.8"}),(0,a.jsx)("td",{children:"1.7"}),(0,a.jsx)("td",{children:"0.3"}),(0,a.jsx)("td",{children:"0"}),(0,a.jsx)("td",{children:"0"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"7.7"}),(0,a.jsx)("td",{children:"2.6"}),(0,a.jsx)("td",{children:"6.9"}),(0,a.jsx)("td",{children:"2.3"}),(0,a.jsx)("td",{children:"2"}),(0,a.jsx)("td",{children:"2"})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:"6.0"}),(0,a.jsx)("td",{children:"2.9"}),(0,a.jsx)("td",{children:"4.5"}),(0,a.jsx)("td",{children:"1.5"}),(0,a.jsx)("td",{children:"1"}),(0,a.jsx)("td",{children:"1"})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"step-6---view-the-run-in-the-mlflow-ui",children:"Step 6 - View the Run in the MLflow UI"}),"\n",(0,a.jsxs)(t.p,{children:["In order to see the results of our run, we can navigate to the MLflow UI. Since we have already started the Tracking Server at\n",(0,a.jsx)(t.em,{children:(0,a.jsx)(t.a,{href:"http://localhost:8080",children:"http://localhost:8080"})}),", we can simply navigate to that URL in our browser."]}),"\n",(0,a.jsx)(t.p,{children:"When opening the site, you will see a screen similar to the following:"}),"\n",(0,a.jsx)("figure",{className:"center-div",style:{width:1024,maxWidth:"100%",textAlign:"center"},children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"MLflow UI Experiment view page",src:n(2888).A+"",width:"1460",height:"408"}),"\n",(0,a.jsx)("figcaption",{children:"The main MLflow Tracking page, showing Experiments that have been created"})]})}),"\n",(0,a.jsxs)(t.p,{children:['Clicking on the name of the Experiment that we created ("MLflow Quickstart") will give us a list of runs associated with the\nExperiment. You should see a random name that has been generated for the run and nothing else show up in the ',(0,a.jsx)(t.code,{children:"Table"})," list view to the right."]}),"\n",(0,a.jsx)(t.p,{children:"Clicking on the name of the run will take you to the Run page, where the details of what we've logged will be shown. The elements have\nbeen highlighted below to show how and where this data is recorded within the UI."}),"\n",(0,a.jsx)("figure",{className:"center-div",style:{width:1024,maxWidth:"100%",textAlign:"center"},children:(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"MLflow UI Run view page",src:n(30862).A+"",width:"1003",height:"1004"}),"\n",(0,a.jsx)("figcaption",{children:"The run view page for our run"})]})}),"\n",(0,a.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(t.p,{children:"Congratulations on working through the MLflow Tracking Quickstart! You should now have a basic understanding of how to use the MLflow Tracking API to log\nmodels."}),"\n",(0,a.jsxs)(t.p,{children:["If you are interested in a more in-depth tutorial, please see the ",(0,a.jsx)(t.a,{href:"/getting-started/logging-first-model",children:"Getting Started with MLflow"})," tutorial as a\ngood next step in increasing your knowledge about MLflow!"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},86294:(e,t,n)=>{n.d(t,{Zp:()=>o,AC:()=>s,WO:()=>c,tf:()=>g,_C:()=>d,$3:()=>h,jK:()=>u});var r=n(34164);const a={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var i=n(56289),l=n(74848);const s=e=>{let{children:t,isSmall:n,cols:i}=e;return(0,l.jsx)("div",{className:(0,r.A)(a.CardGroup,n?a.AutofillColumns:i?a[`Cols${i}`]:a.MaxThreeColumns),children:t})},o=e=>{let{children:t,link:n=""}=e;return n?(0,l.jsx)(i.A,{className:(0,r.A)(a.Link,a.Card,a.CardBordered),to:n,children:t}):(0,l.jsx)("div",{className:(0,r.A)(a.Card,a.CardBordered),children:t})},d=e=>{let{headerText:t,link:n,text:i}=e;return(0,l.jsx)(o,{link:n,children:(0,l.jsxs)("span",{children:[(0,l.jsx)("div",{className:(0,r.A)(a.CardTitle,a.BoxRoot,a.PaddingBottom4),style:{pointerEvents:"none"},children:(0,l.jsx)("div",{className:(0,r.A)(a.BoxRoot,a.FlexFlex,a.FlexAlignItemsCenter,a.FlexDirectionRow,a.FlexJustifyContentFlexStart,a.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,l.jsx)("div",{className:(0,r.A)(a.BoxRoot,a.BoxHideIfEmpty,a.MarginTop4,a.MarginLeft4),style:{pointerEvents:"auto"},children:(0,l.jsx)("span",{className:"",children:t})})})}),(0,l.jsx)("span",{className:(0,r.A)(a.TextColor,a.CardBody),children:(0,l.jsx)("p",{children:i})})]})})},c=e=>{let{description:t,children:n,link:r}=e;return(0,l.jsx)(o,{link:r,children:(0,l.jsxs)("div",{className:a.LogoCardContent,children:[(0,l.jsx)("div",{className:a.LogoCardImage,children:n}),(0,l.jsx)("p",{className:a.TextColor,children:t})]})})},h=e=>{let{children:t,link:n}=e;return(0,l.jsx)(o,{link:n,children:(0,l.jsx)("div",{className:a.SmallLogoCardContent,children:(0,l.jsx)("div",{className:(0,r.A)("max-height-img-container",a.SmallLogoCardImage),children:t})})})},g=e=>{let{children:t,description:n,name:r,releaseVersion:s,learnMoreLink:d=""}=e;return(0,l.jsx)(o,{children:(0,l.jsxs)("div",{className:a.NewFeatureCardWrapper,children:[(0,l.jsxs)("div",{className:a.NewFeatureCardContent,children:[(0,l.jsxs)("div",{className:a.NewFeatureCardHeading,children:[r,(0,l.jsx)("br",{}),(0,l.jsx)("hr",{className:a.NewFeatureCardHeadingSeparator})]}),(0,l.jsx)("div",{className:a.LogoCardImage,children:t}),(0,l.jsx)("br",{}),(0,l.jsx)("p",{children:n}),(0,l.jsx)("br",{})]}),(0,l.jsxs)("div",{className:a.NewFeatureCardTags,children:[(0,l.jsx)("div",{children:d&&(0,l.jsx)(i.A,{className:"button button--outline button--sm button--primary",to:d,children:"Learn more"})}),(0,l.jsxs)(i.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${s}`,children:["released in ",s]})]})]})})},u=e=>{let{title:t,description:n,link:i=""}=e;return(0,l.jsx)(o,{link:i,children:(0,l.jsxs)("div",{className:a.TitleCardContent,children:[(0,l.jsx)("div",{className:(0,r.A)(a.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:t}),(0,l.jsx)("hr",{className:(0,r.A)(a.TitleCardSeparator),style:{margin:"12px 0"}}),(0,l.jsx)("p",{className:(0,r.A)(a.TextColor),children:n})]})})}}}]);