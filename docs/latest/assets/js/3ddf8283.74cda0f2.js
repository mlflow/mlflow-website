"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2029],{7964:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/langchain_model_from_code-8813a0926cbf8c6d8d03b2fe5dcd6d91.png"},8432:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"model/models-from-code/index","title":"Models From Code","description":"Models from Code is available in MLflow 2.12.2 and above. For earlier versions, use the legacy serialization methods outlined in the Custom Python Model documentation.","source":"@site/docs/classic-ml/model/models-from-code/index.mdx","sourceDirName":"model/models-from-code","slug":"/model/models-from-code/","permalink":"/docs/latest/ml/model/models-from-code/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"classicMLSidebar","previous":{"title":"Dependency Management","permalink":"/docs/latest/ml/model/dependencies/"},"next":{"title":"Custom Python Model","permalink":"/docs/latest/ml/model/python_model"}}');var o=l(74848),t=l(28453),r=(l(28774),l(11470)),a=l(19365),s=l(49374);const d={sidebar_position:3},c="Models From Code",m={},p=[{value:"Why Models From Code?",id:"why-models-from-code",level:2},{value:"Key Advantages",id:"key-advantages",level:3},{value:"Core Requirements",id:"core-requirements",level:2},{value:"Script Execution",id:"script-execution",level:3},{value:"Import Management",id:"import-management",level:3},{value:"External Dependencies",id:"external-dependencies",level:3},{value:"Development in Jupyter Notebooks",id:"development-in-jupyter-notebooks",level:2},{value:"Using %%writefile",id:"using-writefile",level:3},{value:"Best Practices for Jupyter",id:"best-practices-for-jupyter",level:3},{value:"Examples and Patterns",id:"examples-and-patterns",level:2},{value:"Creating the Model Script",id:"creating-the-model-script",level:3},{value:"Logging the Model",id:"logging-the-model",level:3},{value:"Using the Model",id:"using-the-model",level:3},{value:"Creating Helper Functions",id:"creating-helper-functions",level:3},{value:"Creating the Main Model",id:"creating-the-main-model",level:3},{value:"Logging with Dependencies",id:"logging-with-dependencies",level:3},{value:"Testing the Multi-Function Model",id:"testing-the-multi-function-model",level:3},{value:"Creating a LangChain Model",id:"creating-a-langchain-model",level:3},{value:"Logging the LangChain Model",id:"logging-the-langchain-model",level:3},{value:"Using the LangChain Model",id:"using-the-langchain-model",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"NameError When Loading Models",id:"nameerror-when-loading-models",level:3},{value:"ImportError with External Dependencies",id:"importerror-with-external-dependencies",level:3},{value:"Bloated Requirements File",id:"bloated-requirements-file",level:3},{value:"Accidentally Included Sensitive Data",id:"accidentally-included-sensitive-data",level:3},{value:"Model Execution During Logging",id:"model-execution-during-logging",level:3},{value:"Optimizing Model Loading",id:"optimizing-model-loading",level:3},{value:"Minimizing Dependencies",id:"minimizing-dependencies",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Migration from Legacy Serialization",id:"migration-from-legacy-serialization",level:2},{value:"Before (Legacy)",id:"before-legacy",level:3},{value:"After (Models from Code)",id:"after-models-from-code",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"models-from-code",children:"Models From Code"})}),"\n",(0,o.jsx)(n.admonition,{title:"availability",type:"info",children:(0,o.jsxs)(n.p,{children:["Models from Code is available in MLflow 2.12.2 and above. For earlier versions, use the legacy serialization methods outlined in the ",(0,o.jsx)(n.a,{href:"/ml/model#custom-python-models",children:"Custom Python Model"})," documentation."]})}),"\n",(0,o.jsx)(n.admonition,{title:"target use cases",type:"note",children:(0,o.jsxs)(n.p,{children:["Models from Code is designed for models without optimized weights (GenAI Agents, applications, custom logic). For traditional ML/DL models with trained weights, use the built-in ",(0,o.jsx)(n.code,{children:"log_model()"})," APIs or custom ",(0,o.jsx)(n.code,{children:"PythonModel"})," with ",(0,o.jsx)(n.code,{children:"mlflow.pyfunc.log_model()"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"Models from Code transforms how you define, store, and load custom models and applications. Instead of relying on complex serialization, it saves your model as readable Python scripts, making development more transparent and debugging significantly easier."}),"\n",(0,o.jsx)(n.h2,{id:"why-models-from-code",children:"Why Models From Code?"}),"\n",(0,o.jsx)(n.p,{children:"The key difference lies in how models are represented during serialization:"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Legacy Approach"})," - Serializes model objects using ",(0,o.jsx)(n.code,{children:"cloudpickle"})," or custom serializers, creating binary files that can be difficult to debug and have compatibility limitations."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Models From Code"})," - Saves simple Python scripts with your model definition, making them readable, debuggable, and portable across environments."]}),"\n",(0,o.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Models from code comparison with legacy serialization",src:l(23316).A+"",width:"1305",height:"1072"})})}),"\n",(0,o.jsx)(n.h3,{id:"key-advantages",children:"Key Advantages"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Transparency and Readability"})," - Your model code is stored as plain Python scripts, making it easy to understand and debug directly in the MLflow UI."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Reduced Debugging Complexity"})," - No more trial-and-error with serialization issues. What you write is exactly what gets executed."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Better Compatibility"})," - Eliminates pickle/cloudpickle limitations like Python version dependencies, complex object serialization issues, and performance bottlenecks."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Enhanced Security"})," - Human-readable code makes it easier to audit and verify model behavior before deployment."]}),"\n",(0,o.jsx)(n.h2,{id:"core-requirements",children:"Core Requirements"}),"\n",(0,o.jsx)(n.p,{children:"Understanding these key concepts will help you use Models from Code effectively:"}),"\n",(0,o.jsx)(n.h3,{id:"script-execution",children:"Script Execution"}),"\n",(0,o.jsx)(n.p,{children:"Your model script is executed during logging to validate correctness. Ensure any external dependencies or authentication are properly configured in your logging environment."}),"\n",(0,o.jsx)(n.h3,{id:"import-management",children:"Import Management"}),"\n",(0,o.jsx)(n.p,{children:"Only include imports you actually use. MLflow infers requirements from all top-level imports, so unused imports will unnecessarily bloat your model's dependencies."}),"\n",(0,o.jsx)(n.h3,{id:"external-dependencies",children:"External Dependencies"}),"\n",(0,o.jsxs)(n.p,{children:["Non-pip installable packages must be specified via ",(0,o.jsx)(n.code,{children:"code_paths"}),". The system doesn't automatically capture external references beyond standard package imports."]}),"\n",(0,o.jsx)(n.admonition,{title:"development workflow",type:"tip",children:(0,o.jsx)(n.p,{children:"Use a linter to identify unused imports while developing. This keeps your model's requirements clean and deployment lightweight."})}),"\n",(0,o.jsx)(n.admonition,{title:"security consideration",type:"warning",children:(0,o.jsx)(n.p,{children:"Model code is stored in plain text. Never include sensitive information like API keys or passwords in your scripts. Use environment variables or secure configuration management instead."})}),"\n",(0,o.jsx)(n.h2,{id:"development-in-jupyter-notebooks",children:"Development in Jupyter Notebooks"}),"\n",(0,o.jsxs)(n.p,{children:["Jupyter notebooks are excellent for AI development, but Models from Code requires Python scripts (",(0,o.jsx)(n.code,{children:".py"})," files). Fortunately, IPython's ",(0,o.jsx)(n.code,{children:"%%writefile"})," magic command bridges this gap perfectly."]}),"\n",(0,o.jsx)(n.h3,{id:"using-writefile",children:"Using %%writefile"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"%%writefile"})," magic command captures cell contents and writes them to a file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# %%writefile "./hello.py"  # Uncomment to create the file locally\n\nprint("hello!")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This creates a ",(0,o.jsx)(n.code,{children:"hello.py"})," file containing:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'print("hello!")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"best-practices-for-jupyter",children:"Best Practices for Jupyter"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Overwrite, Don't Append"})," - Use the default ",(0,o.jsx)(n.code,{children:"%%writefile"})," behavior rather than the ",(0,o.jsx)(n.code,{children:"-a"})," append option to avoid duplicate code and debugging confusion."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Cell-by-Cell Development"})," - Each ",(0,o.jsx)(n.code,{children:"%%writefile"})," cell creates one script file. This keeps your model definition clean and focused."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Immediate Testing"})," - You can run your generated script immediately after writing it to verify it works correctly."]}),"\n",(0,o.jsx)(n.h2,{id:"examples-and-patterns",children:"Examples and Patterns"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsxs)(a.A,{label:"Simple Custom Model",value:"simple-example",default:!0,children:[(0,o.jsx)(n.p,{children:"This example demonstrates the basics of Models from Code with a simple mathematical model."}),(0,o.jsx)(n.h3,{id:"creating-the-model-script",children:"Creating the Model Script"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter notebook, uncomment the next line:\n# %%writefile "./basic.py"\n\nimport pandas as pd\nfrom typing import List, Dict\nfrom mlflow.pyfunc import PythonModel\nfrom mlflow.models import set_model\n\n\nclass BasicModel(PythonModel):\n    def exponential(self, numbers):\n        return {f"{x}": 2**x for x in numbers}\n\n    def predict(self, context, model_input) -> Dict[str, float]:\n        if isinstance(model_input, pd.DataFrame):\n            model_input = list(model_input.iloc[0].values())\n        return self.exponential(model_input)\n\n\n# This tells MLflow which object to use for inference\nset_model(BasicModel())\n'})}),(0,o.jsx)(n.h3,{id:"logging-the-model",children:"Logging the Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Basic Model From Code")\n\nmodel_info = mlflow.pyfunc.log_model(\n    python_model="basic.py",  # Path to your script\n    name="arithmetic_model",\n    input_example=[42.0, 24.0],\n)\n'})}),(0,o.jsx)(n.h3,{id:"using-the-model",children:"Using the Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# Load and use the model\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\n# Make predictions\nresult = loaded_model.predict([2.2, 3.1, 4.7])\nprint(result)  # {'2.2': 4.59, '3.1': 8.57, '4.7': 25.99}\n"})}),(0,o.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"The MLflow UI showing the stored model code as a serialized python script",src:l(8664).A+"",width:"1672",height:"756"})})})]}),(0,o.jsxs)(a.A,{label:"Multi-File Dependencies",value:"models-with-code-paths-dependencies",children:[(0,o.jsxs)(n.p,{children:["This example shows how to work with multiple Python files using the ",(0,o.jsx)(n.code,{children:"code_paths"})," feature."]}),(0,o.jsx)(n.h3,{id:"creating-helper-functions",children:"Creating Helper Functions"}),(0,o.jsx)(n.p,{children:"First, create a utility file with shared functions:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter notebook, uncomment the next line:\n# %%writefile "./calculator.py"\n\n\ndef add(x, y):\n    return x + y\n\n\ndef multiply(x, y):\n    return x * y\n\n\ndef calculate_compound_interest(principal, rate, time):\n    return principal * (1 + rate) ** time\n'})}),(0,o.jsx)(n.h3,{id:"creating-the-main-model",children:"Creating the Main Model"}),(0,o.jsx)(n.p,{children:"Next, create your model that uses the helper functions:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter notebook, uncomment the next line:\n# %%writefile "./math_model.py"\n\nfrom mlflow.pyfunc import PythonModel\nfrom mlflow.models import set_model\nfrom calculator import add, multiply, calculate_compound_interest\n\n\nclass MathModel(PythonModel):\n    def predict(self, context, model_input, params=None):\n        operation = model_input.get("operation", "add")\n\n        if operation == "add":\n            return add(model_input["x"], model_input["y"])\n        elif operation == "multiply":\n            return multiply(model_input["x"], model_input["y"])\n        elif operation == "compound_interest":\n            return calculate_compound_interest(\n                model_input["principal"], model_input["rate"], model_input["time"]\n            )\n        else:\n            raise ValueError(f"Unknown operation: {operation}")\n\n\nset_model(MathModel())\n'})}),(0,o.jsx)(n.h3,{id:"logging-with-dependencies",children:"Logging with Dependencies"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Math Model From Code")\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        python_model="math_model.py",\n        name="math_model",\n        code_paths=["calculator.py"],  # Include dependency\n        input_example={"operation": "add", "x": 5, "y": 3},\n    )\n'})}),(0,o.jsx)(n.h3,{id:"testing-the-multi-function-model",children:"Testing the Multi-Function Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'loaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\n# Test different operations\nprint(loaded_model.predict({"operation": "add", "x": 10, "y": 5}))  # 15\nprint(loaded_model.predict({"operation": "multiply", "x": 4, "y": 7}))  # 28\nprint(\n    loaded_model.predict(\n        {"operation": "compound_interest", "principal": 1000, "rate": 0.05, "time": 10}\n    )\n)  # 1628.89\n'})}),(0,o.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"The MLflow UI showing models from code usage along with dependent code_paths script stored in the model artifacts",src:l(9605).A+"",width:"1682",height:"577"})})})]}),(0,o.jsxs)(a.A,{label:"LangChain Integration",value:"models-from-code-with-langchain",children:[(0,o.jsx)(n.p,{children:"This example demonstrates MLflow's native LangChain Models from Code support for building AI applications."}),(0,o.jsx)(n.h3,{id:"creating-a-langchain-model",children:"Creating a LangChain Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# If running in a Jupyter notebook, uncomment the next line:\n# %%writefile "./landscape_advisor.py"\n\nimport os\nfrom operator import itemgetter\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.runnables import RunnableLambda\nfrom langchain_openai import ChatOpenAI\nimport mlflow\n\n\ndef get_region(input_data):\n    """Extract region from input, with fallback default."""\n    default = "Virginia, USA"\n    if isinstance(input_data[0], dict):\n        return input_data[0].get("content", {}).get("region", default)\n    return default\n\n\ndef get_area(input_data):\n    """Extract area from input, with fallback default."""\n    default = "5000 square feet"\n    if isinstance(input_data[0], dict):\n        return input_data[0].get("content", {}).get("area", default)\n    return default\n\n\n# Define the prompt template\nprompt = PromptTemplate(\n    template="""You are a highly accomplished landscape designer providing suggestions\n    for landscape design decisions in a particular geographic region.\n\n    Your goal is to suggest low-maintenance hardscape and landscape options using\n    materials and plants native to the specified region. Include a general cost\n    estimate based on the square footage provided.\n\n    Region: {region}\n    Square Footage: {area}\n\n    Provide recommendations for a moderately sophisticated suburban housing community.""",\n    input_variables=["region", "area"],\n)\n\n# Initialize the language model\nmodel = ChatOpenAI(model="gpt-4o", temperature=0.95, max_tokens=4096)\n\n# Create the chain using LangChain Expression Language (LCEL)\nchain = (\n    {\n        "region": itemgetter("messages") | RunnableLambda(get_region),\n        "area": itemgetter("messages") | RunnableLambda(get_area),\n    }\n    | prompt\n    | model\n    | StrOutputParser()\n)\n\n# Set this chain as the model\nmlflow.models.set_model(chain)\n'})}),(0,o.jsx)(n.h3,{id:"logging-the-langchain-model",children:"Logging the LangChain Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_experiment("Landscape Design Advisor")\n\ninput_example = {\n    "messages": [\n        {\n            "role": "user",\n            "content": {\n                "region": "Austin, TX, USA",\n                "area": "1750 square feet",\n            },\n        }\n    ]\n}\n\nwith mlflow.start_run():\n    model_info = mlflow.langchain.log_model(\n        lc_model="landscape_advisor.py",  # Path to your script\n        name="landscape_chain",\n        input_example=input_example,\n    )\n'})}),(0,o.jsx)(n.h3,{id:"using-the-langchain-model",children:"Using the LangChain Model"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Load the model\nlandscape_advisor = mlflow.langchain.load_model(model_info.model_uri)\n\n# Create a query\nquery = {\n    "messages": [\n        {\n            "role": "user",\n            "content": {\n                "region": "Raleigh, North Carolina USA",\n                "area": "3850 square feet",\n            },\n        },\n    ]\n}\n\n# Get landscape recommendations\nresponse = landscape_advisor.invoke(query)\nprint(response)\n'})}),(0,o.jsx)("div",{className:"center-div",style:{width:"80%"},children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"The MLflow UI showing models from code usage and the mfc.py script that defines the LangChain LCEL chain definition",src:l(7964).A+"",width:"1678",height:"954"})})})]})]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,o.jsxs)(r.A,{children:[(0,o.jsxs)(a.A,{value:"dependency-issues",label:"Dependency Management",default:!0,children:[(0,o.jsx)(n.h3,{id:"nameerror-when-loading-models",children:"NameError When Loading Models"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Getting ",(0,o.jsx)(n.code,{children:"NameError"})," when loading your saved model."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Ensure all required imports are defined within your model script:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# \u274c Bad - imports missing in script\ndef predict(self, context, model_input):\n    return pd.DataFrame(model_input)  # NameError: pd not defined\n\n\n# \u2705 Good - imports included\nimport pandas as pd\n\n\ndef predict(self, context, model_input):\n    return pd.DataFrame(model_input)\n"})}),(0,o.jsx)(n.h3,{id:"importerror-with-external-dependencies",children:"ImportError with External Dependencies"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": ",(0,o.jsx)(n.code,{children:"ImportError"})," when loading models with external dependencies."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Use ",(0,o.jsx)(n.code,{children:"code_paths"})," for non-PyPI dependencies:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'mlflow.pyfunc.log_model(\n    python_model="my_model.py",\n    name="model",\n    code_paths=["utils.py", "helpers/"],  # Include external files\n    extra_pip_requirements=["custom-package==1.0.0"],  # Manual requirements\n)\n'})}),(0,o.jsx)(n.h3,{id:"bloated-requirements-file",children:"Bloated Requirements File"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": ",(0,o.jsx)(n.code,{children:"requirements.txt"})," contains unnecessary packages."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Solution"}),": Clean up your imports to only include what you use:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# \u274c Bad - unused imports\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport torch\nfrom sklearn.ensemble import RandomForestClassifier\n\n\ndef predict(self, context, model_input):\n    return {"result": model_input * 2}  # Only uses basic operations\n\n\n# \u2705 Good - minimal imports\ndef predict(self, context, model_input):\n    return {"result": model_input * 2}\n'})})]}),(0,o.jsxs)(a.A,{value:"security-logging",label:"Security & Logging",children:[(0,o.jsx)(n.h3,{id:"accidentally-included-sensitive-data",children:"Accidentally Included Sensitive Data"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": API keys or secrets were included in your model script."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Immediate Actions"}),":"]}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Delete the MLflow run: Use the UI or ",(0,o.jsxs)(s.B,{fn:"mlflow.client.MlflowClient.delete_run",children:[(0,o.jsx)(n.code,{children:"delete_run()"})," API"]})]}),"\n",(0,o.jsxs)(n.li,{children:["Clean up artifacts: Run ",(0,o.jsx)(n.code,{children:"mlflow gc"})," CLI command"]}),"\n",(0,o.jsx)(n.li,{children:"Rotate compromised credentials"}),"\n",(0,o.jsx)(n.li,{children:"Re-log the model with proper security practices"}),"\n"]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Prevention"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# \u274c Bad - hardcoded secrets\napi_key = "sk-abc123..."\nmodel = ChatOpenAI(api_key=api_key)\n\n# \u2705 Good - environment variables\nimport os\n\nmodel = ChatOpenAI(api_key=os.getenv("OPENAI_API_KEY"))\n'})}),(0,o.jsx)(n.h3,{id:"model-execution-during-logging",children:"Model Execution During Logging"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Problem"}),": Your model makes external calls during logging."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Explanation"}),": MLflow validates your code by executing it. Ensure your logging environment has proper authentication configured."]}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Best Practice"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Handle authentication gracefully\ntry:\n    # External service calls during initialization\n    client = ExternalService(api_key=os.getenv("API_KEY"))\n    client.validate_connection()\nexcept Exception as e:\n    print(f"Warning: Could not validate external service: {e}")\n    # Continue with model definition\n'})})]}),(0,o.jsxs)(a.A,{value:"performance-tips",label:"Performance Optimization",children:[(0,o.jsx)(n.h3,{id:"optimizing-model-loading",children:"Optimizing Model Loading"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Lazy Loading"}),": Initialize expensive resources only when needed:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"class OptimizedModel(PythonModel):\n    def __init__(self):\n        self._expensive_resource = None\n\n    @property\n    def expensive_resource(self):\n        if self._expensive_resource is None:\n            self._expensive_resource = load_expensive_model()\n        return self._expensive_resource\n\n    def predict(self, context, model_input):\n        return self.expensive_resource.predict(model_input)\n"})}),(0,o.jsx)(n.h3,{id:"minimizing-dependencies",children:"Minimizing Dependencies"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Conditional Imports"}),": Only import what you need for specific operations:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def predict(self, context, model_input):\n    operation = model_input.get("type", "simple")\n\n    if operation == "complex":\n        import tensorflow as tf  # Only import when needed\n\n        return self._tensorflow_predict(model_input)\n    else:\n        return self._simple_predict(model_input)\n'})}),(0,o.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Resource Cleanup"}),": Properly manage resources in your model:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class ResourceManagedModel(PythonModel):\n    def __enter__(self):\n        self.connection = create_connection()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if hasattr(self, "connection"):\n            self.connection.close()\n\n    def predict(self, context, model_input):\n        # Use self.connection for predictions\n        pass\n'})})]})]}),"\n",(0,o.jsx)(n.h2,{id:"migration-from-legacy-serialization",children:"Migration from Legacy Serialization"}),"\n",(0,o.jsx)(n.p,{children:"If you're currently using legacy model serialization, here's how to migrate:"}),"\n",(0,o.jsx)(n.h3,{id:"before-legacy",children:"Before (Legacy)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class MyModel(mlflow.pyfunc.PythonModel):\n    def predict(self, context, model_input):\n        return model_input * 2\n\n\n# Log object instance\nmodel_instance = MyModel()\nmlflow.pyfunc.log_model(python_model=model_instance, name="model")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"after-models-from-code",children:"After (Models from Code)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Save as script: my_model.py\n# %%writefile "./my_model.py"\nimport mlflow\nfrom mlflow.pyfunc import PythonModel\nfrom mlflow.models import set_model\n\n\nclass MyModel(PythonModel):\n    def predict(self, context, model_input):\n        return model_input * 2\n\n\nset_model(MyModel())\n\n# Log script path\nmlflow.pyfunc.log_model(python_model="my_model.py", name="model")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Code Organization"})}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Keep model scripts focused and minimal"}),(0,o.jsx)("li",{children:"Use descriptive names for model files and functions"}),(0,o.jsxs)("li",{children:["Organize related functionality into separate modules using ",(0,o.jsx)("code",{children:"code_paths"})]})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Security"})}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Never hardcode sensitive information in model scripts"}),(0,o.jsx)("li",{children:"Use environment variables for configuration"}),(0,o.jsx)("li",{children:"Review code before logging to ensure no secrets are included"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Performance"})}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsx)("li",{children:"Import only what you need to minimize dependencies"}),(0,o.jsx)("li",{children:"Use lazy loading for expensive resources"}),(0,o.jsx)("li",{children:"Consider memory management for long-running models"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Development Workflow"})}),"\n",(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:["Use ",(0,o.jsx)("code",{children:"%%writefile"})," in Jupyter for rapid prototyping"]}),(0,o.jsx)("li",{children:"Test your scripts independently before logging"}),(0,o.jsx)("li",{children:"Use linters to catch unused imports and other issues"})]}),"\n",(0,o.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsx)(n.p,{children:"For more information on related topics:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/ml/model#model-api",children:"Model API Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/ml/model/dependencies",children:"Managing Dependencies in MLflow Models"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/ml/model#custom-python-models",children:"Custom Python Models"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8664:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/basic_model_from_code_ui-d31f6ac1bd0841c97400f569fdb779cb.png"},9605:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/model_from_code_code_paths-3b33bcd962d79ed834c40fa25fa14988.png"},11470:(e,n,l)=>{l.d(n,{A:()=>v});var i=l(96540),o=l(34164),t=l(23104),r=l(56347),a=l(205),s=l(57485),d=l(31682),c=l(70679);function m(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:l}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:l,default:i}})=>({value:e,label:n,attributes:l,default:i})))}(l);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,l])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const l=(0,r.W6)(),o=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s.aZ)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(l.location.search);n.set(o,e),l.replace({...l.location,search:n.toString()})}),[o,l])]}function f(e){const{defaultValue:n,queryString:l=!1,groupId:o}=e,t=p(e),[r,s]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:n,tabValues:t}))),[d,m]=u({queryString:l,groupId:o}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[l,o]=(0,c.Dv)(n);return[l,(0,i.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:o}),x=(()=>{const e=d??f;return h({value:e,tabValues:t})?e:null})();(0,a.A)((()=>{x&&s(x)}),[x]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),g(e)}),[m,g,t]),tabValues:t}}var g=l(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=l(74848);function _({className:e,block:n,selectedValue:l,selectValue:i,tabValues:r}){const a=[],{blockElementScrollPositionUntilNextRender:s}=(0,t.a_)(),d=e=>{const n=e.currentTarget,o=a.indexOf(n),t=r[o].value;t!==l&&(s(n),i(t))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const l=a.indexOf(e.currentTarget)+1;n=a[l]??a[0];break}case"ArrowLeft":{const l=a.indexOf(e.currentTarget)-1;n=a[l]??a[a.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},e),children:r.map((({value:e,label:n,attributes:i})=>(0,y.jsx)("li",{role:"tab",tabIndex:l===e?0:-1,"aria-selected":l===e,ref:e=>{a.push(e)},onKeyDown:c,onClick:d,...i,className:(0,o.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":l===e}),children:n??e},e)))})}function w({lazy:e,children:n,selectedValue:l}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===l));return e?(0,i.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function j(e){const n=f(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,y.jsx)(_,{...n,...e}),(0,y.jsx)(w,{...n,...e})]})}function v(e){const n=(0,g.A)();return(0,y.jsx)(j,{...e,children:m(e.children)},String(n))}},19365:(e,n,l)=>{l.d(n,{A:()=>r});l(96540);var i=l(34164);const o={tabItem:"tabItem_Ymn6"};var t=l(74848);function r({children:e,hidden:n,className:l}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,i.A)(o.tabItem,l),hidden:n,children:e})}},23316:(e,n,l)=>{l.d(n,{A:()=>i});const i=l.p+"assets/images/models_from_code_journey-de9843c474c53ab2434d43a56b6ac3be.png"},28453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>a});var i=l(96540);const o={},t=i.createContext(o);function r(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(t.Provider,{value:n},e.children)}},49374:(e,n,l)=>{l.d(n,{B:()=>s});l(96540);const i=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=l(86025),t=l(28774),r=l(74848);const a=e=>{const n=e.split(".");for(let l=n.length;l>0;l--){const e=n.slice(0,l).join(".");if(i[e])return e}return null};function s({fn:e,children:n}){const l=a(e);if(!l)return(0,r.jsx)(r.Fragment,{children:n});const s=(0,o.Ay)(`/${i[l]}#${e}`);return(0,r.jsx)(t.A,{to:s,target:"_blank",children:n??(0,r.jsxs)("code",{children:[e,"()"]})})}}}]);