"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5499],{6922:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"deep-learning/transformers/tutorials/conversational/pyfunc-chat-model-ipynb","title":"Deploying a Transformer model as an OpenAI-compatible Chatbot","description":"Download this notebook","source":"@site/docs/classic-ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model-ipynb.mdx","sourceDirName":"deep-learning/transformers/tutorials/conversational","slug":"/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model.ipynb","slug":"pyfunc-chat-model"},"sidebar":"classicMLSidebar","previous":{"title":"Introduction to Conversational Models","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/conversational/conversational-model"},"next":{"title":"Introduction to Fine Tuning","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/fine-tuning/transformers-fine-tuning"}}');var s=t(74848),r=t(28453),i=t(75983),a=t(16581),l=(t(81226),t(27594));const d={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model.ipynb",slug:"pyfunc-chat-model"},c="Deploying a Transformer model as an OpenAI-compatible Chatbot",h={},p=[{value:"Learning objectives",id:"learning-objectives",level:3},{value:"Building a Chat Model",id:"building-a-chat-model",level:3},{value:"Serving the Chat Model",id:"serving-the-chat-model",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"What&#39;s next?",id:"whats-next",level:3}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"deploying-a-transformer-model-as-an-openai-compatible-chatbot",children:"Deploying a Transformer model as an OpenAI-compatible Chatbot"})}),"\n",(0,s.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/conversational/pyfunc-chat-model.ipynb",children:"Download this notebook"}),"\n",(0,s.jsxs)(n.p,{children:["Welcome to our tutorial on using Transformers and MLflow to create an OpenAI-compatible chat model. In MLflow 2.11 and up, MLflow's Transformers flavors support special task type ",(0,s.jsx)(n.code,{children:"llm/v1/chat"}),", which turns thousands of ",(0,s.jsx)(n.a,{href:"https://huggingface.co/models?pipeline_tag=text-generation",children:"text-generation"})," models on Hugging Face into conversational chat bots that are interoperable with OpenAI models. This enables you to seamlessly swap out your chat app\u2019s backing LLM or to easily evaluate different models without having to edit your client-side code."]}),"\n",(0,s.jsxs)(n.p,{children:["If you haven't already seen it, you may find it helpful to go through our ",(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deep-learning/transformers/tutorials/conversational/conversational-model.html",children:"introductory notebook on chat and Transformers"})," before proceeding with this one, as this notebook is slightly higher-level and does not delve too deeply into the inner workings of Transformers or MLflow Tracking."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": This page covers how to deploy a ",(0,s.jsx)(n.strong,{children:"Transformers"})," models as a chatbot. If you are using a different framework or a custom python model, use ",(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/genai/chat-model-intro/index.html",children:"ChatModel"})," instead to build an OpenAI-compatible chat bot."]}),"\n",(0,s.jsx)(n.h3,{id:"learning-objectives",children:"Learning objectives"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial, you will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Create an OpenAI-compatible chat model using TinyLLama-1.1B-Chat"}),"\n",(0,s.jsx)(n.li,{children:"Log the model to MLflow and load it back for local inference."}),"\n",(0,s.jsx)(n.li,{children:"Serve the model with MLflow Model Serving"}),"\n"]}),"\n",(0,s.jsx)(i.d,{executionCount:" ",children:"%pip install mlflow>=2.11.0 -q -U\n# OpenAI-compatible chat model support is available for Transformers 4.34.0 and above\n%pip install transformers>=4.34.0 -q -U"}),"\n",(0,s.jsx)(i.d,{executionCount:1,children:'# Disable tokenizers warnings when constructing pipelines\n%env TOKENIZERS_PARALLELISM=false\n\nimport warnings\n\n# Disable a few less-than-useful UserWarnings from setuptools and pydantic\nwarnings.filterwarnings("ignore", category=UserWarning)'}),"\n",(0,s.jsx)(a.p,{children:"env: TOKENIZERS_PARALLELISM=false"}),"\n",(0,s.jsx)(n.h3,{id:"building-a-chat-model",children:"Building a Chat Model"}),"\n",(0,s.jsxs)(n.p,{children:["MLflow's native Transformers integration allows you to specify the ",(0,s.jsx)(n.code,{children:"task"})," param when saving or logging your pipelines. Originally, this param accepts any of the ",(0,s.jsx)(n.a,{href:"https://huggingface.co/tasks",children:"Transformers pipeline task types"}),", but the ",(0,s.jsx)(n.code,{children:"mlflow.transformers"})," flavor adds a few more MLflow-specific keys for ",(0,s.jsx)(n.code,{children:"text-generation"})," pipeline types."]}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"text-generation"})," pipelines, instead of specifying ",(0,s.jsx)(n.code,{children:"text-generation"})," as the task type, you can provide one of two string literals conforming to the ",(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deployments/index.html#general-configuration-parameters",children:"MLflow AI Gateway's endpoint_type specification"}),' ("llm/v1/embeddings" can be specified as a task on models saved with ',(0,s.jsx)(n.code,{children:"mlflow.sentence_transformers"}),"):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'"llm/v1/chat" for chat-style applications'}),"\n",(0,s.jsx)(n.li,{children:'"llm/v1/completions" for generic completions'}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When one of these keys is specified, MLflow will automatically handle everything required to serve a chat or completions model. This includes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Setting a chat/completions compatible signature on the model"}),"\n",(0,s.jsxs)(n.li,{children:["Performing data pre- and post-processing to ensure the inputs and outputs conform to the ",(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deployments/index.html#chat",children:"Chat/Completions API spec"}),", which is compatible with OpenAI's API spec."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note that these modifications only apply when the model is loaded with ",(0,s.jsx)(n.code,{children:"mlflow.pyfunc.load_model()"})," (e.g. when serving the model with the ",(0,s.jsx)(n.code,{children:"mlflow models serve"})," CLI tool). If you want to load just the base pipeline, you can always do so via ",(0,s.jsx)(n.code,{children:"mlflow.transformers.load_model()"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"In the next few cells, we'll learn how serve a chat model with a local Transformers pipeline and MLflow, using TinyLlama-1.1B-Chat as an example."}),"\n",(0,s.jsx)(n.p,{children:"To begin, let's go through the original flow of saving a text generation pipeline:"}),"\n",(0,s.jsx)(i.d,{executionCount:27,children:'from transformers import pipeline\n\nimport mlflow\n\ngenerator = pipeline(\n  "text-generation",\n  model="TinyLlama/TinyLlama-1.1B-Chat-v1.0",\n)\n\n# save the model using the vanilla `text-generation` task type\nmlflow.transformers.save_model(\n  path="tinyllama-text-generation", transformers_model=generator, task="text-generation"\n)'}),"\n",(0,s.jsx)(a.p,{isStderr:!0,children:"/var/folders/qd/9rwd0_gd0qs65g4sdqlm51hr0000gp/T/ipykernel_55429/4268198845.py:11: FutureWarning: The 'transformers' MLflow Models integration is known to be compatible with the following package version ranges: ``4.25.1`` -  ``4.37.1``. MLflow Models integrations with transformers may not succeed when used with package versions outside of this range.\nmlflow.transformers.save_model("}),"\n",(0,s.jsxs)(n.p,{children:["Now, let's load the model and use it for inference. Our loaded model is a ",(0,s.jsx)(n.code,{children:"text-generation"})," pipeline, and let's take a look at its signature to see its expected inputs and outputs."]}),"\n",(0,s.jsx)(i.d,{executionCount:28,children:'# load the model for inference\nmodel = mlflow.pyfunc.load_model("tinyllama-text-generation")\n\nmodel.metadata.signature'}),"\n",(0,s.jsx)(a.p,{children:"Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"}),"\n",(0,s.jsx)(a.p,{isStderr:!0,children:"2024/02/26 21:06:51 WARNING mlflow.transformers: Could not specify device parameter for this pipeline type"}),"\n",(0,s.jsx)(a.p,{children:"Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"}),"\n",(0,s.jsx)(a.p,{children:"inputs: \n[string (required)]\noutputs: \n[string (required)]\nparams: \nNone"}),"\n",(0,s.jsxs)(n.p,{children:["Unfortunately, it only accepts ",(0,s.jsx)(n.code,{children:"string"})," as input, which isn't directly compatible with a chat interface. When interacting with OpenAI's API, for example, we expect to simply be able to input a list of messages. In order to do this with our current model, we'll have to write some additional boilerplate:"]}),"\n",(0,s.jsx)(i.d,{executionCount:29,children:'# first, apply the tokenizer\'s chat template, since the\n# model is tuned to accept prompts in a chat format. this\n# also converts the list of messages to a string.\nmessages = [{"role": "user", "content": "Write me a hello world program in python"}]\nprompt = generator.tokenizer.apply_chat_template(\n  messages, tokenize=False, add_generation_prompt=True\n)\n\nmodel.predict(prompt)'}),"\n",(0,s.jsx)(a.p,{children:'[\'<|user|>\nWrite me a hello world program in python</s>\n<|assistant|>\nHere\'s a simple hello world program in Python:\n\n```python\nprint("Hello, world!")\n```\n\nThis program prints the string "Hello, world!" to the console. You can run this program by typing it into the Python interpreter or by running the command `python hello_world.py` in your terminal.\']'}),"\n",(0,s.jsx)(n.p,{children:"Now we're getting somewhere, but formatting our messages prior to inference is cumbersome."}),"\n",(0,s.jsx)(n.p,{children:"Additionally, the output format isn't compatible with the OpenAI API spec either--it's just a list of strings. If we were looking to evaluate different model backends for our chat app, we'd have to rewrite some of our client-side code to both format the input, and to parse this new response."}),"\n",(0,s.jsxs)(n.p,{children:["To simplify all this, let's just pass in ",(0,s.jsx)(n.code,{children:'"llm/v1/chat"'})," as the task param when saving the model."]}),"\n",(0,s.jsx)(i.d,{executionCount:30,children:'# save the model using the `"llm/v1/chat"`\n# task type instead of `text-generation`\nmlflow.transformers.save_model(\n  path="tinyllama-chat", transformers_model=generator, task="llm/v1/chat"\n)'}),"\n",(0,s.jsx)(a.p,{isStderr:!0,children:"/var/folders/qd/9rwd0_gd0qs65g4sdqlm51hr0000gp/T/ipykernel_55429/609241782.py:3: FutureWarning: The 'transformers' MLflow Models integration is known to be compatible with the following package version ranges: ``4.25.1`` -  ``4.37.1``. MLflow Models integrations with transformers may not succeed when used with package versions outside of this range.\nmlflow.transformers.save_model("}),"\n",(0,s.jsx)(n.p,{children:"Once again, let's load the model and inspect the signature:"}),"\n",(0,s.jsx)(i.d,{executionCount:31,children:'model = mlflow.pyfunc.load_model("tinyllama-chat")\n\nmodel.metadata.signature'}),"\n",(0,s.jsx)(a.p,{children:"Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"}),"\n",(0,s.jsx)(a.p,{isStderr:!0,children:"2024/02/26 21:10:04 WARNING mlflow.transformers: Could not specify device parameter for this pipeline type"}),"\n",(0,s.jsx)(a.p,{children:"Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"}),"\n",(0,s.jsx)(a.p,{children:"inputs: \n['messages': Array({content: string (required), name: string (optional), role: string (required)}) (required), 'temperature': double (optional), 'max_tokens': long (optional), 'stop': Array(string) (optional), 'n': long (optional), 'stream': boolean (optional)]\noutputs: \n['id': string (required), 'object': string (required), 'created': long (required), 'model': string (required), 'choices': Array({finish_reason: string (required), index: long (required), message: {content: string (required), name: string (optional), role: string (required)} (required)}) (required), 'usage': {completion_tokens: long (required), prompt_tokens: long (required), total_tokens: long (required)} (required)]\nparams: \nNone"}),"\n",(0,s.jsx)(n.p,{children:"Now when performing inference, we can pass our messages in a dict as we'd expect to do when interacting with the OpenAI API. Furthermore, the response we receive back from the model also conforms to the spec."}),"\n",(0,s.jsx)(i.d,{executionCount:32,children:'messages = [{"role": "user", "content": "Write me a hello world program in python"}]\n\nmodel.predict({"messages": messages})'}),"\n",(0,s.jsx)(a.p,{children:"[{'id': '8435a57d-9895-485e-98d3-95b1cbe007c0',\n'object': 'chat.completion',\n'created': 1708949437,\n'model': 'TinyLlama/TinyLlama-1.1B-Chat-v1.0',\n'usage': {'prompt_tokens': 24, 'completion_tokens': 71, 'total_tokens': 95},\n'choices': [{'index': 0,\n  'finish_reason': 'stop',\n  'message': {'role': 'assistant',\n   'content': 'Here's a simple hello world program in Python:\n\n```python\nprint(\"Hello, world!\")\n```\n\nThis program prints the string \"Hello, world!\" to the console. You can run this program by typing it into the Python interpreter or by running the command `python hello_world.py` in your terminal.'}}]}]"}),"\n",(0,s.jsx)(n.h3,{id:"serving-the-chat-model",children:"Serving the Chat Model"}),"\n",(0,s.jsxs)(n.p,{children:["To take this example further, let's use MLflow to serve our chat model, so we can interact with it like a web API. To do this, we can use the ",(0,s.jsx)(n.code,{children:"mlflow models serve"})," CLI tool."]}),"\n",(0,s.jsx)(n.p,{children:"In a terminal shell, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ mlflow models serve -m tinyllama-chat\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When the server has finished initializing, you should be able to interact with the model via HTTP requests. The input format is almost identical to the format described in the ",(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deployment/index.html#chat",children:"MLflow Deployments Server docs"}),", with the exception that ",(0,s.jsx)(n.code,{children:"temperature"})," defaults to ",(0,s.jsx)(n.code,{children:"1.0"})," instead of ",(0,s.jsx)(n.code,{children:"0.0"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Here's a quick example:"}),"\n",(0,s.jsx)(i.d,{executionCount:33,children:'%%sh\ncurl http://127.0.0.1:5000/invocations   -H \'Content-Type: application/json\'   -d \'{ "messages": [{"role": "user", "content": "Write me a hello world program in python"}] }\'   | jq'}),"\n",(0,s.jsx)(a.p,{isStderr:!0,children:"  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100   706  100   617  100    89     25      3  0:00:29  0:00:23  0:00:06   160"}),"\n",(0,s.jsx)(a.p,{children:'[\n{\n  "id": "fc3d08c3-d37d-420d-a754-50f77eb32a92",\n  "object": "chat.completion",\n  "created": 1708949465,\n  "model": "TinyLlama/TinyLlama-1.1B-Chat-v1.0",\n  "usage": {\n    "prompt_tokens": 24,\n    "completion_tokens": 71,\n    "total_tokens": 95\n  },\n  "choices": [\n    {\n      "index": 0,\n      "finish_reason": "stop",\n      "message": {\n        "role": "assistant",\n        "content": "Here\'s a simple hello world program in Python:\n\n```python\nprint("Hello, world!")\n```\n\nThis program prints the string "Hello, world!" to the console. You can run this program by typing it into the Python interpreter or by running the command `python hello_world.py` in your terminal."\n      }\n    }\n  ]\n}\n]'}),"\n",(0,s.jsx)(n.p,{children:"It's that easy!"}),"\n",(0,s.jsx)(n.p,{children:"You can also call the API with a few optional inference params to adjust the model's responses. These map to Transformers pipeline params, and are passed in directly at inference time."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"max_tokens"})," (maps to ",(0,s.jsx)(n.code,{children:"max_new_tokens"}),"): The maximum number of new tokens the model should generate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"temperature"})," (maps to ",(0,s.jsx)(n.code,{children:"temperature"}),"): Controls the creativity of the model's response. Note that this is not guaranteed to be supported by all models, and in order for this param to have an effect, the pipeline must have been created with ",(0,s.jsx)(n.code,{children:"do_sample=True"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"stop"})," (maps to ",(0,s.jsx)(n.code,{children:"stopping_criteria"}),"): A list of tokens at which to stop generation."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Note: ",(0,s.jsx)(n.code,{children:"n"})," does not have an equivalent Transformers pipeline param, and is not supported in queries. However, you can implement a model that consumes the ",(0,s.jsx)(n.code,{children:"n"})," param using Custom Pyfunc (details below)."]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:'In this tutorial, you learned how to create an OpenAI-compatible chat model by specifying "llm/v1/chat" as the task when saving Transformers pipelines.'}),"\n",(0,s.jsx)(n.h3,{id:"whats-next",children:"What's next?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/llms/chat-model-intro/index.html",children:"Learn about custom ChatModel"}),". If you're looking for futrher customization or models outside Transformers, the linked page provides a hand-on guidance for how to build a chat bot with MLflow's ",(0,s.jsx)(n.code,{children:"ChatModel"})," class."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deployment/index.html",children:"More on MLflow AI Gateway"}),". In this tutorial, we saw how to deploy a model using a local server, but MLflow provides many other ways to deploy your models to production. Check out this page to learn more about the different options."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/ml/deep-learning/transformers/index.html",children:"More on MLflow's Transformers Integration"}),". This page provides a comprehensive overview on MLflow's Transformers integrations, along with lots of hands-on guides and notebooks. Learn how to fine-tune models, use prompt templates, and more!"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://mlflow.org/docs/latest/genai/index.html",children:"Other LLM Integrations"}),". Aside from Transformers, MLflow has integrations with many other popular LLM libraries, such as Langchain and OpenAI."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},16581:(e,n,t)=>{t.d(n,{p:()=>s});var o=t(74848);const s=({children:e,isStderr:n})=>(0,o.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:e})},27594:(e,n,t)=>{t.d(n,{O:()=>r});var o=t(96540),s=t(74848);function r({children:e,href:n}){const t=(0,o.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:n})}catch{}const t=await fetch(n),o=await t.blob(),s=window.URL.createObjectURL(o),r=document.createElement("a");r.style.display="none",r.href=s;const i=n.split("/").pop();r.download=i,document.body.appendChild(r),r.click(),window.URL.revokeObjectURL(s),document.body.removeChild(r)}),[n]);return(0,s.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:n,download:!0,onClick:t,children:e})}},75983:(e,n,t)=>{t.d(n,{d:()=>i});var o=t(21028);const s="codeBlock_oJcR";var r=t(74848);const i=({children:e,executionCount:n})=>(0,r.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,r.jsx)(o.A,{className:s,language:"python",children:e})})},81226:(e,n,t)=>{t.d(n,{Q:()=>s});var o=t(74848);const s=({children:e})=>(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:e})}}]);