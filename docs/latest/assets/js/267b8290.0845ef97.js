"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6485],{16581:(e,n,i)=>{i.d(n,{p:()=>o});var t=i(74848);const o=({children:e,isStderr:n})=>(0,t.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:e})},27594:(e,n,i)=>{i.d(n,{O:()=>a});var t=i(96540),o=i(74848);function a({children:e,href:n}){const i=(0,t.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:n})}catch{}const i=await fetch(n),t=await i.blob(),o=window.URL.createObjectURL(t),a=document.createElement("a");a.style.display="none",a.href=o;const s=n.split("/").pop();a.download=s,document.body.appendChild(a),a.click(),window.URL.revokeObjectURL(o),document.body.removeChild(a)}),[n]);return(0,o.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:n,download:!0,onClick:i,children:e})}},72850:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>d,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"flavors/langchain/notebooks/langchain-quickstart-ipynb","title":"Introduction to Using LangChain with MLflow","description":"Download this notebook","source":"@site/docs/genai/flavors/langchain/notebooks/langchain-quickstart-ipynb.mdx","sourceDirName":"flavors/langchain/notebooks","slug":"/flavors/langchain/notebooks/langchain-quickstart","permalink":"/docs/latest/genai/flavors/langchain/notebooks/langchain-quickstart","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/genai/flavors/langchain/notebooks/langchain-quickstart.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/genai/flavors/langchain/notebooks/langchain-quickstart.ipynb","slug":"langchain-quickstart"},"sidebar":"genAISidebar","previous":{"title":"Guide to using LangChain with MLflow","permalink":"/docs/latest/genai/flavors/langchain/guide/"},"next":{"title":"Retrievers with LangChain","permalink":"/docs/latest/genai/flavors/langchain/notebooks/langchain-retriever"}}');var o=i(74848),a=i(28453),s=i(75983),r=i(16581),l=(i(81226),i(27594));const d={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/genai/flavors/langchain/notebooks/langchain-quickstart.ipynb",slug:"langchain-quickstart"},c="Introduction to Using LangChain with MLflow",h={},p=[{value:"What You Will Learn",id:"what-you-will-learn",level:3},{value:"Background on LangChain",id:"background-on-langchain",level:3},{value:"What is a Chain?",id:"what-is-a-chain",level:3},{value:"Tutorial Overview",id:"tutorial-overview",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Notebook compatibility",id:"notebook-compatibility",level:4},{value:"API Key Security Overview",id:"api-key-security-overview",level:3},{value:"Essential Practices:",id:"essential-practices",level:4},{value:"Configuring API Keys",id:"configuring-api-keys",level:4},{value:"Configuring the OpenAI Completions Model in LangChain",id:"configuring-the-openai-completions-model-in-langchain",level:3},{value:"Understanding the Completions Model",id:"understanding-the-completions-model",level:4},{value:"Explanation of the Template Instruction for Sous Chef Simulation",id:"explanation-of-the-template-instruction-for-sous-chef-simulation",level:3},{value:"Breakdown of the Template Instruction",id:"breakdown-of-the-template-instruction",level:4},{value:"Constructing the LangChain Chain",id:"constructing-the-langchain-chain",level:3},{value:"Logging the Chain in MLflow",id:"logging-the-chain-in-mlflow",level:3},{value:"Loading the Model and Predicting with MLflow",id:"loading-the-model-and-predicting-with-mlflow",level:3},{value:"Model Loading and Execution",id:"model-loading-and-execution",level:4},{value:"Output from the Model",id:"output-from-the-model",level:4},{value:"Conclusion",id:"conclusion",level:3},{value:"Additional Prediction with the Loaded Model",id:"additional-prediction-with-the-loaded-model",level:4},{value:"What We&#39;ve Learned",id:"what-weve-learned",level:4},{value:"Closing Thoughts",id:"closing-thoughts",level:3},{value:"What&#39;s next?",id:"whats-next",level:3}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"introduction-to-using-langchain-with-mlflow",children:"Introduction to Using LangChain with MLflow"})}),"\n",(0,o.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/genai/flavors/langchain/notebooks/langchain-quickstart.ipynb",children:"Download this notebook"}),"\n",(0,o.jsxs)(n.p,{children:["Welcome to this interactive tutorial designed to introduce you to ",(0,o.jsx)(n.a,{href:"https://python.langchain.com/docs/get_started/introduction",children:"LangChain"})," and its integration with MLflow. This tutorial is structured as a notebook to provide a hands-on, practical learning experience with the simplest and most core features of LangChain."]}),"\n",(0,o.jsx)(n.h3,{id:"what-you-will-learn",children:"What You Will Learn"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Understanding LangChain"}),": Get to know the basics of LangChain and how it is used in developing applications powered by language models."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chains in LangChain"}),": Explore the concept of ",(0,o.jsx)(n.code,{children:"chains"})," in LangChain, which are sequences of actions or operations orchestrated to perform complex tasks."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Integration with MLflow"}),": Learn how LangChain integrates with MLflow, a platform for managing the machine learning lifecycle, including logging, tracking, and deploying models."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Practical Application"}),": Apply your knowledge to build a LangChain chain that acts like a sous chef, focusing on the preparation steps of a recipe."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"background-on-langchain",children:"Background on LangChain"}),"\n",(0,o.jsx)(n.p,{children:"LangChain is a Python-based framework that simplifies the development of applications using language models. It is designed to enhance context-awareness and reasoning in applications, allowing for more sophisticated and interactive functionalities."}),"\n",(0,o.jsx)(n.h3,{id:"what-is-a-chain",children:"What is a Chain?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chain Definition"}),": In LangChain, a ",(0,o.jsx)(n.code,{children:"chain"})," refers to a series of interconnected components or steps designed to accomplish a specific task."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chain Example"}),": In our tutorial, we'll create a chain that simulates a sous chef's role in preparing ingredients and tools for a recipe."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"tutorial-overview",children:"Tutorial Overview"}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, you will:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Set Up LangChain and MLflow"}),": Initialize and configure both LangChain and MLflow."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create a Sous Chef Chain"}),": Develop a LangChain chain that lists ingredients, describes preparation techniques, organizes ingredient staging, and details cooking implements preparation for a given recipe."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Log and Load the Model"}),": Utilize MLflow to log the chain model and then load it for prediction."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Run a Prediction"}),": Execute the chain to see how it would prepare a restaurant dish for a specific number of customers."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"By the end of this tutorial, you will have a solid foundation in using LangChain with MLflow and an understanding of how to construct and manage chains for practical applications."}),"\n",(0,o.jsx)(n.p,{children:"Let's dive in and explore the world of LangChain and MLflow!"}),"\n",(0,o.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"In order to get started with this tutorial, we're going to need a few things first."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["An OpenAI API Account. You can ",(0,o.jsx)(n.a,{href:"https://platform.openai.com/login?launch",children:"sign up here"})," to get access in order to start programatically accessing one of the leading highly sophisticated LLM services on the planet."]}),"\n",(0,o.jsxs)(n.li,{children:["An OpenAI API Key. You can access this once you've created an account by navigating ",(0,o.jsx)(n.a,{href:"https://platform.openai.com/api-keys",children:"to the API keys page"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["The OpenAI SDK. It's ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/openai/",children:"available on PyPI"})," here. For this tutorial, we're going to be using version 0.28.1 (the last release prior to the 1.0 release)."]}),"\n",(0,o.jsxs)(n.li,{children:["The LangChain package. You can ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/langchain/",children:"find it here on PyPI"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"notebook-compatibility",children:"Notebook compatibility"}),"\n",(0,o.jsxs)(n.p,{children:["With rapidly changing libraries such as ",(0,o.jsx)(n.code,{children:"langchain"}),", examples can become outdated rather quickly and will no longer work. For the purposes of demonstration, here are the critical dependencies that are recommended to use to effectively run this notebook:"]}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"left"},children:"Package"}),(0,o.jsx)(n.th,{style:{textAlign:"left"},children:"Version"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"langchain"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"0.1.16"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"lanchain-community"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"0.0.33"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"langchain-openai"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"0.0.8"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"openai"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"1.12.0"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"tiktoken"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"0.6.0"})})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:"mlflow"}),(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"2.12.1"})})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"If you attempt to execute this notebook with different versions, it may function correctly, but it is recommended to use the precise versions above to ensure that your code executes properly."}),"\n",(0,o.jsx)(n.p,{children:"To install the dependent packages simply run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install openai==1.12.0 tiktoken==0.6.0 langchain==0.1.16 langchain-openai==0.0.33 langchain-community==0.0.33 mlflow==2.12.1\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"NOTE: This tutorial does not support openai<1 and is not guaranteed to work with versions of langchain<1.16.0"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"api-key-security-overview",children:"API Key Security Overview"}),"\n",(0,o.jsx)(n.p,{children:"API keys, especially for SaaS Large Language Models (LLMs), are as sensitive as financial information due to their connection to billing."}),"\n",(0,o.jsxs)(n.p,{children:["If you're interested in learning more about an alternative MLflow solution that securely manages your access keys, ",(0,o.jsx)(n.a,{href:"https://www.mlflow.org/docs/latest/llms/deployments/index.html",children:"read about MLflow AI Gateway here"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"essential-practices",children:"Essential Practices:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Confidentiality"}),": Always keep API keys private."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Secure Storage"}),": Prefer environment variables or secure services."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Frequent Rotation"}),": Regularly update keys to avoid unauthorized access."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"configuring-api-keys",children:"Configuring API Keys"}),"\n",(0,o.jsx)(n.p,{children:"For secure usage, set API keys as environment variables."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"macOS/Linux"}),":\nRefer to ",(0,o.jsx)(n.a,{href:"https://support.apple.com/en-gb/guide/terminal/apd382cc5fa-4f58-4449-b20a-41c53c006f8f/mac",children:"Apple's guide on using environment variables in Terminal"})," for detailed instructions."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Windows"}),":\nFollow the steps outlined in ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.4",children:"Microsoft's documentation on environment variables"}),"."]}),"\n",(0,o.jsx)(s.d,{executionCount:1,children:'import os\n\nfrom langchain.chains import LLMChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain_openai import OpenAI\n\nimport mlflow\n\nassert "OPENAI_API_KEY" in os.environ, "Please set the OPENAI_API_KEY environment variable."'}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["NOTE: If you'd like to use Azure OpenAI with LangChain, you need to install ",(0,o.jsx)(n.code,{children:"openai>=1.10.0"})," and ",(0,o.jsx)(n.code,{children:"langchain-openai>=0.0.6"}),", as well as to specify the following credentials and parameters:"]})}),"\n"]}),"\n",(0,o.jsx)(s.d,{executionCount:" ",children:'# NOTE: Only run this cell if you are using Azure interfaces with OpenAI. If you have a direct account with\n# OpenAI, ignore this cell.\n\nfrom langchain_openai import AzureOpenAI, AzureOpenAIEmbeddings\n\n# Set this to `azure`\nos.environ["OPENAI_API_TYPE"] = "azure"\n# The API version you want to use: set this to `2023-05-15` for the released version.\nos.environ["OPENAI_API_VERSION"] = "2023-05-15"\nassert "AZURE_OPENAI_ENDPOINT" in os.environ, (\n  "Please set the AZURE_OPENAI_ENDPOINT environment variable. It is the base URL for your Azure OpenAI resource. You can find this in the Azure portal under your Azure OpenAI resource."\n)\nassert "OPENAI_API_KEY" in os.environ, (\n  "Please set the OPENAI_API_KEY environment variable. It is the API key for your Azure OpenAI resource. You can find this in the Azure portal under your Azure OpenAI resource."\n)\n\nazure_openai_llm = AzureOpenAI(\n  deployment_name="<your-deployment-name>",\n  model_name="gpt-4o-mini",\n)\nazure_openai_embeddings = AzureOpenAIEmbeddings(\n  azure_deployment="<your-deployment-name>",\n)'}),"\n",(0,o.jsx)(n.h3,{id:"configuring-the-openai-completions-model-in-langchain",children:"Configuring the OpenAI Completions Model in LangChain"}),"\n",(0,o.jsx)(n.p,{children:"In this section of the tutorial, we have configured the OpenAI model with specific parameters suitable for generating language completions. We're using a Completions model, not ChatCompletions, which means each request is independent, and the entire prompt needs to be included every time to generate a response."}),"\n",(0,o.jsx)(n.h4,{id:"understanding-the-completions-model",children:"Understanding the Completions Model"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Completions Model"}),": This model does not maintain contextual information across requests. It's ideal for tasks where each request is standalone and doesn't depend on past interactions. Offers flexibility for a variety of non-conversational applications."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"No Contextual Memory"}),": The lack of memory of previous interactions means the model is best suited for one-off requests or scenarios where continuity of the conversation is not required."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Comparisons with the ChatCompletions Model Type"}),": Tailored for conversational AI, maintaining context across multiple exchanges for a continuous conversation. Suitable for chatbots or applications where dialogue history is crucial."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, we use the Completions model for its simplicity and effectiveness in handling individual, independent requests, aligning with our tutorial's focus on preparation steps before cooking."}),"\n",(0,o.jsx)(s.d,{executionCount:2,children:"llm = OpenAI(temperature=0.1, max_tokens=1000)"}),"\n",(0,o.jsx)(n.h3,{id:"explanation-of-the-template-instruction-for-sous-chef-simulation",children:"Explanation of the Template Instruction for Sous Chef Simulation"}),"\n",(0,o.jsxs)(n.p,{children:["In this part of the tutorial, we have crafted a detailed prompt template that simulates the role of a fine dining sous chef. This template is designed to guide the LangChain model in preparing for a dish, focusing exclusively on the ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Mise_en_place",children:"mise-en-place"})," process."]}),"\n",(0,o.jsx)(n.h4,{id:"breakdown-of-the-template-instruction",children:"Breakdown of the Template Instruction"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Sous Chef Roleplay"}),": The prompt places the language model in the role of a sous chef, emphasizing meticulous preparation."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Task Outline"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"List the Ingredients"}),": Instructs the model to itemize all necessary ingredients for a given dish."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Preparation Techniques"}),": Asks the model to describe necessary techniques for ingredient preparation, such as cutting and processing."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ingredient Staging"}),": Requires the model to provide detailed staging instructions for each ingredient, considering the sequence and timing of use."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cooking Implements Preparation"}),": Guides the model to list and prepare all cooking tools required for the dish's preparation phase."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Scope Limitation"}),": The template is explicitly designed to stop at the preparation stage, avoiding the actual cooking process. It focuses on setting up everything needed for the chef to begin cooking."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dynamic Inputs"}),": The template is adaptable to different recipes and customer counts, as indicated by placeholders ",(0,o.jsx)(n.code,{children:"{recipe}"})," and ",(0,o.jsx)(n.code,{children:"{customer_count}"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This template instruction is a key component of the tutorial, demonstrating how to leverage LangChain declaring instructive prompts with parametrized features geared toward single-purpose completions-style applications."}),"\n",(0,o.jsx)(s.d,{executionCount:3,children:'template_instruction = (\n  "Imagine you are a fine dining sous chef. Your task is to meticulously prepare for a dish, focusing on the mise-en-place process."\n  "Given a recipe, your responsibilities are: "\n  "1. List the Ingredients: Carefully itemize all ingredients required for the dish, ensuring every element is accounted for. "\n  "2. Preparation Techniques: Describe the techniques and operations needed for preparing each ingredient. This includes cutting, "\n  "processing, or any other form of preparation. Focus on the art of mise-en-place, ensuring everything is perfectly set up before cooking begins."\n  "3. Ingredient Staging: Provide detailed instructions on how to stage and arrange each ingredient. Explain where each item should be placed for "\n  "efficient access during the cooking process. Consider the timing and sequence of use for each ingredient. "\n  "4. Cooking Implements Preparation: Enumerate all the cooking tools and implements needed for each phase of the dish\'s preparation. "\n  "Detail any specific preparation these tools might need before the actual cooking starts and describe what pots, pans, dishes, and "\n  "other tools will be needed for the final preparation."\n  "Remember, your guidance stops at the preparation stage. Do not delve into the actual cooking process of the dish. "\n  "Your goal is to set the stage flawlessly for the chef to execute the cooking seamlessly."\n  "The recipe you are given is for: {recipe} for {customer_count} people. "\n)'}),"\n",(0,o.jsx)(n.h3,{id:"constructing-the-langchain-chain",children:"Constructing the LangChain Chain"}),"\n",(0,o.jsxs)(n.p,{children:["We start by setting up a ",(0,o.jsx)(n.code,{children:"PromptTemplate"})," in LangChain, tailored to our sous chef scenario. The template is designed to dynamically accept inputs like the recipe name and customer count. Then, we initialize an ",(0,o.jsx)(n.code,{children:"LLMChain"})," by combining our OpenAI language model with the prompt template, creating a chain that can simulate the sous chef's preparation process."]}),"\n",(0,o.jsx)(n.h3,{id:"logging-the-chain-in-mlflow",children:"Logging the Chain in MLflow"}),"\n",(0,o.jsx)(n.p,{children:"With the chain ready, we proceed to log it in MLflow. This is done within an MLflow run, which not only logs the chain model under a specified name but also tracks various details about the model. The logging process ensures that all aspects of the chain are recorded, allowing for efficient version control and future retrieval."}),"\n",(0,o.jsx)(s.d,{executionCount:4,children:'prompt = PromptTemplate(\n  input_variables=["recipe", "customer_count"],\n  template=template_instruction,\n)\nchain = LLMChain(llm=llm, prompt=prompt)\n\nmlflow.set_experiment("Cooking Assistant")\n\nwith mlflow.start_run():\n  model_info = mlflow.langchain.log_model(chain, name="langchain_model")'}),"\n",(0,o.jsx)(n.p,{children:"If we navigate to the MLflow UI, we'll see our logged LangChain model."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://i.imgur.com/CeCeyp2.png",alt:"Our LangChain Model in the MLflow UI"})}),"\n",(0,o.jsx)(n.h3,{id:"loading-the-model-and-predicting-with-mlflow",children:"Loading the Model and Predicting with MLflow"}),"\n",(0,o.jsx)(n.p,{children:"In this part of our tutorial, we demonstrate the practical application of the logged LangChain model using MLflow. We load the model and run a prediction for a specific dish, showcasing the model's ability to assist in culinary preparation."}),"\n",(0,o.jsx)(n.h4,{id:"model-loading-and-execution",children:"Model Loading and Execution"}),"\n",(0,o.jsxs)(n.p,{children:["After logging our LangChain chain with MLflow, we proceed to load the model using MLflow's ",(0,o.jsx)(n.code,{children:"pyfunc.load_model"})," function. This step is crucial as it brings our previously logged model into an executable state."]}),"\n",(0,o.jsx)(n.p,{children:'We then input a specific recipe along with the customer count into our model. In this case, we use the recipe for "boeuf bourginon" and specify that it\'s for 12 customers. The model, acting as a sous chef, processes this information and generates detailed preparation instructions.'}),"\n",(0,o.jsx)(n.h4,{id:"output-from-the-model",children:"Output from the Model"}),"\n",(0,o.jsx)(n.p,{children:'The model\'s output provides a comprehensive guide on preparing "boeuf bourginon," covering several critical aspects:'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ingredients List"}),": A detailed enumeration of all necessary ingredients, quantified and tailored for the specified number of customers."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Preparation Techniques"}),": Step-by-step instructions on how to prepare each ingredient, following the principles of mise-en-place."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Ingredient Staging"}),": Guidance on how to organize and stage the ingredients, ensuring efficient access and use during the cooking process."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Cooking Implements Preparation"}),": Instructions on preparing the necessary cooking tools and implements, from pots and pans to bowls and colanders."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates the power and utility of combining LangChain and MLflow in a practical scenario. It highlights how such an integration can effectively translate complex requirements into actionable steps, aiding in tasks that require precision and careful planning."}),"\n",(0,o.jsx)(s.d,{executionCount:5,children:'loaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\ndish1 = loaded_model.predict({"recipe": "boeuf bourginon", "customer_count": "4"})\n\nprint(dish1[0])'}),"\n",(0,o.jsx)(r.p,{children:"\n1. Ingredients:\n- 2 pounds beef chuck, cut into 1-inch cubes\n- 6 slices of bacon, diced\n- 2 tablespoons olive oil\n- 1 onion, diced\n- 2 carrots, diced\n- 2 cloves of garlic, minced\n- 1 tablespoon tomato paste\n- 1 bottle of red wine\n- 2 cups beef broth\n- 1 bouquet garni (thyme, bay leaf, parsley)\n- 1 pound pearl onions, peeled\n- 1 pound mushrooms, quartered\n- Salt and pepper to taste\n- Chopped parsley for garnish\n\n2. Preparation Techniques:\n- Cut the beef chuck into 1-inch cubes and set aside.\n- Dice the bacon and set aside.\n- Peel and dice the onion and carrots.\n- Mince the garlic cloves.\n- Prepare the bouquet garni by tying together a few sprigs of thyme, a bay leaf, and a few sprigs of parsley with kitchen twine.\n- Peel the pearl onions and quarter the mushrooms.\n\n3. Ingredient Staging:\n- Place the beef cubes in a bowl and season with salt and pepper.\n- In a large Dutch oven, heat the olive oil over medium-high heat.\n- Add the diced bacon and cook until crispy.\n- Remove the bacon from the pot and set aside.\n- In the same pot, add the seasoned beef cubes and cook until browned on all sides.\n- Remove the beef from the pot and set aside.\n- In the same pot, add the diced onion and carrots and cook until softened.\n- Add the minced garlic and cook for an additional minute.\n- Stir in the tomato paste and cook for another minute.\n- Add the beef and bacon back into the pot.\n- Pour in the red wine and beef broth.\n- Add the bouquet garni and bring to a simmer.\n- Cover the pot and let it simmer for 2 hours, stirring occasionally.\n- After 2 hours, add the pearl onions and mushrooms to the pot.\n- Continue to simmer for an additional hour, or until the beef is tender.\n- Remove the bouquet garni and discard.\n- Taste and adjust seasoning with salt and pepper if needed.\n- Garnish with chopped parsley before serving.\n\n4. Cooking Implements Preparation:\n- Large Dutch oven or heavy-bottomed pot\n- Kitchen twine\n- Cutting board\n- Chef's knife\n- Wooden spoon\n- Measuring cups and spoons\n- Bowls for prepped ingredients\n- Tongs for handling meat\n- Ladle for serving\n- Serving dishes for the final dish."}),"\n",(0,o.jsx)(s.d,{executionCount:6,children:'dish2 = loaded_model.predict({"recipe": "Okonomiyaki", "customer_count": "12"})\n\nprint(dish2[0])'}),"\n",(0,o.jsx)(r.p,{children:"\n\nIngredients:\n- 2 cups all-purpose flour\n- 2 teaspoons baking powder\n- 1/2 teaspoon salt\n- 2 eggs\n- 1 1/2 cups water\n- 1/2 head cabbage, thinly sliced\n- 1/2 cup green onions, thinly sliced\n- 1/2 cup carrots, grated\n- 1/2 cup red bell pepper, thinly sliced\n- 1/2 cup cooked shrimp, chopped\n- 1/2 cup cooked bacon, chopped\n- 1/2 cup pickled ginger, chopped\n- 1/2 cup tenkasu (tempura flakes)\n- 1/2 cup mayonnaise\n- 1/4 cup okonomiyaki sauce\n- 1/4 cup katsuobushi (dried bonito flakes)\n- Vegetable oil for cooking\n\nPreparation Techniques:\n1. In a large mixing bowl, combine the flour, baking powder, and salt.\n2. In a separate bowl, beat the eggs and water together.\n3. Slowly pour the egg mixture into the flour mixture, stirring until well combined.\n4. Set the batter aside to rest for 10 minutes.\n5. Thinly slice the cabbage, green onions, and red bell pepper.\n6. Grate the carrots.\n7. Chop the cooked shrimp, bacon, and pickled ginger.\n8. Prepare the tenkasu, mayonnaise, okonomiyaki sauce, and katsuobushi.\n\nIngredient Staging:\n1. Place the sliced cabbage, green onions, carrots, red bell pepper, shrimp, bacon, and pickled ginger in separate bowls.\n2. Arrange the tenkasu, mayonnaise, okonomiyaki sauce, and katsuobushi in small dishes.\n3. Set up a large griddle or non-stick pan for cooking the okonomiyaki.\n\nCooking Implements Preparation:\n1. Make sure the griddle or pan is clean and dry.\n2. Heat the griddle or pan over medium heat.\n3. Have a spatula, tongs, and a large plate ready for flipping and serving the okonomiyaki.\n4. Prepare a large plate or platter for serving the finished okonomiyaki.\n\nRemember, mise-en-place is key to a successful dish. Make sure all ingredients are prepped and ready to go before starting the cooking process. Happy cooking!"}),"\n",(0,o.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:'In the final step of our tutorial, we execute another prediction using our LangChain model. This time, we explore the preparation for "Okonomiyaki," a Japanese dish, for 12 customers. This demonstrates the model\'s adaptability and versatility across various cuisines.'}),"\n",(0,o.jsx)(n.h4,{id:"additional-prediction-with-the-loaded-model",children:"Additional Prediction with the Loaded Model"}),"\n",(0,o.jsx)(n.p,{children:'The model processes the input for "Okonomiyaki" and outputs detailed preparation steps. This includes listing the ingredients, explaining the preparation techniques, guiding ingredient staging, and detailing the required cooking implements, showcasing the model\'s capability to handle diverse recipes with precision.'}),"\n",(0,o.jsx)(n.h4,{id:"what-weve-learned",children:"What We've Learned"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Model Versatility"}),": The tutorial highlighted the LangChain framework for assembling component parts of a basic LLM application, chaining a specific instructional prompt to a Completions-style LLM."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"MLflow's Role in Model Management"}),": The integration of LangChain with MLflow demonstrated effective model lifecycle management, from creation and logging to prediction execution."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"closing-thoughts",children:"Closing Thoughts"}),"\n",(0,o.jsx)(n.p,{children:"This tutorial offered an insightful journey through creating, managing, and utilizing a LangChain model with MLflow for culinary preparation. It showcased the practical applications and adaptability of LangChain in complex scenarios. We hope this experience has provided valuable knowledge and encourages you to further explore and innovate using LangChain and MLflow in your projects. Happy coding!"}),"\n",(0,o.jsx)(n.h3,{id:"whats-next",children:"What's next?"}),"\n",(0,o.jsxs)(n.p,{children:["To continue learning about the capabilities of MLflow and LangChain in more complex examples, we encourage you to continue your learning with ",(0,o.jsx)(n.a,{href:"https://www.mlflow.org/docs/latest/llms/langchain/index.html#advanced-tutorials",children:"the additional LangChain tutorials"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},75983:(e,n,i)=>{i.d(n,{d:()=>s});var t=i(21028);const o="codeBlock_oJcR";var a=i(74848);const s=({children:e,executionCount:n})=>(0,a.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,a.jsx)(t.A,{className:o,language:"python",children:e})})},81226:(e,n,i)=>{i.d(n,{Q:()=>o});var t=i(74848);const o=({children:e})=>(0,t.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:e})}}]);