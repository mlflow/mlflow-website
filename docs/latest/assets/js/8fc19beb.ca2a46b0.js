"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4569],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(96540);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},45788:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/deepseek-tracing-148528f9d4da0be7e5c4ec64b21ce52c.png"},58600:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/deepseek-tracing-agent-9bc5d50e8a028ac3e2f11325c0c05277.png"},91033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tracing/integrations/listing/deepseek","title":"Tracing DeepSeek","description":"Deepseek Tracing via autolog","source":"@site/docs/genai/tracing/integrations/listing/deepseek.mdx","sourceDirName":"tracing/integrations/listing","slug":"/tracing/integrations/listing/deepseek","permalink":"/docs/latest/genai/tracing/integrations/listing/deepseek","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"sidebar_label":"DeepSeek"},"sidebar":"genAISidebar","previous":{"title":"Bedrock","permalink":"/docs/latest/genai/tracing/integrations/listing/bedrock"},"next":{"title":"DSPy","permalink":"/docs/latest/genai/tracing/integrations/listing/dspy"}}');var s=t(74848),a=t(28453);const o={sidebar_position:5,sidebar_label:"DeepSeek"},l="Tracing DeepSeek",r={},c=[{value:"Supported APIs",id:"supported-apis",level:2},{value:"Basic Example",id:"basic-example",level:2},{value:"Streaming and Async Support",id:"streaming-and-async-support",level:2},{value:"Advanced Example: Function Calling Agent",id:"advanced-example-function-calling-agent",level:2},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"tracing-deepseek",children:"Tracing DeepSeek"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Deepseek Tracing via autolog",src:t(58600).A+"",width:"1661",height:"915"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for Deepseek models through the OpenAI SDK integration. Since DeepSeek uses an OpenAI-compatible API format, you can use ",(0,s.jsx)(n.code,{children:"mlflow.openai.autolog()"})," to trace interactions with DeepSeek models."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import mlflow\n\n# Enable\nmlflow.openai.autolog()\n"})}),"\n",(0,s.jsx)(n.p,{children:"MLflow trace automatically captures the following information about DeepSeek calls:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prompts and completion responses"}),"\n",(0,s.jsx)(n.li,{children:"Latencies"}),"\n",(0,s.jsx)(n.li,{children:"Model name"}),"\n",(0,s.jsxs)(n.li,{children:["Additional metadata such as ",(0,s.jsx)(n.code,{children:"temperature"}),", ",(0,s.jsx)(n.code,{children:"max_tokens"}),", if specified."]}),"\n",(0,s.jsx)(n.li,{children:"Function calling if returned in the response"}),"\n",(0,s.jsx)(n.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"supported-apis",children:"Supported APIs"}),"\n",(0,s.jsx)(n.p,{children:"MLflow supports automatic tracing for the following DeepSeek APIs through the OpenAI integration:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Chat Completion"}),(0,s.jsx)(n.th,{children:"Function Calling"}),(0,s.jsx)(n.th,{children:"Streaming"}),(0,s.jsx)(n.th,{children:"Async"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u2705"}),(0,s.jsx)(n.td,{children:"\u2705 (*1)"}),(0,s.jsx)(n.td,{children:"\u2705 (*2)"})]})})]}),"\n",(0,s.jsx)(n.p,{children:"(*1) Streaming support requires MLflow 2.15.0 or later.\n(*2) Async support requires MLflow 2.21.0 or later."}),"\n",(0,s.jsxs)(n.p,{children:["To request support for additional APIs, please open a ",(0,s.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/issues/new?assignees=&labels=enhancement&projects=&template=feature_request_template.yaml",children:"feature request"})," on GitHub."]}),"\n",(0,s.jsx)(n.h2,{id:"basic-example",children:"Basic Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\n\n# Enable auto-tracing for OpenAI (works with DeepSeek)\nmlflow.openai.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("DeepSeek")\n\n# Initialize the OpenAI client with DeepSeek API endpoint\nclient = openai.OpenAI(\n    base_url="https://api.deepseek.com", api_key="<your_deepseek_api_key>"\n)\n\nmessages = [\n    {"role": "system", "content": "You are a helpful assistant."},\n    {"role": "user", "content": "What is the capital of France?"},\n]\n\nresponse = client.chat.completions.create(\n    model="deepseek-chat",\n    messages=messages,\n    temperature=0.1,\n    max_tokens=100,\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The above example should generate a trace in the ",(0,s.jsx)(n.code,{children:"DeepSeek"})," experiment in the MLflow UI:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Deepseek Tracing",src:t(45788).A+"",width:"1099",height:"512"})}),"\n",(0,s.jsx)(n.h2,{id:"streaming-and-async-support",children:"Streaming and Async Support"}),"\n",(0,s.jsxs)(n.p,{children:["MLflow supports tracing for streaming and async DeepSeek APIs. Visit the ",(0,s.jsx)(n.a,{href:"openai",children:"OpenAI Tracing documentation"})," for example code snippets for tracing streaming and async calls through OpenAI SDK."]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-example-function-calling-agent",children:"Advanced Example: Function Calling Agent"}),"\n",(0,s.jsxs)(n.p,{children:["MLflow Tracing automatically captures function calling responses from DeepSeek models through the OpenAI SDK. The function instruction in the response will be highlighted in the trace UI. Moreover, you can annotate the tool function with the ",(0,s.jsx)(n.code,{children:"@mlflow.trace"})," decorator to create a span for the tool execution."]}),"\n",(0,s.jsx)(n.p,{children:"The following example implements a simple function calling agent using DeepSeek Function Calling and MLflow Tracing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import json\nfrom openai import OpenAI\nimport mlflow\nfrom mlflow.entities import SpanType\n\n# Initialize the OpenAI client with DeepSeek API endpoint\nclient = OpenAI(base_url="https://api.deepseek.com", api_key="<your_deepseek_api_key>")\n\n\n# Define the tool function. Decorate it with `@mlflow.trace` to create a span for its execution.\n@mlflow.trace(span_type=SpanType.TOOL)\ndef get_weather(city: str) -> str:\n    if city == "Tokyo":\n        return "sunny"\n    elif city == "Paris":\n        return "rainy"\n    return "unknown"\n\n\ntools = [\n    {\n        "type": "function",\n        "function": {\n            "name": "get_weather",\n            "parameters": {\n                "type": "object",\n                "properties": {"city": {"type": "string"}},\n            },\n        },\n    }\n]\n\n_tool_functions = {"get_weather": get_weather}\n\n\n# Define a simple tool calling agent\n@mlflow.trace(span_type=SpanType.AGENT)\ndef run_tool_agent(question: str):\n    messages = [{"role": "user", "content": question}]\n\n    # Invoke the model with the given question and available tools\n    response = client.chat.completions.create(\n        model="deepseek-chat",\n        messages=messages,\n        tools=tools,\n    )\n\n    ai_msg = response.choices[0].message\n    messages.append(ai_msg)\n\n    # If the model request tool call(s), invoke the function with the specified arguments\n    if tool_calls := ai_msg.tool_calls:\n        for tool_call in tool_calls:\n            function_name = tool_call.function.name\n            if tool_func := _tool_functions.get(function_name):\n                args = json.loads(tool_call.function.arguments)\n                tool_result = tool_func(**args)\n            else:\n                raise RuntimeError("An invalid tool is returned from the assistant!")\n\n            messages.append(\n                {\n                    "role": "tool",\n                    "tool_call_id": tool_call.id,\n                    "content": tool_result,\n                }\n            )\n\n        # Sent the tool results to the model and get a new response\n        response = client.chat.completions.create(\n            model="deepseek-chat", messages=messages\n        )\n\n    return response.choices[0].message.content\n\n\n# Run the tool calling agent\nquestion = "What\'s the weather like in Paris today?"\nanswer = run_tool_agent(question)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,s.jsxs)(n.p,{children:["Auto tracing for DeepSeek (through OpenAI SDK) can be disabled globally by calling ",(0,s.jsx)(n.code,{children:"mlflow.openai.autolog(disable=True)"})," or ",(0,s.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);