/*! For license information please see 21ba023e.e30bd7ca.js.LICENSE.txt */
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3965],{6789:(e,t,n)=>{n.d(t,{A:()=>c});n(96540);var i=n(28774),o=n(34164);const a={tileCard:"tileCard_NHsj",tileIcon:"tileIcon_pyoR",tileLink:"tileLink_iUbu",tileImage:"tileImage_O4So"};var r=n(86025),l=n(21122),s=n(74848);function c({icon:e,image:t,imageDark:n,imageWidth:c,imageHeight:p,iconSize:h=32,containerHeight:d,title:m,description:f,href:u,linkText:g="Learn more \u2192",className:_}){if(!e&&!t)throw new Error("TileCard requires either an icon or image prop");const w=d?{height:`${d}px`}:{},y={};return c&&(y.width=`${c}px`),p&&(y.height=`${p}px`),(0,s.jsxs)(i.A,{href:u,className:(0,o.A)(a.tileCard,_),children:[(0,s.jsx)("div",{className:a.tileIcon,style:w,children:e?(0,s.jsx)(e,{size:h}):n?(0,s.jsx)(l.A,{sources:{light:(0,r.Ay)(t),dark:(0,r.Ay)(n)},alt:m,className:a.tileImage,style:y}):(0,s.jsx)("img",{src:(0,r.Ay)(t),alt:m,className:a.tileImage,style:y})}),(0,s.jsx)("h3",{children:m}),(0,s.jsx)("p",{children:f}),(0,s.jsx)("div",{className:a.tileLink,children:g})]})}},22492:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("shield",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}]])},22864:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("chart-column",[["path",{d:"M3 3v16a2 2 0 0 0 2 2h16",key:"c24i48"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]])},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(96540);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}},49374:(e,t,n)=>{n.d(t,{B:()=>l});n(96540);const i=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var o=n(86025),a=n(74848);const r=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(i[e])return e}return null};function l({fn:e,children:t,hash:n}){const l=r(e);if(!l)return(0,a.jsx)(a.Fragment,{children:t});const s=(0,o.Ay)(`/${i[l]}#${n??e}`);return(0,a.jsx)("a",{href:s,target:"_blank",children:t??(0,a.jsxs)("code",{children:[e,"()"]})})}},51004:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]])},56808:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("circle-play",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["polygon",{points:"10 8 16 12 10 16 10 8",key:"1cimsy"}]])},61878:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("git-branch",[["line",{x1:"6",x2:"6",y1:"3",y2:"15",key:"17qcm7"}],["circle",{cx:"18",cy:"6",r:"3",key:"1h7g24"}],["circle",{cx:"6",cy:"18",r:"3",key:"fqmcym"}],["path",{d:"M18 9a9 9 0 0 1-9 9",key:"n2h4wq"}]])},65592:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var i=n(34164);const o={tilesGrid:"tilesGrid_hB9N"};var a=n(74848);function r({children:e,className:t}){return(0,a.jsx)("div",{className:(0,i.A)(o.tilesGrid,t),children:e})}},67895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>y,default:()=>j,frontMatter:()=>w,metadata:()=>i,toc:()=>x});const i=JSON.parse('{"id":"version-tracking/track-application-versions-with-mlflow","title":"Track versions of Git-based applications with MLflow","description":"Learn how to track versions of your GenAI application when your app\'s code resides in Git, using MLflow LoggedModel as a metadata hub.","source":"@site/docs/genai/version-tracking/track-application-versions-with-mlflow.mdx","sourceDirName":"version-tracking","slug":"/version-tracking/track-application-versions-with-mlflow","permalink":"/mlflow-website/docs/latest/genai/version-tracking/track-application-versions-with-mlflow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Track versions of Git-based applications with MLflow","description":"Learn how to track versions of your GenAI application when your app\'s code resides in Git, using MLflow LoggedModel as a metadata hub."},"sidebar":"genAISidebar","previous":{"title":"Quickstart","permalink":"/mlflow-website/docs/latest/genai/version-tracking/quickstart"},"next":{"title":"Compare App Versions","permalink":"/mlflow-website/docs/latest/genai/version-tracking/compare-app-versions"}}');var o=n(74848),a=n(28453),r=n(82238),l=n(79206),s=n(65592),c=n(6789);n(49374);const p=(0,n(84722).A)("git-commit-horizontal",[["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}],["line",{x1:"3",x2:"9",y1:"12",y2:"12",key:"1dyftd"}],["line",{x1:"15",x2:"21",y1:"12",y2:"12",key:"oup4p8"}]]);var h=n(61878),d=n(22492),m=n(51004),f=n(93672),u=n(80964),g=n(22864),_=n(56808);const w={title:"Track versions of Git-based applications with MLflow",description:"Learn how to track versions of your GenAI application when your app's code resides in Git, using MLflow LoggedModel as a metadata hub."},y="Track versions of Git-based applications with MLflow",v={},x=[{value:"Why Git-Based Versioning Works for GenAI",id:"why-git-based-versioning-works-for-genai",level:2},{value:"How MLflow Captures Git Context",id:"how-mlflow-captures-git-context",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create a sample application",id:"step-1-create-a-sample-application",level:2},{value:"Step 2: Add version tracking to your app&#39;s code",id:"step-2-add-version-tracking-to-your-apps-code",level:2},{value:"Step 3: (Optional) Record parameters",id:"step-3-optional-record-parameters",level:2},{value:"Step 4: Run the application",id:"step-4-run-the-application",level:2},{value:"Step 5: View traces linked to the LoggedModel",id:"step-5-view-traces-linked-to-the-loggedmodel",level:2},{value:"Use the UI",id:"use-the-ui",level:3},{value:"Use the SDK",id:"use-the-sdk",level:3},{value:"Helper function to compute a unique hash for any file change",id:"helper-function-to-compute-a-unique-hash-for-any-file-change",level:2},{value:"Next Steps",id:"next-steps",level:2}];function k(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"track-versions-of-git-based-applications-with-mlflow",children:"Track versions of Git-based applications with MLflow"})}),"\n",(0,o.jsxs)(t.p,{children:["This guide demonstrates how to track versions of your GenAI application when your app's code resides in Git or a similar version control system. In this workflow, an MLflow ",(0,o.jsx)(t.strong,{children:"LoggedModel"})," acts as a metadata hub, linking each conceptual application version to its specific external code (such as a Git commit) and configurations. This LoggedModel can then be associated with MLflow entities like traces and evaluation runs."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"mlflow.set_active_model(name=...)"})," is key to version tracking: calling this function links your application's traces to a LoggedModel. If the name does not exist, a new LoggedModel is automatically created."]}),"\n",(0,o.jsx)(t.h2,{id:"why-git-based-versioning-works-for-genai",children:"Why Git-Based Versioning Works for GenAI"}),"\n",(0,o.jsx)(t.p,{children:"Git-based versioning transforms your version control system into a powerful application lifecycle management tool. Every commit becomes a potential application version, with complete code history and change tracking built-in."}),"\n",(0,o.jsx)(r.A,{features:[{icon:p,title:"Commit-Based Versioning",description:"Use Git commit hashes as unique version identifiers. Each commit represents a complete application state with full reproducibility."},{icon:h.A,title:"Branch-Based Development",description:"Leverage Git branches for parallel development. Feature branches become isolated version streams that can be merged systematically."},{icon:d.A,title:"Automatic Metadata Capture",description:"MLflow automatically captures Git commit, branch, and repository URL during runs. No manual version tracking required."},{icon:m.A,title:"Seamless Integration",description:"Works naturally with your existing Git workflow. No changes to development process or additional tooling required."}]}),"\n",(0,o.jsx)(t.h2,{id:"how-mlflow-captures-git-context",children:"How MLflow Captures Git Context"}),"\n",(0,o.jsx)(t.p,{children:"MLflow automatically captures Git metadata whenever you log models or start runs within a Git repository. This happens transparently\u2014no additional configuration needed."}),"\n",(0,o.jsx)(l.A,{concepts:[{icon:f.A,title:"Automatic Git Detection",description:"MLflow detects Git repositories and automatically captures commit hash, branch name, and repository URL during runs."},{icon:u.A,title:"Version Context Linking",description:"Use mlflow.set_active_model() to establish version context, then all subsequent traces automatically link to that Git-based version."},{icon:m.A,title:"Unified Metadata Hub",description:"Each version becomes a central reference linking Git commits, configurations, traces, and evaluation results in one versioned entity."}]}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Install MLflow and required packages:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'pip install --upgrade "mlflow>=3.1" openai\n'})}),"\n",(0,o.jsx)(t.p,{children:"Set your OpenAI API key:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'export OPENAI_API_KEY="your-api-key-here"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Create an MLflow experiment by following the ",(0,o.jsx)(t.a,{href:"/ml/getting-started",children:"getting started guide"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"step-1-create-a-sample-application",children:"Step 1: Create a sample application"}),"\n",(0,o.jsx)(t.p,{children:"The following code creates a simple application that prompts an LLM for a response:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import mlflow\nimport openai\n\n# Enable MLflow\'s autologging to instrument your application with Tracing\nmlflow.openai.autolog()\n\n# Set up OpenAI client\nclient = openai.OpenAI()\n\n\n# Use the trace decorator to capture the application\'s entry point\n@mlflow.trace\ndef my_app(input: str):\n    """Customer support agent application"""\n    # This call is automatically instrumented by `mlflow.openai.autolog()`\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=[\n            {"role": "system", "content": "You are a helpful customer support agent."},\n            {"role": "user", "content": input},\n        ],\n        temperature=0.7,\n        max_tokens=150,\n    )\n    return response.choices[0].message.content\n\n\n# Test the application\nresult = my_app(input="What is MLflow?")\nprint(result)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"step-2-add-version-tracking-to-your-apps-code",children:"Step 2: Add version tracking to your app's code"}),"\n",(0,o.jsx)(t.p,{children:"A LoggedModel version serves as a central record (metadata hub) for a specific version of your application. It doesn't need to store the application code itself. Instead, it points to where your code is managed (such as a Git commit hash)."}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:"mlflow.set_active_model()"})," to declare the LoggedModel that you are currently working with, or to create a new one. This function returns an ActiveModel object containing the model_id which is useful for subsequent operations."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["The following code uses the current Git commit hash as the model's name, so your model version only increments when you commit. To create a new LoggedModel for every change in your code base, see the ",(0,o.jsx)(t.a,{href:"#helper-function-to-compute-a-unique-hash-for-any-file-change",children:"helper function"})," that creates a unique LoggedModel for any change in your code base, even if not committed to Git."]})}),"\n",(0,o.jsxs)(t.p,{children:["Insert the following code at the top of your application from step 1. In your application, you must call ",(0,o.jsx)(t.code,{children:"set_active_model()"})," BEFORE you execute your app's code:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Keep original imports\nimport subprocess\n\n# Define your application and its version identifier\napp_name = "customer_support_agent"\n\n# Get current git commit hash for versioning\ntry:\n    git_commit = (\n        subprocess.check_output(["git", "rev-parse", "HEAD"])\n        .decode("ascii")\n        .strip()[:8]\n    )\n    version_identifier = f"git-{git_commit}"\nexcept subprocess.CalledProcessError:\n    version_identifier = "local-dev"  # Fallback if not in a git repo\n\nlogged_model_name = f"{app_name}-{version_identifier}"\n\n# Set the active model context\nactive_model_info = mlflow.set_active_model(name=logged_model_name)\nprint(\n    f"Active LoggedModel: \'{active_model_info.name}\', Model ID: \'{active_model_info.model_id}\'"\n)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"step-3-optional-record-parameters",children:"Step 3: (Optional) Record parameters"}),"\n",(0,o.jsxs)(t.p,{children:["You can log key configuration parameters that define this version of your application directly to the LoggedModel using ",(0,o.jsx)(t.code,{children:"mlflow.log_model_params()"}),". This is useful for recording things like LLM names, temperature settings, or retrieval strategies that are tied to this code version."]}),"\n",(0,o.jsx)(t.p,{children:"Add the following code below the code from step 2:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'app_params = {\n    "llm": "gpt-4o-mini",\n    "temperature": 0.7,\n    "retrieval_strategy": "vector_search_v3",\n}\n\n# Log params\nmlflow.log_model_params(model_id=active_model_info.model_id, params=app_params)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"step-4-run-the-application",children:"Step 4: Run the application"}),"\n",(0,o.jsx)(t.p,{children:"Call the application to see how the LoggedModel is created and tracked:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# These 2 invocations will be linked to the same LoggedModel\nresult = my_app(input="What is MLflow?")\nprint(result)\n\nresult = my_app(input="What is Databricks?")\nprint(result)\n'})}),"\n",(0,o.jsx)(t.p,{children:"To simulate a change without committing, add the following lines to manually create a new logged model:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Set the active model context\nactive_model_info = mlflow.set_active_model(name="new-name-set-manually")\nprint(\n    f"Active LoggedModel: \'{active_model_info.name}\', Model ID: \'{active_model_info.model_id}\'"\n)\n\napp_params = {\n    "llm": "gpt-4o",\n    "temperature": 0.7,\n    "retrieval_strategy": "vector_search_v4",\n}\n\n# Log params\nmlflow.log_model_params(model_id=active_model_info.model_id, params=app_params)\n\n# This will create a new LoggedModel\nresult = my_app(input="What is GenAI?")\nprint(result)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"step-5-view-traces-linked-to-the-loggedmodel",children:"Step 5: View traces linked to the LoggedModel"}),"\n",(0,o.jsx)(t.h3,{id:"use-the-ui",children:"Use the UI"}),"\n",(0,o.jsxs)(t.p,{children:["Go to the MLflow Experiment UI. In the ",(0,o.jsx)(t.strong,{children:"Traces"})," tab, you can see the version of the app that generated each trace. In the ",(0,o.jsx)(t.strong,{children:"Versions"})," tab, you can see each LoggedModel alongside its parameters and linked traces."]}),"\n",(0,o.jsx)(t.h3,{id:"use-the-sdk",children:"Use the SDK"}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(t.code,{children:"search_traces()"})," to query for traces from a LoggedModel:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import mlflow\n\ntraces = mlflow.search_traces(\n    filter_string=f\"metadata.`mlflow.modelId` = '{active_model_info.model_id}'\"\n)\nprint(traces)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(t.code,{children:"get_logged_model()"})," to get details of the LoggedModel:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import mlflow\nimport datetime\n\n# Get LoggedModel metadata\nlogged_model = mlflow.get_logged_model(model_id=active_model_info.model_id)\n\n# Inspect basic properties\nprint(f"\\n=== LoggedModel Information ===")\nprint(f"Model ID: {logged_model.model_id}")\nprint(f"Name: {logged_model.name}")\nprint(f"Experiment ID: {logged_model.experiment_id}")\nprint(f"Status: {logged_model.status}")\nprint(f"Model Type: {logged_model.model_type}")\ncreation_time = datetime.datetime.fromtimestamp(logged_model.creation_timestamp / 1000)\nprint(f"Created at: {creation_time}")\n\n# Access the parameters\nprint(f"\\n=== Model Parameters ===")\nfor param_name, param_value in logged_model.params.items():\n    print(f"{param_name}: {param_value}")\n\n# Access tags if any were set\nif logged_model.tags:\n    print(f"\\n=== Model Tags ===")\n    for tag_key, tag_value in logged_model.tags.items():\n        print(f"{tag_key}: {tag_value}")\n'})}),"\n",(0,o.jsx)(t.h2,{id:"helper-function-to-compute-a-unique-hash-for-any-file-change",children:"Helper function to compute a unique hash for any file change"}),"\n",(0,o.jsxs)(t.p,{children:["The below helper function automatically generates a name for each LoggedModel based on the status of your repo. To use this function, call ",(0,o.jsx)(t.code,{children:"set_active_model(name=get_current_git_hash())"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"get_current_git_hash()"})," generates a unique, deterministic identifier for the current state of a Git repository by returning either the HEAD commit hash (for clean repos) or a combination of the HEAD hash and a hash of uncommitted changes (for dirty repos). It ensures that different states of the repository always produce different identifiers, so every code change results in a new LoggedModel."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import subprocess\nimport hashlib\nimport os\n\n\ndef get_current_git_hash():\n    """\n    Get a deterministic hash representing the current git state.\n    For clean repositories, returns the HEAD commit hash.\n    For dirty repositories, returns a combination of HEAD + hash of changes.\n    """\n    try:\n        # Get the git repository root\n        result = subprocess.run(\n            ["git", "rev-parse", "--show-toplevel"],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        git_root = result.stdout.strip()\n\n        # Get the current HEAD commit hash\n        result = subprocess.run(\n            ["git", "rev-parse", "HEAD"], capture_output=True, text=True, check=True\n        )\n        head_hash = result.stdout.strip()\n\n        # Check if repository is dirty\n        result = subprocess.run(\n            ["git", "status", "--porcelain"], capture_output=True, text=True, check=True\n        )\n\n        if not result.stdout.strip():\n            # Repository is clean, return HEAD hash\n            return head_hash\n\n        # Repository is dirty, create deterministic hash of changes\n        # Collect all types of changes\n        changes_parts = []\n\n        # 1. Get staged changes\n        result = subprocess.run(\n            ["git", "diff", "--cached"], capture_output=True, text=True, check=True\n        )\n        if result.stdout:\n            changes_parts.append(("STAGED", result.stdout))\n\n        # 2. Get unstaged changes to tracked files\n        result = subprocess.run(\n            ["git", "diff"], capture_output=True, text=True, check=True\n        )\n        if result.stdout:\n            changes_parts.append(("UNSTAGED", result.stdout))\n\n        # 3. Get all untracked/modified files from status\n        result = subprocess.run(\n            ["git", "status", "--porcelain", "-uall"],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n\n        # Parse status output to handle all file states\n        status_lines = (\n            result.stdout.strip().split("\\n") if result.stdout.strip() else []\n        )\n        file_contents = []\n\n        for line in status_lines:\n            if len(line) >= 3:\n                status_code = line[:2]\n                filepath = line[\n                    3:\n                ]  # Don\'t strip - filepath starts exactly at position 3\n\n                # For any modified or untracked file, include its current content\n                if "?" in status_code or "M" in status_code or "A" in status_code:\n                    try:\n                        # Use absolute path relative to git root\n                        abs_filepath = os.path.join(git_root, filepath)\n                        with open(abs_filepath, "rb") as f:\n                            # Read as binary to avoid encoding issues\n                            content = f.read()\n                            # Create a hash of the file content\n                            file_hash = hashlib.sha256(content).hexdigest()\n                            file_contents.append(f"{filepath}:{file_hash}")\n                    except (IOError, OSError):\n                        file_contents.append(f"{filepath}:unreadable")\n\n        # Sort file contents for deterministic ordering\n        file_contents.sort()\n\n        # Combine all changes\n        all_changes_parts = []\n\n        # Add diff outputs\n        for change_type, content in changes_parts:\n            all_changes_parts.append(f"{change_type}:\\n{content}")\n\n        # Add file content hashes\n        if file_contents:\n            all_changes_parts.append("FILES:\\n" + "\\n".join(file_contents))\n\n        # Create final hash\n        all_changes = "\\n".join(all_changes_parts)\n        content_to_hash = f"{head_hash}\\n{all_changes}"\n        changes_hash = hashlib.sha256(content_to_hash.encode()).hexdigest()\n\n        # Return HEAD hash + first 8 chars of changes hash\n        return f"{head_hash[:32]}-dirty-{changes_hash[:8]}"\n\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(f"Git command failed: {e}")\n    except FileNotFoundError:\n        raise RuntimeError("Git is not installed or not in PATH")\n'})}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(t.p,{children:"Now that you understand the basics of Git-based application versioning with MLflow, you can explore these related topics:"}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(c.A,{href:"/genai/version-tracking/compare-app-versions",title:"Compare App Versions",description:"Learn systematic approaches to evaluate different versions using trace-based comparison",icon:g.A}),(0,o.jsx)(c.A,{href:"/genai/version-tracking/quickstart",title:"Version Tracking Quickstart",description:"Get started quickly with a hands-on guide to version tracking in MLflow",icon:_.A})]})]})}function j(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(k,{...e})}):k(e)}},79206:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);const i={conceptOverview:"conceptOverview_x8T_",overviewTitle:"overviewTitle_HyAI",conceptGrid:"conceptGrid_uJNV",conceptCard:"conceptCard_oday",conceptHeader:"conceptHeader_HCk5",conceptIcon:"conceptIcon_gejw",conceptTitle:"conceptTitle_TGMM",conceptDescription:"conceptDescription_ZyDn"};var o=n(74848);function a({concepts:e,title:t}){return(0,o.jsxs)("div",{className:i.conceptOverview,children:[t&&(0,o.jsx)("h3",{className:i.overviewTitle,children:t}),(0,o.jsx)("div",{className:i.conceptGrid,children:e.map((e,t)=>(0,o.jsxs)("div",{className:i.conceptCard,children:[(0,o.jsxs)("div",{className:i.conceptHeader,children:[e.icon&&(0,o.jsx)("div",{className:i.conceptIcon,children:(0,o.jsx)(e.icon,{size:20})}),(0,o.jsx)("h4",{className:i.conceptTitle,children:e.title})]}),(0,o.jsx)("p",{className:i.conceptDescription,children:e.description})]},t))})]})}},80964:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},82238:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);const i={featureHighlights:"featureHighlights_Ardf",highlightItem:"highlightItem_XPnN",highlightIcon:"highlightIcon_SUR8",highlightContent:"highlightContent_d0XP"};var o=n(74848);function a({features:e}){return(0,o.jsx)("div",{className:i.featureHighlights,children:e.map((e,t)=>(0,o.jsxs)("div",{className:i.highlightItem,children:[e.icon&&(0,o.jsx)("div",{className:i.highlightIcon,children:(0,o.jsx)(e.icon,{size:24})}),(0,o.jsxs)("div",{className:i.highlightContent,children:[(0,o.jsx)("h4",{children:e.title}),(0,o.jsx)("p",{children:e.description})]})]},t))})}},84722:(e,t,n)=>{n.d(t,{A:()=>c});var i=n(96540);const o=e=>{const t=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,t,n)=>n?n.toUpperCase():t.toLowerCase()))(e);return t.charAt(0).toUpperCase()+t.slice(1)},a=(...e)=>e.filter((e,t,n)=>Boolean(e)&&""!==e.trim()&&n.indexOf(e)===t).join(" ").trim(),r=e=>{for(const t in e)if(t.startsWith("aria-")||"role"===t||"title"===t)return!0};var l={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const s=(0,i.forwardRef)(({color:e="currentColor",size:t=24,strokeWidth:n=2,absoluteStrokeWidth:o,className:s="",children:c,iconNode:p,...h},d)=>(0,i.createElement)("svg",{ref:d,...l,width:t,height:t,stroke:e,strokeWidth:o?24*Number(n)/Number(t):n,className:a("lucide",s),...!c&&!r(h)&&{"aria-hidden":"true"},...h},[...p.map(([e,t])=>(0,i.createElement)(e,t)),...Array.isArray(c)?c:[c]])),c=(e,t)=>{const n=(0,i.forwardRef)(({className:n,...r},l)=>{return(0,i.createElement)(s,{ref:l,iconNode:t,className:a(`lucide-${c=o(e),c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,n),...r});var c});return n.displayName=o(e),n}},93672:(e,t,n)=>{n.d(t,{A:()=>i});const i=(0,n(84722).A)("code-xml",[["path",{d:"m18 16 4-4-4-4",key:"1inbqp"}],["path",{d:"m6 8-4 4 4 4",key:"15zrgr"}],["path",{d:"m14.5 4-5 16",key:"e7oirm"}]])}}]);