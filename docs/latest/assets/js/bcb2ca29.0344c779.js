"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[201],{15429:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/default-experiment-f45f721ff771bc25fd230690e83a8822.gif"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const l={},r=i.createContext(l);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},49374:(e,t,n)=>{n.d(t,{B:()=>s});n(96540);const i=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=n(86025),r=n(28774),o=n(74848);const a=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(i[e])return e}return null};function s({fn:e,children:t}){const n=a(e);if(!n)return(0,o.jsx)(o.Fragment,{children:t});const s=(0,l.Ay)(`/${i[n]}#${e}`);return(0,o.jsx)(r.A,{to:s,target:"_blank",children:t??(0,o.jsxs)("code",{children:[e,"()"]})})}},65724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"getting-started/logging-first-model/step2-mlflow-client","title":"Using the MLflow Client API","description":"In the previous section, we started an instance of the MLflow Tracking Server and the MLflow UI.","source":"@site/docs/classic-ml/getting-started/logging-first-model/step2-mlflow-client.mdx","sourceDirName":"getting-started/logging-first-model","slug":"/getting-started/logging-first-model/step2-mlflow-client","permalink":"/docs/latest/ml/getting-started/logging-first-model/step2-mlflow-client","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"classicMLSidebar","previous":{"title":"Starting the MLflow Tracking Server","permalink":"/docs/latest/ml/getting-started/logging-first-model/step1-tracking-server"},"next":{"title":"Creating Experiments","permalink":"/docs/latest/ml/getting-started/logging-first-model/step3-create-experiment"}}');var l=n(74848),r=n(28453),o=n(49374);const a={sidebar_position:2},s="Using the MLflow Client API",c={},h=[{value:"Importing Dependencies",id:"importing-dependencies",level:2},{value:"Configuring the MLflow Tracking Client",id:"configuring-the-mlflow-tracking-client",level:2},{value:"The Default Experiment",id:"the-default-experiment",level:2},{value:"Searching Experiments",id:"searching-experiments",level:2},{value:"Running it",id:"running-it",level:2}];function m(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"using-the-mlflow-client-api",children:"Using the MLflow Client API"})}),"\n",(0,l.jsxs)(t.p,{children:["In the previous section, we started an instance of the MLflow Tracking Server and the MLflow UI.\nFor this stage, we're going to be interfacing with the Tracking Server through one of the primary mechanisms\nthat you will use when training ML models, the ",(0,l.jsx)(o.B,{fn:"mlflow.client.MlflowClient",children:(0,l.jsx)(t.code,{children:"MlflowClient"})}),".\nFor the duration of this tutorial, this client API will be your primary interface for MLflow's tracking\ncapabilities, enabling you to:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Initiate a new Experiment."}),"\n",(0,l.jsx)(t.li,{children:"Start Runs within an Experiment."}),"\n",(0,l.jsx)(t.li,{children:"Document parameters, metrics, and tags for your Runs."}),"\n",(0,l.jsx)(t.li,{children:"Log artifacts linked to runs, such as models, tables, plots, and more."}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"importing-dependencies",children:"Importing Dependencies"}),"\n",(0,l.jsx)(t.p,{children:"In order to use the MLflowClient API, the initial step involves importing the necessary modules."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"# highlight-next-line\nfrom mlflow import MlflowClient\nfrom pprint import pprint\nfrom sklearn.ensemble import RandomForestRegressor\n"})}),"\n",(0,l.jsx)(t.p,{children:"With these modules imported, you're now prepared to configure the client and relay specifics about the location of your tracking server."}),"\n",(0,l.jsx)(t.h2,{id:"configuring-the-mlflow-tracking-client",children:"Configuring the MLflow Tracking Client"}),"\n",(0,l.jsxs)(t.p,{children:["By default, barring any modifications to the ",(0,l.jsx)(t.code,{children:"MLFLOW_TRACKING_URI"})," environment variable, initializing\nthe MlflowClient will designate your local storage as the tracking server.\nThis means your experiments, data, models, and related attributes will be stored within the active execution directory."]}),"\n",(0,l.jsx)(t.p,{children:"For the context of this guide, we'll utilize the tracking server initialized earlier in the documentation, instead of using the\nclient to log to the local file system directory."}),"\n",(0,l.jsxs)(t.p,{children:["In order to connect to the tracking server that we created in the previous section of this tutorial, we'll need to use the uri that we\nassigned the server when we started it. The two components that we submitted as arguments to the ",(0,l.jsx)(t.code,{children:"mlflow server"})," command were the\n",(0,l.jsx)(t.code,{children:"host"})," and the ",(0,l.jsx)(t.code,{children:"port"}),". Combined, these form the ",(0,l.jsx)(t.code,{children:"tracking_uri"})," argument that we will specify to start an instance of the client."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'client = MlflowClient(tracking_uri="http://127.0.0.1:8080")\n'})}),"\n",(0,l.jsx)(t.p,{children:"We now have a client interface to the tracking server that can both send data to and retrieve data from the tracking server."}),"\n",(0,l.jsx)(t.h2,{id:"the-default-experiment",children:"The Default Experiment"}),"\n",(0,l.jsx)(t.p,{children:"Before we get to logging anything to the Tracking Server, let's take a look at a key feature that exists at the outset of starting any MLflow\nTracking Server: the Default Experiment."}),"\n",(0,l.jsx)(t.p,{children:"The Default Experiment is a placeholder that is used to encapsulate all run information if an explicit Experiment is not declared.\nWhile using MLflow, you'll be creating new experiments in order to organize projects, project iterations, or logically group large modeling activities\ntogether in a grouped hierarchical collection. However, if you manage to forget to create a new Experiment before using the MLflow tracking\ncapabilities, the Default Experiment is a fallback for you to ensure that your valuable tracking data is not lost when executing a run."}),"\n",(0,l.jsxs)(t.p,{children:["Let's see what this Default Experiment looks like by using the ",(0,l.jsx)(o.B,{fn:"mlflow.client.MlflowClient.search_experiments"})," API."]}),"\n",(0,l.jsx)(t.h2,{id:"searching-experiments",children:"Searching Experiments"}),"\n",(0,l.jsxs)(t.p,{children:["The first thing that we're going to do is to view the metadata associated with the Experiments that are on the server. We can accomplish this through the\nuse of the ",(0,l.jsx)(o.B,{fn:"mlflow.client.MlflowClient.search_experiments"})," API. Let's issue a search query to see what the results are."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:"all_experiments = client.search_experiments()\n\nprint(all_experiments)\n"})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",metastring:'title="Output result"',children:"[<Experiment: artifact_location='./mlruns/0', creation_time=None, experiment_id='0', last_update_time=None, lifecycle_stage='active', name='Default', tags={}>]\n"})}),"\n",(0,l.jsxs)(t.p,{children:["It is worth noting that the return type of the ",(0,l.jsx)(t.code,{children:"search_experiments()"})," API is not a basic collection structure. Rather, it is a list of\n",(0,l.jsx)(t.code,{children:"Experiment"})," objects. Many of the return values of MLflow's client APIs return objects that contain metadata attributes associated with the task being performed. This\nis an important aspect to remember, as it makes more complex sequences of actions easier to perform, which will be covered in later tutorials."]}),"\n",(0,l.jsxs)(t.p,{children:["With the returned collection, we can iterate over these objects with a comprehension to access the specific metadata attributes of the ",(0,l.jsx)(t.code,{children:"Default"})," experiment."]}),"\n",(0,l.jsxs)(t.p,{children:["To get familiar with accessing elements from returned collections from MLflow APIs, let's extract the ",(0,l.jsx)(t.code,{children:"name"})," and the ",(0,l.jsx)(t.code,{children:"lifecycle_stage"})," from the ",(0,l.jsx)(t.code,{children:"search_experiments()"}),"\nquery and extract these attributes into a dict."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-python",children:'default_experiment = [\n    {"name": experiment.name, "lifecycle_stage": experiment.lifecycle_stage}\n    for experiment in all_experiments\n    if experiment.name == "Default"\n][0]\n\npprint(default_experiment)\n'})}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",metastring:'title="Default Experiment name and stage as a dict"',children:"{'name': 'Default', 'lifecycle_stage': 'active'}\n"})}),"\n",(0,l.jsx)(t.h2,{id:"running-it",children:"Running it"}),"\n",(0,l.jsx)("figure",{className:"center-div",style:{width:1024,maxWidth:"100%",textAlign:"center"},children:(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.img,{alt:"Exploring the Default Experiment",src:n(15429).A+"",width:"2048",height:"1639"}),"\n",(0,l.jsx)("figcaption",{children:"Using the MLflow Client's search_experiments() API to view the Default Experiment"})]})}),"\n",(0,l.jsx)(t.p,{children:"In the next step, we'll create our first experiment and dive into the options that are available for\nproviding metadata information that helps to keep track of related experiments and organize our\nruns within experiments so that we can effectively compare the results of different parameters\nfor training runs."}),"\n",(0,l.jsxs)(t.p,{children:["You can now ",(0,l.jsx)(t.a,{href:"/ml/getting-started/logging-first-model/step3-create-experiment",children:"continue to the next section"})," of the tutorial, or ",(0,l.jsx)(t.a,{href:"/ml/getting-started/logging-first-model",children:"return to the tutorial listing"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(m,{...e})}):m(e)}}}]);