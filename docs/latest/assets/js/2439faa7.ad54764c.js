"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[14],{10493:(e,n,t)=>{t.d(n,{Zp:()=>s,AC:()=>r,WO:()=>c,_C:()=>p,$3:()=>m,jK:()=>d});var l=t(34164);const a={CardGroup:"CardGroup_P84T",NoGap:"NoGap_O9Dj",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardRounded:"SmallLogoCardRounded_X50_",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var o=t(28774),i=t(74848);const r=({children:e,isSmall:n,cols:t,noGap:o})=>(0,i.jsx)("div",{className:(0,l.A)(a.CardGroup,n?a.AutofillColumns:t?a[`Cols${t}`]:a.MaxThreeColumns,o&&a.NoGap),children:e}),s=({children:e,link:n=""})=>n?(0,i.jsx)(o.A,{className:(0,l.A)(a.Link,a.Card,a.CardBordered),to:n,children:e}):(0,i.jsx)("div",{className:(0,l.A)(a.Card,a.CardBordered),children:e}),p=({headerText:e,link:n,text:t})=>(0,i.jsx)(s,{link:n,children:(0,i.jsxs)("span",{children:[(0,i.jsx)("div",{className:(0,l.A)(a.CardTitle,a.BoxRoot,a.PaddingBottom4),style:{pointerEvents:"none"},children:(0,i.jsx)("div",{className:(0,l.A)(a.BoxRoot,a.FlexFlex,a.FlexAlignItemsCenter,a.FlexDirectionRow,a.FlexJustifyContentFlexStart,a.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,i.jsx)("div",{className:(0,l.A)(a.BoxRoot,a.BoxHideIfEmpty,a.MarginTop4,a.MarginLeft4),style:{pointerEvents:"auto"},children:(0,i.jsx)("span",{className:"",children:e})})})}),(0,i.jsx)("span",{className:(0,l.A)(a.TextColor,a.CardBody),children:(0,i.jsx)("p",{children:t})})]})}),c=({description:e,children:n,link:t})=>(0,i.jsx)(s,{link:t,children:(0,i.jsxs)("div",{className:a.LogoCardContent,children:[(0,i.jsx)("div",{className:a.LogoCardImage,children:n}),(0,i.jsx)("p",{className:a.TextColor,children:e})]})}),m=({children:e,link:n})=>(0,i.jsx)("div",{className:(0,l.A)(a.Card,a.CardBordered,a.SmallLogoCardRounded),children:n?(0,i.jsx)(o.A,{className:(0,l.A)(a.Link),to:n,children:(0,i.jsx)("div",{className:a.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,l.A)("max-height-img-container",a.SmallLogoCardImage),children:e})})}):(0,i.jsx)("div",{className:a.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,l.A)("max-height-img-container",a.SmallLogoCardImage),children:e})})}),d=({title:e,description:n,link:t=""})=>(0,i.jsx)(s,{link:t,children:(0,i.jsxs)("div",{className:a.TitleCardContent,children:[(0,i.jsx)("div",{className:(0,l.A)(a.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:e}),(0,i.jsx)("hr",{className:(0,l.A)(a.TitleCardSeparator),style:{margin:"12px 0"}}),(0,i.jsx)("p",{className:(0,l.A)(a.TextColor),children:n})]})})},49374:(e,n,t)=>{t.d(n,{B:()=>r});t(96540);const l=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var a=t(86025),o=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(l[e])return e}return null};function r({fn:e,children:n,hash:t}){const r=i(e);if(!r)return(0,o.jsx)(o.Fragment,{children:n});const s=(0,a.Ay)(`/${l[r]}#${t??e}`);return(0,o.jsx)("a",{href:s,target:"_blank",children:n??(0,o.jsxs)("code",{children:[e,"()"]})})}},55907:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/autogen-trace-872bd836d047c1a308cee87a312d0260.png"},65156:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"tracing/integrations/listing/autogen","title":"Tracing AutoGen","description":"AutoGen tracing via autolog","source":"@site/docs/genai/tracing/integrations/listing/autogen.mdx","sourceDirName":"tracing/integrations/listing","slug":"/tracing/integrations/listing/autogen","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/autogen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"AutoGen"},"sidebar":"genAISidebar","previous":{"title":"AG2","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/ag2"},"next":{"title":"Semantic Kernel","permalink":"/mlflow-website/docs/latest/genai/tracing/integrations/listing/semantic_kernel"}}');var a=t(74848),o=t(28453),i=t(49374);t(10493),t(14252),t(11470),t(19365);const r={sidebar_position:6,sidebar_label:"AutoGen"},s="Tracing AutoGen",p={},c=[{value:"Supported APIs",id:"supported-apis",level:3},{value:"Basic Example",id:"basic-example",level:3},{value:"Tool Agent",id:"tool-agent",level:3},{value:"Token usage",id:"token-usage",level:2},{value:"Supported APIs",id:"supported-apis-1",level:3},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:3}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"tracing-autogen",children:"Tracing AutoGen"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"AutoGen tracing via autolog",src:t(55907).A+"",width:"2148",height:"1000"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://microsoft.github.io/autogen/stable/index.html",children:"AutoGen AgentChat"})," is an open-source framework for building conversational single and multi-agent applications."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"../../",children:"MLflow Tracing"})," provides automatic tracing capability for AutoGen AgentChat. By enabling auto tracing\nfor AutoGen by calling the ",(0,a.jsx)(i.B,{fn:"mlflow.autogen.autolog"})," function, MLflow will capture nested traces and log them to the active MLflow Experiment upon agents execution."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.autogen.autolog()\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Note that ",(0,a.jsx)(n.code,{children:"mlflow.autogen.autolog()"})," should be called after importing AutoGen classes that are traced.\nSubclasses of ",(0,a.jsx)(n.code,{children:"ChatCompletionClient"})," such as ",(0,a.jsx)(n.code,{children:"OpenAIChatCompletionClient"})," or ",(0,a.jsx)(n.code,{children:"AnthropicChatCompletionClient"})," and subclasses of ",(0,a.jsx)(n.code,{children:"BaseChatAgent"})," such as ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," or ",(0,a.jsx)(n.code,{children:"CodeExecutorAgent"})," should be imported before calling ",(0,a.jsx)(n.code,{children:"mlflow.autogen.autolog()"}),".\nAlso note that this integration is for AutoGen 0.4.9 or above. If you are using AutoGen 0.2, please use the ",(0,a.jsx)(n.a,{href:"../ag2",children:"AG2 integration"})," instead."]})}),"\n",(0,a.jsx)(n.p,{children:"MLflow captures the following information about the AutoGen agents:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Messages passed to agents including images"}),"\n",(0,a.jsx)(n.li,{children:"Responses from agents"}),"\n",(0,a.jsx)(n.li,{children:"LLM and tool calls made by each agent"}),"\n",(0,a.jsx)(n.li,{children:"Latencies"}),"\n",(0,a.jsx)(n.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"supported-apis",children:"Supported APIs"}),"\n",(0,a.jsxs)(n.p,{children:["MLflow supports automatic tracing for the following AutoGen APIs.\nIt does not support tracing for asynchronous generators. Asynchronous streaming APIs such as ",(0,a.jsx)(n.code,{children:"run_stream"})," or ",(0,a.jsx)(n.code,{children:"on_messages_stream"})," are not traced."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ChatCompletionClient.create"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"BaseChatAgent.run"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"BaseChatAgent.on_messages"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import os\n\n# Imports of autogen classes should happen before calling autolog.\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nimport mlflow\n\n# Turn on auto tracing for AutoGen\nmlflow.autogen.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("AutoGen")\n\nmodel_client = OpenAIChatCompletionClient(\n    model="gpt-4.1-nano",\n    # api_key="YOUR_API_KEY",\n)\n\nagent = AssistantAgent(\n    name="assistant",\n    model_client=model_client,\n    system_message="You are a helpful assistant.",\n)\n\nresult = await agent.run(task="Say \'Hello World!\'")\nprint(result)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"tool-agent",children:"Tool Agent"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import os\n\n# Imports of autogen classes should happen before calling autolog.\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nimport mlflow\n\n# Turn on auto tracing for AutoGen\nmlflow.autogen.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("AutoGen")\n\nmodel_client = OpenAIChatCompletionClient(\n    model="gpt-4.1-nano",\n    # api_key="YOUR_API_KEY",\n)\n\n\ndef add(a: int, b: int) -> int:\n    """add two numbers"""\n    return a + b\n\n\nagent = AssistantAgent(\n    name="assistant",\n    model_client=model_client,\n    system_message="You are a helpful assistant.",\n    tools=[add],\n)\n\nawait agent.run(task="1+1")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"token-usage",children:"Token usage"}),"\n",(0,a.jsxs)(n.p,{children:["MLflow >= 3.2.0 supports token usage tracking for AutoGen. The token usage for each LLM call will be logged in the ",(0,a.jsx)(n.code,{children:"mlflow.chat.tokenUsage"})," attribute. The total token usage throughout the trace will be\navailable in the ",(0,a.jsx)(n.code,{children:"token_usage"})," field of the trace info object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import json\nimport mlflow\n\nmlflow.autogen.autolog()\n\n# Run the tool calling agent defined in the previous section\nawait agent.run(task="1+1")\n\n# Get the trace object just created\nlast_trace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id=last_trace_id)\n\n# Print the token usage\ntotal_usage = trace.info.token_usage\nprint("== Total token usage: ==")\nprint(f"  Input tokens: {total_usage[\'input_tokens\']}")\nprint(f"  Output tokens: {total_usage[\'output_tokens\']}")\nprint(f"  Total tokens: {total_usage[\'total_tokens\']}")\n\n# Print the token usage for each LLM call\nprint("\\n== Detailed usage for each LLM call: ==")\nfor span in trace.data.spans:\n    if usage := span.get_attribute("mlflow.chat.tokenUsage"):\n        print(f"{span.name}:")\n        print(f"  Input tokens: {usage[\'input_tokens\']}")\n        print(f"  Output tokens: {usage[\'output_tokens\']}")\n        print(f"  Total tokens: {usage[\'total_tokens\']}")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"== Total token usage: ==\n  Input tokens: 65\n  Output tokens: 17\n  Total tokens: 82\n\n== Detailed usage for each LLM call: ==\ncreate:\n  Input tokens: 65\n  Output tokens: 17\n  Total tokens: 82\n"})}),"\n",(0,a.jsx)(n.h3,{id:"supported-apis-1",children:"Supported APIs"}),"\n",(0,a.jsxs)(n.p,{children:["MLflow supports automatic token usage tracking for the following AutoGen APIs.\nIt does not support token usage tracking for asynchronous generators. Asynchronous streaming APIs such as ",(0,a.jsx)(n.code,{children:"run_stream"})," or ",(0,a.jsx)(n.code,{children:"on_messages_stream"})," are not tracked."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ChatCompletionClient.create"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"BaseChatAgent.run"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"BaseChatAgent.on_messages"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,a.jsxs)(n.p,{children:["Auto tracing for AutoGen can be disabled globally by calling ",(0,a.jsx)(n.code,{children:"mlflow.autogen.autolog(disable=True)"})," or ",(0,a.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);