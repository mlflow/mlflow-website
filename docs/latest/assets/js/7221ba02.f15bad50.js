"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7786],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var l=n(96540);const o={},a=l.createContext(o);function r(e){const t=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),l.createElement(a.Provider,{value:t},e.children)}},49374:(e,t,n)=>{n.d(t,{B:()=>s});n(96540);const l=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=n(86025),a=n(28774),r=n(74848);const i=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(l[e])return e}return null};function s({fn:e,children:t}){const n=i(e);if(!n)return(0,r.jsx)(r.Fragment,{children:t});const s=(0,o.Ay)(`/${l[n]}#${e}`);return(0,r.jsx)(a.A,{to:s,target:"_blank",children:t??(0,r.jsxs)("code",{children:[e,"()"]})})}},70522:(e,t,n)=>{n.d(t,{A:()=>l});const l=n.p+"assets/images/groq-tracing-c479723e95472339d07b0dd94b38854b.png"},95773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>m});const l=JSON.parse('{"id":"tracing/integrations/listing/groq","title":"Tracing Groq","description":"Groq tracing via autolog","source":"@site/docs/genai/tracing/integrations/listing/groq.mdx","sourceDirName":"tracing/integrations/listing","slug":"/tracing/integrations/listing/groq","permalink":"/docs/latest/genai/tracing/integrations/listing/groq","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"sidebar_label":"Groq"},"sidebar":"genAISidebar","previous":{"title":"Mistral","permalink":"/docs/latest/genai/tracing/integrations/listing/mistral"},"next":{"title":"Smolagents","permalink":"/docs/latest/genai/tracing/integrations/listing/smolagents"}}');var o=n(74848),a=n(28453),r=n(49374);const i={sidebar_position:11,sidebar_label:"Groq"},s="Tracing Groq",p={},m=[{value:"Example Usage",id:"example-usage",level:3},{value:"Token usage",id:"token-usage",level:2},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"tracing-groq",children:"Tracing Groq"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Groq tracing via autolog",src:n(70522).A+"",width:"1851",height:"961"})}),"\n",(0,o.jsxs)(t.p,{children:["MLflow Tracing provides automatic tracing capability when using Groq.\nWhen Groq auto-tracing is enabled by calling the ",(0,o.jsx)(r.B,{fn:"mlflow.groq.autolog"})," function,\nusage of the Groq SDK will automatically record generated traces during interactive development."]}),"\n",(0,o.jsx)(t.p,{children:"Note that only synchronous calls are supported, and that asynchronous API and streaming methods are not traced."}),"\n",(0,o.jsx)(t.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import groq\n\nimport mlflow\n\n# Turn on auto tracing for Groq by calling mlflow.groq.autolog()\nmlflow.groq.autolog()\n\nclient = groq.Groq()\n\n# Use the create method to create new message\nmessage = client.chat.completions.create(\n    model="llama3-8b-8192",\n    messages=[\n        {\n            "role": "user",\n            "content": "Explain the importance of low latency LLMs.",\n        }\n    ],\n)\n\nprint(message.choices[0].message.content)\n'})}),"\n",(0,o.jsx)(t.h2,{id:"token-usage",children:"Token usage"}),"\n",(0,o.jsxs)(t.p,{children:["MLflow >= 3.2.0 supports token usage tracking for Groq. The token usage for each LLM call will be logged in the ",(0,o.jsx)(t.code,{children:"mlflow.chat.tokenUsage"})," attribute. The total token usage throughout the trace will be\navailable in the ",(0,o.jsx)(t.code,{children:"token_usage"})," field of the trace info object."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import json\nimport mlflow\n\nmlflow.groq.autolog()\n\nclient = groq.Groq()\n\n# Use the create method to create new message\nmessage = client.chat.completions.create(\n    model="llama3-8b-8192",\n    messages=[\n        {\n            "role": "user",\n            "content": "Explain the importance of low latency LLMs.",\n        }\n    ],\n)\n\n# Get the trace object just created\nlast_trace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id=last_trace_id)\n\n# Print the token usage\ntotal_usage = trace.info.token_usage\nprint("== Total token usage: ==")\nprint(f"  Input tokens: {total_usage[\'input_tokens\']}")\nprint(f"  Output tokens: {total_usage[\'output_tokens\']}")\nprint(f"  Total tokens: {total_usage[\'total_tokens\']}")\n\n# Print the token usage for each LLM call\nprint("\\n== Detailed usage for each LLM call: ==")\nfor span in trace.data.spans:\n    if usage := span.get_attribute("mlflow.chat.tokenUsage"):\n        print(f"{span.name}:")\n        print(f"  Input tokens: {usage[\'input_tokens\']}")\n        print(f"  Output tokens: {usage[\'output_tokens\']}")\n        print(f"  Total tokens: {usage[\'total_tokens\']}")\n'})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"== Total token usage: ==\n  Input tokens: 21\n  Output tokens: 628\n  Total tokens: 649\n\n== Detailed usage for each LLM call: ==\nCompletions:\n  Input tokens: 21\n  Output tokens: 628\n"})}),"\n",(0,o.jsx)(t.p,{children:"Currently, groq token usage doesn't support token usage tracking for Audio transcription and Audio translation."}),"\n",(0,o.jsx)(t.h2,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,o.jsxs)(t.p,{children:["Auto tracing for Groq can be disabled globally by calling ",(0,o.jsx)(t.code,{children:"mlflow.groq.autolog(disable=True)"})," or ",(0,o.jsx)(t.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function f(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);