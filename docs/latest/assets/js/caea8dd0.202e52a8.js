"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4477],{14252:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var o=t(65195);const r={tableOfContentsInline:"tableOfContentsInline_prmo"};var i=t(74848);function s({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,i.jsx)("div",{className:r.tableOfContentsInline,children:(0,i.jsx)(o.A,{toc:e,minHeadingLevel:n,maxHeadingLevel:t,className:"table-of-contents",linkClassName:null})})}},17135:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>d,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"deep-learning/transformers/guide/index","title":"\ud83e\udd17 Transformers within MLflow","description":"The transformers model flavor enables logging of transformers models, components, and pipelines","source":"@site/docs/classic-ml/deep-learning/transformers/guide/index.mdx","sourceDirName":"deep-learning/transformers/guide","slug":"/deep-learning/transformers/guide/","permalink":"/docs/latest/ml/deep-learning/transformers/guide/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"MLflow Transformers Flavor","permalink":"/docs/latest/ml/deep-learning/transformers/"},"next":{"title":"Working with Large Transformers Models","permalink":"/docs/latest/ml/deep-learning/transformers/large-models/"}}');var r=t(74848),i=t(28453),s=t(14252),l=t(49374),a=t(72839);const d={},c="\ud83e\udd17 Transformers within MLflow",m={},p=[{value:"Loading a Transformers Model as a Python Function",id:"loading-a-transformers-model-as-a-python-function",level:2},{value:"Supported Transformers Pipeline types",id:"supported-transformers-pipeline-types",level:3},{value:"Example of loading a transformers model as a python function",id:"example-of-loading-a-transformers-model-as-a-python-function",level:3},{value:"Saving Prompt Templates with Transformer Pipelines",id:"saving-prompt-templates-with-transformer-pipelines",level:2},{value:"Using model_config and Model Signature Params for Inference",id:"using-model-config-and-model-signature-params-for-inference",level:2},{value:"Pipelines vs. Component Logging",id:"pipelines-vs-component-logging",level:2},{value:"Logging a components-based model",id:"logging-a-components-based-model",level:3},{value:"Saving a pipeline and loading components",id:"saving-a-pipeline-and-loading-components",level:3},{value:"Automatic Metadata and ModelCard logging",id:"automatic-metadata-and-modelcard-logging",level:2},{value:"Automatic Signature inference",id:"automatic-signature-inference",level:2},{value:"Scale Inference with Overriding Pytorch dtype",id:"scalability-for-inference",level:2},{value:"Input Data Types for Audio Pipelines",id:"input-data-types-for-audio-pipelines",level:2},{value:"PEFT Models in MLflow Transformers flavor",id:"peft-models-in-mlflow-transformers-flavor",level:2},{value:"PEFT Models in MLflow Tutorial",id:"peft-models-in-mlflow-tutorial",level:3},{value:"Format of Saved PEFT Model",id:"format-of-saved-peft-model",level:3},{value:"Limitations of PEFT Models in MLflow",id:"limitations-of-peft-models-in-mlflow",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-transformers-within-mlflow",children:"\ud83e\udd17 Transformers within MLflow"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"transformers"})," model flavor enables logging of ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/index",children:"transformers models, components, and pipelines"}),"\nin MLflow format via the ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.save_model"})," and ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.log_model"})," functions. Use of these\nfunctions also adds the ",(0,r.jsx)(n.code,{children:"python_function"})," flavor to the MLflow Models that they produce, allowing the model to be\ninterpreted as a generic Python function for inference via ",(0,r.jsx)(l.B,{fn:"mlflow.pyfunc.load_model"}),".\nYou can also use the ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.load_model"})," function to load a saved or logged MLflow\nModel with the ",(0,r.jsx)(n.code,{children:"transformers"})," flavor in the native transformers formats."]}),"\n",(0,r.jsxs)(n.p,{children:["This page explains the detailed features and configurations of the MLflow ",(0,r.jsx)(n.code,{children:"transformers"})," flavor. For the general introduction about the MLflow's Transformer integration,\nplease refer to the ",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers",children:"MLflow Transformers Flavor"})," page."]}),"\n",(0,r.jsx)(s.A,{toc:p,maxHeadingLevel:2}),"\n",(0,r.jsx)(n.h2,{id:"loading-a-transformers-model-as-a-python-function",children:"Loading a Transformers Model as a Python Function"}),"\n",(0,r.jsx)(n.h3,{id:"supported-transformers-pipeline-types",children:"Supported Transformers Pipeline types"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"transformers"})," ",(0,r.jsx)(n.a,{href:"/ml/model#pyfunc-model-flavor",children:"python_function (pyfunc) model flavor"})," simplifies\nand standardizes both the inputs and outputs of pipeline inference. This conformity allows for serving\nand batch inference by coercing the data structures that are required for ",(0,r.jsx)(n.code,{children:"transformers"})," inference pipelines\nto formats that are compatible with json serialization and casting to Pandas DataFrames."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Certain ",(0,r.jsx)(n.em,{children:"TextGenerationPipeline"})," types, particularly instructional-based ones, may return the original\nprompt and included line-formatting carriage returns ",(0,r.jsx)(n.em,{children:'"\\n"'})," in their outputs. For these pipeline types,\nif you would like to disable the prompt return, you can set the following in the ",(0,r.jsx)(n.em,{children:"model_config"})," dictionary when\nsaving or logging the model: ",(0,r.jsx)(n.em,{children:'"include_prompt": False'}),". To remove the newline characters from within the body\nof the generated text output, you can add the ",(0,r.jsx)(n.em,{children:'"collapse_whitespace": True'})," option to the ",(0,r.jsx)(n.em,{children:"model_config"})," dictionary.\nIf the pipeline type being saved does not inherit from ",(0,r.jsx)(n.em,{children:"TextGenerationPipeline"}),", these options will not perform\nany modification to the output returned from pipeline inference."]})}),"\n",(0,r.jsxs)(n.p,{children:["In the current version, audio and text-based large language\nmodels are supported for use with ",(0,r.jsx)(n.code,{children:"pyfunc"}),", while computer vision, multi-modal, timeseries,\nreinforcement learning, and graph models are only supported for native type loading via ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.load_model"})]}),"\n",(0,r.jsxs)(n.admonition,{title:"attention",type:"warning",children:[(0,r.jsxs)(n.p,{children:["Not all ",(0,r.jsx)(n.code,{children:"transformers"})," pipeline types are supported. See the table below for the list of currently supported Pipeline\ntypes that can be loaded as ",(0,r.jsx)(n.code,{children:"pyfunc"}),"."]}),(0,r.jsxs)(n.p,{children:["Future releases of MLflow will introduce ",(0,r.jsx)(n.code,{children:"pyfunc"})," support for these additional types."]})]}),"\n",(0,r.jsxs)(n.p,{children:["The table below shows the mapping of ",(0,r.jsx)(n.code,{children:"transformers"})," pipeline types to the ",(0,r.jsx)(n.a,{href:"/ml/model#pyfunc-model-flavor",children:"python_function (pyfunc) model flavor"}),"\ndata type inputs and outputs."]}),"\n",(0,r.jsxs)(n.admonition,{title:"important",type:"warning",children:[(0,r.jsxs)(n.p,{children:["The inputs and outputs of the ",(0,r.jsx)(n.code,{children:"pyfunc"})," implementation of these pipelines ",(0,r.jsx)(n.em,{children:"are not guaranteed to match"})," the input types and output types that would\nreturn from a native use of a given pipeline type. If your use case requires access to scores, top_k results, or other additional references within\nthe output from a pipeline inference call, please use the native implementation by loading via ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.load_model"})," to\nreceive the full output."]}),(0,r.jsxs)(n.p,{children:["Similarly, if your use case requires the use of raw tensor outputs or processing of outputs through an external ",(0,r.jsx)(n.code,{children:"processor"})," module, load the\nmodel components directly as a ",(0,r.jsx)(n.code,{children:"dict"})," by calling ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.load_model"})," and specify the ",(0,r.jsx)(n.code,{children:"return_type"})," argument as 'components'."]})]}),"\n",(0,r.jsxs)(a.X,{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Pipeline Type"}),(0,r.jsx)("th",{children:"Input Type"}),(0,r.jsx)("th",{children:"Output Type"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Instructional Text Generation"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Conversational"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Summarization"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Text Classification"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"pd.DataFrame (dtypes: {'label': str, 'score': double})"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Text Generation"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Text2Text Generation"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Token Classification"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Translation"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"ZeroShot Classification*"}),(0,r.jsx)("td",{children:"Dict[str, [List[str] | str]*"}),(0,r.jsx)("td",{children:"pd.DataFrame (dtypes: {'sequence': str, 'labels': str, 'scores': double})"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Table Question Answering**"}),(0,r.jsx)("td",{children:"Dict[str, [List[str] | str]**"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Question Answering***"}),(0,r.jsx)("td",{children:"Dict[str, str]***"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Fill Mask****"}),(0,r.jsx)("td",{children:"str or List[str]****"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Feature Extraction"}),(0,r.jsx)("td",{children:"str or List[str]"}),(0,r.jsx)("td",{children:"np.ndarray"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"AutomaticSpeechRecognition"}),(0,r.jsx)("td",{children:"bytes*****, str, or np.ndarray"}),(0,r.jsx)("td",{children:"List[str]"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"AudioClassification"}),(0,r.jsx)("td",{children:"bytes*****, str, or np.ndarray"}),(0,r.jsx)("td",{children:"pd.DataFrame (dtypes: {'label': str, 'score': double})"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"* A collection of these inputs can also be passed. The standard required key names are 'sequences' and 'candidate_labels', but these may vary.\nCheck the input requirements for the architecture that you're using to ensure that the correct dictionary key names are provided."}),"\n",(0,r.jsx)(n.p,{children:"** A collection of these inputs can also be passed. The reference table must be a json encoded dict (i.e. {'query': 'what did we sell most of?', 'table': json.dumps(table_as_dict)})"}),"\n",(0,r.jsx)(n.p,{children:"*** A collection of these inputs can also be passed. The standard required key names are 'question' and 'context'. Verify the expected input key names match the\nexpected input to the model to ensure your inference request can be read properly."}),"\n",(0,r.jsx)(n.p,{children:"**** The mask syntax for the model that you've chosen is going to be specific to that model's implementation. Some are '[MASK]', while others are '<mask>'. Verify the expected syntax to\navoid failed inference requests."}),"\n",(0,r.jsxs)(n.p,{children:["***** If using ",(0,r.jsx)(n.em,{children:"pyfunc"})," in MLflow Model Serving for realtime inference, the raw audio in bytes format must be base64 encoded prior to submitting to the endpoint. String inputs will be interpreted as uri locations."]}),"\n",(0,r.jsx)(n.h3,{id:"example-of-loading-a-transformers-model-as-a-python-function",children:"Example of loading a transformers model as a python function"}),"\n",(0,r.jsxs)(n.p,{children:["In the below example, a simple pre-trained model is used within a pipeline. After logging to MLflow, the pipeline is\nloaded as a ",(0,r.jsx)(n.code,{children:"pyfunc"})," and used to generate a response from a passed-in list of strings."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport transformers\n\n# Read a pre-trained conversation pipeline from HuggingFace hub\nconversational_pipeline = transformers.pipeline(model="microsoft/DialoGPT-medium")\n\n# Define the signature\nsignature = mlflow.models.infer_signature(\n    "Hi there, chatbot!",\n    mlflow.transformers.generate_signature_output(\n        conversational_pipeline, "Hi there, chatbot!"\n    ),\n)\n\n# Log the pipeline\nwith mlflow.start_run():\n    model_info = mlflow.transformers.log_model(\n        transformers_model=conversational_pipeline,\n        name="chatbot",\n        task="conversational",\n        signature=signature,\n        input_example="A clever and witty question",\n    )\n\n# Load the saved pipeline as pyfunc\nchatbot = mlflow.pyfunc.load_model(model_uri=model_info.model_uri)\n\n# Ask the chatbot a question\nresponse = chatbot.predict("What is machine learning?")\n\nprint(response)\n\n# >> [It\'s a new thing that\'s been around for a while.]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"saving-prompt-templates-with-transformer-pipelines",children:"Saving Prompt Templates with Transformer Pipelines"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This feature is only available in MLflow 2.10.0 and above."})}),"\n",(0,r.jsx)(n.p,{children:"MLflow supports specifying prompt templates for certain pipeline types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.FeatureExtractionPipeline",children:"feature-extraction"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.FillMaskPipeline",children:"fill-mask"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.SummarizationPipeline",children:"summarization"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.Text2TextGenerationPipeline",children:"text2text-generation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.TextGenerationPipeline",children:"text-generation"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Prompt templates are strings that are used to format user inputs prior to ",(0,r.jsx)(n.code,{children:"pyfunc"})," inference. To specify a prompt template,\nuse the ",(0,r.jsx)(n.code,{children:"prompt_template"})," argument when calling ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.save_model"})," or ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.log_model"}),".\nThe prompt template must be a string with a single format placeholder, ",(0,r.jsx)(n.code,{children:"{prompt}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom transformers import pipeline\n\n# Initialize a pipeline. `distilgpt2` uses a "text-generation" pipeline\ngenerator = pipeline(model="distilgpt2")\n\n# Define a prompt template\nprompt_template = "Answer the following question: {prompt}"\n\n# Save the model\nmlflow.transformers.save_model(\n    transformers_model=generator,\n    path="path/to/model",\n    prompt_template=prompt_template,\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When the model is then loaded with ",(0,r.jsx)(l.B,{fn:"mlflow.pyfunc.load_model"}),", the prompt\ntemplate will be used to format user inputs before passing them into the pipeline:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Load the model with pyfunc\nmodel = mlflow.pyfunc.load_model("path/to/model")\n\n# The prompt template will be used to format this input, so the\n# string that is passed to the text-generation pipeline will be:\n# "Answer the following question: What is MLflow?"\nmodel.predict("What is MLflow?")\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"text-generation"})," pipelines with a prompt template will have the\n",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/huggingface_hub/main/en/package_reference/inference_client#huggingface_hub.inference._text_generation.TextGenerationParameters.return_full_text",children:"return_full_text pipeline argument"}),"\nset to ",(0,r.jsx)(n.code,{children:"False"})," by default. This is to prevent the template from being shown to the users,\nwhich could potentially cause confusion as it was not part of their original input. To\noverride this behaviour, either set ",(0,r.jsx)(n.code,{children:"return_full_text"})," to ",(0,r.jsx)(n.code,{children:"True"})," via ",(0,r.jsx)(n.code,{children:"params"}),", or by\nincluding it in a ",(0,r.jsx)(n.code,{children:"model_config"})," dict in ",(0,r.jsx)(n.code,{children:"log_model()"}),". See ",(0,r.jsx)(n.a,{href:"#using-model-config-and-model-signature-params-for-inference",children:"this section"}),"\nfor more details on how to do this."]})}),"\n",(0,r.jsxs)(n.p,{children:["For a more in-depth guide, check out the ",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating/",children:"Prompt Templating notebook"}),"!"]}),"\n",(0,r.jsx)(n.h2,{id:"using-model-config-and-model-signature-params-for-inference",children:"Using model_config and Model Signature Params for Inference"}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.em,{children:"transformers"})," inference, there are two ways to pass in additional arguments to the pipeline."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"model_config"})," when saving/logging the model. Optionally, specify ",(0,r.jsx)(n.code,{children:"model_config"})," when calling ",(0,r.jsx)(n.code,{children:"load_model"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Specify params at inference time when calling ",(0,r.jsx)(n.code,{children:"predict()"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"model_config"})," to control how the model is loaded and inference performed for all input samples. Configuration in\n",(0,r.jsx)(n.code,{children:"model_config"})," is not overridable at ",(0,r.jsx)(n.code,{children:"predict()"})," time unless a ",(0,r.jsx)(n.code,{children:"ModelSignature"})," is indicated with the same parameters."]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"ModelSignature"})," with params schema, on the other hand, to allow downstream consumers to provide additional inference\nparams that may be needed to compute the predictions for their specific samples."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If both ",(0,r.jsx)(n.code,{children:"model_config"})," and ",(0,r.jsx)(n.code,{children:"ModelSignature"})," with parameters are saved when logging model, both of them\nwill be used for inference. The default parameters in ",(0,r.jsx)(n.code,{children:"ModelSignature"})," will override the params in ",(0,r.jsx)(n.code,{children:"model_config"}),".\nIf extra ",(0,r.jsx)(n.code,{children:"params"})," are provided at inference time, they take precedence over all params. We recommend using\n",(0,r.jsx)(n.code,{children:"model_config"})," for those parameters needed to run the model in general for all the samples. Then, add\n",(0,r.jsx)(n.code,{children:"ModelSignature"})," with parameters for those extra parameters that you want downstream consumers to indicated at\nper each of the samples."]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.code,{children:"model_config"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.models import infer_signature\nfrom mlflow.transformers import generate_signature_output\nimport transformers\n\narchitecture = "mrm8488/t5-base-finetuned-common_gen"\nmodel = transformers.pipeline(\n    task="text2text-generation",\n    tokenizer=transformers.T5TokenizerFast.from_pretrained(architecture),\n    model=transformers.T5ForConditionalGeneration.from_pretrained(architecture),\n)\ndata = "pencil draw paper"\n\n# Infer the signature\nsignature = infer_signature(\n    data,\n    generate_signature_output(model, data),\n)\n\n# Define an model_config\nmodel_config = {\n    "num_beams": 5,\n    "max_length": 30,\n    "do_sample": True,\n    "remove_invalid_values": True,\n}\n\n# Saving model_config with the model\nmlflow.transformers.save_model(\n    model,\n    path="text2text",\n    model_config=model_config,\n    signature=signature,\n)\n\npyfunc_loaded = mlflow.pyfunc.load_model("text2text")\n# model_config will be applied\nresult = pyfunc_loaded.predict(data)\n\n# overriding some inference configuration with different values\npyfunc_loaded = mlflow.pyfunc.load_model(\n    "text2text", model_config=dict(do_sample=False)\n)\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Note that in the previous example, the user can't override the configuration ",(0,r.jsx)(n.code,{children:"do_sample"}),"\nwhen calling ",(0,r.jsx)(n.code,{children:"predict"}),"."]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Specifying params at inference time"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.models import infer_signature\nfrom mlflow.transformers import generate_signature_output\nimport transformers\n\narchitecture = "mrm8488/t5-base-finetuned-common_gen"\nmodel = transformers.pipeline(\n    task="text2text-generation",\n    tokenizer=transformers.T5TokenizerFast.from_pretrained(architecture),\n    model=transformers.T5ForConditionalGeneration.from_pretrained(architecture),\n)\ndata = "pencil draw paper"\n\n# Define an model_config\nmodel_config = {\n    "num_beams": 5,\n    "remove_invalid_values": True,\n}\n\n# Define the inference parameters params\ninference_params = {\n    "max_length": 30,\n    "do_sample": True,\n}\n\n# Infer the signature including params\nsignature_with_params = infer_signature(\n    data,\n    generate_signature_output(model, data),\n    params=inference_params,\n)\n\n# Saving model with signature and model config\nmlflow.transformers.save_model(\n    model,\n    path="text2text",\n    model_config=model_config,\n    signature=signature_with_params,\n)\n\npyfunc_loaded = mlflow.pyfunc.load_model("text2text")\n\n# Pass params at inference time\nparams = {\n    "max_length": 20,\n    "do_sample": False,\n}\n\n# In this case we only override max_length and do_sample,\n# other params will use the default one saved on ModelSignature\n# or in the model configuration.\n# The final params used for prediction is as follows:\n# {\n#    "num_beams": 5,\n#    "max_length": 20,\n#    "do_sample": False,\n#    "remove_invalid_values": True,\n# }\nresult = pyfunc_loaded.predict(data, params=params)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"pipelines-vs-component-logging",children:"Pipelines vs. Component Logging"}),"\n",(0,r.jsx)(n.p,{children:"The transformers flavor has two different primary mechanisms for saving and loading models: pipelines and components."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Saving transformers models with custom code (i.e. models that require ",(0,r.jsx)(n.code,{children:"trust_remote_code=True"}),") requires ",(0,r.jsx)(n.code,{children:"transformers >= 4.26.0"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pipelines"})}),"\n",(0,r.jsx)(n.p,{children:"Pipelines, in the context of the Transformers library, are high-level objects that combine pre-trained models and tokenizers\n(as well as other components, depending on the task type) to perform a specific task. They abstract away much of the preprocessing\nand postprocessing work involved in using the models."}),"\n",(0,r.jsx)(n.p,{children:"For example, a text classification pipeline would handle the tokenization of text, passing the tokens through a model, and then interpret the logits to produce a human-readable classification."}),"\n",(0,r.jsx)(n.p,{children:"When logging a pipeline with MLflow, you're essentially saving this high-level abstraction, which can be loaded and used directly\nfor inference with minimal setup. This is ideal for end-to-end tasks where the preprocessing and postprocessing steps are standard\nfor the task at hand."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Components"})}),"\n",(0,r.jsx)(n.p,{children:"Components refer to the individual parts that can make up a pipeline, such as the model itself, the tokenizer, and any additional\nprocessors, extractors, or configuration needed for a specific task. Logging components with MLflow allows for more flexibility and\ncustomization. You can log individual components when your project needs to have more control over the preprocessing and postprocessing\nsteps or when you need to access the individual components in a bespoke manner that diverges from how the pipeline abstraction would call them."}),"\n",(0,r.jsx)(n.p,{children:"For example, you might log the components separately if you have a custom tokenizer or if you want to apply some special postprocessing\nto the model outputs. When loading the components, you can then reconstruct the pipeline with your custom components or use the components\nindividually as needed."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["MLflow by default uses a 500 MB ",(0,r.jsx)(n.code,{children:"max_shard_size"})," to save the model object in ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.save_model"})," or ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.log_model"})," APIs.\nYou can use the environment variable ",(0,r.jsx)(n.em,{children:"MLFLOW_HUGGINGFACE_MODEL_MAX_SHARD_SIZE"})," to override the value."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["For component-based logging, the only requirement that must be met in the submitted ",(0,r.jsx)(n.code,{children:"dict"})," is that a model is provided. All other elements of the ",(0,r.jsx)(n.code,{children:"dict"})," are optional."]})}),"\n",(0,r.jsx)(n.h3,{id:"logging-a-components-based-model",children:"Logging a components-based model"}),"\n",(0,r.jsxs)(n.p,{children:["The example below shows logging components of a ",(0,r.jsx)(n.code,{children:"transformers"})," model via a dictionary mapping of specific named components. The names of the keys within the submitted dictionary\nmust be in the set: ",(0,r.jsx)(n.code,{children:'{"model", "tokenizer", "feature_extractor", "image_processor"}'}),". Processor type objects (some image processors, audio processors, and multi-modal processors)\nmust be saved explicitly with the ",(0,r.jsx)(n.code,{children:"processor"})," argument in the ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.save_model"})," or ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.log_model"})," APIs."]}),"\n",(0,r.jsxs)(n.p,{children:["After logging, the components are automatically inserted into the appropriate ",(0,r.jsx)(n.code,{children:"Pipeline"})," type for the task being performed and are returned, ready for inference."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The components that are logged can be retrieved in their original structure (a dictionary) by setting the attribute ",(0,r.jsx)(n.code,{children:"return_type"}),' to "components" in the ',(0,r.jsx)(n.code,{children:"load_model()"})," API."]})}),"\n",(0,r.jsx)(n.admonition,{title:"attention",type:"warning",children:(0,r.jsxs)(n.p,{children:["Not all model types are compatible with the pipeline API constructor via component elements. Incompatible models will raise an\n",(0,r.jsx)(n.code,{children:"MLflowException"})," error stating that the model is missing the ",(0,r.jsx)(n.em,{children:"name_or_path"})," attribute. In\nthe event that this occurs, please construct the model directly via the ",(0,r.jsx)(n.code,{children:"transformers.pipeline(<repo name>)"})," API and save the pipeline object directly."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport transformers\n\ntask = "text-classification"\narchitecture = "distilbert-base-uncased-finetuned-sst-2-english"\nmodel = transformers.AutoModelForSequenceClassification.from_pretrained(architecture)\ntokenizer = transformers.AutoTokenizer.from_pretrained(architecture)\n\n# Define the components of the model in a dictionary\ntransformers_model = {"model": model, "tokenizer": tokenizer}\n\n# Log the model components\nwith mlflow.start_run():\n    model_info = mlflow.transformers.log_model(\n        transformers_model=transformers_model,\n        name="text_classifier",\n        task=task,\n    )\n\n# Load the components as a pipeline\nloaded_pipeline = mlflow.transformers.load_model(\n    model_info.model_uri, return_type="pipeline"\n)\n\nprint(type(loaded_pipeline).__name__)\n# >> TextClassificationPipeline\n\nloaded_pipeline(["MLflow is awesome!", "Transformers is a great library!"])\n\n# >> [{\'label\': \'POSITIVE\', \'score\': 0.9998478889465332},\n# >>  {\'label\': \'POSITIVE\', \'score\': 0.9998030066490173}]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"saving-a-pipeline-and-loading-components",children:"Saving a pipeline and loading components"}),"\n",(0,r.jsx)(n.p,{children:"Some use cases can benefit from the simplicity of defining a solution as a pipeline, but need the component-level access for performing a micro-services based deployment strategy\nwhere pre / post-processing is performed on containers that do not house the model itself. For this paradigm, a pipeline can be loaded as its constituent parts, as shown below."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import transformers\nimport mlflow\n\ntranslation_pipeline = transformers.pipeline(\n    task="translation_en_to_fr",\n    model=transformers.T5ForConditionalGeneration.from_pretrained("t5-small"),\n    tokenizer=transformers.T5TokenizerFast.from_pretrained(\n        "t5-small", model_max_length=100\n    ),\n)\n\nwith mlflow.start_run():\n    model_info = mlflow.transformers.log_model(\n        transformers_model=translation_pipeline,\n        name="french_translator",\n    )\n\ntranslation_components = mlflow.transformers.load_model(\n    model_info.model_uri, return_type="components"\n)\n\nfor key, value in translation_components.items():\n    print(f"{key} -> {type(value).__name__}")\n\n# >> task -> str\n# >> model -> T5ForConditionalGeneration\n# >> tokenizer -> T5TokenizerFast\n\nresponse = translation_pipeline("MLflow is great!")\n\nprint(response)\n\n# >> [{\'translation_text\': \'MLflow est formidable!\'}]\n\nreconstructed_pipeline = transformers.pipeline(**translation_components)\n\nreconstructed_response = reconstructed_pipeline(\n    "transformers makes using Deep Learning models easy and fun!"\n)\n\nprint(reconstructed_response)\n\n# >> [{\'translation_text\': "Les transformateurs rendent l\'utilisation de mod\xe8les Deep Learning facile et amusante!"}]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"automatic-metadata-and-modelcard-logging",children:"Automatic Metadata and ModelCard logging"}),"\n",(0,r.jsxs)(n.p,{children:["In order to provide as much information as possible for saved models, the ",(0,r.jsx)(n.code,{children:"transformers"})," flavor will automatically fetch the ",(0,r.jsx)(n.code,{children:"ModelCard"})," for any model or pipeline that\nis saved that has a stored card on the HuggingFace hub. This card will be logged as part of the model artifact, viewable at the same directory level as the ",(0,r.jsx)(n.code,{children:"MLmodel"})," file and\nthe stored model object."]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the ",(0,r.jsx)(n.code,{children:"ModelCard"}),", the components that comprise any Pipeline (or the individual components if saving a dictionary of named components) will have their source types\nstored. The model type, pipeline type, task, and classes of any supplementary component (such as a ",(0,r.jsx)(n.code,{children:"Tokenizer"})," or ",(0,r.jsx)(n.code,{children:"ImageProcessor"}),") will be stored in the ",(0,r.jsx)(n.code,{children:"MLmodel"})," file as well."]}),"\n",(0,r.jsxs)(n.p,{children:['In order to preserve any attached legal requirements to the usage of any model that is hosted on the huggingface hub, a "best effort" attempt\nis made when logging a transformers model to retrieve and persist any license information. A file will be generated (',(0,r.jsx)(n.code,{children:"LICENSE.txt"}),") within the root of\nthe model directory. Within this file you will either find a copy of a declared license, the name of a common license type that applies to the model's use (i.e., 'apache-2.0', 'mit'),\nor, in the event that license information was never submitted to the huggingface hub when uploading a model repository, a link to the repository for you to use\nin order to determine what restrictions exist regarding the use of the model."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Model license information was introduced in ",(0,r.jsx)(n.strong,{children:"MLflow 2.10.0"}),". Previous versions do not include license information for models."]})}),"\n",(0,r.jsx)(n.h2,{id:"automatic-signature-inference",children:"Automatic Signature inference"}),"\n",(0,r.jsxs)(n.p,{children:["For pipelines that support ",(0,r.jsx)(n.code,{children:"pyfunc"}),", there are 3 means of attaching a model signature to the ",(0,r.jsx)(n.code,{children:"MLmodel"})," file."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Provide a model signature explicitly via setting a valid ",(0,r.jsx)(n.code,{children:"ModelSignature"})," to the ",(0,r.jsx)(n.code,{children:"signature"})," attribute. This can be generated via the helper utility ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.generate_signature_output"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Provide an ",(0,r.jsx)(n.code,{children:"input_example"}),". The signature will be inferred and validated that it matches the appropriate input type. The output type will be validated by performing inference automatically (if the model is a ",(0,r.jsx)(n.code,{children:"pyfunc"})," supported type)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Do nothing. The ",(0,r.jsx)(n.code,{children:"transformers"})," flavor will automatically apply the appropriate general signature that the pipeline type supports (only for a single-entity; collections will not be inferred)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"scalability-for-inference",children:"Scale Inference with Overriding Pytorch dtype"}),"\n",(0,r.jsxs)(n.p,{children:["A common configuration for lowering the total memory pressure for pytorch models within ",(0,r.jsx)(n.code,{children:"transformers"})," pipelines is to modify the\nprocessing data type. This is achieved through setting the ",(0,r.jsx)(n.code,{children:"torch_dtype"})," argument when creating a ",(0,r.jsx)(n.code,{children:"Pipeline"}),".\nFor a full reference of these tunable arguments for configuration of pipelines, see the ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.28.1/en/perf_train_gpu_one#floating-data-types",children:"training docs"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This feature does not exist in versions of ",(0,r.jsx)(n.code,{children:"transformers"})," < 4.26.x"]})}),"\n",(0,r.jsx)(n.p,{children:"In order to apply these configurations to a saved or logged run, there are two options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Save a pipeline with the ",(0,r.jsx)(n.em,{children:"torch_dtype"})," argument set to the encoding type of your choice."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import transformers\nimport torch\nimport mlflow\n\ntask = "translation_en_to_fr"\n\nmy_pipeline = transformers.pipeline(\n    task=task,\n    model=transformers.T5ForConditionalGeneration.from_pretrained("t5-small"),\n    tokenizer=transformers.T5TokenizerFast.from_pretrained(\n        "t5-small", model_max_length=100\n    ),\n    framework="pt",\n)\n\nwith mlflow.start_run():\n    model_info = mlflow.transformers.log_model(\n        transformers_model=my_pipeline,\n        name="my_pipeline",\n        torch_dtype=torch.bfloat16,\n    )\n\n# Illustrate that the torch data type is recorded in the flavor configuration\nprint(model_info.flavors["transformers"])\n'})}),"\n",(0,r.jsx)(n.p,{children:"Result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"{'transformers_version': '4.28.1',\n  'code': None,\n  'task': 'translation_en_to_fr',\n  'instance_type': 'TranslationPipeline',\n  'source_model_name': 't5-small',\n  'pipeline_model_type': 'T5ForConditionalGeneration',\n  'framework': 'pt',\n  'torch_dtype': 'torch.bfloat16',\n  'tokenizer_type': 'T5TokenizerFast',\n  'components': ['tokenizer'],\n  'pipeline': 'pipeline'}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Specify the ",(0,r.jsx)(n.em,{children:"torch_dtype"})," argument when loading the model to override any values set during logging or saving."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import transformers\nimport torch\nimport mlflow\n\ntask = "translation_en_to_fr"\n\nmy_pipeline = transformers.pipeline(\n    task=task,\n    model=transformers.T5ForConditionalGeneration.from_pretrained("t5-small"),\n    tokenizer=transformers.T5TokenizerFast.from_pretrained(\n        "t5-small", model_max_length=100\n    ),\n    framework="pt",\n)\n\nwith mlflow.start_run():\n    model_info = mlflow.transformers.log_model(\n        transformers_model=my_pipeline,\n        name="my_pipeline",\n        torch_dtype=torch.bfloat16,\n    )\n\nloaded_pipeline = mlflow.transformers.load_model(\n    model_info.model_uri, return_type="pipeline", torch_dtype=torch.float64\n)\n\nprint(loaded_pipeline.torch_dtype)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Result:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"torch.float64\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["MLflow 2.12.1 slightly changed the ",(0,r.jsx)(n.code,{children:"torch_dtype"})," extraction logic. Previously it depended on the ",(0,r.jsx)(n.code,{children:"torch_dtype"})," attribute of the pipeline instance,\nbut now it is extracted from the underlying model via ",(0,r.jsx)(n.code,{children:"dtype"})," property. This enables MLflow to capture the dtype change of the model after pipeline instantiation."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Logging or saving a model in 'components' mode (using a dictionary to declare components) does not support setting the data type for a constructed pipeline.\nIf you need to override the default behavior of how data is encoded, please save or log a ",(0,r.jsx)(n.em,{children:"pipeline"})," object."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Overriding the data type for a pipeline when loading as a ",(0,r.jsx)(n.a,{href:"/ml/model#pyfunc-model-flavor",children:"python_function (pyfunc) model flavor"})," is not supported.\nThe value set for ",(0,r.jsx)(n.code,{children:"torch_dtype"})," during ",(0,r.jsx)(n.code,{children:"save_model()"})," or ",(0,r.jsx)(n.code,{children:"log_model()"})," will persist when loading as ",(0,r.jsx)(n.em,{children:"pyfunc"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"input-data-types-for-audio-pipelines",children:"Input Data Types for Audio Pipelines"}),"\n",(0,r.jsxs)(n.p,{children:["Note that passing raw data to an audio pipeline (raw bytes) requires two separate elements of the same effective library.\nIn order to use the bitrate transposition and conversion of the audio bytes data into numpy nd.array format, the library ",(0,r.jsx)(n.em,{children:"ffmpeg"})," is required.\nInstalling this package directly from pypi (",(0,r.jsx)(n.em,{children:"pip install ffmpeg"}),") does not install the underlying ",(0,r.jsx)(n.em,{children:"c"})," dll's that are required to make ",(0,r.jsx)(n.em,{children:"ffmpeg"})," function.\nPlease consult with the documentation at ",(0,r.jsx)(n.a,{href:"https://ffmpeg.org/download.html",children:"the ffmpeg website"})," for guidance on your given operating system."]}),"\n",(0,r.jsxs)(n.p,{children:["The Audio Pipeline types, when loaded as a ",(0,r.jsx)(n.a,{href:"/ml/model#pyfunc-model-flavor",children:"python_function (pyfunc) model flavor"})," have three input types available:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"str"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The string input type is meant for blob references (uri locations) that are accessible to the instance of the ",(0,r.jsx)(n.code,{children:"pyfunc"})," model.\nThis input mode is useful when doing large batch processing of audio inference in Spark due to the inherent limitations of handling large ",(0,r.jsx)(n.code,{children:"bytes"}),"\ndata in ",(0,r.jsx)(n.code,{children:"Spark"})," ",(0,r.jsx)(n.code,{children:"DataFrames"}),". Ensure that you have ",(0,r.jsx)(n.code,{children:"ffmpeg"})," installed in the environment that the ",(0,r.jsx)(n.code,{children:"pyfunc"})," model is running in order\nto use ",(0,r.jsx)(n.code,{children:"str"})," input uri-based inference. If this package is not properly installed (both from ",(0,r.jsx)(n.code,{children:"pypi"})," and from the ",(0,r.jsx)(n.code,{children:"ffmpeg"})," binaries), an Exception\nwill be thrown at inference time."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If using a uri (",(0,r.jsx)(n.em,{children:"str"}),") as an input type for a ",(0,r.jsx)(n.em,{children:"pyfunc"})," model that you are intending to host for realtime inference through the ",(0,r.jsx)(n.em,{children:"MLflow Model Server"}),",\nyou ",(0,r.jsx)(n.em,{children:"must"})," specify a custom model signature when logging or saving the model.\nThe default signature input value type of ",(0,r.jsx)(n.code,{children:"bytes"})," will, in ",(0,r.jsx)(n.em,{children:"MLflow Model serving"}),", force the conversion of the uri string to ",(0,r.jsx)(n.code,{children:"bytes"}),", which will cause an Exception\nto be thrown from the serving process stating that the soundfile is corrupt."]})}),"\n",(0,r.jsx)(n.p,{children:"An example of specifying an appropriate uri-based input model signature for an audio model is shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow.models import infer_signature\nfrom mlflow.transformers import generate_signature_output\n\nurl = "https://www.mywebsite.com/sound/files/for/transcription/file111.mp3"\nsignature = infer_signature(url, generate_signature_output(my_audio_pipeline, url))\nwith mlflow.start_run():\n    mlflow.transformers.log_model(\n        transformers_model=my_audio_pipeline,\n        name="my_transcriber",\n        signature=signature,\n    )\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"bytes"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is the default serialization format of audio files. It is the easiest format to utilize due to the fact that\nPipeline implementations will automatically convert the audio bitrate from the file with the use of ",(0,r.jsx)(n.code,{children:"ffmpeg"})," (a required dependency if using this format)\nto the bitrate required by the underlying model within the ",(0,r.jsx)(n.em,{children:"Pipeline"}),". When using the ",(0,r.jsx)(n.code,{children:"pyfunc"})," representation\nof the pipeline directly (not through serving), the sound file can be passed directly as ",(0,r.jsx)(n.code,{children:"bytes"})," without any\nmodification. When used through serving, the ",(0,r.jsx)(n.code,{children:"bytes"})," data ",(0,r.jsx)(n.em,{children:"must be"})," base64 encoded."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"np.ndarray"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This input format requires that both the bitrate has been set prior to conversion to ",(0,r.jsx)(n.code,{children:"numpy.ndarray"})," (i.e., through the use of a package like\n",(0,r.jsx)(n.code,{children:"librosa"})," or ",(0,r.jsx)(n.code,{children:"pydub"}),") and that the model has been saved with a signature that uses the ",(0,r.jsx)(n.code,{children:"np.ndarray"})," format for the input."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Audio models being used for serving that intend to utilize pre-formatted audio in ",(0,r.jsx)(n.code,{children:"np.ndarray"})," format\nmust have the model saved with a signature configuration that reflects this schema. Failure to do so will result in type casting errors due to the default signature for\naudio transformers pipelines being set as expecting ",(0,r.jsx)(n.code,{children:"binary"})," (",(0,r.jsx)(n.code,{children:"bytes"}),") data. The serving endpoint cannot accept a union of types, so a particular model instance must choose one\nor the other as an allowed input type."]})}),"\n",(0,r.jsx)(n.h2,{id:"peft-models-in-mlflow-transformers-flavor",children:"PEFT Models in MLflow Transformers flavor"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/peft/en/index",children:"PEFT"})," is a library developed by HuggingFace\ud83e\udd17, that provides various optimization methods for pretrained models available on the HuggingFace Hub.\nWith PEFT, you can easily apply various optimization techniques like LoRA and QLoRA to reduce the cost of fine-tuning Transformers models."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, ",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/peft/main/en/conceptual_guides/lora",children:"LoRA (Low-Rank Adaptation)"})," is a method that approximate the weight updates of fine-tuning\nprocess with two smaller matrices through low-rank decomposition. LoRA typically shrinks the number of parameters to train to only 0.01% ~ a few % of the full model fine-tuning\n(depending on the configuration), which significantly accelerates the fine-tuning process and reduces the memory footprint, such that you can even\n",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers/tutorials/fine-tuning/transformers-peft/",children:"train a Mistral/Llama2 7B model on a single Nvidia A10G GPU in an hour"}),".\nBy using PEFT, you can apply LoRA to your Transformers model with only a few lines of code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from peft import LoraConfig, get_peft_model\n\nbase_model = AutoModelForCausalLM.from_pretrained(...)\nlora_config = LoraConfig(...)\npeft_model = get_peft_model(base_model, lora_config)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In MLflow 2.11.0, we introduced support for tracking PEFT models in the MLflow Transformers flavor.\nYou can log and load PEFT models using the same APIs as other Transformers models, such as ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.log_model"})," and ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.load_model"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom peft import LoraConfig, get_peft_model\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\nmodel_id = "databricks/dolly-v2-7b"\nbase_model = AutoModelForCausalLM.from_pretrained(model_id)\ntokenizer = AutoTokenizer.from_pretrained(model_id)\n\npeft_config = LoraConfig(...)\npeft_model = get_peft_model(base_model, peft_config)\n\nwith mlflow.start_run():\n    # Your training code here\n    ...\n\n    # Log the PEFT model\n    model_info = mlflow.transformers.log_model(\n        transformers_model={\n            "model": peft_model,\n            "tokenizer": tokenizer,\n        },\n        name="peft_model",\n    )\n\n# Load the PEFT model\nloaded_model = mlflow.transformers.load_model(model_info.model_uri)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"peft-models-in-mlflow-tutorial",children:"PEFT Models in MLflow Tutorial"}),"\n",(0,r.jsxs)(n.p,{children:["Check out the tutorial ",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers/tutorials/fine-tuning/transformers-peft/",children:"Fine-Tuning Open-Source LLM using QLoRA with MLflow and PEFT"}),"\nfor a more in-depth guide on how to use PEFT with MLflow,"]}),"\n",(0,r.jsx)(n.h3,{id:"format-of-saved-peft-model",children:"Format of Saved PEFT Model"}),"\n",(0,r.jsxs)(n.p,{children:["When saving PEFT models, MLflow only saves the PEFT adapter and the configuration, but not the base model's weights. This is the same behavior as the Transformer's\n",(0,r.jsx)(n.a,{href:"https://huggingface.co/docs/transformers/v4.38.1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained",children:"save_pretrained()"})," method and is highly efficient\nin terms of storage space and logging latency. One difference is that MLflow will also save the HuggingFace Hub repository name and version for the base model in\nthe model metadata, so that it can load the same base model when loading the PEFT model. Concretely, the following artifacts are saved in MLflow for PEFT models:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The PEFT adapter weight under the ",(0,r.jsx)(n.code,{children:"/peft"})," directory."]}),"\n",(0,r.jsxs)(n.li,{children:["The PEFT configuration as a JSON file under the ",(0,r.jsx)(n.code,{children:"/peft"})," directory."]}),"\n",(0,r.jsxs)(n.li,{children:["The HuggingFace Hub repository name and commit hash for the base model in the ",(0,r.jsx)(n.code,{children:"MLModel"})," metadata file."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"limitations-of-peft-models-in-mlflow",children:"Limitations of PEFT Models in MLflow"}),"\n",(0,r.jsxs)(n.p,{children:["Since the model saving/loading behavior for PEFT models is similar to that of ",(0,r.jsx)(n.code,{children:"save_pretrained=False"}),", ",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers/large-models#caveats-of-save-pretrained",children:"the same caveats"})," apply to PEFT models.\nFor example, the base model weight may be deleted or become private in the HuggingFace Hub, and PEFT models cannot be registered to the legacy Databricks Workspace Model Registry."]}),"\n",(0,r.jsxs)(n.p,{children:["To save the base model weight for PEFT models, you can use the ",(0,r.jsx)(l.B,{fn:"mlflow.transformers.persist_pretrained_model"})," API.\nThis will download the base model weight from the HuggingFace Hub and save it to the artifact location, updating the metadata of the given PEFT model.\nPlease refer to ",(0,r.jsx)(n.a,{href:"/ml/deep-learning/transformers/large-models#persist-pretrained-guide",children:"this section"})," for the detailed usage of this API."]})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(96540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>a});t(96540);const o=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=t(86025),i=t(28774),s=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(o[e])return e}return null};function a({fn:e,children:n}){const t=l(e);if(!t)return(0,s.jsx)(s.Fragment,{children:n});const a=(0,r.Ay)(`/${o[t]}#${e}`);return(0,s.jsx)(i.A,{to:a,target:"_blank",children:n??(0,s.jsxs)("code",{children:[e,"()"]})})}},65195:(e,n,t)=>{t.d(n,{A:()=>u});var o=t(96540),r=t(6342);function i(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const o=t.slice(2,e.level);e.parentIndex=Math.max(...o),t[e.level]=n}));const o=[];return n.forEach((e=>{const{parentIndex:t,...r}=e;t>=0?n[t].children.push(r):o.push(r)})),o}function s({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return e.flatMap((e=>{const o=s({toc:e.children,minHeadingLevel:n,maxHeadingLevel:t});return function(e){return e.level>=n&&e.level<=t}(e)?[{...e,children:o}]:o}))}function l(e){const n=e.getBoundingClientRect();return n.top===n.bottom?l(e.parentNode):n}function a(e,{anchorTopOffset:n}){const t=e.find((e=>l(e).top>=n));if(t){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(l(t))?t:e[e.indexOf(t)-1]??null}return e[e.length-1]??null}function d(){const e=(0,o.useRef)(0),{navbar:{hideOnScroll:n}}=(0,r.p)();return(0,o.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function c(e){const n=(0,o.useRef)(void 0),t=d();(0,o.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:o,linkActiveClassName:r,minHeadingLevel:i,maxHeadingLevel:s}=e;function l(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(o),l=function({minHeadingLevel:e,maxHeadingLevel:n}){const t=[];for(let o=e;o<=n;o+=1)t.push(`h${o}.anchor`);return Array.from(document.querySelectorAll(t.join()))}({minHeadingLevel:i,maxHeadingLevel:s}),d=a(l,{anchorTopOffset:t.current}),c=e.find((e=>d&&d.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(r),e.classList.add(r),n.current=e):e.classList.remove(r)}(e,e===c)}))}return document.addEventListener("scroll",l),document.addEventListener("resize",l),l(),()=>{document.removeEventListener("scroll",l),document.removeEventListener("resize",l)}}),[e,t])}var m=t(28774),p=t(74848);function h({toc:e,className:n,linkClassName:t,isChild:o}){return e.length?(0,p.jsx)("ul",{className:o?void 0:n,children:e.map((e=>(0,p.jsxs)("li",{children:[(0,p.jsx)(m.A,{to:`#${e.id}`,className:t??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,p.jsx)(h,{isChild:!0,toc:e.children,className:n,linkClassName:t})]},e.id)))}):null}const f=o.memo(h);function u({toc:e,className:n="table-of-contents table-of-contents__left-border",linkClassName:t="table-of-contents__link",linkActiveClassName:l,minHeadingLevel:a,maxHeadingLevel:d,...m}){const h=(0,r.p)(),u=a??h.tableOfContents.minHeadingLevel,g=d??h.tableOfContents.maxHeadingLevel,x=function({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,o.useMemo)((()=>s({toc:i(e),minHeadingLevel:n,maxHeadingLevel:t})),[e,n,t])}({toc:e,minHeadingLevel:u,maxHeadingLevel:g});return c((0,o.useMemo)((()=>{if(t&&l)return{linkClassName:t,linkActiveClassName:l,minHeadingLevel:u,maxHeadingLevel:g}}),[t,l,u,g])),(0,p.jsx)(f,{toc:x,className:n,linkClassName:t,...m})}},72839:(e,n,t)=>{t.d(n,{X:()=>r});var o=t(74848);function r({children:e}){return(0,o.jsx)("div",{className:"w-full overflow-x-auto",children:(0,o.jsx)("table",{children:e})})}}}]);