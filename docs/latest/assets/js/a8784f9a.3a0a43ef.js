"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3697],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(96540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}},72148:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"prompt-registry/structured-output","title":"Structured Output","description":"Learn how to define structured output schemas for your prompts to ensure consistent and validated responses from language models.","source":"@site/docs/genai/prompt-registry/structured-output.mdx","sourceDirName":"prompt-registry","slug":"/prompt-registry/structured-output","permalink":"/mlflow-website/docs/latest/genai/prompt-registry/structured-output","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Structured Output","description":"Learn how to define structured output schemas for your prompts to ensure consistent and validated responses from language models."},"sidebar":"genAISidebar","previous":{"title":"Log Prompts with Models","permalink":"/mlflow-website/docs/latest/genai/prompt-registry/log-with-model"},"next":{"title":"Optimize Prompts \ud83c\udd95","permalink":"/mlflow-website/docs/latest/genai/prompt-registry/optimize-prompts"}}');var r=n(74848),o=n(28453);const a={title:"Structured Output",description:"Learn how to define structured output schemas for your prompts to ensure consistent and validated responses from language models."},i="Structured Output",p={},l=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Using Pydantic Models",id:"using-pydantic-models",level:3},{value:"Using JSON Schema",id:"using-json-schema",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Complex Response Formats",id:"complex-response-formats",level:3},{value:"Chat Prompts with Structured Output",id:"chat-prompts-with-structured-output",level:3},{value:"Loading and Using Structured Prompts",id:"loading-and-using-structured-prompts",level:2},{value:"Integration with Language Models",id:"integration-with-language-models",level:2},{value:"OpenAI Integration",id:"openai-integration",level:3},{value:"LangChain Integration",id:"langchain-integration",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"structured-output",children:"Structured Output"})}),"\n",(0,r.jsx)(t.p,{children:"MLflow Prompt Registry supports defining structured output schemas for your prompts, ensuring that language model responses follow a consistent format and can be validated. This feature is particularly useful for applications that need to parse and process model outputs programmatically."}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"Structured output allows you to:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Define expected response formats"})," using Pydantic models or JSON schemas"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Validate model responses"})," against your defined schema"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Ensure consistency"})," across different model calls"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Improve integration"})," with downstream applications"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Enable type safety"})," in your GenAI applications"]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Important"}),": The ",(0,r.jsx)(t.code,{children:"response_format"})," parameter is used for ",(0,r.jsx)(t.strong,{children:"tracking and documentation purposes"})," rather than direct runtime enforcement. MLflow stores this information as metadata to help you understand the expected output structure of your prompts, but it does not automatically validate or enforce the format during model execution. You are responsible for implementing the actual validation and enforcement in your application code."]})}),"\n",(0,r.jsx)(t.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(t.h3,{id:"using-pydantic-models",children:"Using Pydantic Models"}),"\n",(0,r.jsx)(t.p,{children:"The most common way to define structured output is using Pydantic models:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom pydantic import BaseModel\nfrom typing import List\n\n\nclass SummaryResponse(BaseModel):\n    summary: str\n    key_points: List[str]\n    word_count: int\n\n\n# Register prompt with structured output\nprompt = mlflow.genai.register_prompt(\n    name="summarization-prompt",\n    template="Summarize the following text in {{ num_sentences }} sentences: {{ text }}",\n    response_format=SummaryResponse,\n    commit_message="Added structured output for summarization",\n    tags={"task": "summarization", "structured": "true"},\n)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"using-json-schema",children:"Using JSON Schema"}),"\n",(0,r.jsx)(t.p,{children:"You can also define response formats using JSON schema dictionaries:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\n\n# Define response format as JSON schema\nresponse_schema = {\n    "type": "object",\n    "properties": {\n        "answer": {"type": "string", "description": "The main answer"},\n        "confidence": {"type": "number", "description": "Confidence score (0-1)"},\n        "sources": {\n            "type": "array",\n            "items": {"type": "string"},\n            "description": "List of source references",\n        },\n    },\n    "required": ["answer", "confidence"],\n}\n\n# Register prompt with JSON schema\nprompt = mlflow.genai.register_prompt(\n    name="qa-prompt",\n    template="Answer the following question: {{ question }}",\n    response_format=response_schema,\n    commit_message="Added structured output for Q&A",\n    tags={"task": "qa", "structured": "true"},\n)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,r.jsx)(t.h3,{id:"complex-response-formats",children:"Complex Response Formats"}),"\n",(0,r.jsx)(t.p,{children:"For more complex applications, you can define nested structures:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nfrom datetime import datetime\n\n\nclass AnalysisResult(BaseModel):\n    sentiment: str\n    confidence: float\n    entities: List[str]\n    summary: str\n\n\nclass DocumentAnalysis(BaseModel):\n    document_id: str\n    analysis: AnalysisResult\n    processed_at: datetime\n    metadata: Optional[dict] = None\n\n\n# Register prompt with complex structured output\nprompt = mlflow.genai.register_prompt(\n    name="document-analyzer",\n    template="Analyze the following document: {{ document_text }}",\n    response_format=DocumentAnalysis,\n    commit_message="Added comprehensive document analysis output",\n    tags={"task": "analysis", "complex": "true"},\n)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"chat-prompts-with-structured-output",children:"Chat Prompts with Structured Output"}),"\n",(0,r.jsx)(t.p,{children:"Chat prompts can also use structured output formats:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom pydantic import BaseModel\n\n\nclass ChatResponse(BaseModel):\n    response: str\n    tone: str\n    suggestions: List[str]\n\n\n# Chat prompt with structured output\nchat_template = [\n    {"role": "system", "content": "You are a helpful {{ style }} assistant."},\n    {"role": "user", "content": "{{ question }}"},\n]\n\nprompt = mlflow.genai.register_prompt(\n    name="assistant-chat",\n    template=chat_template,\n    response_format=ChatResponse,\n    commit_message="Added structured output for chat responses",\n    tags={"type": "chat", "structured": "true"},\n)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"loading-and-using-structured-prompts",children:"Loading and Using Structured Prompts"}),"\n",(0,r.jsx)(t.p,{children:"When you load a prompt with structured output, you can access the response format for tracking and documentation purposes:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# Load the prompt\nprompt = mlflow.genai.load_prompt("prompts:/summarization-prompt/1")\n\n# Check if it has structured output (for tracking purposes)\nif prompt.response_format:\n    print(f"Response format: {prompt.response_format}")\n\n# Format the prompt\nformatted_text = prompt.format(num_sentences=3, text="Your content here...")\n\n# Use with a language model that supports structured output\n# Note: You need to implement validation against your defined schema\n'})}),"\n",(0,r.jsx)(t.h2,{id:"integration-with-language-models",children:"Integration with Language Models"}),"\n",(0,r.jsx)(t.h3,{id:"openai-integration",children:"OpenAI Integration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import openai\n\nclient = openai.OpenAI()\n\n# Load prompt with structured output\nprompt = mlflow.genai.load_prompt("prompts:/summarization-prompt/1")\n\n# Use with OpenAI\'s response_format parameter\nresponse = client.chat.completions.create(\n    model="gpt-4.1",\n    messages=[\n        {"role": "user", "content": prompt.format(num_sentences=3, text="Your text")}\n    ],\n    response_format=prompt.response_format,  # OpenAI\'s structured output\n)\n\n# Get structured output\nimport json\n\nresult = json.loads(response.choices[0].message.content)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"langchain-integration",children:"LangChain Integration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from langchain.prompts import PromptTemplate\nfrom langchain_openai import ChatOpenAI\nfrom pydantic import BaseModel\n\n# Load prompt with structured output\nprompt = mlflow.genai.load_prompt("prompts:/qa-prompt/1")\n\n# Create LangChain prompt template\nlangchain_prompt = PromptTemplate.from_template(prompt.template)\n\n# Use with LangChain\'s structured output\nllm = ChatOpenAI(model="gpt-4")\nchain = langchain_prompt | llm.with_structured_output(prompt.response_format)\n\n# Execute the chain\nresult = chain.invoke({"question": "What is MLflow?"})\n# result will be a validated Pydantic model instance\n'})}),"\n",(0,r.jsx)(t.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Structured output"})," is used for ",(0,r.jsx)(t.strong,{children:"tracking and documentation purposes"})," to define expected response formats"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pydantic models"})," provide type safety and validation schemas for your response formats"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"JSON schemas"})," offer flexibility for complex nested structures"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Integration"})," with popular frameworks like OpenAI and LangChain is straightforward"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Manual validation"})," is required in your application code - MLflow does not enforce the format at runtime"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/genai/prompt-registry/create-and-edit-prompts",children:"Create and Edit Prompts"})})," to learn the basics of prompt management"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/genai/prompt-registry/use-prompts-in-apps",children:"Use Prompts in Apps"})})," to see how to integrate prompts into your applications"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/genai/prompt-registry/evaluate-prompts",children:"Evaluate Prompts"})})," to learn how to assess prompt performance"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Structured output is a powerful feature that can significantly improve the reliability and maintainability of your GenAI applications by ensuring consistent data formats and enabling better integration with downstream systems."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);