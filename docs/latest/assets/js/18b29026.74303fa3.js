"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9135],{17079:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"prompt-version-mgmt/prompt-registry/manage-prompt-lifecycles-with-aliases","title":"Manage Prompt Lifecycles with Aliases","description":"Discover how to use aliases in the MLflow Prompt Registry to manage the lifecycle of your prompts, from development to production, and for implementing governance.","source":"@site/docs/genai/prompt-version-mgmt/prompt-registry/manage-prompt-lifecycles-with-aliases.mdx","sourceDirName":"prompt-version-mgmt/prompt-registry","slug":"/prompt-version-mgmt/prompt-registry/manage-prompt-lifecycles-with-aliases","permalink":"/docs/latest/genai/prompt-version-mgmt/prompt-registry/manage-prompt-lifecycles-with-aliases","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Manage Prompt Lifecycles with Aliases","description":"Discover how to use aliases in the MLflow Prompt Registry to manage the lifecycle of your prompts, from development to production, and for implementing governance."},"sidebar":"genAISidebar","previous":{"title":"Evaluate Prompts","permalink":"/docs/latest/genai/prompt-version-mgmt/prompt-registry/evaluate-prompts"},"next":{"title":"Use Prompts in Apps","permalink":"/docs/latest/genai/prompt-version-mgmt/prompt-registry/use-prompts-in-apps"}}');var t=i(74848),o=i(28453);const r={title:"Manage Prompt Lifecycles with Aliases",description:"Discover how to use aliases in the MLflow Prompt Registry to manage the lifecycle of your prompts, from development to production, and for implementing governance."},a="Manage Prompt Lifecycles with Aliases",l={},c=[{value:"Using Aliases for Lifecycle Stages",id:"using-aliases-for-lifecycle-stages",level:2},{value:"Managing Aliases (Create, Update, Delete)",id:"managing-aliases-create-update-delete",level:2},{value:"Using the MLflow UI",id:"using-the-mlflow-ui",level:3},{value:"Using the Python SDK",id:"using-the-python-sdk",level:3},{value:"Governance and Maintenance",id:"governance-and-maintenance",level:2},{value:"Archiving and Deprecating Prompts",id:"archiving-and-deprecating-prompts",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Prerequisites",id:"prerequisites",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"manage-prompt-lifecycles-with-aliases",children:"Manage Prompt Lifecycles with Aliases"})}),"\n",(0,t.jsx)(n.p,{children:"As your collection of prompts grows and your GenAI applications mature, managing the lifecycle of each prompt becomes essential. Aliases in the MLflow Prompt Registry are a powerful feature for orchestrating the journey of a prompt from initial development through testing, staging, and ultimately to production. They also play a key role in governance and maintenance."}),"\n",(0,t.jsx)(n.p,{children:"This page will guide you on:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Using aliases to represent different stages in a prompt's lifecycle (e.g., ",(0,t.jsx)(n.code,{children:"development"}),", ",(0,t.jsx)(n.code,{children:"testing"}),", ",(0,t.jsx)(n.code,{children:"production"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Creating, updating, and deleting prompt aliases via the UI and Python SDK."}),"\n",(0,t.jsx)(n.li,{children:"Implementing governance policies for prompt and alias management."}),"\n",(0,t.jsx)(n.li,{children:"Strategies for archiving or deprecating old prompts, including version deletion."}),"\n",(0,t.jsx)(n.li,{children:"Managing permissions and access control (conceptually, as this often ties into the overall MLflow deployment)."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"using-aliases-for-lifecycle-stages",children:"Using Aliases for Lifecycle Stages"}),"\n",(0,t.jsx)(n.p,{children:"Aliases act as mutable, human-readable pointers to specific (immutable) prompt versions. This makes them ideal for signifying the status or intended use of a prompt version within its lifecycle."}),"\n",(0,t.jsxs)(n.p,{children:["Consider a common set of aliases you might define for a prompt named ",(0,t.jsx)(n.code,{children:"customer-faq"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"dev"})," or ",(0,t.jsx)(n.code,{children:"development"}),": Points to the latest version developers are actively working on and iterating. This version might be unstable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"staging"})," or ",(0,t.jsx)(n.code,{children:"testing"}),": Points to a version that has passed initial developer checks and is ready for more rigorous testing by a QA team or a limited set of beta users."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"production"})," or ",(0,t.jsx)(n.code,{children:"live"}),": Points to the version that has been thoroughly tested and is currently being used by your live, user-facing application."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Workflow Example:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Development"}),": Developers create version 1, 2, 3 of ",(0,t.jsx)(n.code,{children:"customer-faq"}),". The ",(0,t.jsx)(n.code,{children:"dev"})," alias always points to the latest (e.g., version 3)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Promotion to Staging"}),": Once version 3 is deemed ready for broader testing, the ",(0,t.jsx)(n.code,{children:"staging"})," alias is updated to point to version 3.","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Set a staging alias for a specific version\nmlflow.genai.set_prompt_alias("summarization-prompt", alias="staging", version=2)\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing in Staging"}),": The application instances in your staging environment are configured to load prompts using the ",(0,t.jsx)(n.code,{children:"staging"})," alias (e.g., ",(0,t.jsx)(n.code,{children:"prompts:/customer-faq/staging"}),"). Testers interact with version 3."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Promotion to Production"}),": If version 3 passes all staging tests and meets quality criteria, the ",(0,t.jsx)(n.code,{children:"production"})," alias is updated to point to version 3.","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Set a production alias for a specific version\nmlflow.genai.set_prompt_alias("summarization-prompt", alias="production", version=3)\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Continuous Development"}),": Meanwhile, developers might start working on version 4, and the ",(0,t.jsx)(n.code,{children:"dev"})," alias would then point to version 4, without affecting ",(0,t.jsx)(n.code,{children:"staging"})," (still on v3) or ",(0,t.jsx)(n.code,{children:"production"})," (still on v3)."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"managing-aliases-create-update-delete",children:"Managing Aliases (Create, Update, Delete)"}),"\n",(0,t.jsx)(n.p,{children:"MLflow provides functionalities to manage aliases both through its UI and the Python SDK."}),"\n",(0,t.jsx)(n.h3,{id:"using-the-mlflow-ui",children:"Using the MLflow UI"}),"\n",(0,t.jsx)(n.p,{children:"Within the Prompt Registry section of the MLflow UI, you can typically:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"View all aliases associated with a prompt."}),"\n",(0,t.jsx)(n.li,{children:"Create new aliases pointing to specific versions."}),"\n",(0,t.jsx)(n.li,{children:"Update existing aliases to point to different versions."}),"\n",(0,t.jsx)(n.li,{children:"Delete aliases."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Create Prompt Alias",src:i(99537).A+"",width:"817",height:"308"})}),"\n",(0,t.jsx)(n.h3,{id:"using-the-python-sdk",children:"Using the Python SDK"}),"\n",(0,t.jsx)(n.p,{children:"MLflow offers fluent APIs for programmatic alias management:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'mlflow.genai.set_prompt_alias(name="<prompt_name>", alias="<alias_name>", version="<version_number>")'}),": Creates a new alias or updates an existing one."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'mlflow.genai.delete_prompt_alias(name="<prompt_name>", alias="<alias_name>")'}),": Deletes an alias. (The prompt version itself remains)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'mlflow.genai.load_prompt(name_or_uri=""prompts:/<prompt_name>@<alias_name>"")'}),": Retrieves the prompt version details that an alias currently points to."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"governance-and-maintenance",children:"Governance and Maintenance"}),"\n",(0,t.jsx)(n.p,{children:"As the number of prompts and their versions grow, establishing governance policies becomes important."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alias Naming Conventions"}),": Define clear and consistent naming conventions for aliases (e.g., ",(0,t.jsx)(n.code,{children:"dev"}),", ",(0,t.jsx)(n.code,{children:"staging"}),", ",(0,t.jsx)(n.code,{children:"prod"}),", ",(0,t.jsx)(n.code,{children:"prod-emea"}),", ",(0,t.jsx)(n.code,{children:"prod-apac"}),", ",(0,t.jsx)(n.code,{children:"archive-<date>"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Promotion Process"}),": Document the process and criteria for promoting a prompt version from one lifecycle stage (alias) to the next. This might involve reviews, automated test results, and approvals."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Access Control"}),": Control who can create/update/delete prompts and aliases. MLflow's access control mechanisms (especially in managed deployments like Databricks) can be used to enforce these permissions. For open-source MLflow, this often relies on controlling access to the MLflow tracking server."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"archiving-and-deprecating-prompts",children:"Archiving and Deprecating Prompts"}),"\n",(0,t.jsx)(n.p,{children:"Not all prompt versions will be useful indefinitely."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Archiving with Aliases"}),": You can use aliases like ",(0,t.jsx)(n.code,{children:"archived_v1"})," or ",(0,t.jsx)(n.code,{children:"deprecated_2023"})," to signify that a version is no longer in active use but is kept for historical record."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Deleting Specific Prompt Versions"}),": If a prompt version is deemed unnecessary or problematic and should not be used at all (even by accident), you can delete specific versions using ",(0,t.jsx)(n.code,{children:"mlflow.delete_prompt()"})," through the Python SDK. ",(0,t.jsx)(n.em,{children:"Use this with caution, as version deletion is a permanent action and might break lineage if not managed carefully."})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"# Delete a prompt\nmlflow.delete_prompt(name=prompt_name, version=version_to_delete)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Generally, you cannot delete a prompt version that an alias currently points to. You would need to move or delete the alias first."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Aliases are fundamental for managing prompt lifecycles (e.g., ",(0,t.jsx)(n.code,{children:"dev"}),", ",(0,t.jsx)(n.code,{children:"staging"}),", ",(0,t.jsx)(n.code,{children:"production"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["MLflow provides UI and SDK (",(0,t.jsx)(n.code,{children:"MlflowClient"}),") capabilities for creating, updating, and deleting aliases."]}),"\n",(0,t.jsx)(n.li,{children:"Establishing governance policies for alias management, promotion processes, and access control is crucial for maintainability."}),"\n",(0,t.jsxs)(n.li,{children:["Use aliases for archiving and be cautious with the permanent deletion of specific prompt versions (",(0,t.jsx)(n.code,{children:"mlflow.delete_prompt()"}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An established MLflow Prompt Registry with multiple prompts and versions."}),"\n",(0,t.jsx)(n.li,{children:"Familiarity with the concept of aliases from previous pages."}),"\n",(0,t.jsx)(n.li,{children:"(For SDK examples) MLflow Python client installed and configured."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Effective use of aliases for lifecycle management ensures that your team can confidently develop, test, and deploy prompts while maintaining control and visibility across all stages."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},99537:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/create-prompt-alias-eada243c60800b04059e6a5311a5b492.png"}}]);