"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8379],{11470:(e,n,r)=>{r.d(n,{A:()=>y});var o=r(96540),l=r(34164),t=r(23104),i=r(56347),s=r(205),a=r(57485),d=r(31682),c=r(70679);function m(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:r,default:o}})=>({value:e,label:n,attributes:r,default:o})))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function h({queryString:e=!1,groupId:n}){const r=(0,i.W6)(),l=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,a.aZ)(l),(0,o.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(r.location.search);n.set(l,e),r.replace({...r.location,search:n.toString()})}),[l,r])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:l}=e,t=u(e),[i,a]=(0,o.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:t}))),[d,m]=h({queryString:r,groupId:l}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,l]=(0,c.Dv)(n);return[r,(0,o.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:l}),x=(()=>{const e=d??f;return p({value:e,tabValues:t})?e:null})();(0,s.A)((()=>{x&&a(x)}),[x]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);a(e),m(e),g(e)}),[m,g,t]),tabValues:t}}var g=r(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=r(74848);function v({className:e,block:n,selectedValue:r,selectValue:o,tabValues:i}){const s=[],{blockElementScrollPositionUntilNextRender:a}=(0,t.a_)(),d=e=>{const n=e.currentTarget,l=s.indexOf(n),t=i[l].value;t!==r&&(a(n),o(t))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=s.indexOf(e.currentTarget)+1;n=s[r]??s[0];break}case"ArrowLeft":{const r=s.indexOf(e.currentTarget)-1;n=s[r]??s[s.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:o})=>(0,_.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{s.push(e)},onKeyDown:c,onClick:d,...o,className:(0,l.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":r===e}),children:n??e},e)))})}function j({lazy:e,children:n,selectedValue:r}){const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=t.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:(0,l.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=f(e);return(0,_.jsxs)("div",{className:(0,l.A)("tabs-container",x.tabList),children:[(0,_.jsx)(v,{...n,...e}),(0,_.jsx)(j,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,_.jsx)(w,{...e,children:m(e.children)},String(n))}},19365:(e,n,r)=>{r.d(n,{A:()=>i});r(96540);var o=r(34164);const l={tabItem:"tabItem_Ymn6"};var t=r(74848);function i({children:e,hidden:n,className:r}){return(0,t.jsx)("div",{role:"tabpanel",className:(0,o.A)(l.tabItem,r),hidden:n,children:e})}},28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var o=r(96540);const l={},t=o.createContext(l);function i(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),o.createElement(t.Provider,{value:n},e.children)}},31849:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"community-model-flavors/index","title":"Community Model Flavors","description":"MLflow\'s vibrant community has developed flavors for specialized ML frameworks and use cases, extending MLflow\'s capabilities beyond the built-in flavors. These community-maintained packages enable seamless integration with domain-specific tools for time series forecasting, anomaly detection, visualization, and more.","source":"@site/docs/classic-ml/community-model-flavors/index.mdx","sourceDirName":"community-model-flavors","slug":"/community-model-flavors/","permalink":"/docs/latest/ml/community-model-flavors/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"MLflow Signature Playground Notebook","permalink":"/docs/latest/ml/model/notebooks/signature_examples"},"next":{"title":"MLflow Datasets \ud83d\uddc3\ufe0f","permalink":"/docs/latest/ml/dataset/"}}');var l=r(74848),t=r(28453),i=r(11470),s=r(19365);const a={},d="Community Model Flavors",c={},m=[{value:"Quick Start",id:"quick-start",level:2},{value:"Installing Community Flavors",id:"installing-community-flavors",level:3},{value:"Basic Usage Pattern",id:"basic-usage-pattern",level:3},{value:"Featured Community Flavors",id:"featured-community-flavors",level:2},{value:"<strong>Sktime</strong>",id:"sktime",level:3},{value:"<strong>MLflavors Package</strong>",id:"mlflavors-package",level:3},{value:"<strong>MLflow VizMod</strong>",id:"mlflow-vizmod",level:3},{value:"<strong>BigML Integration</strong>",id:"bigml-integration",level:3},{value:"<strong>MLflow Go Backend</strong>",id:"mlflow-go-backend",level:3},{value:"<strong>Server Usage</strong>",id:"server-usage",level:4},{value:"<strong>Client Usage</strong>",id:"client-usage",level:4},{value:"<strong>Direct Store Usage</strong>",id:"direct-store-usage",level:4},{value:"<strong>Performance Benchmarks</strong>",id:"performance-benchmarks",level:4},{value:"<strong>Requirements &amp; Limitations</strong>",id:"requirements--limitations",level:4},{value:"<strong>Migration Guide</strong>",id:"migration-guide",level:4},{value:"<strong>Contributing to Go Backend</strong>",id:"contributing-to-go-backend",level:4},{value:"<strong>Creating Your Own Flavor</strong>",id:"creating-your-own-flavor",level:3},{value:"<strong>Flavor Structure Requirements</strong>",id:"flavor-structure-requirements",level:4},{value:"<strong>Example: Custom Sktime Flavor Implementation</strong>",id:"example-custom-sktime-flavor-implementation",level:4},{value:"<strong>Usage Example</strong>",id:"usage-example",level:4},{value:"<strong>Model Serving</strong>",id:"model-serving",level:4},{value:"Framework Support Matrix",id:"framework-support-matrix",level:3},{value:"By Use Case",id:"by-use-case",level:4},{value:"Integration Patterns",id:"integration-patterns",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"<strong>Development Guidelines</strong>",id:"development-guidelines",level:4},{value:"<strong>Performance Optimization</strong>",id:"performance-optimization",level:4},{value:"<strong>Error Handling</strong>",id:"error-handling",level:4},{value:"Community Resources",id:"community-resources",level:2},{value:"<strong>Contributing New Flavors</strong>",id:"contributing-new-flavors",level:4},{value:"<strong>Getting Help</strong>",id:"getting-help",level:4}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"community-model-flavors",children:"Community Model Flavors"})}),"\n",(0,l.jsx)(n.p,{children:"MLflow's vibrant community has developed flavors for specialized ML frameworks and use cases, extending MLflow's capabilities beyond the built-in flavors. These community-maintained packages enable seamless integration with domain-specific tools for time series forecasting, anomaly detection, visualization, and more."}),"\n",(0,l.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,l.jsx)(n.h3,{id:"installing-community-flavors",children:"Installing Community Flavors"}),"\n",(0,l.jsx)(n.p,{children:"Most community flavors are available via PyPI:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Time series forecasting\npip install mlflow[sktime]\npip install mlflavors\n\n# Visualization and plotting\npip install mlflow-vizmod\n\n# Big data and cloud platforms\npip install bigmlflow\npip install mlflow[aliyun-oss]\n"})}),"\n",(0,l.jsx)(n.h3,{id:"basic-usage-pattern",children:"Basic Usage Pattern"}),"\n",(0,l.jsx)(n.p,{children:"All community flavors follow MLflow's standard interface:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport community_flavor  # Replace with actual flavor\n\n# Train your model\nmodel = SomeModel()\nmodel.fit(data)\n\n# Log with MLflow\nwith mlflow.start_run():\n    community_flavor.log_model(model, "model_path")\n\n# Load for inference\nloaded_model = community_flavor.load_model("model_uri")\npredictions = loaded_model.predict(new_data)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"featured-community-flavors",children:"Featured Community Flavors"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsxs)(s.A,{value:"time-series",label:"Time Series",default:!0,children:[(0,l.jsx)(n.h3,{id:"sktime",children:(0,l.jsx)(n.strong,{children:"Sktime"})}),(0,l.jsx)(n.p,{children:"Unified interface for time series forecasting, classification, and transformation."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install sktime[mlflow]\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import pandas as pd\nfrom sktime.datasets import load_airline\nfrom sktime.forecasting.arima import AutoARIMA\nfrom sktime.utils import mlflow_sktime\n\n# Load data and train model\nairline = load_airline()\nmodel = AutoARIMA(sp=12, d=0, max_p=2, max_q=2, suppress_warnings=True)\nmodel.fit(airline, fh=[1, 2, 3])\n\n# Save and load with MLflow\nmlflow_sktime.save_model(sktime_model=model, path="model")\nloaded_model = mlflow_sktime.load_model(model_uri="model")\n\n# Make predictions\npredictions = loaded_model.predict()\nprint(predictions)\n\n# Load as PyFunc for serving\nloaded_pyfunc = mlflow_sktime.pyfunc.load_model(model_uri="model")\npyfunc_predictions = loaded_pyfunc.predict(pd.DataFrame())\n'})}),(0,l.jsx)(n.h3,{id:"mlflavors-package",children:(0,l.jsx)(n.strong,{children:"MLflavors Package"})}),(0,l.jsx)(n.p,{children:"Support for multiple time series and ML frameworks in one package."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install mlflavors\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Supported Frameworks:"})}),(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Framework"}),(0,l.jsx)(n.th,{children:"Category"}),(0,l.jsx)(n.th,{children:"Example Use Case"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Orbit"})}),(0,l.jsx)(n.td,{children:"Time Series"}),(0,l.jsx)(n.td,{children:"Bayesian forecasting"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"StatsForecast"})}),(0,l.jsx)(n.td,{children:"Time Series"}),(0,l.jsx)(n.td,{children:"Statistical models"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"PyOD"})}),(0,l.jsx)(n.td,{children:"Anomaly Detection"}),(0,l.jsx)(n.td,{children:"Outlier detection"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"SDV"})}),(0,l.jsx)(n.td,{children:"Synthetic Data"}),(0,l.jsx)(n.td,{children:"Privacy-preserving data generation"})]})]})]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"PyOD Anomaly Detection Example:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom pyod.models.knn import KNN\nfrom pyod.utils.data import generate_data\nimport mlflavors\n\n# Generate synthetic data\ncontamination = 0.1\nn_train, n_test = 200, 100\nX_train, X_test, _, y_test = generate_data(\n    n_train=n_train, n_test=n_test, contamination=contamination\n)\n\nwith mlflow.start_run():\n    # Train KNN detector\n    clf = KNN()\n    clf.fit(X_train)\n\n    # Log model\n    mlflavors.pyod.log_model(\n        pyod_model=clf, artifact_path="anomaly_detector", serialization_format="pickle"\n    )\n\n    # Evaluate\n    scores = clf.decision_function(X_test)\n    mlflow.log_metric("mean_anomaly_score", scores.mean())\n'})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Serving PyOD Model:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Load as PyFunc\nloaded_pyfunc = mlflavors.pyod.pyfunc.load_model(model_uri="model_uri")\n\n# Create configuration for inference\nimport pandas as pd\n\npredict_conf = pd.DataFrame([{"X": X_test, "predict_method": "decision_function"}])\n\nanomaly_scores = loaded_pyfunc.predict(predict_conf)[0]\n'})})]}),(0,l.jsxs)(s.A,{value:"visualization",label:"Visualization",children:[(0,l.jsx)(n.h3,{id:"mlflow-vizmod",children:(0,l.jsx)(n.strong,{children:"MLflow VizMod"})}),(0,l.jsx)(n.p,{children:"Treat visualizations as models for versioning, tracking, and deployment."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install mlflow-vizmod\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Create and Log Interactive Visualizations:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sklearn.datasets import load_iris\nimport altair as alt\nimport mlflow_vismod\n\n# Load data\ndf_iris = load_iris(as_frame=True)\n\n# Create Altair visualization\nviz_iris = (\n    alt.Chart(df_iris)\n    .mark_circle(size=60)\n    .encode(x="sepal_length:Q", y="sepal_width:Q", color="target:N")\n    .properties(height=375, width=575)\n    .interactive()\n)\n\n# Log visualization as a model\nwith mlflow.start_run():\n    mlflow_vismod.log_model(\n        model=viz_iris,\n        artifact_path="iris_viz",\n        style="vegalite",\n        input_example=df_iris.head(5),\n    )\n'})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Benefits:"}),"\nVersion Control: Track visualization changes over time. Reproducibility: Recreate exact visualizations with same data. Deployment: Serve interactive visualizations as web services. Collaboration: Share visualizations with consistent metadata."]})]}),(0,l.jsxs)(s.A,{value:"big-data",label:"Big Data & Cloud",children:[(0,l.jsx)(n.h3,{id:"bigml-integration",children:(0,l.jsx)(n.strong,{children:"BigML Integration"})}),(0,l.jsx)(n.p,{children:"Deploy and manage BigML supervised models through MLflow."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install bigmlflow\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import json\nimport mlflow\nimport bigmlflow\n\n# Load BigML model from JSON\nMODEL_FILE = "logistic_regression.json"\nwith mlflow.start_run():\n    with open(MODEL_FILE) as handler:\n        model = json.load(handler)\n\n    # Log BigML model\n    bigmlflow.log_model(\n        model,\n        artifact_path="bigml_model",\n        registered_model_name="production_classifier",\n    )\n\n# Load and use for inference\nloaded_model = bigmlflow.load_model("model_uri")\npredictions = loaded_model.predict(test_dataframe)\n\n# Load as PyFunc\npyfunc_model = mlflow.pyfunc.load_model("model_uri")\npyfunc_predictions = pyfunc_model.predict(test_dataframe)\n'})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Key Features:"}),"\nBigML Integration: Direct support for BigML's supervised models. PyFunc Compatible: Use with MLflow's generic Python function interface. Model Registry: Register BigML models for production deployment. DataFrame Inference: Standard pandas DataFrame input/output."]})]}),(0,l.jsxs)(s.A,{value:"performance",label:"Mlflow Go",children:[(0,l.jsx)(n.h3,{id:"mlflow-go-backend",children:(0,l.jsx)(n.strong,{children:"MLflow Go Backend"})}),(0,l.jsx)(n.p,{children:"High-performance Go implementation of the MLflow tracking server for better scalability and performance."}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install mlflow-go-backend\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Performance Benefits:"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Faster API calls"})," for critical tracking operations"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Higher concurrency"})," - handles more simultaneous requests"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Improved throughput"})," for high-volume ML workloads"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Drop-in replacement"})," for existing MLflow deployments"]}),"\n"]}),(0,l.jsx)(n.h4,{id:"server-usage",children:(0,l.jsx)(n.strong,{children:"Server Usage"})}),(0,l.jsx)(n.p,{children:"Replace your existing MLflow server command:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Traditional MLflow server\nmlflow server --backend-store-uri postgresql://user:pass@localhost:5432/mlflow\n\n# High-performance Go backend\nmlflow-go server --backend-store-uri postgresql://user:pass@localhost:5432/mlflow\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"All existing MLflow server options are supported:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"mlflow-go server \\\n  --backend-store-uri postgresql://user:pass@localhost:5432/mlflow \\\n  --artifacts-destination s3://my-mlflow-artifacts \\\n  --host 0.0.0.0 \\\n  --port 5000 \\\n  --workers 4\n"})}),(0,l.jsx)(n.h4,{id:"client-usage",children:(0,l.jsx)(n.strong,{children:"Client Usage"})}),(0,l.jsx)(n.p,{children:"Enable Go backend in your Python code:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport mlflow_go_backend\n\n# Enable the Go client implementation\nmlflow_go_backend.enable_go()\n\n# Set tracking URI (database required)\nmlflow.set_tracking_uri("postgresql://user:pass@localhost:5432/mlflow")\n\n# Use MLflow as normal - all operations now use Go backend\nmlflow.set_experiment("high-performance-experiment")\n\nwith mlflow.start_run():\n    mlflow.log_param("algorithm", "xgboost")\n    mlflow.log_metric("accuracy", 0.95)\n    mlflow.log_artifact("model.pkl")\n'})}),(0,l.jsx)(n.h4,{id:"direct-store-usage",children:(0,l.jsx)(n.strong,{children:"Direct Store Usage"})}),(0,l.jsx)(n.p,{children:"Use Go backend directly with MLflow stores:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import logging\nimport mlflow\nimport mlflow_go_backend\n\n# Enable debug logging to see Go backend in action\nlogging.basicConfig()\nlogging.getLogger("mlflow_go_backend").setLevel(logging.DEBUG)\n\n# Enable Go implementation\nmlflow_go_backend.enable_go()\n\n# Get high-performance tracking store\ntracking_store = mlflow.tracking._tracking_service.utils._get_store(\n    "postgresql://user:pass@localhost:5432/mlflow"\n)\n\n# All operations now use Go backend\nexperiment = tracking_store.get_experiment(0)\nruns = tracking_store.search_runs([experiment.experiment_id], "")\n\n# Get high-performance model registry store\nmodel_registry_store = mlflow.tracking._model_registry.utils._get_store(\n    "postgresql://user:pass@localhost:5432/mlflow"\n)\n\n# Model registry operations also use Go backend\nlatest_versions = model_registry_store.get_latest_versions("production_model")\n'})}),(0,l.jsx)(n.h4,{id:"performance-benchmarks",children:(0,l.jsx)(n.strong,{children:"Performance Benchmarks"})}),(0,l.jsx)(n.p,{children:"Initial benchmarks show significant performance improvements:"}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"API Response Times:"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Search Runs"}),": 60% faster than Python implementation"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Log Metrics"}),": 45% faster batch logging"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Get Experiment"}),": 70% faster retrieval"]}),"\n"]}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Concurrency:"})}),(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"2x more concurrent requests"})," supported"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Better resource utilization"})," under load"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reduced memory footprint"})," for server operations"]}),"\n"]}),(0,l.jsx)(n.h4,{id:"requirements--limitations",children:(0,l.jsx)(n.strong,{children:"Requirements & Limitations"})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Database Required:"}),"\nThe Go backend currently requires a database backend store. File-based storage is not supported."]}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Supported database URIs\nmlflow.set_tracking_uri("sqlite:///mlflow.db")\nmlflow.set_tracking_uri("postgresql://user:pass@host:5432/db")\nmlflow.set_tracking_uri("mysql://user:pass@host:3306/db")\n\n# Not supported yet\n# mlflow.set_tracking_uri("file:///local/mlruns")\n'})}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Endpoint Coverage:"}),"\nMost MLflow REST API endpoints are implemented in Go. Missing endpoints automatically fall back to the Python implementation for seamless compatibility."]}),(0,l.jsx)(n.h4,{id:"migration-guide",children:(0,l.jsx)(n.strong,{children:"Migration Guide"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Step 1: Install Go Backend"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install mlflow-go-backend\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Step 2: Update Server Command"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Old command\nmlflow server --backend-store-uri postgresql://...\n\n# New command\nmlflow-go server --backend-store-uri postgresql://...\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Step 3: Enable in Client Code"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import mlflow_go_backend\n\nmlflow_go_backend.enable_go()\n"})}),(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Step 4: Verify Performance"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import time\nimport mlflow\n\n# Benchmark your workload\nstart_time = time.time()\nwith mlflow.start_run():\n    for i in range(1000):\n        mlflow.log_metric(f"metric_{i}", i)\nduration = time.time() - start_time\nprint(f"Logged 1000 metrics in {duration:.2f} seconds")\n'})}),(0,l.jsx)(n.h4,{id:"contributing-to-go-backend",children:(0,l.jsx)(n.strong,{children:"Contributing to Go Backend"})}),(0,l.jsx)(n.p,{children:"The MLflow Go Backend is actively seeking contributors:"}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Missing Endpoints:"})," Help implement remaining REST API endpoints in Go\n",(0,l.jsx)(n.strong,{children:"Performance Optimization:"})," Improve existing Go implementations\n",(0,l.jsx)(n.strong,{children:"Testing:"})," Add test coverage for edge cases and performance scenarios\n",(0,l.jsx)(n.strong,{children:"Documentation:"})," Improve setup and usage documentation"]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Getting Started with Go:"}),"\nIf you're new to Go, the project maintainers have compiled learning resources to help you contribute effectively."]}),(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Community Support:"}),"\nJoin the ",(0,l.jsx)(n.code,{children:"#mlflow-go"})," channel on the official MLflow Slack for questions and collaboration."]})]}),(0,l.jsxs)(s.A,{value:"custom-flavors",label:"Custom Flavors",children:[(0,l.jsx)(n.h3,{id:"creating-your-own-flavor",children:(0,l.jsx)(n.strong,{children:"Creating Your Own Flavor"})}),(0,l.jsx)(n.p,{children:"Build custom flavors for specialized ML frameworks not covered by existing options."}),(0,l.jsx)(n.h4,{id:"flavor-structure-requirements",children:(0,l.jsx)(n.strong,{children:"Flavor Structure Requirements"})}),(0,l.jsx)(n.p,{children:"Every custom flavor must implement these core functions:"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Required functions for any custom flavor\ndef save_model(model, path, **kwargs):\n    """Save model to specified path with MLflow format"""\n    pass\n\n\ndef log_model(model, artifact_path, **kwargs):\n    """Log model to current MLflow run"""\n    pass\n\n\ndef load_model(model_uri):\n    """Load model from MLflow format"""\n    pass\n\n\ndef _load_pyfunc(path):\n    """Load model as PyFunc for generic inference"""\n    pass\n'})}),(0,l.jsx)(n.h4,{id:"example-custom-sktime-flavor-implementation",children:(0,l.jsx)(n.strong,{children:"Example: Custom Sktime Flavor Implementation"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import os\nimport pickle\nimport mlflow\nfrom mlflow import pyfunc\nfrom mlflow.models import Model\nfrom mlflow.models.model import MLMODEL_FILE_NAME\nfrom mlflow.utils.environment import _CONDA_ENV_FILE_NAME, _PYTHON_ENV_FILE_NAME\n\nFLAVOR_NAME = "sktime"\nSERIALIZATION_FORMAT_PICKLE = "pickle"\n\n\ndef save_model(\n    sktime_model, path, conda_env=None, serialization_format=SERIALIZATION_FORMAT_PICKLE\n):\n    """Save sktime model in MLflow format"""\n\n    # Validate and prepare save path\n    os.makedirs(path, exist_ok=True)\n\n    # Create MLflow model configuration\n    mlflow_model = Model()\n\n    # Save the actual model\n    model_data_subpath = "model.pkl"\n    model_data_path = os.path.join(path, model_data_subpath)\n\n    with open(model_data_path, "wb") as f:\n        pickle.dump(sktime_model, f)\n\n    # Add PyFunc flavor for generic inference\n    pyfunc.add_to_model(\n        mlflow_model,\n        loader_module="custom_sktime_flavor",  # Your module name\n        model_path=model_data_subpath,\n        conda_env=_CONDA_ENV_FILE_NAME,\n        python_env=_PYTHON_ENV_FILE_NAME,\n    )\n\n    # Add custom flavor configuration\n    mlflow_model.add_flavor(\n        FLAVOR_NAME,\n        pickled_model=model_data_subpath,\n        sktime_version=sktime.__version__,\n        serialization_format=serialization_format,\n    )\n\n    # Save MLmodel configuration file\n    mlflow_model.save(os.path.join(path, MLMODEL_FILE_NAME))\n\n\ndef log_model(sktime_model, artifact_path, **kwargs):\n    """Log sktime model to current MLflow run"""\n    return Model.log(\n        artifact_path=artifact_path,\n        flavor=custom_sktime_flavor,  # Your module reference\n        sktime_model=sktime_model,\n        **kwargs,\n    )\n\n\ndef load_model(model_uri):\n    """Load sktime model from MLflow format"""\n    local_model_path = mlflow.artifacts.download_artifacts(model_uri)\n\n    # Read flavor configuration\n    model_config = Model.load(os.path.join(local_model_path, MLMODEL_FILE_NAME))\n    flavor_conf = model_config.flavors[FLAVOR_NAME]\n\n    # Load the pickled model\n    model_path = os.path.join(local_model_path, flavor_conf["pickled_model"])\n    with open(model_path, "rb") as f:\n        return pickle.load(f)\n\n\nclass SktimeModelWrapper:\n    """PyFunc wrapper for sktime models"""\n\n    def __init__(self, sktime_model):\n        self.sktime_model = sktime_model\n\n    def predict(self, context, model_input):\n        """Predict using configuration DataFrame"""\n        if len(model_input) != 1:\n            raise ValueError("Configuration DataFrame must have exactly 1 row")\n\n        config = model_input.iloc[0].to_dict()\n        predict_method = config.get("predict_method", "predict")\n\n        if predict_method == "predict":\n            fh = config.get("fh", None)\n            X = config.get("X", None)\n            return self.sktime_model.predict(fh=fh, X=X)\n\n        elif predict_method == "predict_interval":\n            fh = config.get("fh", None)\n            X = config.get("X", None)\n            coverage = config.get("coverage", 0.9)\n            return self.sktime_model.predict_interval(fh=fh, X=X, coverage=coverage)\n\n        else:\n            raise ValueError(f"Unsupported predict_method: {predict_method}")\n\n\ndef _load_pyfunc(path):\n    """Load model as PyFunc"""\n    model = load_model(path)\n    return SktimeModelWrapper(model)\n'})}),(0,l.jsx)(n.h4,{id:"usage-example",children:(0,l.jsx)(n.strong,{children:"Usage Example"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport pandas as pd\nfrom sktime.forecasting.naive import NaiveForecaster\nfrom sktime.datasets import load_longley\n\n# Train model\ny, X = load_longley()\nforecaster = NaiveForecaster()\nforecaster.fit(y, X=X)\n\n# Log with custom flavor\nwith mlflow.start_run():\n    custom_sktime_flavor.log_model(\n        sktime_model=forecaster, artifact_path="custom_forecaster"\n    )\n    model_uri = mlflow.get_artifact_uri("custom_forecaster")\n\n# Load and use natively\nloaded_model = custom_sktime_flavor.load_model(model_uri)\nnative_predictions = loaded_model.predict(fh=[1, 2, 3])\n\n# Load as PyFunc for serving\nloaded_pyfunc = mlflow.pyfunc.load_model(model_uri)\n\n# Create configuration for PyFunc prediction\nconfig_df = pd.DataFrame(\n    [\n        {\n            "predict_method": "predict_interval",\n            "fh": [1, 2, 3, 4],\n            "coverage": [0.9, 0.95],\n            "X": X.tail(4).values.tolist(),  # JSON serializable\n        }\n    ]\n)\n\npyfunc_predictions = loaded_pyfunc.predict(config_df)\n'})}),(0,l.jsx)(n.h4,{id:"model-serving",children:(0,l.jsx)(n.strong,{children:"Model Serving"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Serve your custom flavor model\nmlflow models serve -m runs:/RUN_ID/custom_forecaster --host 127.0.0.1 --port 5000\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Request predictions from served model\nimport requests\nimport pandas as pd\n\nconfig_df = pd.DataFrame([{"predict_method": "predict", "fh": [1, 2, 3, 4]}])\n\nresponse = requests.post(\n    "http://127.0.0.1:5000/invocations",\n    json={"dataframe_split": config_df.to_dict(orient="split")},\n)\n\npredictions = response.json()\n'})})]})]}),"\n",(0,l.jsx)(n.h3,{id:"framework-support-matrix",children:"Framework Support Matrix"}),"\n",(0,l.jsx)(n.h4,{id:"by-use-case",children:"By Use Case"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Use Case"}),(0,l.jsx)(n.th,{children:"Frameworks"}),(0,l.jsx)(n.th,{children:"Installation"}),(0,l.jsx)(n.th,{children:"Key Features"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Time Series Forecasting"})}),(0,l.jsx)(n.td,{children:"Sktime, Orbit, StatsForecast"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"pip install sktime[mlflow]"})}),(0,l.jsx)(n.td,{children:"Unified API, multiple algorithms"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Anomaly Detection"})}),(0,l.jsx)(n.td,{children:"PyOD"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"pip install mlflavors"})}),(0,l.jsx)(n.td,{children:"40+ detection algorithms"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Visualization"})}),(0,l.jsx)(n.td,{children:"Altair, Plotly via VizMod"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"pip install mlflow-vizmod"})}),(0,l.jsx)(n.td,{children:"Interactive plots as models"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Synthetic Data"})}),(0,l.jsx)(n.td,{children:"SDV"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"pip install mlflavors"})}),(0,l.jsx)(n.td,{children:"Privacy-preserving data generation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"Big Data ML"})}),(0,l.jsx)(n.td,{children:"BigML"}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"pip install bigmlflow"})}),(0,l.jsx)(n.td,{children:"Cloud-based supervised learning"})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"integration-patterns",children:"Integration Patterns"}),"\n",(0,l.jsxs)(i.A,{children:[(0,l.jsxs)(s.A,{value:"standard-pattern",label:"Standard Pattern",default:!0,children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Most community flavors follow this pattern:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport community_flavor\n\n# 1. Train your model\nmodel = SomeFrameworkModel()\nmodel.fit(training_data)\n\n# 2. Log with MLflow\nwith mlflow.start_run():\n    community_flavor.log_model(\n        model=model,\n        artifact_path="model",\n        # Framework-specific parameters\n        serialization_format="pickle",\n        custom_config={"param": "value"},\n    )\n\n# 3. Load for inference\nloaded_model = community_flavor.load_model(model_uri)\npredictions = loaded_model.predict(new_data)\n\n# 4. Load as PyFunc for generic serving\npyfunc_model = community_flavor.pyfunc.load_model(model_uri)\ngeneric_predictions = pyfunc_model.predict(input_dataframe)\n'})})]}),(0,l.jsxs)(s.A,{value:"serving-pattern",label:"Serving Pattern",children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Configuration-based serving for complex models:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Many community flavors use configuration DataFrames\n# for complex inference parameters\nconfig_df = pd.DataFrame(\n    [\n        {\n            "predict_method": "predict_interval",  # What type of prediction\n            "fh": [1, 2, 3, 4],  # Forecast horizon\n            "coverage": [0.9, 0.95],  # Confidence intervals\n            "X": exogenous_data.tolist(),  # Additional features\n            "custom_param": "value",  # Framework-specific options\n        }\n    ]\n)\n\n# Use configuration with PyFunc model\npyfunc_model = community_flavor.pyfunc.load_model(model_uri)\npredictions = pyfunc_model.predict(config_df)\n'})})]}),(0,l.jsxs)(s.A,{value:"deployment-pattern",label:"Deployment Pattern",children:[(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Production deployment workflow:"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:'# 1. Register model in MLflow Model Registry\nmlflow.register_model(\n    model_uri="runs:/RUN_ID/model",\n    name="production_forecaster"\n)\n\n# 2. Transition to production stage\nclient = mlflow.MlflowClient()\nclient.transition_model_version_stage(\n    name="production_forecaster",\n    version=1,\n    stage="Production"\n)\n\n# 3. Serve model\n# Option A: Local serving\nmlflow models serve \\\n  -m "models:/production_forecaster/Production" \\\n  --host 0.0.0.0 --port 5000\n\n# Option B: Cloud deployment (Azure ML example)\nmlflow deployments create \\\n  -t azureml \\\n  -m "models:/production_forecaster/Production" \\\n  --name forecaster-service\n'})})]})]}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h4,{id:"development-guidelines",children:(0,l.jsx)(n.strong,{children:"Development Guidelines"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Follow MLflow Conventions"})," - Implement ",(0,l.jsx)(n.code,{children:"save_model()"}),", ",(0,l.jsx)(n.code,{children:"log_model()"}),", ",(0,l.jsx)(n.code,{children:"load_model()"})," functions. Add PyFunc flavor for generic inference. Include comprehensive error handling."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Configuration Management"})," - Use single-row DataFrames for complex inference parameters. Make all parameters JSON-serializable for REST API serving. Provide sensible defaults for optional parameters."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Testing Strategy"})," - Test save/load roundtrip functionality. Verify PyFunc compatibility. Test model serving with sample requests."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"performance-optimization",children:(0,l.jsx)(n.strong,{children:"Performance Optimization"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Efficient serialization for large models\ndef save_model(model, path, serialization_format="pickle"):\n    if serialization_format == "joblib":\n        # Use joblib for sklearn-compatible models\n        import joblib\n\n        joblib.dump(model, os.path.join(path, "model.joblib"))\n    elif serialization_format == "cloudpickle":\n        # Use cloudpickle for complex models with custom objects\n        import cloudpickle\n\n        with open(os.path.join(path, "model.pkl"), "wb") as f:\n            cloudpickle.dump(model, f)\n'})}),"\n",(0,l.jsx)(n.h4,{id:"error-handling",children:(0,l.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def load_model(model_uri):\n    try:\n        # Attempt to load model\n        return _load_model_internal(model_uri)\n    except Exception as e:\n        raise mlflow.exceptions.MlflowException(\n            f"Failed to load {FLAVOR_NAME} model. "\n            f"Ensure model was saved with compatible version. Error: {str(e)}"\n        )\n'})}),"\n",(0,l.jsx)(n.h2,{id:"community-resources",children:"Community Resources"}),"\n",(0,l.jsx)(n.h4,{id:"contributing-new-flavors",children:(0,l.jsx)(n.strong,{children:"Contributing New Flavors"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Create GitHub Repository"})," - Follow naming convention: ",(0,l.jsx)(n.code,{children:"mlflow-{framework}"}),". Include comprehensive documentation. Add example notebooks."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Package Structure"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"mlflow-myframework/\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 mlflow_myframework/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 flavor.py\n\u251c\u2500\u2500 examples/\n\u2502   \u2514\u2500\u2500 example_usage.ipynb\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_flavor.py\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Documentation Requirements"})," - Installation instructions. Basic usage examples. API reference. Model serving examples."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"getting-help",children:(0,l.jsx)(n.strong,{children:"Getting Help"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"MLflow Discussions"}),": ",(0,l.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/discussions",children:"GitHub Discussions"}),". ",(0,l.jsx)(n.strong,{children:"Community Slack"}),": Join the MLflow community workspace. ",(0,l.jsx)(n.strong,{children:"Stack Overflow"}),": Tag questions with ",(0,l.jsx)(n.code,{children:"mlflow"})," and framework name. ",(0,l.jsx)(n.strong,{children:"Framework-Specific"}),": Check individual flavor repositories for issues."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Ready to extend MLflow?"})," Start by exploring the existing community flavors, then consider contributing your own flavor for frameworks not yet supported!"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}}}]);