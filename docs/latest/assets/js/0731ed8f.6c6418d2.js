"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1445],{11470:(e,n,t)=>{t.d(n,{A:()=>w});var i=t(96540),s=t(34164),l=t(23104),a=t(56347),r=t(205),o=t(57485),d=t(31682),c=t(70679);function p(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i})))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,l=m(e),[a,o]=(0,i.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[d,p]=u({queryString:t,groupId:s}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,c.Dv)(n);return[t,(0,i.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),f=(()=>{const e=d??x;return h({value:e,tabValues:l})?e:null})();(0,r.A)((()=>{f&&o(f)}),[f]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),g(e)}),[p,g,l]),tabValues:l}}var g=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function j({className:e,block:n,selectedValue:t,selectValue:i,tabValues:a}){const r=[],{blockElementScrollPositionUntilNextRender:o}=(0,l.a_)(),d=e=>{const n=e.currentTarget,s=r.indexOf(n),l=a[s].value;l!==t&&(o(n),i(l))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:i})=>(0,y.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{r.push(e)},onKeyDown:c,onClick:d,...i,className:(0,s.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function _({lazy:e,children:n,selectedValue:t}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find((e=>e.props.value===t));return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function v(e){const n=x(e);return(0,y.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,y.jsx)(j,{...n,...e}),(0,y.jsx)(_,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,y.jsx)(v,{...e,children:p(e.children)},String(n))}},12823:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/signature-vs-no-signature-6981ed9f06b1c588ccd0a276c350c62a.png"},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var i=t(34164);const s={tabItem:"tabItem_Ymn6"};var l=t(74848);function a({children:e,hidden:n,className:t}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,t),hidden:n,children:e})}},27594:(e,n,t)=>{t.d(n,{O:()=>l});var i=t(96540),s=t(74848);function l({children:e,href:n}){const t=(0,i.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:n})}catch{}const t=await fetch(n),i=await t.blob(),s=window.URL.createObjectURL(i),l=document.createElement("a");l.style.display="none",l.href=s;const a=n.split("/").pop();l.download=a,document.body.appendChild(l),l.click(),window.URL.revokeObjectURL(s),document.body.removeChild(l)}),[n]);return(0,s.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:n,download:!0,onClick:t,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>o});t(96540);const i=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var s=t(86025),l=t(28774),a=t(74848);const r=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(i[e])return e}return null};function o({fn:e,children:n}){const t=r(e);if(!t)return(0,a.jsx)(a.Fragment,{children:n});const o=(0,s.Ay)(`/${i[t]}#${e}`);return(0,a.jsx)(l.A,{to:o,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}},79367:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/signature-enforcement-e5974f544a264396c51cb2511dd158f1.png"},91207:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"model/signatures/index","title":"Model Signatures and Input Examples","description":"Model signatures and input examples are foundational components that define how your models should be used, ensuring consistent and reliable interactions across MLflow\'s ecosystem.","source":"@site/docs/classic-ml/model/signatures/index.mdx","sourceDirName":"model/signatures","slug":"/model/signatures/","permalink":"/docs/latest/ml/model/signatures/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Model Signature","sidebar_position":1},"sidebar":"classicMLSidebar","previous":{"title":"Overview","permalink":"/docs/latest/ml/model/"},"next":{"title":"Dependency Management","permalink":"/docs/latest/ml/model/dependencies/"}}');var s=t(74848),l=t(28453),a=(t(28774),t(27594)),r=(t(49374),t(11470)),o=t(19365);const d={sidebar_label:"Model Signature",sidebar_position:1},c="Model Signatures and Input Examples",p={},m=[{value:"What Are Model Signatures and Input Examples?",id:"what-are-model-signatures-and-input-examples",level:2},{value:"Why They Matter",id:"why-they-matter",level:3},{value:"Quick Start: Adding Signatures to Your Models",id:"quick-start-adding-signatures-to-your-models",level:2},{value:"Understanding Model Signatures",id:"understanding-model-signatures",level:2},{value:"Signature Types Overview",id:"signature-types-overview",level:3},{value:"Type Hints for Model Signatures",id:"type-hints-for-model-signatures",level:2},{value:"Quick Start with Type Hints",id:"quick-start-with-type-hints",level:3},{value:"Key Benefits",id:"key-benefits",level:3},{value:"When to Use Type Hints",id:"when-to-use-type-hints",level:3},{value:"Input Type Requirements",id:"input-type-requirements",level:3},{value:"Primitive Types",id:"primitive-types",level:3},{value:"Collection Types",id:"collection-types",level:3},{value:"Union and Optional Types",id:"union-and-optional-types",level:3},{value:"Pydantic Models (Recommended)",id:"pydantic-models-recommended",level:3},{value:"Type Hint to Schema Mapping",id:"type-hint-to-schema-mapping",level:3},{value:"Basic Pydantic Usage",id:"basic-pydantic-usage",level:3},{value:"Complex Nested Models",id:"complex-nested-models",level:3},{value:"Flexible Base Classes",id:"flexible-base-classes",level:3},{value:"Pydantic Best Practices",id:"pydantic-best-practices",level:3},{value:"Automatic Data Validation",id:"automatic-data-validation",level:3},{value:"Data Conversion Examples",id:"data-conversion-examples",level:3},{value:"Validation Error Examples",id:"validation-error-examples",level:3},{value:"Validation Scope",id:"validation-scope",level:3},{value:"TypeFromExample",id:"typefromexample",level:3},{value:"Legacy Type Hints (No Validation)",id:"legacy-type-hints-no-validation",level:3},{value:"Using @pyfunc Decorator",id:"using-pyfunc-decorator",level:3},{value:"Union Types Behavior",id:"union-types-behavior",level:3},{value:"Serving Models with Type Hints",id:"serving-models-with-type-hints",level:3},{value:"Deployment Best Practices",id:"deployment-best-practices",level:3},{value:"Production Considerations",id:"production-considerations",level:3},{value:"Type Hints Best Practices",id:"type-hints-best-practices",level:3},{value:"Data Types and Examples",id:"data-types-and-examples",level:2},{value:"Primitive Types",id:"primitive-types-1",level:3},{value:"Composite Types",id:"composite-types",level:3},{value:"Compatibility Notes",id:"compatibility-notes",level:3},{value:"NumPy Data Types",id:"numpy-data-types",level:3},{value:"Shape Specifications",id:"shape-specifications",level:3},{value:"Common Patterns",id:"common-patterns",level:3},{value:"Parameter Specifications",id:"parameter-specifications",level:3},{value:"Supported Parameter Types",id:"supported-parameter-types",level:3},{value:"Common Parameter Patterns",id:"common-parameter-patterns",level:3},{value:"Using Parameters at Inference",id:"using-parameters-at-inference",level:3},{value:"Signature Enforcement and Validation",id:"signature-enforcement-and-validation",level:2},{value:"Validation Rules",id:"validation-rules",level:3},{value:"Handling Common Issues",id:"handling-common-issues",level:3},{value:"Working with Signatures",id:"working-with-signatures",level:2},{value:"Automatic Signature Inference",id:"automatic-signature-inference",level:3},{value:"Manual Signature Creation",id:"manual-signature-creation",level:3},{value:"Signature Inference Helper",id:"signature-inference-helper",level:3},{value:"Adding Signatures to Logged Models",id:"adding-signatures-to-logged-models",level:3},{value:"Working with Model Registry",id:"working-with-model-registry",level:3},{value:"GenAI Model Signatures",id:"genai-model-signatures",level:3},{value:"Models with Parameters",id:"models-with-parameters",level:3},{value:"Complex Data Structures",id:"complex-data-structures",level:3},{value:"Input Examples in Detail",id:"input-examples-in-detail",level:2},{value:"Benefits of Input Examples",id:"benefits-of-input-examples",level:3},{value:"Input Example Formats",id:"input-example-formats",level:3},{value:"Model Serving and Deployment",id:"model-serving-and-deployment",level:2},{value:"Serving Input Examples",id:"serving-input-examples",level:3},{value:"Validating Serving Examples",id:"validating-serving-examples",level:3},{value:"Signature Playground and Examples",id:"signature-playground-and-examples",level:2},{value:"Quick Reference Examples",id:"quick-reference-examples",level:3},{value:"Best Practices and Tips",id:"best-practices-and-tips",level:2},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Error Messages",id:"common-error-messages",level:3},{value:"Debugging Signatures",id:"debugging-signatures",level:3},{value:"Additional Resources",id:"additional-resources",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"model-signatures-and-input-examples",children:"Model Signatures and Input Examples"})}),"\n",(0,s.jsx)(n.p,{children:"Model signatures and input examples are foundational components that define how your models should be used, ensuring consistent and reliable interactions across MLflow's ecosystem."}),"\n",(0,s.jsx)(n.h2,{id:"what-are-model-signatures-and-input-examples",children:"What Are Model Signatures and Input Examples?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Model Signature"})," - Defines the expected format for model inputs, outputs, and parameters. Think of it as a contract that specifies exactly what data your model expects and what it will return."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Model Input Example"})," - Provides a concrete example of valid model input. This helps developers understand the required data format and validates that your model works correctly."]}),"\n",(0,s.jsx)("div",{className:"center-div",style:{width:"90%"},children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Model signatures comparison",src:t(12823).A+"",width:"1589",height:"694"})})}),"\n",(0,s.jsx)(n.h3,{id:"why-they-matter",children:"Why They Matter"}),"\n",(0,s.jsx)(n.p,{children:"Model signatures and input examples provide crucial benefits:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u2022 Consistency"}),": Ensure all model interactions follow the same data format\n",(0,s.jsx)(n.strong,{children:"\u2022 Validation"}),": Catch data format errors before they reach your model\n",(0,s.jsx)(n.strong,{children:"\u2022 Documentation"}),": Serve as living documentation for model usage\n",(0,s.jsx)(n.strong,{children:"\u2022 Deployment Safety"}),": Enable MLflow deployment tools to validate requests automatically\n",(0,s.jsx)(n.strong,{children:"\u2022 UI Integration"}),": Allow MLflow UI to display clear model requirements"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Databricks Unity Catalog Requirement",type:"warning",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Model signatures are REQUIRED for registering models in Databricks Unity Catalog."})," Unity Catalog enforces concrete type definitions for all registered models and will reject models without proper signatures. Always include a signature when logging models that you plan to register in Databricks environments."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Required for Databricks registration\nmlflow.sklearn.log_model(\n    model,\n    name="my_model",\n    input_example=X_sample,  # Generates required signature\n    signature=signature,  # Or provide explicit signature\n)\n\n# \u274c Will fail in Databricks Unity Catalog\nmlflow.sklearn.log_model(model, name="my_model")  # No signature\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start-adding-signatures-to-your-models",children:"Quick Start: Adding Signatures to Your Models"}),"\n",(0,s.jsx)(n.p,{children:"The easiest way to add a signature is to provide an input example when logging your model:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\nimport pandas as pd\n\n# Load data and train model\niris = load_iris(as_frame=True)\nX, y = iris.data, iris.target\nmodel = RandomForestClassifier().fit(X, y)\n\nwith mlflow.start_run():\n    # The input example automatically generates a signature\n    mlflow.sklearn.log_model(\n        model, name="iris_model", input_example=X.iloc[[0]]  # First row as example\n    )\n'})}),"\n",(0,s.jsx)(n.p,{children:"MLflow automatically:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Infers the signature from your input example"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Validates the model works with the example"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Stores both signature and example with your model"})}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Automatic Signature Inference",type:"info",children:(0,s.jsxs)(n.p,{children:["MLflow automatically generates model signatures when you provide an ",(0,s.jsx)(n.code,{children:"input_example"})," during model logging. This works for all model flavors and is the recommended approach for most use cases."]})}),"\n",(0,s.jsx)(n.h2,{id:"understanding-model-signatures",children:"Understanding Model Signatures"}),"\n",(0,s.jsx)(n.p,{children:"Model signatures consist of three components:"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(o.A,{value:"inputs",label:"Inputs Schema",default:!0,children:[(0,s.jsx)(n.p,{children:"Defines the structure and types of data your model expects:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Column-based signature (DataFrames)\ninput_schema = Schema(\n    [\n        ColSpec("double", "sepal_length"),\n        ColSpec("double", "sepal_width"),\n        ColSpec("string", "species", required=False),  # Optional field\n    ]\n)\n\n# Tensor-based signature (NumPy arrays)\ninput_schema = Schema(\n    [TensorSpec(np.dtype(np.float32), (-1, 28, 28, 1))]  # Batch of 28x28 images\n)\n'})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Features:"}),"\nSupport for both tabular (DataFrame) and tensor (NumPy) data, optional fields using ",(0,s.jsx)(n.code,{children:"required=False"}),", and rich data type support including arrays and objects."]})]}),(0,s.jsxs)(o.A,{value:"outputs",label:"Outputs Schema",children:[(0,s.jsx)(n.p,{children:"Specifies what your model returns:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Single prediction column\noutput_schema = Schema([ColSpec("long", "prediction")])\n\n# Multiple outputs\noutput_schema = Schema(\n    [\n        ColSpec("double", "probability"),\n        ColSpec("string", "predicted_class"),\n        ColSpec("long", "confidence_score"),\n    ]\n)\n\n# Tensor output\noutput_schema = Schema(\n    [TensorSpec(np.dtype(np.float32), (-1, 10))]  # 10-class probabilities\n)\n'})})]}),(0,s.jsxs)(o.A,{value:"parameters",label:"Parameters Schema",children:[(0,s.jsx)(n.p,{children:"Defines optional inference parameters (like temperature, max_length):"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Define inference parameters\nparams_schema = ParamSchema(\n    [\n        ParamSpec("temperature", "double", 0.7),  # Default temperature\n        ParamSpec("max_tokens", "long", 100),  # Default max tokens\n        ParamSpec("stop_words", "string", [".", "!"], (-1,)),  # List parameter\n    ]\n)\n\n# Use in model signature\nsignature = ModelSignature(\n    inputs=input_schema, outputs=output_schema, params=params_schema\n)\n'})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Common Parameters:"}),"\n",(0,s.jsx)(n.code,{children:"temperature"})," controls randomness in generation, ",(0,s.jsx)(n.code,{children:"max_length"}),"/",(0,s.jsx)(n.code,{children:"max_tokens"})," limits output length, ",(0,s.jsx)(n.code,{children:"top_k"})," and ",(0,s.jsx)(n.code,{children:"top_p"})," control sampling strategies, and ",(0,s.jsx)(n.code,{children:"repetition_penalty"})," reduces repetitive outputs."]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"signature-types-overview",children:"Signature Types Overview"}),"\n",(0,s.jsx)(n.p,{children:"MLflow supports two primary signature types:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Column-Based Signatures"})," - For tabular data (DataFrames, dictionaries):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Perfect for traditional ML models\n{"feature_1": 1.5, "feature_2": "category_a", "feature_3": [1, 2, 3]}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tensor-Based Signatures"})," - For array data (images, audio, embeddings):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Perfect for deep learning models\nnp.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [1, 2, 3]]])  # Shape: (2, 2, 3)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"type-hints-for-model-signatures",children:"Type Hints for Model Signatures"}),"\n",(0,s.jsx)(n.admonition,{title:"Version Compatibility",type:"info",children:(0,s.jsxs)(n.p,{children:["Type hint support was introduced in MLflow 2.20.0. If you are using an earlier version of MLflow, see ",(0,s.jsx)(n.a,{href:"#working-with-signatures",children:"the Working with Signatures"})," section."]})}),"\n",(0,s.jsx)(n.p,{children:"You can use Python type hints to automatically define model signatures and enable data validation. This provides a more Pythonic way to specify your model's interface while getting automatic validation and schema inference."}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(o.A,{value:"type-hints-overview",label:"Overview & Benefits",default:!0,children:[(0,s.jsx)(n.h3,{id:"quick-start-with-type-hints",children:"Quick Start with Type Hints"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom typing import List, Dict, Optional\nimport pydantic\n\n\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n    metadata: Optional[Dict[str, str]] = None\n\n\nclass CustomModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: List[Message]) -> List[str]:\n        # Signature automatically inferred from type hints!\n        return [msg.content for msg in model_input]\n\n\n# Log model - signature is auto-generated from type hints\nwith mlflow.start_run():\n    mlflow.pyfunc.log_model(\n        name="chat_model",\n        python_model=CustomModel(),\n        input_example=[\n            {"role": "user", "content": "Hello"}\n        ],  # Validates against type hints\n    )\n'})}),(0,s.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u2022 Automatic Validation"}),": Input data validated against type hints at runtime\n",(0,s.jsx)(n.strong,{children:"\u2022 Schema Inference"}),": Model signature automatically generated from type annotations\n",(0,s.jsx)(n.strong,{children:"\u2022 Type Safety"}),": Catch type mismatches before they reach your model\n",(0,s.jsx)(n.strong,{children:"\u2022 IDE Support"}),": Better autocomplete and error detection during development\n",(0,s.jsx)(n.strong,{children:"\u2022 Documentation"}),": Type hints serve as self-documenting code\n",(0,s.jsx)(n.strong,{children:"\u2022 Consistency"}),": Same validation for PythonModel instances and loaded PyFunc models"]}),(0,s.jsx)(n.h3,{id:"when-to-use-type-hints",children:"When to Use Type Hints"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u2705 Recommended for:"}),"\nComplex data structures (chat messages, tool definitions, nested objects), models requiring strict input validation, teams using modern Python development practices, and GenAI and LLM applications with structured inputs."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u26a0\ufe0f Consider alternatives for:"}),"\nSimple tabular data (DataFrames work fine with input examples), legacy codebases without type hint adoption, and models with highly dynamic input structures."]})]}),(0,s.jsxs)(o.A,{value:"supported-types",label:"Supported Type Hints",children:[(0,s.jsx)(n.h3,{id:"input-type-requirements",children:"Input Type Requirements"}),(0,s.jsxs)(n.admonition,{title:"Signature Interface",type:"warning",children:[(0,s.jsxs)(n.p,{children:["Input signatures must be ",(0,s.jsx)(n.code,{children:"List[...]"})," since PythonModel expects batch data:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \u2705 Correct - Always use List wrapper\ndef predict(self, model_input: List[str]) -> List[str]:\n    ...\n\n\ndef predict(self, model_input: List[Message]) -> List[Dict]:\n    ...\n\n\n# \u274c Incorrect - Missing List wrapper\ndef predict(self, model_input: str) -> str:\n    ...\n\n\ndef predict(self, model_input: Message) -> Dict:\n    ...\n"})})]}),(0,s.jsx)(n.h3,{id:"primitive-types",children:"Primitive Types"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"List[str]  # String inputs\nList[int]  # Integer inputs\nList[float]  # Float inputs\nList[bool]  # Boolean inputs\nList[bytes]  # Binary data\nList[datetime.datetime]  # Timestamps\n"})}),(0,s.jsx)(n.h3,{id:"collection-types",children:"Collection Types"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"List[List[str]]  # Nested lists\nList[Dict[str, int]]  # Dictionaries\nList[Dict[str, List[str]]]  # Complex nested structures\n"})}),(0,s.jsx)(n.h3,{id:"union-and-optional-types",children:"Union and Optional Types"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"List[Union[int, str]]  # Multiple possible types (becomes AnyType)\nList[Optional[str]]  # Optional fields (in Pydantic models only)\nList[Any]  # Any type (no validation)\n"})}),(0,s.jsx)(n.h3,{id:"pydantic-models-recommended",children:"Pydantic Models (Recommended)"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class UserData(pydantic.BaseModel):\n    name: str\n    age: int\n    email: Optional[str] = None  # Optional with default\n    preferences: List[str] = []  # List with default\n\n\nList[UserData]  # Clean, validated structure\n"})}),(0,s.jsx)(n.h3,{id:"type-hint-to-schema-mapping",children:"Type Hint to Schema Mapping"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Type Hint"}),(0,s.jsx)(n.th,{children:"Generated Schema"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List[str]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Schema([ColSpec(type=DataType.string)])"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List[List[str]]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Schema([ColSpec(type=Array(DataType.string))])"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List[Dict[str, str]]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Schema([ColSpec(type=Map(DataType.string))])"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List[Union[int, str]]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Schema([ColSpec(type=AnyType())])"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"List[Message]"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Schema([ColSpec(type=Object(...))])"})})]})]})]})]}),(0,s.jsxs)(o.A,{value:"pydantic-models",label:"Pydantic Models",children:[(0,s.jsx)(n.h3,{id:"basic-pydantic-usage",children:"Basic Pydantic Usage"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pydantic\nfrom typing import Optional, List, Dict\n\n\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n    timestamp: Optional[str] = None\n\n\nclass CustomModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: List[Message]) -> List[str]:\n        return [f"{msg.role}: {msg.content}" for msg in model_input]\n\n\n# Both work - automatic conversion\nmodel.predict([Message(role="user", content="Hi")])  # Pydantic object\nmodel.predict([{"role": "user", "content": "Hi"}])  # Dict (auto-converted)\n'})}),(0,s.jsx)(n.h3,{id:"complex-nested-models",children:"Complex Nested Models"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class FunctionParams(pydantic.BaseModel):\n    properties: Dict[str, str]\n    type: str = "object"\n    required: Optional[List[str]] = None\n\n\nclass ToolDefinition(pydantic.BaseModel):\n    name: str\n    description: Optional[str] = None\n    parameters: Optional[FunctionParams] = None\n\n\nclass ChatRequest(pydantic.BaseModel):\n    messages: List[Message]\n    tools: Optional[List[ToolDefinition]] = None\n    temperature: float = 0.7\n\n\n@mlflow.pyfunc.utils.pyfunc\ndef advanced_predict(model_input: List[ChatRequest]) -> List[Dict[str, str]]:\n    results = []\n    for request in model_input:\n        # Type validation ensures request.messages exists and is properly typed\n        response = {"response": f"Processed {len(request.messages)} messages"}\n        if request.tools:\n            response["tools_count"] = str(len(request.tools))\n        results.append(response)\n    return results\n'})}),(0,s.jsx)(n.h3,{id:"flexible-base-classes",children:"Flexible Base Classes"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class BaseMessage(pydantic.BaseModel):\n    model_config = pydantic.ConfigDict(extra="allow")  # Allow extra fields\n\n    role: str\n    content: str\n\n\nclass SystemMessage(BaseMessage):\n    system_prompt: str\n\n\nclass UserMessage(BaseMessage):\n    user_id: str\n\n\n@mlflow.pyfunc.utils.pyfunc\ndef flexible_predict(model_input: List[BaseMessage]) -> List[str]:\n    # Input automatically converted to BaseMessage objects\n    # Extra fields from subclasses preserved\n    results = []\n    for msg in model_input:\n        result = f"{msg.role}: {msg.content}"\n        if hasattr(msg, "system_prompt"):\n            result += f" (system: {msg.system_prompt})"\n        elif hasattr(msg, "user_id"):\n            result += f" (user: {msg.user_id})"\n        results.append(result)\n    return results\n'})}),(0,s.jsx)(n.h3,{id:"pydantic-best-practices",children:"Pydantic Best Practices"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Always provide defaults for optional fields:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \u2705 Good - Optional fields have defaults\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n    metadata: Optional[Dict[str, str]] = None\n    timestamp: Optional[str] = None\n\n\n# \u274c Bad - Optional field without default\nclass Message(pydantic.BaseModel):\n    role: str\n    content: str\n    metadata: Optional[Dict[str, str]]  # Will cause validation errors\n"})})]}),(0,s.jsxs)(o.A,{value:"validation-conversion",label:"Validation & Conversion",children:[(0,s.jsx)(n.h3,{id:"automatic-data-validation",children:"Automatic Data Validation"}),(0,s.jsx)(n.p,{children:"Type hints enable automatic validation for both PythonModel instances and loaded PyFunc models:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'model = CustomModel()\n\n# \u2705 Works: Pydantic objects\ninput_data = [Message(role="user", content="Hello")]\nresult = model.predict(input_data)\n\n# \u2705 Works: Dictionaries (auto-converted to Pydantic objects)\ninput_data = [{"role": "user", "content": "Hello"}]\nresult = model.predict(input_data)\n\n# \u274c Fails: Missing required fields\ninput_data = [{"role": "user"}]  # Missing \'content\'\nmodel.predict(input_data)  # Raises validation error\n\n# \u274c Fails: Wrong data type\ninput_data = ["hello"]  # Expected dict/Pydantic object\nmodel.predict(input_data)  # Raises validation error\n'})}),(0,s.jsx)(n.h3,{id:"data-conversion-examples",children:"Data Conversion Examples"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Input: Dictionary\ninput_dict = {"role": "system", "content": "Hello", "metadata": {"source": "api"}}\n\n# Automatically converted to: Message object\n# Message(role="system", content="Hello", metadata={"source": "api"})\n\n# Works for nested structures too\ncomplex_input = {\n    "messages": [{"role": "user", "content": "Hi"}],\n    "tools": [{"name": "search", "description": "Web search"}],\n    "temperature": 0.5,\n}\n# Automatically converted to: ChatRequest object with nested Message and ToolDefinition objects\n'})}),(0,s.jsx)(n.h3,{id:"validation-error-examples",children:"Validation Error Examples"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Missing required field\ntry:\n    model.predict([{\"role\": \"system\"}])  # Missing 'content'\nexcept Exception as e:\n    print(e)\n    # Output: 1 validation error for Message\n    # content\n    #   Field required [type=missing, input_value={'role': 'system'}, input_type=dict]\n\n# Wrong data type\ntry:\n    model.predict([\"hello\"])  # Expected dict/object\nexcept Exception as e:\n    print(e)\n    # Output: Failed to validate data against type hint `list[Message]`, invalid elements:\n    # [('hello', \"Expecting example to be a dictionary or pydantic model instance...\")]\n"})}),(0,s.jsx)(n.h3,{id:"validation-scope",children:"Validation Scope"}),(0,s.jsx)(n.admonition,{title:"Output Validation",type:"note",children:(0,s.jsxs)(n.p,{children:["MLflow validates ",(0,s.jsx)(n.strong,{children:"input data"})," against type hints but does ",(0,s.jsx)(n.strong,{children:"not validate model output"}),". The output type hint is used only for model signature inference."]})})]}),(0,s.jsxs)(o.A,{value:"special-types",label:"Special Type Hints",children:[(0,s.jsx)(n.h3,{id:"typefromexample",children:"TypeFromExample"}),(0,s.jsx)(n.p,{children:"For cases where you want automatic type inference from your input example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.types.type_hints import TypeFromExample\n\n\nclass FlexibleModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: TypeFromExample):\n        # Type determined by input_example at logging time\n        return [\n            item.upper() if isinstance(item, str) else str(item) for item in model_input\n        ]\n\n\n# Input example determines the expected type\nwith mlflow.start_run():\n    mlflow.pyfunc.log_model(\n        name="flexible_model",\n        python_model=FlexibleModel(),\n        input_example=["sample", "data"],  # Expects List[str]\n    )\n\n# At inference, validates against List[str] type\nloaded_model = mlflow.pyfunc.load_model(model_uri)\nresult = loaded_model.predict(["hello", "world"])  # \u2705 Works\n'})}),(0,s.jsx)(n.h3,{id:"legacy-type-hints-no-validation",children:"Legacy Type Hints (No Validation)"}),(0,s.jsx)(n.p,{children:"These type hints work but don't provide validation or schema inference:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Supported but no validation\ndef predict(self, model_input: pd.DataFrame) -> pd.DataFrame:\n    ...\n\n\ndef predict(self, model_input: np.ndarray) -> np.ndarray:\n    ...\n\n\ndef predict(self, model_input: scipy.sparse.csr_matrix):\n    ...\n\n\n# You must provide explicit signature or input_example\nwith mlflow.start_run():\n    mlflow.pyfunc.log_model(\n        name="legacy_model",\n        python_model=model,\n        input_example=sample_dataframe,  # Required for legacy types\n    )\n'})}),(0,s.jsx)(n.h3,{id:"using-pyfunc-decorator",children:"Using @pyfunc Decorator"}),(0,s.jsx)(n.p,{children:"For callable functions (not classes):"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.pyfunc.utils import pyfunc\n\n\n@pyfunc\ndef predict(model_input: List[Message]) -> List[str]:\n    return [msg.content for msg in model_input]\n\n\n# Same validation works as with PythonModel\npredict([{"role": "user", "content": "Hi"}])  # \u2705 Auto-converts dict to Message\npredict(["hello"])  # \u274c Validation error\n'})}),(0,s.jsx)(n.h3,{id:"union-types-behavior",children:"Union Types Behavior"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Union types become AnyType (no validation)\ndef predict(self, model_input: List[Union[str, int]]) -> List[str]:\n    # MLflow infers this as List[AnyType] - no validation performed\n    return [str(item) for item in model_input]\n\n\n# Better approach: Use Pydantic discriminated unions for validation\nfrom typing import Literal\n\n\nclass TextInput(pydantic.BaseModel):\n    type: Literal["text"] = "text"\n    content: str\n\n\nclass NumberInput(pydantic.BaseModel):\n    type: Literal["number"] = "number"\n    value: int\n\n\n# Discriminated union with validation\ndef predict(self, model_input: List[Union[TextInput, NumberInput]]) -> List[str]:\n    ...\n'})})]}),(0,s.jsxs)(o.A,{value:"serving-deployment",label:"Serving & Deployment",children:[(0,s.jsx)(n.h3,{id:"serving-models-with-type-hints",children:"Serving Models with Type Hints"}),(0,s.jsxs)(n.p,{children:["When serving models with type hints, ",(0,s.jsxs)(n.strong,{children:["always use the ",(0,s.jsx)(n.code,{children:"inputs"})," key"]})," in your JSON request:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Start local server\nmlflow models serve -m runs/<run_id>/model --env-manager local\n\n# Correct request format\ncurl -X POST http://127.0.0.1:5000/invocations \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{"inputs": [{"role": "user", "content": "Hello"}]}\'\n\n# \u274c Incorrect - missing inputs wrapper\ncurl -X POST http://127.0.0.1:5000/invocations \\\n  -H \'Content-Type: application/json\' \\\n  -d \'[{"role": "user", "content": "Hello"}]\'\n'})}),(0,s.jsx)(n.h3,{id:"deployment-best-practices",children:"Deployment Best Practices"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Example Validation:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Always provide input examples that match your type hints\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        name="chat_model",\n        python_model=CustomModel(),\n        input_example=[{"role": "user", "content": "test"}],  # Matches List[Message]\n    )\n\n# MLflow validates the input_example against type hints at logging time\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Testing Before Deployment:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Test locally first\nmodel = CustomModel()\ntest_input = [{"role": "user", "content": "test"}]\n\n# Verify validation works\ntry:\n    result = model.predict(test_input)\n    print("\u2705 Validation passed")\nexcept Exception as e:\n    print(f"\u274c Validation failed: {e}")\n\n# Test loaded model\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\nresult = loaded_model.predict(test_input)\n'})}),(0,s.jsx)(n.h3,{id:"production-considerations",children:"Production Considerations"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Error Handling:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class RobustModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: List[Message]) -> List[str]:\n        try:\n            return [msg.content for msg in model_input]\n        except Exception as e:\n            # Log validation errors for monitoring\n            logger.error(f"Prediction failed: {e}")\n            raise\n'})}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Performance:"}),"\nType validation adds minimal overhead, Pydantic validation is highly optimized, and you should consider caching for repeated validation of similar structures."]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"type-hints-best-practices",children:"Type Hints Best Practices"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Development Workflow:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# \u2705 Recommended pattern\nclass MyModel(mlflow.pyfunc.PythonModel):\n    def predict(self, model_input: List[MyPydanticModel]) -> List[str]:\n        # Clear type annotations\n        # Automatic validation\n        # Good IDE support\n        return [process(item) for item in model_input]\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Guidelines:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Pydantic models for complex data structures"}),"\n",(0,s.jsx)(n.li,{children:"Set default values for optional fields in Pydantic models"}),"\n",(0,s.jsxs)(n.li,{children:["Don't pass explicit ",(0,s.jsx)(n.code,{children:"signature"})," parameter when using type hints"]}),"\n",(0,s.jsx)(n.li,{children:"Always provide input examples that match your type hints"}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"TypeFromExample"})," when you want flexibility without explicit typing"]}),"\n",(0,s.jsx)(n.li,{children:"Test validation locally before deployment"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Important Notes",type:"warning",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Never pass explicit ",(0,s.jsx)(n.code,{children:"signature"})," parameter"]})," when using type hints - MLflow will use the inferred signature and warn if they don't match"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Union types become AnyType"})," - use Pydantic discriminated unions for proper validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Input examples are required"})," for ",(0,s.jsx)(n.code,{children:"TypeFromExample"})," and legacy type hints"]}),"\n"]})}),"\n",(0,s.jsx)(n.h2,{id:"data-types-and-examples",children:"Data Types and Examples"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(o.A,{value:"column-types",label:"Column-Based Data Types",default:!0,children:[(0,s.jsx)(n.h3,{id:"primitive-types-1",children:"Primitive Types"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Python to MLflow type mappings:"})}),(0,s.jsx)(n.admonition,{title:"Type Restrictions",type:"note",children:(0,s.jsx)(n.p,{children:"Usage of these types support only scalar definitions or 1-dimensional Arrays. Mixed types are not permitted."})}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Python Type"}),(0,s.jsx)(n.th,{children:"MLflow Type"}),(0,s.jsx)(n.th,{children:"Example"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"str"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"hello world"'})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"long"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"42"})}),(0,s.jsx)(n.td,{children:"64-bit integers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.int32"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"integer"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.int32(42)"})}),(0,s.jsx)(n.td,{children:"32-bit integers"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"float"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"double"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"3.14159"})}),(0,s.jsx)(n.td,{children:"64-bit floats"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.float32"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"float"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.float32(3.14)"})}),(0,s.jsx)(n.td,{children:"32-bit floats"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"True"})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.bool_"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.bool_(True)"})}),(0,s.jsx)(n.td,{children:"NumPy boolean"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'pd.Timestamp("2023-01-01")'})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bytes"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"binary"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'b"binary data"'})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bytearray"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"binary"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'bytearray(b"data")'})}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"np.bytes_"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"binary"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'np.bytes_(b"data")'})}),(0,s.jsx)(n.td,{children:"NumPy bytes"})]})]})]}),(0,s.jsx)(n.h3,{id:"composite-types",children:"Composite Types"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arrays (Lists/NumPy arrays):"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{\n    "simple_list": ["a", "b", "c"],\n    "nested_array": [[1, 2], [3, 4], [5, 6]],\n    "numpy_array": np.array([1.1, 2.2, 3.3]),\n}\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Objects (Dictionaries):"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'{"user_profile": {"name": "Alice", "age": 30, "preferences": ["sports", "music"]}}\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Optional Fields:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Include None values to make fields optional\npd.DataFrame(\n    {\n        "required_field": [1, 2, 3],\n        "optional_field": [1.0, None, 3.0],  # This becomes optional\n    }\n)\n'})}),(0,s.jsx)(n.h3,{id:"compatibility-notes",children:"Compatibility Notes"}),(0,s.jsxs)(n.admonition,{title:"version compatibility",type:"warning",children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Version Requirements:"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Array and Object types"}),": Require MLflow \u2265 2.10.0"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Spark ML vectors"}),": Require MLflow \u2265 2.15.0"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AnyType"}),": Requires MLflow \u2265 2.19.0"]}),"\n"]})]})]}),(0,s.jsxs)(o.A,{value:"tensor-types",label:"Tensor-Based Data Types",children:[(0,s.jsx)(n.h3,{id:"numpy-data-types",children:"NumPy Data Types"}),(0,s.jsxs)(n.p,{children:["Tensor signatures support all ",(0,s.jsx)(n.a,{href:"https://numpy.org/devdocs/user/basics.types.html",children:"NumPy data types"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"np.float32  # 32-bit float\nnp.float64  # 64-bit float (double)\nnp.int8  # 8-bit integer\nnp.int32  # 32-bit integer\nnp.uint8  # Unsigned 8-bit (common for images)\nnp.bool_  # Boolean\n"})}),(0,s.jsx)(n.h3,{id:"shape-specifications",children:"Shape Specifications"}),(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"-1"})," for dimensions that can vary (typically batch size):"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Image batch: variable batch size, 28x28 pixels, 1 channel\nTensorSpec(np.dtype(np.uint8), (-1, 28, 28, 1))\n\n# Text embeddings: variable batch size, 768-dimensional vectors\nTensorSpec(np.dtype(np.float32), (-1, 768))\n\n# Fixed shape: exactly 10 classes\nTensorSpec(np.dtype(np.float32), (10,))\n"})}),(0,s.jsx)(n.h3,{id:"common-patterns",children:"Common Patterns"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Computer Vision:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Grayscale images\nTensorSpec(np.dtype(np.uint8), (-1, 28, 28, 1))\n\n# RGB images\nTensorSpec(np.dtype(np.uint8), (-1, 224, 224, 3))\n\n# Feature maps\nTensorSpec(np.dtype(np.float32), (-1, 512, 7, 7))\n"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Natural Language Processing:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Token IDs\nTensorSpec(np.dtype(np.int64), (-1, 512))\n\n# Embeddings\nTensorSpec(np.dtype(np.float32), (-1, 768))\n\n# Attention masks\nTensorSpec(np.dtype(np.bool_), (-1, 512))\n"})})]}),(0,s.jsxs)(o.A,{value:"inference-params",label:"Inference Parameters",children:[(0,s.jsx)(n.h3,{id:"parameter-specifications",children:"Parameter Specifications"}),(0,s.jsx)(n.p,{children:"Parameters allow runtime customization of model behavior:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'ParamSpec(\n    name="temperature",  # Parameter name\n    dtype="double",  # Data type\n    default=0.7,  # Default value\n    shape=None,  # Shape (None for scalars, (-1,) for lists)\n)\n'})}),(0,s.jsx)(n.h3,{id:"supported-parameter-types",children:"Supported Parameter Types"}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Parameters must be scalars or 1D arrays only."})," Multi-dimensional arrays are not supported for inference parameters."]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"MLflow Type"}),(0,s.jsx)(n.th,{children:"Python Type"}),(0,s.jsx)(n.th,{children:"Scalar Example"}),(0,s.jsx)(n.th,{children:"1D Array Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"str"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"gpt-4"'})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'["stop1", "stop2"]'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"long"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"int"})," (64-bit)"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"100"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[100, 200, 300]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"integer"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"int"})," (32-bit)"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"50"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[10, 20, 30]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"double"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"float"})," (64-bit)"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"0.7"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[0.1, 0.5, 0.9]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"float"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"float"})," (32-bit)"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"0.5"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[0.1, 0.2, 0.3]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"True"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[True, False, True]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"datetime.now()"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"[datetime1, datetime2]"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"binary"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bytes"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'b"data"'})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'[b"data1", b"data2"]'})})]})]})]}),(0,s.jsx)(n.h3,{id:"common-parameter-patterns",children:"Common Parameter Patterns"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Text Generation:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'params_schema = ParamSchema(\n    [\n        ParamSpec("temperature", "double", 0.7),\n        ParamSpec("max_tokens", "long", 100),\n        ParamSpec("top_p", "double", 0.9),\n        ParamSpec("frequency_penalty", "double", 0.0),\n        ParamSpec("stop_sequences", "string", [], (-1,)),  # List of strings\n    ]\n)\n'})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Model Selection:"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'params_schema = ParamSchema(\n    [\n        ParamSpec("model_name", "string", "default"),\n        ParamSpec("use_cache", "boolean", True),\n        ParamSpec("timeout", "long", 30),\n    ]\n)\n'})}),(0,s.jsx)(n.h3,{id:"using-parameters-at-inference",children:"Using Parameters at Inference"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Model with parameters\nloaded_model = mlflow.pyfunc.load_model(model_uri)\n\n# Use default parameters\nresult = loaded_model.predict(input_data)\n\n# Override specific parameters\nresult = loaded_model.predict(input_data, params={"temperature": 0.1, "max_tokens": 50})\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"signature-enforcement-and-validation",children:"Signature Enforcement and Validation"}),"\n",(0,s.jsx)("div",{className:"center-div",style:{width:"90%"},children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Signature enforcement process",src:t(79367).A+"",width:"1453",height:"1499"})})}),"\n",(0,s.jsx)(n.p,{children:"MLflow automatically validates inputs against your model signature when:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Loading models as PyFunc (",(0,s.jsx)(n.code,{children:"mlflow.pyfunc.load_model"}),")"]}),"\n",(0,s.jsx)(n.li,{children:"Using MLflow deployment tools"}),"\n",(0,s.jsx)(n.li,{children:"Serving models via MLflow's REST API"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Validation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Required fields"}),": Must be present or validation fails"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optional fields"}),": Can be missing without errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extra fields"}),": Ignored (not passed to model)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type conversion"}),": Safe conversions applied when possible"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameter Validation:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type checking"}),": Parameters must match specified types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shape validation"}),": List parameters validated for correct shape"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Default values"}),": Applied when parameters not provided"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unknown parameters"}),": Generate warnings but don't fail"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"handling-common-issues",children:"Handling Common Issues"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Integer Columns with Missing Values:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u274c Problem: Integer column with NaN becomes float, causing type mismatch\ndf = pd.DataFrame({"int_col": [1, 2, None]})  # Becomes float64\n\n# \u2705 Solution: Define as double from the start\ndf = pd.DataFrame({"int_col": [1.0, 2.0, None]})  # Stays float64\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Type Conversion Examples:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"# \u2705 Safe conversions (allowed)\nint \u2192 long     # 32-bit to 64-bit integer\nint \u2192 double   # Integer to float\nfloat \u2192 double # 32-bit to 64-bit float\n\n# \u274c Unsafe conversions (rejected)\nlong \u2192 double  # Potential precision loss\nstring \u2192 int   # No automatic parsing\n"})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-signatures",children:"Working with Signatures"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsxs)(o.A,{value:"logging-signatures",label:"Logging Models with Signatures",default:!0,children:[(0,s.jsx)(n.h3,{id:"automatic-signature-inference",children:"Automatic Signature Inference"}),(0,s.jsx)(n.p,{children:"The easiest approach - provide an input example:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Train your model\nmodel = RandomForestClassifier().fit(X_train, y_train)\n\nwith mlflow.start_run():\n    mlflow.sklearn.log_model(\n        model,\n        name="my_model",\n        input_example=X_train.iloc[[0]],  # Signature inferred automatically\n    )\n'})}),(0,s.jsx)(n.h3,{id:"manual-signature-creation",children:"Manual Signature Creation"}),(0,s.jsx)(n.p,{children:"For more control, create signatures explicitly:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.models import ModelSignature\nfrom mlflow.types.schema import Schema, ColSpec\n\n# Define input schema\ninput_schema = Schema(\n    [\n        ColSpec("double", "feature_1"),\n        ColSpec("string", "feature_2"),\n        ColSpec("long", "feature_3", required=False),  # Optional\n    ]\n)\n\n# Define output schema\noutput_schema = Schema([ColSpec("double", "prediction")])\n\n# Create signature\nsignature = ModelSignature(inputs=input_schema, outputs=output_schema)\n\n# Log with explicit signature\nwith mlflow.start_run():\n    mlflow.sklearn.log_model(model, name="my_model", signature=signature)\n'})}),(0,s.jsx)(n.h3,{id:"signature-inference-helper",children:"Signature Inference Helper"}),(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"infer_signature"})," for custom workflows:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.models import infer_signature\n\n# Generate predictions for signature inference\npredictions = model.predict(X_test)\n\n# Infer signature from data\nsignature = infer_signature(X_test, predictions)\n\n# Log with inferred signature\nwith mlflow.start_run():\n    mlflow.sklearn.log_model(model, name="my_model", signature=signature)\n'})})]}),(0,s.jsxs)(o.A,{value:"updating-signatures",label:"Updating Existing Models",children:[(0,s.jsx)(n.h3,{id:"adding-signatures-to-logged-models",children:"Adding Signatures to Logged Models"}),(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"set_signature"})," to add or update signatures on existing models:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.models import set_signature, infer_signature\n\n# Load existing model (without signature)\nmodel_uri = "models:/<model_id>"\nmodel = mlflow.pyfunc.load_model(model_uri)\n\n# Create signature from test data\nsignature = infer_signature(X_test, model.predict(X_test))\n\n# Apply signature to existing model\nset_signature(model_uri, signature)\n\n# Verify signature was set\nfrom mlflow.models.model import get_model_info\n\nassert get_model_info(model_uri).signature == signature\n'})}),(0,s.jsx)(n.h3,{id:"working-with-model-registry",children:"Working with Model Registry"}),(0,s.jsx)(n.p,{children:"For registered models, update the source and create a new version:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.client import MlflowClient\n\nclient = MlflowClient()\nmodel_name = "my_registered_model"\nmodel_version = 1\n\n# Get existing model version\nmv = client.get_model_version(name=model_name, version=model_version)\n\n# Update signature on source artifacts\nsignature = infer_signature(X_test, predictions)\nset_signature(mv.source, signature)\n\n# Create new model version with updated signature\nclient.create_model_version(name=model_name, source=mv.source, run_id=mv.run_id)\n'})})]}),(0,s.jsxs)(o.A,{value:"complex-signatures",label:"Advanced Signature Patterns",children:[(0,s.jsx)(n.h3,{id:"genai-model-signatures",children:"GenAI Model Signatures"}),(0,s.jsxs)(n.p,{children:["For LangChain, OpenAI, and similar models, ",(0,s.jsx)(n.strong,{children:"signatures are automatically inferred when you provide an input example"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Input example for chat model\ninput_example = {"messages": [{"role": "user", "content": "What is machine learning?"}]}\n\n# Optional fields example\ninput_example = [\n    {"name": "Alice", "message": "Hello"},  # name is present\n    {"message": "Hi there"},  # name is missing (becomes optional)\n]\n\n# Log model - signature auto-generated from input_example\nwith mlflow.start_run():\n    mlflow.langchain.log_model(\n        chain,\n        name="chat_model",\n        input_example=input_example,  # Signature automatically inferred!\n    )\n'})}),(0,s.jsx)(n.h3,{id:"models-with-parameters",children:"Models with Parameters"}),(0,s.jsxs)(n.p,{children:["Include inference parameters in your signature - ",(0,s.jsx)(n.strong,{children:"signatures are automatically inferred when both input and parameters are provided"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Input data and parameters\ninput_data = "Translate to French: Hello world"\nparams = {"temperature": 0.3, "max_tokens": 50, "stop_sequences": [".", "!"]}\n\n# Create signature with parameters - automatically inferred\nsignature = infer_signature(\n    input_data, model.predict(input_data), params  # Include parameters in signature\n)\n\nwith mlflow.start_run():\n    mlflow.transformers.log_model(model, name="translation_model", signature=signature)\n'})}),(0,s.jsx)(n.h3,{id:"complex-data-structures",children:"Complex Data Structures"}),(0,s.jsxs)(n.p,{children:["Handle nested objects and arrays - ",(0,s.jsx)(n.strong,{children:"signatures automatically inferred from complex input examples"}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Complex input structure\ninput_example = {\n    "user_data": {\n        "id": 12345,\n        "preferences": ["action", "comedy"],\n        "metadata": {"created_date": "2023-01-01", "is_premium": True},\n    },\n    "context": {"device": "mobile", "location": None},  # Optional field\n}\n\n# Signature automatically handles nested structure when provided as input_example\nwith mlflow.start_run():\n    mlflow.pyfunc.log_model(\n        python_model=custom_model,\n        name="complex_model",\n        input_example=input_example,  # Auto-infers complex nested schema\n    )\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"input-examples-in-detail",children:"Input Examples in Detail"}),"\n",(0,s.jsx)(n.p,{children:"Input examples serve multiple important purposes beyond signature inference:"}),"\n",(0,s.jsx)(n.h3,{id:"benefits-of-input-examples",children:"Benefits of Input Examples"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u2022 Signature Inference"}),": Automatically generate model signatures\n",(0,s.jsx)(n.strong,{children:"\u2022 Model Validation"}),": Verify model works during logging\n",(0,s.jsx)(n.strong,{children:"\u2022 Dependency Detection"}),": Help identify required packages\n",(0,s.jsx)(n.strong,{children:"\u2022 Documentation"}),": Show developers proper input format\n",(0,s.jsx)(n.strong,{children:"\u2022 Deployment Testing"}),": Validate REST endpoint payload format"]}),"\n",(0,s.jsx)(n.h3,{id:"input-example-formats",children:"Input Example Formats"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"dataframe-examples",label:"DataFrame Examples",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Single record example\nsingle_record = pd.DataFrame(\n    [{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}]\n)\n\n# Multiple records example\nbatch_example = pd.DataFrame(\n    [\n        {"feature_1": 1.0, "feature_2": "A"},\n        {"feature_1": 2.0, "feature_2": "B"},\n        {"feature_1": 3.0, "feature_2": "C"},\n    ]\n)\n\n# Log model with DataFrame example\nmlflow.sklearn.log_model(model, name="model", input_example=single_record)\n'})})}),(0,s.jsx)(o.A,{value:"tensor-examples",label:"Tensor Examples",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import numpy as np\n\n# Image batch example (MNIST-style)\nimage_batch = np.random.randint(0, 255, size=(3, 28, 28, 1), dtype=np.uint8)\n\n# Multi-input dictionary\nmulti_input = {\n    "image": np.random.random((2, 224, 224, 3)),\n    "metadata": np.array([[1.0, 2.0], [3.0, 4.0]]),\n}\n\n# Sparse matrix example\nfrom scipy.sparse import csr_matrix\n\nsparse_example = csr_matrix([[1, 0, 2], [0, 0, 3]])\n\n# Log model with tensor example\nmlflow.tensorflow.log_model(model, name="model", input_example=image_batch)\n'})})}),(0,s.jsx)(o.A,{value:"json-examples",label:"JSON Examples",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Dictionary example\ndict_example = {\n    "messages": [\n        {"role": "system", "content": "You are a helpful assistant"},\n        {"role": "user", "content": "Hello!"},\n    ],\n    "temperature": 0.7,\n}\n\n# List example\nlist_example = [\n    {"text": "First document", "category": "news"},\n    {"text": "Second document", "category": "sports"},\n]\n\n# Simple scalar\nscalar_example = "What is the capital of France?"\n\n# Log model with JSON example\nmlflow.langchain.log_model(model, name="model", input_example=dict_example)\n'})})}),(0,s.jsx)(o.A,{value:"params-examples",label:"Examples with Parameters",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Combine input data with parameters using tuple\ninput_data = "Translate to Spanish: Good morning"\nparams = {"temperature": 0.2, "max_length": 50, "do_sample": True}\n\n# Create tuple for logging\ninput_example = (input_data, params)\n\n# Log model with parameters\nmlflow.transformers.log_model(\n    model, name="translation_model", input_example=input_example\n)\n\n# At inference time\nloaded_model = mlflow.pyfunc.load_model(model_uri)\n\n# Use default parameters\nresult1 = loaded_model.predict(input_data)\n\n# Override parameters\nresult2 = loaded_model.predict(input_data, params={"temperature": 0.1})\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"model-serving-and-deployment",children:"Model Serving and Deployment"}),"\n",(0,s.jsx)(n.h3,{id:"serving-input-examples",children:"Serving Input Examples"}),"\n",(0,s.jsx)(n.p,{children:"MLflow automatically generates serving-compatible examples:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# When you log a model with input_example\ninput_example = {"question": "What is MLflow?"}\n\nwith mlflow.start_run():\n    model_info = mlflow.pyfunc.log_model(\n        python_model=MyModel(), name="model", input_example=input_example\n    )\n\n# MLflow creates two files:\n# 1. input_example.json - Original format\n# 2. serving_input_example.json - REST API format\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Generated Files:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"File"}),(0,s.jsx)(n.th,{children:"Content"}),(0,s.jsx)(n.th,{children:"Purpose"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"input_example.json"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'{"question": "What is MLflow?"}'})}),(0,s.jsx)(n.td,{children:"Original input format"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"serving_input_example.json"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'{"inputs": {"question": "What is MLflow?"}}'})}),(0,s.jsx)(n.td,{children:"REST endpoint format"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"validating-serving-examples",children:"Validating Serving Examples"}),"\n",(0,s.jsx)(n.p,{children:"Test your model before deployment:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.models.utils import load_serving_example\nfrom mlflow.models import validate_serving_input\n\n# Load serving example\nserving_example = load_serving_example(model_info.model_uri)\n\n# Validate it works\nresult = validate_serving_input(model_info.model_uri, serving_example)\nprint(f"Validation result: {result}")\n\n# Test with local server\n# mlflow models serve --model-uri <model_uri>\n# curl -X POST -H "Content-Type: application/json" \\\n#      -d \'<serving_example>\' http://localhost:5000/invocations\n'})}),"\n",(0,s.jsx)(n.h2,{id:"signature-playground-and-examples",children:"Signature Playground and Examples"}),"\n",(0,s.jsx)(n.p,{children:"Explore signature behavior with our interactive examples:"}),"\n",(0,s.jsx)(a.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/source/ml/model/notebooks/signature_examples.ipynb",children:(0,s.jsx)("span",{children:"Download Signature Examples Notebook"})}),"\n",(0,s.jsxs)(n.p,{children:["Or view examples directly: ",(0,s.jsx)(n.a,{href:"/ml/model/notebooks/signature_examples",children:"Signature Examples Notebook"})]}),"\n",(0,s.jsx)(n.h3,{id:"quick-reference-examples",children:"Quick Reference Examples"}),"\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.A,{value:"basic-examples",label:"Basic Examples",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow.models import infer_signature\n\n# Simple dictionary\nsimple_dict = {"name": "Alice", "age": 30, "active": True}\nprint(infer_signature(simple_dict))\n# \u2192 Schema: [name: string, age: long, active: boolean]\n\n# With optional fields\noptional_fields = [\n    {"name": "Alice", "email": "alice@example.com"},\n    {"name": "Bob", "email": None},  # email becomes optional\n]\nprint(infer_signature(optional_fields))\n# \u2192 Schema: [name: string, email: string (optional)]\n\n# Arrays and nested objects\ncomplex_data = {\n    "user": {"id": 123, "tags": ["premium", "beta"]},\n    "scores": [0.8, 0.9, 0.7],\n}\nprint(infer_signature(complex_data))\n# \u2192 Nested schema with arrays and objects\n'})})}),(0,s.jsx)(o.A,{value:"dataframe-examples",label:"DataFrame Examples",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import pandas as pd\n\n# Basic DataFrame\ndf = pd.DataFrame(\n    {\n        "feature_1": [1.0, 2.0, 3.0],\n        "feature_2": ["A", "B", "C"],\n        "feature_3": [True, False, True],\n    }\n)\nprint(infer_signature(df))\n# \u2192 Column-based schema\n\n# With missing values (creates optional columns)\ndf_optional = pd.DataFrame(\n    {"required_col": [1, 2, 3], "optional_col": [1.0, None, 3.0]}  # Contains None\n)\nprint(infer_signature(df_optional))\n# \u2192 optional_col marked as optional\n\n# Mixed data types\ndf_mixed = pd.DataFrame(\n    {\n        "numbers": [1, 2, 3],\n        "arrays": [[1, 2], [3, 4], [5, 6]],  # Lists in DataFrame\n        "objects": [{"a": 1}, {"b": 2}, {"c": 3}],  # Dicts in DataFrame\n    }\n)\nprint(infer_signature(df_mixed))\n# \u2192 Complex schema with Array and Object types\n'})})}),(0,s.jsx)(o.A,{value:"tensor-examples",label:"Tensor Examples",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import numpy as np\n\n# Simple tensor\ntensor_2d = np.array([[1, 2, 3], [4, 5, 6]])\nprint(infer_signature(tensor_2d))\n# \u2192 Tensor(int64, (-1, 3))\n\n# Image-like tensor\nimage_batch = np.random.randint(0, 255, (10, 28, 28, 1), dtype=np.uint8)\nprint(infer_signature(image_batch))\n# \u2192 Tensor(uint8, (-1, 28, 28, 1))\n\n# Multiple tensors\nmulti_tensor = {\n    "image": np.random.random((5, 224, 224, 3)),\n    "mask": np.random.randint(0, 2, (5, 224, 224, 1)),\n}\nprint(infer_signature(multi_tensor))\n# \u2192 Schema with multiple tensor specs\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-and-tips",children:"Best Practices and Tips"}),"\n",(0,s.jsx)(n.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Always Include Input Examples"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u2705 Good: Always provide examples\nmlflow.sklearn.log_model(model, name="model", input_example=X_sample)\n\n# \u274c Avoid: Logging without examples\nmlflow.sklearn.log_model(model, name="model")  # No signature or validation\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Test Your Signatures"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Validate signature works as expected\nsignature = infer_signature(X_test, y_pred)\nloaded_model = mlflow.pyfunc.load_model(model_uri)\n\n# Test with your signature\ntry:\n    result = loaded_model.predict(X_test)\n    print("\u2705 Signature validation passed")\nexcept Exception as e:\n    print(f"\u274c Signature issue: {e}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For Large DataFrames:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Use a representative sample for input_example\nlarge_df = pd.DataFrame(...)  # 1M+ rows\nsample_df = large_df.sample(n=100, random_state=42)  # Representative sample\n\nmlflow.sklearn.log_model(model, name="model", input_example=sample_df)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For Complex Objects:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Provide minimal but representative examples\nminimal_example = {\n    "required_field": "example_value",\n    "optional_field": None,  # Shows field is optional\n    "array_field": ["sample"],  # Shows it\'s an array\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Integer Handling:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u274c Problem: Integers with NaN become floats\ndf = pd.DataFrame({"int_col": [1, 2, None]})  # Type becomes float64\n\n# \u2705 Solution: Use consistent types\ndf = pd.DataFrame({"int_col": [1.0, 2.0, None]})  # Explicit float64\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Nested Structure Consistency:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u274c Problem: Inconsistent nesting\ninconsistent = [\n    {"level1": {"level2": "value"}},\n    {"level1": "direct_value"},  # Different structure\n]\n\n# \u2705 Solution: Consistent structure\nconsistent = [\n    {"level1": {"level2": "value1"}},\n    {"level1": {"level2": "value2"}},  # Same structure\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Type Hints for PythonModel"})," (MLflow 2.20.0+):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from typing import Dict, List\n\n\nclass TypedModel(mlflow.pyfunc.PythonModel):\n    def predict(self, context, model_input: List[Dict[str, str]]) -> List[str]:\n        # Signature automatically inferred from type hints!\n        return [item["text"].upper() for item in model_input]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-error-messages",children:"Common Error Messages"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Required input field missing":'})}),"\n",(0,s.jsx)(n.p,{children:"This error occurs when your model expects a required field that's not present in the input data."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Example: Model expects field "age" but input only has "name"\ninput_data = {"name": "Alice"}  # Missing required "age" field\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Include all required fields in your input data, or mark the field as optional in your signature by including ",(0,s.jsx)(n.code,{children:"None"})," values in your input example."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Cannot convert type X to type Y":'})}),"\n",(0,s.jsx)(n.p,{children:"This happens when you try to pass data of one type where the signature expects another type."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Example: Trying to pass string where integer expected\ninput_data = {"score": "85"}  # String value\n# But signature expects: {"score": 85}  # Integer value\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Fix your input data types to match the signature, or update the signature if the type change is intentional."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Tensor shape mismatch":'})}),"\n",(0,s.jsx)(n.p,{children:"This error occurs when tensor inputs don't match the expected shape defined in the signature."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Example: Model expects shape (None, 784) but got (None, 28, 28)\ninput_tensor = np.random.random((10, 28, 28))  # Wrong shape\n# But signature expects: (10, 784)  # Flattened shape\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Reshape your input data to match the expected dimensions, or update the signature if the shape requirements have changed."]}),"\n",(0,s.jsx)(n.h3,{id:"debugging-signatures",children:"Debugging Signatures"}),"\n",(0,s.jsx)(n.p,{children:"Use these techniques to diagnose signature-related issues:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Inspect existing model signature\nfrom mlflow.models.model import get_model_info\n\nmodel_info = get_model_info(model_uri)\nprint("Current signature:")\nprint(model_info.signature)\n\n# Compare with inferred signature\ninferred = infer_signature(your_input_data)\nprint("Inferred signature:")\nprint(inferred)\n\n# Check compatibility\nif model_info.signature != inferred:\n    print("\u26a0\ufe0f  Signatures don\'t match - consider updating")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/ml/model/notebooks/signature_examples",children:"Signature Examples Notebook"})," - Interactive examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/ml/model#model-api",children:"Model API Documentation"})," - Complete API reference"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/ml/deployment",children:"Deployment Guide"})," - Using signatures in production"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/ml/model#storage-format",children:"MLflow Model Format"})," - Technical specification"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);