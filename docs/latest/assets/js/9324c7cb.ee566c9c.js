"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1856],{16581:(t,e,n)=>{n.d(e,{p:()=>r});var d=n(74848);const r=({children:t,isStderr:e})=>(0,d.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:t})},27594:(t,e,n)=>{n.d(e,{O:()=>a});var d=n(96540),r=n(74848);function a({children:t,href:e}){const n=(0,d.useCallback)((async t=>{if(t.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:e})}catch{}const n=await fetch(e),d=await n.blob(),r=window.URL.createObjectURL(d),a=document.createElement("a");a.style.display="none",a.href=r;const i=e.split("/").pop();a.download=i,document.body.appendChild(a),a.click(),window.URL.revokeObjectURL(r),document.body.removeChild(a)}),[e]);return(0,r.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:e,download:!0,onClick:n,children:t})}},31248:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>c,default:()=>f,frontMatter:()=>m,metadata:()=>d,toc:()=>p});const d=JSON.parse('{"id":"getting-started/logging-first-model/notebooks/logging-first-model-ipynb","title":"Initializing the MLflow Client","description":"Download this notebook","source":"@site/docs/classic-ml/getting-started/logging-first-model/notebooks/logging-first-model-ipynb.mdx","sourceDirName":"getting-started/logging-first-model/notebooks","slug":"/getting-started/logging-first-model/notebooks/logging-first-model","permalink":"/docs/latest/ml/getting-started/logging-first-model/notebooks/logging-first-model","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/getting-started/logging-first-model/notebooks/logging-first-model.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/getting-started/logging-first-model/notebooks/logging-first-model.ipynb","slug":"logging-first-model"},"sidebar":"classicMLSidebar","previous":{"title":"Logging Your First MLflow Model Notebook","permalink":"/docs/latest/ml/getting-started/logging-first-model/notebooks/"},"next":{"title":"Hyperparameter Tuning & Deployment Quickstart","permalink":"/docs/latest/ml/getting-started/hyperparameter-tuning/"}}');var r=n(74848),a=n(28453),i=n(75983),o=n(16581),s=n(81226),l=n(27594);const m={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/getting-started/logging-first-model/notebooks/logging-first-model.ipynb",slug:"logging-first-model"},c="Initializing the MLflow Client",h={},p=[{value:"Search Experiments with the MLflow Client API",id:"search-experiments-with-the-mlflow-client-api",level:4},{value:"Creating a new Experiment",id:"creating-a-new-experiment",level:3},{value:"Running our first model training",id:"running-our-first-model-training",level:3},{value:"Synthetic data generator for demand of apples",id:"synthetic-data-generator-for-demand-of-apples",level:4},{value:"Train and log the model",id:"train-and-log-the-model",level:3},{value:"Success!",id:"success",level:4}];function g(t){const e={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"initializing-the-mlflow-client",children:"Initializing the MLflow Client"})}),"\n",(0,r.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/classic-ml/getting-started/logging-first-model/notebooks/logging-first-model.ipynb",children:"Download this notebook"}),"\n",(0,r.jsx)(e.p,{children:"Depending on where you are running this notebook, your configuration may vary for how you initialize the MLflow Client in the following cell."}),"\n",(0,r.jsxs)(e.p,{children:["For this example, we're using a locally running tracking server, but other options are available (The easiest is to use the free managed service within the ",(0,r.jsx)(e.a,{href:"https://mlflow.org/docs/latest/getting-started/databricks-trial.html",children:"Databricks Free Trial"}),")."]}),"\n",(0,r.jsxs)(e.p,{children:["Please see ",(0,r.jsx)(e.a,{href:"https://www.mlflow.org/docs/latest/getting-started/running-notebooks/",children:"the guide to running notebooks here"})," for more information on setting the tracking server uri and configuring access to either managed or self-managed MLflow tracking servers."]}),"\n",(0,r.jsx)(i.d,{executionCount:2,children:'# NOTE: review the links mentioned above for guidance on connecting to a managed tracking server, such as the Databricks Managed MLflow\nfrom mlflow import MlflowClient\n\nclient = MlflowClient(tracking_uri="http://127.0.0.1:8080")'}),"\n",(0,r.jsx)(e.h4,{id:"search-experiments-with-the-mlflow-client-api",children:"Search Experiments with the MLflow Client API"}),"\n",(0,r.jsx)(e.p,{children:"Let's take a look at the Default Experiment that is created for us."}),"\n",(0,r.jsx)(e.p,{children:"This safe 'fallback' experiment will store Runs that we create if we don't specify a\nnew experiment."}),"\n",(0,r.jsx)(i.d,{executionCount:3,children:"# Search experiments without providing query terms behaves effectively as a 'list' action\n\nall_experiments = client.search_experiments()\n\nprint(all_experiments)"}),"\n",(0,r.jsx)(o.p,{children:"[<Experiment: artifact_location='./mlruns/0', creation_time=None, experiment_id='0', last_update_time=None, lifecycle_stage='active', name='Default', tags={}>]"}),"\n",(0,r.jsx)(i.d,{executionCount:4,children:'from pprint import pprint\n\n# Extract the experiment name and lifecycle_stage\ndefault_experiment = [\n  {"name": experiment.name, "lifecycle_stage": experiment.lifecycle_stage}\n  for experiment in all_experiments\n  if experiment.name == "Default"\n][0]\n\npprint(default_experiment)'}),"\n",(0,r.jsx)(o.p,{children:"{'lifecycle_stage': 'active', 'name': 'Default'}"}),"\n",(0,r.jsx)(e.h3,{id:"creating-a-new-experiment",children:"Creating a new Experiment"}),"\n",(0,r.jsx)(e.p,{children:"In this section, we'll:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"create a new MLflow Experiment"}),"\n",(0,r.jsx)(e.li,{children:"apply metadata in the form of Experiment Tags"}),"\n"]}),"\n",(0,r.jsx)(i.d,{executionCount:5,children:'experiment_description = (\n  "This is the grocery forecasting project. "\n  "This experiment contains the produce models for apples."\n)\n\nexperiment_tags = {\n  "project_name": "grocery-forecasting",\n  "store_dept": "produce",\n  "team": "stores-ml",\n  "project_quarter": "Q3-2023",\n  "mlflow.note.content": experiment_description,\n}\n\nproduce_apples_experiment = client.create_experiment(name="Apple_Models", tags=experiment_tags)'}),"\n",(0,r.jsx)(i.d,{executionCount:6,children:"# Use search_experiments() to search on the project_name tag key\n\napples_experiment = client.search_experiments(\n  filter_string=\"tags.`project_name` = 'grocery-forecasting'\"\n)\n\npprint(apples_experiment[0])"}),"\n",(0,r.jsx)(o.p,{children:"<Experiment: artifact_location='mlflow-artifacts:/977454266300166282', creation_time=1696346036899, experiment_id='977454266300166282', last_update_time=1696346036899, lifecycle_stage='active', name='Apple_Models', tags={'mlflow.note.content': 'This is the grocery forecasting project. This '\n                      'experiment contains the produce models for apples.',\n'project_name': 'grocery-forecasting',\n'project_quarter': 'Q3-2023',\n'store_dept': 'produce',\n'team': 'stores-ml'}>"}),"\n",(0,r.jsx)(i.d,{executionCount:7,children:'# Access individual tag data\n\nprint(apples_experiment[0].tags["team"])'}),"\n",(0,r.jsx)(o.p,{children:"stores-ml"}),"\n",(0,r.jsx)(e.h3,{id:"running-our-first-model-training",children:"Running our first model training"}),"\n",(0,r.jsx)(e.p,{children:"In this section, we'll:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"create a synthetic data set that is relevant to a simple demand forecasting task"}),"\n",(0,r.jsx)(e.li,{children:"start an MLflow run"}),"\n",(0,r.jsx)(e.li,{children:"log metrics, parameters, and tags to the run"}),"\n",(0,r.jsx)(e.li,{children:"save the model to the run"}),"\n",(0,r.jsx)(e.li,{children:"register the model during model logging"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"synthetic-data-generator-for-demand-of-apples",children:"Synthetic data generator for demand of apples"}),"\n",(0,r.jsx)(e.p,{children:"Keep in mind that this is purely for demonstration purposes."}),"\n",(0,r.jsx)(e.p,{children:"The demand value is purely artificial and is deliberately covariant with the features. This is not a particularly realistic real-world scenario (if it were, we wouldn't need Data Scientists!)."}),"\n",(0,r.jsx)(i.d,{executionCount:8,children:'from datetime import datetime, timedelta\n\nimport numpy as np\nimport pandas as pd\n\n\ndef generate_apple_sales_data_with_promo_adjustment(base_demand: int = 1000, n_rows: int = 5000):\n  """\n  Generates a synthetic dataset for predicting apple sales demand with seasonality and inflation.\n\n  This function creates a pandas DataFrame with features relevant to apple sales.\n  The features include date, average_temperature, rainfall, weekend flag, holiday flag,\n  promotional flag, price_per_kg, and the previous day\'s demand. The target variable,\n  \'demand\', is generated based on a combination of these features with some added noise.\n\n  Args:\n      base_demand (int, optional): Base demand for apples. Defaults to 1000.\n      n_rows (int, optional): Number of rows (days) of data to generate. Defaults to 5000.\n\n  Returns:\n      pd.DataFrame: DataFrame with features and target variable for apple sales prediction.\n\n  Example:\n      >>> df = generate_apple_sales_data_with_seasonality(base_demand=1200, n_rows=6000)\n      >>> df.head()\n  """\n\n  # Set seed for reproducibility\n  np.random.seed(9999)\n\n  # Create date range\n  dates = [datetime.now() - timedelta(days=i) for i in range(n_rows)]\n  dates.reverse()\n\n  # Generate features\n  df = pd.DataFrame(\n      {\n          "date": dates,\n          "average_temperature": np.random.uniform(10, 35, n_rows),\n          "rainfall": np.random.exponential(5, n_rows),\n          "weekend": [(date.weekday() >= 5) * 1 for date in dates],\n          "holiday": np.random.choice([0, 1], n_rows, p=[0.97, 0.03]),\n          "price_per_kg": np.random.uniform(0.5, 3, n_rows),\n          "month": [date.month for date in dates],\n      }\n  )\n\n  # Introduce inflation over time (years)\n  df["inflation_multiplier"] = 1 + (df["date"].dt.year - df["date"].dt.year.min()) * 0.03\n\n  # Incorporate seasonality due to apple harvests\n  df["harvest_effect"] = np.sin(2 * np.pi * (df["month"] - 3) / 12) + np.sin(\n      2 * np.pi * (df["month"] - 9) / 12\n  )\n\n  # Modify the price_per_kg based on harvest effect\n  df["price_per_kg"] = df["price_per_kg"] - df["harvest_effect"] * 0.5\n\n  # Adjust promo periods to coincide with periods lagging peak harvest by 1 month\n  peak_months = [4, 10]  # months following the peak availability\n  df["promo"] = np.where(\n      df["month"].isin(peak_months),\n      1,\n      np.random.choice([0, 1], n_rows, p=[0.85, 0.15]),\n  )\n\n  # Generate target variable based on features\n  base_price_effect = -df["price_per_kg"] * 50\n  seasonality_effect = df["harvest_effect"] * 50\n  promo_effect = df["promo"] * 200\n\n  df["demand"] = (\n      base_demand\n      + base_price_effect\n      + seasonality_effect\n      + promo_effect\n      + df["weekend"] * 300\n      + np.random.normal(0, 50, n_rows)\n  ) * df["inflation_multiplier"]  # adding random noise\n\n  # Add previous day\'s demand\n  df["previous_days_demand"] = df["demand"].shift(1)\n  df["previous_days_demand"].fillna(method="bfill", inplace=True)  # fill the first row\n\n  # Drop temporary columns\n  df.drop(columns=["inflation_multiplier", "harvest_effect", "month"], inplace=True)\n\n  return df'}),"\n",(0,r.jsx)(i.d,{executionCount:9,children:"# Generate the dataset!\n\ndata = generate_apple_sales_data_with_promo_adjustment(base_demand=1_000, n_rows=1_000)\n\ndata[-20:]"}),"\n",(0,r.jsx)(s.Q,{children:(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>date</th>\n    <th>average_temperature</th>\n    <th>rainfall</th>\n    <th>weekend</th>\n    <th>holiday</th>\n    <th>price_per_kg</th>\n    <th>promo</th>\n    <th>demand</th>\n    <th>previous_days_demand</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>980</th>\n    <td>2023-09-14 11:13:56.948267</td>\n    <td>34.130183</td>\n    <td>1.454065</td>\n    <td>0</td>\n    <td>0</td>\n    <td>1.449177</td>\n    <td>0</td>\n    <td>971.802447</td>\n    <td>1001.085782</td>\n  </tr>\n  <tr>\n    <th>981</th>\n    <td>2023-09-15 11:13:56.948267</td>\n    <td>32.353643</td>\n    <td>9.462859</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.856503</td>\n    <td>0</td>\n    <td>818.951553</td>\n    <td>971.802447</td>\n  </tr>\n  <tr>\n    <th>982</th>\n    <td>2023-09-16 11:13:56.948266</td>\n    <td>18.816833</td>\n    <td>0.391470</td>\n    <td>1</td>\n    <td>0</td>\n    <td>1.326429</td>\n    <td>0</td>\n    <td>1281.352029</td>\n    <td>818.951553</td>\n  </tr>\n  <tr>\n    <th>983</th>\n    <td>2023-09-17 11:13:56.948265</td>\n    <td>34.533012</td>\n    <td>2.120477</td>\n    <td>1</td>\n    <td>0</td>\n    <td>0.970131</td>\n    <td>0</td>\n    <td>1357.385504</td>\n    <td>1281.352029</td>\n  </tr>\n  <tr>\n    <th>984</th>\n    <td>2023-09-18 11:13:56.948265</td>\n    <td>23.057202</td>\n    <td>2.365705</td>\n    <td>0</td>\n    <td>0</td>\n    <td>1.049931</td>\n    <td>0</td>\n    <td>991.427049</td>\n    <td>1357.385504</td>\n  </tr>\n  <tr>\n    <th>985</th>\n    <td>2023-09-19 11:13:56.948264</td>\n    <td>34.810165</td>\n    <td>3.089005</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.035149</td>\n    <td>0</td>\n    <td>974.971149</td>\n    <td>991.427049</td>\n  </tr>\n  <tr>\n    <th>986</th>\n    <td>2023-09-20 11:13:56.948263</td>\n    <td>29.208905</td>\n    <td>3.673292</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.518098</td>\n    <td>0</td>\n    <td>1056.249547</td>\n    <td>974.971149</td>\n  </tr>\n  <tr>\n    <th>987</th>\n    <td>2023-09-21 11:13:56.948263</td>\n    <td>16.428676</td>\n    <td>4.077782</td>\n    <td>0</td>\n    <td>0</td>\n    <td>1.268979</td>\n    <td>0</td>\n    <td>1063.118915</td>\n    <td>1056.249547</td>\n  </tr>\n  <tr>\n    <th>988</th>\n    <td>2023-09-22 11:13:56.948262</td>\n    <td>32.067512</td>\n    <td>2.734454</td>\n    <td>0</td>\n    <td>0</td>\n    <td>0.762317</td>\n    <td>0</td>\n    <td>1040.492007</td>\n    <td>1063.118915</td>\n  </tr>\n  <tr>\n    <th>989</th>\n    <td>2023-09-23 11:13:56.948261</td>\n    <td>31.938203</td>\n    <td>13.883486</td>\n    <td>1</td>\n    <td>0</td>\n    <td>1.153301</td>\n    <td>0</td>\n    <td>1285.040470</td>\n    <td>1040.492007</td>\n  </tr>\n  <tr>\n    <th>990</th>\n    <td>2023-09-24 11:13:56.948261</td>\n    <td>18.024055</td>\n    <td>7.544061</td>\n    <td>1</td>\n    <td>0</td>\n    <td>0.610703</td>\n    <td>0</td>\n    <td>1366.644564</td>\n    <td>1285.040470</td>\n  </tr>\n  <tr>\n    <th>991</th>\n    <td>2023-09-25 11:13:56.948260</td>\n    <td>20.681067</td>\n    <td>18.820490</td>\n    <td>0</td>\n    <td>0</td>\n    <td>1.533488</td>\n    <td>0</td>\n    <td>973.934924</td>\n    <td>1366.644564</td>\n  </tr>\n  <tr>\n    <th>992</th>\n    <td>2023-09-26 11:13:56.948259</td>\n    <td>16.010132</td>\n    <td>7.705941</td>\n    <td>0</td>\n    <td>0</td>\n    <td>1.632498</td>\n    <td>1</td>\n    <td>1188.291256</td>\n    <td>973.934924</td>\n  </tr>\n  <tr>\n    <th>993</th>\n    <td>2023-09-27 11:13:56.948259</td>\n    <td>18.766455</td>\n    <td>6.274840</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.806554</td>\n    <td>0</td>\n    <td>930.089438</td>\n    <td>1188.291256</td>\n  </tr>\n  <tr>\n    <th>994</th>\n    <td>2023-09-28 11:13:56.948258</td>\n    <td>27.948793</td>\n    <td>23.705246</td>\n    <td>0</td>\n    <td>0</td>\n    <td>0.829464</td>\n    <td>0</td>\n    <td>1060.576311</td>\n    <td>930.089438</td>\n  </tr>\n  <tr>\n    <th>995</th>\n    <td>2023-09-29 11:13:56.948257</td>\n    <td>28.661072</td>\n    <td>10.329865</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.290591</td>\n    <td>0</td>\n    <td>910.690776</td>\n    <td>1060.576311</td>\n  </tr>\n  <tr>\n    <th>996</th>\n    <td>2023-09-30 11:13:56.948256</td>\n    <td>10.821693</td>\n    <td>3.575645</td>\n    <td>1</td>\n    <td>0</td>\n    <td>0.897473</td>\n    <td>0</td>\n    <td>1306.363801</td>\n    <td>910.690776</td>\n  </tr>\n  <tr>\n    <th>997</th>\n    <td>2023-10-01 11:13:56.948256</td>\n    <td>21.108560</td>\n    <td>6.221089</td>\n    <td>1</td>\n    <td>0</td>\n    <td>1.093864</td>\n    <td>1</td>\n    <td>1564.422372</td>\n    <td>1306.363801</td>\n  </tr>\n  <tr>\n    <th>998</th>\n    <td>2023-10-02 11:13:56.948254</td>\n    <td>29.451301</td>\n    <td>5.021463</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.493085</td>\n    <td>1</td>\n    <td>1164.303256</td>\n    <td>1564.422372</td>\n  </tr>\n  <tr>\n    <th>999</th>\n    <td>2023-10-03 11:13:56.948248</td>\n    <td>19.261458</td>\n    <td>0.438381</td>\n    <td>0</td>\n    <td>0</td>\n    <td>2.610422</td>\n    <td>1</td>\n    <td>1067.963448</td>\n    <td>1164.303256</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,r.jsx)(e.h3,{id:"train-and-log-the-model",children:"Train and log the model"}),"\n",(0,r.jsxs)(e.p,{children:["We're now ready to import our model class and train a ",(0,r.jsx)(e.code,{children:"RandomForestRegressor"})]}),"\n",(0,r.jsx)(i.d,{executionCount:10,children:'from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\n\n# Use the fluent API to set the tracking uri and the active experiment\nmlflow.set_tracking_uri("http://127.0.0.1:8080")\n\n# Sets the current active experiment to the "Apple_Models" experiment and returns the Experiment metadata\napple_experiment = mlflow.set_experiment("Apple_Models")\n\n# Define a run name for this iteration of training.\n# If this is not set, a unique name will be auto-generated for your run.\nrun_name = "apples_rf_test"\n\n# Define an artifact path that the model will be saved to.\nartifact_path = "rf_apples"'}),"\n",(0,r.jsx)(i.d,{executionCount:11,children:'# Split the data into features and target and drop irrelevant date field and target field\nX = data.drop(columns=["date", "demand"])\ny = data["demand"]\n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n\nparams = {\n  "n_estimators": 100,\n  "max_depth": 6,\n  "min_samples_split": 10,\n  "min_samples_leaf": 4,\n  "bootstrap": True,\n  "oob_score": False,\n  "random_state": 888,\n}\n\n# Train the RandomForestRegressor\nrf = RandomForestRegressor(**params)\n\n# Fit the model on the training data\nrf.fit(X_train, y_train)\n\n# Predict on the validation set\ny_pred = rf.predict(X_val)\n\n# Calculate error metrics\nmae = mean_absolute_error(y_val, y_pred)\nmse = mean_squared_error(y_val, y_pred)\nrmse = np.sqrt(mse)\nr2 = r2_score(y_val, y_pred)\n\n# Assemble the metrics we\'re going to write into a collection\nmetrics = {"mae": mae, "mse": mse, "rmse": rmse, "r2": r2}\n\n# Initiate the MLflow run context\nwith mlflow.start_run(run_name=run_name) as run:\n  # Log the parameters used for the model fit\n  mlflow.log_params(params)\n\n  # Log the error metrics that were calculated during validation\n  mlflow.log_metrics(metrics)\n\n  # Log an instance of the trained model for later use\n  mlflow.sklearn.log_model(sk_model=rf, input_example=X_val, name=artifact_path)'}),"\n",(0,r.jsx)(o.p,{isStderr:!0,children:'/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/mlflow/models/signature.py:333: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.\ninput_schema = _infer_schema(input_ex)\n/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\nwarnings.warn("Setuptools is replacing distutils.")'}),"\n",(0,r.jsx)(e.h4,{id:"success",children:"Success!"}),"\n",(0,r.jsx)(e.p,{children:"You've just logged your first MLflow model!"}),"\n",(0,r.jsx)(e.p,{children:'Navigate to the MLflow UI to see the run that was just created (named "apples_rf_test", logged to the Experiment "Apple_Models").'})]})}function f(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(g,{...t})}):g(t)}},75983:(t,e,n)=>{n.d(e,{d:()=>i});var d=n(21028);const r="codeBlock_oJcR";var a=n(74848);const i=({children:t,executionCount:e})=>(0,a.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,a.jsx)(d.A,{className:r,language:"python",children:t})})},81226:(t,e,n)=>{n.d(e,{Q:()=>r});var d=n(74848);const r=({children:t})=>(0,d.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:t})}}]);