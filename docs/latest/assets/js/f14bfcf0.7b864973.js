"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8089],{6911:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/search-traces-on-ui-0b3c9f96553ea37d8c654c5b33fe22f8.png"},11470:(e,n,t)=>{t.d(n,{A:()=>v});var r=t(96540),s=t(34164),i=t(23104),a=t(56347),l=t(205),o=t(57485),c=t(31682),d=t(70679);function m(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,i=h(e),[a,o]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[c,m]=u({queryString:t,groupId:s}),[f,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),g=(()=>{const e=c??f;return p({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),m(e),x(e)}),[m,x,i]),tabValues:i}}var x=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=t(74848);function j({className:e,block:n,selectedValue:t,selectValue:r,tabValues:a}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.a_)(),c=e=>{const n=e.currentTarget,s=l.indexOf(n),i=a[s].value;i!==t&&(o(n),r(i))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:a.map((({value:e,label:n,attributes:r})=>(0,_.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...r,className:(0,s.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function w(e){const n=f(e);return(0,_.jsxs)("div",{className:(0,s.A)("tabs-container",g.tabList),children:[(0,_.jsx)(j,{...n,...e}),(0,_.jsx)(y,{...n,...e})]})}function v(e){const n=(0,x.A)();return(0,_.jsx)(w,{...e,children:m(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var r=t(34164);const s={tabItem:"tabItem_Ymn6"};var i=t(74848);function a({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,t),hidden:n,children:e})}},20139:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/search_syntax-8db1091a58dda699e58cd3846c12cace.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>o});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var s=t(86025),i=t(28774),a=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function o({fn:e,children:n}){const t=l(e);if(!t)return(0,a.jsx)(a.Fragment,{children:n});const o=(0,s.Ay)(`/${r[t]}#${e}`);return(0,a.jsx)(i.A,{to:o,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}},87309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"tracing/search-traces","title":"Search Traces","description":"This guide will walk you through how to search for traces in MLflow using both the MLflow UI and Python API. This resource will be valuable if you\'re interested in querying specific traces based on their metadata, tags, execution time, status, or other trace attributes.","source":"@site/docs/genai/tracing/search-traces.mdx","sourceDirName":"tracing","slug":"/tracing/search-traces","permalink":"/docs/latest/genai/tracing/search-traces","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Delete Traces","permalink":"/docs/latest/genai/tracing/observe-with-traces/delete-traces"},"next":{"title":"Observe & Analyze Traces","permalink":"/docs/latest/genai/tracing/observe-with-traces/"}}');var s=t(74848),i=t(28453),a=t(49374),l=t(11470),o=t(19365);const c={},d="Search Traces",m={},h=[{value:"Search Traces Overview",id:"search-traces-overview",level:2},{value:"Search Query Syntax",id:"search-query-syntax",level:2},{value:"Visual Representation of Search Components:",id:"visual-representation-of-search-components",level:3},{value:"Key Features:",id:"key-features",level:3},{value:"Syntax Rules:",id:"syntax-rules",level:3},{value:"Example Queries",id:"example-queries",level:3},{value:"Filter by Name",id:"filter-by-name",level:4},{value:"Filter by Status",id:"filter-by-status",level:4},{value:"Filter by Execution Time",id:"filter-by-execution-time",level:4},{value:"Filter by Timestamp",id:"filter-by-timestamp",level:4},{value:"Filter by Tags",id:"filter-by-tags",level:4},{value:"Filter by Run Association",id:"filter-by-run-association",level:4},{value:"Combine Multiple Conditions",id:"combine-multiple-conditions",level:4},{value:"Filtering Traces in the UI",id:"filtering-traces-in-the-ui",level:2},{value:"Programmatic Search with Python",id:"programmatic-search-with-python",level:2},{value:"Return Format",id:"return-format",level:3},{value:"1. DataFrame",id:"1-dataframe",level:4},{value:"2. List of Trace Objects",id:"2-list-of-trace-objects",level:4},{value:"Ordering Results",id:"ordering-results",level:3},{value:"Extract Span Fields",id:"extract-span-fields",level:3},{value:"Pagination",id:"pagination",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Performance Analysis",id:"performance-analysis",level:3},{value:"Error Analysis",id:"error-analysis",level:3},{value:"Model Performance Comparison",id:"model-performance-comparison",level:3},{value:"Creating Evaluation Datasets",id:"creating-evaluation-datasets",level:3},{value:"Environment Monitoring",id:"environment-monitoring",level:3},{value:"Create Example Traces",id:"create-example-traces",level:2},{value:"Alternative Setup - Production-Like Traces",id:"alternative-setup---production-like-traces",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"MLflow Version Compatibility",id:"mlflow-version-compatibility",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Backend Considerations",id:"backend-considerations",level:3},{value:"Summary",id:"summary",level:2}];function p(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"search-traces",children:"Search Traces"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will walk you through how to search for traces in MLflow using both the MLflow UI and Python API. This resource will be valuable if you're interested in querying specific traces based on their metadata, tags, execution time, status, or other trace attributes."}),"\n",(0,s.jsxs)(n.p,{children:["MLflow's trace search functionality allows you to leverage SQL-like syntax to filter your traces based on a variety of conditions. While the ",(0,s.jsx)(n.code,{children:"OR"})," keyword is not supported, the search functionality is powerful enough to handle complex queries for trace discovery and analysis."]}),"\n",(0,s.jsx)(n.h2,{id:"search-traces-overview",children:"Search Traces Overview"}),"\n",(0,s.jsxs)(n.p,{children:["When working with MLflow tracing in production environments, you'll often have thousands of traces across different experiments representing various model inferences, LLM calls, or ML pipeline executions. The ",(0,s.jsx)(n.code,{children:"search_traces"})," API helps you find specific traces based on their execution characteristics, metadata, tags, and other attributes - making trace analysis and debugging much more efficient."]}),"\n",(0,s.jsx)(n.h2,{id:"search-query-syntax",children:"Search Query Syntax"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"search_traces"})," API uses a SQL-like Domain Specific Language (DSL) for querying traces."]}),"\n",(0,s.jsx)(n.h3,{id:"visual-representation-of-search-components",children:"Visual Representation of Search Components:"}),"\n",(0,s.jsx)("div",{class:"center-div",style:{width:"30%"},children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"search components",src:t(20139).A+"",width:"439",height:"142"})})}),"\n",(0,s.jsx)(n.h3,{id:"key-features",children:"Key Features:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Supported Attributes"}),": ",(0,s.jsx)(n.code,{children:"request_id"}),", ",(0,s.jsx)(n.code,{children:"timestamp_ms"}),", ",(0,s.jsx)(n.code,{children:"execution_time_ms"}),", ",(0,s.jsx)(n.code,{children:"status"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"run_id"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tag Support"}),": Use ",(0,s.jsx)(n.code,{children:"tags."})," or ",(0,s.jsx)(n.code,{children:"tag."})," prefix to filter by trace tags"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata Support"}),": Use ",(0,s.jsx)(n.code,{children:"metadata."})," prefix to filter by request metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timestamp Filtering"}),": Built-in support for time-based queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Status Filtering"}),": Filter by trace execution status (OK, ERROR, IN_PROGRESS)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"syntax-rules",children:"Syntax Rules:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Field Syntax:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Attributes: ",(0,s.jsx)(n.code,{children:"status"}),", ",(0,s.jsx)(n.code,{children:"timestamp_ms"}),", ",(0,s.jsx)(n.code,{children:"execution_time_ms"}),", ",(0,s.jsx)(n.code,{children:"trace.name"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tags: ",(0,s.jsx)(n.code,{children:"tags.operation_type"}),", ",(0,s.jsx)(n.code,{children:"tag.model_name"})," (both prefixes supported)"]}),"\n",(0,s.jsxs)(n.li,{children:["Metadata: ",(0,s.jsx)(n.code,{children:"metadata.run_id"})]}),"\n",(0,s.jsxs)(n.li,{children:["Use backticks for special characters: ",(0,s.jsx)(n.code,{children:"tags.`model-name`"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Value Syntax:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["String values must be quoted: ",(0,s.jsx)(n.code,{children:"status = 'OK'"})]}),"\n",(0,s.jsxs)(n.li,{children:["Numeric values don't need quotes: ",(0,s.jsx)(n.code,{children:"execution_time_ms > 1000"})]}),"\n",(0,s.jsx)(n.li,{children:"Tag and metadata values must be quoted as strings"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported Comparators:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Numeric"})," (",(0,s.jsx)(n.code,{children:"timestamp_ms"}),", ",(0,s.jsx)(n.code,{children:"execution_time_ms"}),"): ",(0,s.jsx)(n.code,{children:">"}),", ",(0,s.jsx)(n.code,{children:">="}),", ",(0,s.jsx)(n.code,{children:"="}),", ",(0,s.jsx)(n.code,{children:"!="}),", ",(0,s.jsx)(n.code,{children:"<"}),", ",(0,s.jsx)(n.code,{children:"<="})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"String"})," (",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"status"}),", ",(0,s.jsx)(n.code,{children:"request_id"}),"): ",(0,s.jsx)(n.code,{children:"="}),", ",(0,s.jsx)(n.code,{children:"!="}),", ",(0,s.jsx)(n.code,{children:"IN"}),", ",(0,s.jsx)(n.code,{children:"NOT IN"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tags/Metadata"}),": ",(0,s.jsx)(n.code,{children:"="}),", ",(0,s.jsx)(n.code,{children:"!="})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Trace Status Values:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"OK"})," - Successful execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ERROR"})," - Failed execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"IN_PROGRESS"})," - Currently executing"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-queries",children:"Example Queries"}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-name",children:"Filter by Name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Search for traces by name\nmlflow.search_traces(filter_string=\"trace.name = 'predict'\")\nmlflow.search_traces(filter_string=\"name = 'llm_inference'\")\n"})}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-status",children:"Filter by Status"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Get successful traces\nmlflow.search_traces(filter_string=\"trace.status = 'OK'\")\nmlflow.search_traces(filter_string=\"status = 'OK'\")\n\n# Get failed traces\nmlflow.search_traces(filter_string=\"status = 'ERROR'\")\n\n# Multiple statuses\nmlflow.search_traces(filter_string=\"status IN ('OK', 'ERROR')\")\n"})}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-execution-time",children:"Filter by Execution Time"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Find slow traces (> 1 second)\nmlflow.search_traces(filter_string="execution_time_ms > 1000")\n\n# Performance range\nmlflow.search_traces(\n    filter_string="execution_time_ms >= 200 AND execution_time_ms <= 800"\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-timestamp",children:"Filter by Timestamp"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time\n\n# Get traces from last hour\ntimestamp = int(time.time() * 1000)\nmlflow.search_traces(filter_string=f"trace.timestamp > {timestamp - 3600000}")\n\n# Alternative syntax\nmlflow.search_traces(filter_string=f"timestamp_ms > {timestamp - 3600000}")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-tags",children:"Filter by Tags"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Filter by tag values (both syntaxes supported)\nmlflow.search_traces(filter_string=\"tag.model_name = 'gpt-4'\")\nmlflow.search_traces(filter_string=\"tags.operation_type = 'llm_inference'\")\n"})}),"\n",(0,s.jsx)(n.h4,{id:"filter-by-run-association",children:"Filter by Run Association"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Find traces associated with a specific run\nmlflow.search_traces(run_id="run_id_123456")\n\n# Or using filter string\nmlflow.search_traces(filter_string="metadata.run_id = \'run_id_123456\'")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"combine-multiple-conditions",children:"Combine Multiple Conditions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Complex query\nmlflow.search_traces(filter_string=\"trace.status = 'OK' AND tag.importance = 'high'\")\n\n# Production error analysis\nmlflow.search_traces(\n    filter_string=\"\"\"\n        tags.environment = 'production'\n        AND status = 'ERROR'\n        AND execution_time_ms > 500\n    \"\"\"\n)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"filtering-traces-in-the-ui",children:"Filtering Traces in the UI"}),"\n",(0,s.jsx)(n.p,{children:"Use the search box in the MLflow Trace UI to filter traces by various criteria using the same syntax described above."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Search Traces UI",src:t(6911).A+"",width:"1387",height:"439"})}),"\n",(0,s.jsx)(n.p,{children:"The UI search supports all the same filter syntax as the API, allowing you to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Filter by trace name, status, or execution time"}),"\n",(0,s.jsx)(n.li,{children:"Search by tags and metadata"}),"\n",(0,s.jsx)(n.li,{children:"Use timestamp ranges"}),"\n",(0,s.jsx)(n.li,{children:"Combine multiple conditions with AND"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"programmatic-search-with-python",children:"Programmatic Search with Python"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(a.B,{fn:"mlflow.search_traces"})," provides convenient trace search functionality:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Basic search with default DataFrame output\ntraces_df = mlflow.search_traces(filter_string="status = \'OK\'")\n\n# Return as list of Trace objects\ntraces_list = mlflow.search_traces(filter_string="status = \'OK\'", return_type="list")\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"return_type"})," parameter is available in MLflow 2.21.1+. For older versions, use ",(0,s.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces"})," for list output."]})}),"\n",(0,s.jsx)(n.h3,{id:"return-format",children:"Return Format"}),"\n",(0,s.jsx)(n.h4,{id:"1-dataframe",children:"1. DataFrame"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"search_traces"})," API returns a pandas DataFrame by default with the following columns:"]}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(o.A,{value:"mlflow-3",label:"MLflow 3.x",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trace_id"})," - Primary identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trace"})," - Trace object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"client_request_id"})," - Client request ID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"state"})," - Trace state (OK, ERROR, IN_PROGRESS, STATE_UNSPECIFIED)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request_time"})," - Start time in milliseconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"execution_duration"})," - Duration in milliseconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"inputs"})," - Input to traced logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"outputs"})," - Output of traced logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"expectations"})," - A dictionary of ground truth labels annotated on the trace"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trace_metadata"})," - Key-value metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," - Associated tags"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"assessments"})," - List of assessment objects attached on the trace"]}),"\n"]})}),(0,s.jsx)(o.A,{value:"mlflow-2",label:"MLflow 2.x",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request_id"})," - Primary identifier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"trace"})," - Trace object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timestamp_ms"})," - Start time in milliseconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"})," - Trace status"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"execution_time_ms"})," - Duration in milliseconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request"})," - Input to traced logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"response"})," - Output of traced logic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request_metadata"})," - Key-value metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"spans"})," - Spans in trace"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tags"})," - Associated tags"]}),"\n"]})})]}),"\n",(0,s.jsx)(n.h4,{id:"2-list-of-trace-objects",children:"2. List of Trace Objects"}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, you can specify ",(0,s.jsx)(n.code,{children:'return_type="list"'})," to get a list of ",(0,s.jsx)(a.B,{fn:"mlflow.entities.Trace"})," objects instead of a DataFrame."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'traces = mlflow.search_traces(filter_string="status = \'OK\'", return_type="list")\n# list[mlflow.entities.Trace]\n'})}),"\n",(0,s.jsx)(n.h3,{id:"ordering-results",children:"Ordering Results"}),"\n",(0,s.jsx)(n.p,{children:"MLflow supports ordering results by the following keys:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"timestamp_ms"})," (default: DESC) - Trace start time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"execution_time_ms"})," - Trace duration"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"status"})," - Trace execution status"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"request_id"})," - Trace identifier"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Order by timestamp (most recent first)\ntraces = mlflow.search_traces(order_by=["timestamp_ms DESC"])\n\n# Multiple ordering criteria\ntraces = mlflow.search_traces(order_by=["timestamp_ms DESC", "status ASC"])\n'})}),"\n",(0,s.jsx)(n.h3,{id:"extract-span-fields",children:"Extract Span Fields"}),"\n",(0,s.jsx)(n.p,{children:"Extract specific span data into DataFrame columns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'traces = mlflow.search_traces(\n    extract_fields=[\n        "morning_greeting.inputs.name",  # Extract specific input\n        "morning_greeting.outputs",  # Extract all outputs\n    ],\n)\n\n# Creates additional columns:\n# - morning_greeting.inputs.name\n# - morning_greeting.outputs\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is useful for creating evaluation datasets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'eval_data = traces.rename(\n    columns={\n        "morning_greeting.inputs.name": "inputs",\n        "morning_greeting.outputs": "ground_truth",\n    }\n)\n\nresults = mlflow.genai.evaluate(\n    model, eval_data, targets="ground_truth", model_type="question-answering"\n)\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"extract_fields"})," only works with ",(0,s.jsx)(n.code,{children:'return_type="pandas"'}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"pagination",children:"Pagination"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces"})," supports pagination:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\npage_token = None\nall_traces = []\n\nwhile True:\n    results = client.search_traces(\n        experiment_ids=["1"],\n        filter_string="status = \'OK\'",\n        max_results=100,\n        page_token=page_token,\n    )\n\n    all_traces.extend(results)\n\n    if not results.token:\n        break\n    page_token = results.token\n\nprint(f"Found {len(all_traces)} total traces")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"performance-analysis",children:"Performance Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Find slowest 10 traces\nslowest_traces = mlflow.search_traces(\n    filter_string="status = \'OK\'",\n    order_by=["execution_time_ms DESC"],\n    max_results=10,\n)\n\n# Performance threshold violations\nslow_production = mlflow.search_traces(\n    filter_string="""\n        tags.environment = \'production\'\n        AND execution_time_ms > 2000\n        AND status = \'OK\'\n    """,\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-analysis",children:"Error Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time\n\n# Recent errors\nyesterday = int((time.time() - 24 * 3600) * 1000)\nerror_traces = mlflow.search_traces(\n    filter_string=f"status = \'ERROR\' AND timestamp_ms > {yesterday}",\n    order_by=["timestamp_ms DESC"],\n)\n\n# Analyze error patterns\nerror_by_operation = {}\nfor _, trace in error_traces.iterrows():\n    # Access tags from the trace object\n    tags = trace["tags"] if "tags" in trace else {}\n    op_type = tags.get("operation_type", "unknown")\n    error_by_operation[op_type] = error_by_operation.get(op_type, 0) + 1\n'})}),"\n",(0,s.jsx)(n.h3,{id:"model-performance-comparison",children:"Model Performance Comparison"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Compare performance across models\nmodels = ["gpt-4", "bert-base", "roberta-large"]\nmodel_stats = {}\n\nfor model in models:\n    traces = mlflow.search_traces(\n        filter_string=f"tags.model_name = \'{model}\' AND status = \'OK\'",\n        return_type="list",\n    )\n\n    if traces:\n        exec_times = [trace.info.execution_time_ms for trace in traces]\n        model_stats[model] = {\n            "count": len(traces),\n            "avg_time": sum(exec_times) / len(exec_times),\n            "max_time": max(exec_times),\n        }\n\nprint("Model performance comparison:")\nfor model, stats in model_stats.items():\n    print(f"{model}: {stats[\'count\']} traces, avg {stats[\'avg_time\']:.1f}ms")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"creating-evaluation-datasets",children:"Creating Evaluation Datasets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Extract LLM conversation data for evaluation\nconversation_data = mlflow.search_traces(\n    filter_string="tags.task_type = \'conversation\' AND status = \'OK\'",\n    extract_fields=["llm_call.inputs.prompt", "llm_call.outputs.response"],\n)\n\n# Rename for evaluation\neval_dataset = conversation_data.rename(\n    columns={\n        "llm_call.inputs.prompt": "inputs",\n        "llm_call.outputs.response": "ground_truth",\n    }\n)\n\n# Use with MLflow evaluate\nresults = mlflow.genai.evaluate(\n    predict_fn=your_model, data=eval_dataset, scorers=["default"]\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"environment-monitoring",children:"Environment Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Monitor error rates across environments\nenvironments = ["production", "staging", "development"]\n\nfor env in environments:\n    total = mlflow.search_traces(filter_string=f"tags.environment = \'{env}\'")\n\n    errors = mlflow.search_traces(\n        filter_string=f"tags.environment = \'{env}\' AND status = \'ERROR\'",\n    )\n\n    error_rate = len(errors) / len(total) * 100 if len(total) > 0 else 0\n    print(f"{env}: {error_rate:.1f}% error rate ({len(errors)}/{len(total)})")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"create-example-traces",children:"Create Example Traces"}),"\n",(0,s.jsx)(n.p,{children:"Create sample traces to explore the search functionality:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time\nimport mlflow\nfrom mlflow.entities import SpanType\n\n\n# Define methods to be traced\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "morning"})\ndef morning_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good morning {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL, attributes={"time": "evening"})\ndef evening_greeting(name: str):\n    time.sleep(1)\n    mlflow.update_current_trace(tags={"person": name})\n    return f"Good evening {name}."\n\n\n@mlflow.trace(span_type=SpanType.TOOL)\ndef goodbye():\n    raise Exception("Cannot say goodbye")\n\n\n# Execute within different experiments\nmorning_experiment = mlflow.set_experiment("Morning Experiment")\nmorning_greeting("Tom")\n\n# Get timestamp for filtering\nmorning_time = int(time.time() * 1000)\n\nevening_experiment = mlflow.set_experiment("Evening Experiment")\nevening_greeting("Mary")\ntry:\n    goodbye()\nexcept:\n    pass  # This creates an ERROR trace\n\nprint("Created example traces with different statuses and timing")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"alternative-setup---production-like-traces",children:"Alternative Setup - Production-Like Traces"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport time\nimport random\nfrom mlflow.tracing import trace\n\nmlflow.set_experiment("trace-search-guide")\n\n# Configuration for realistic traces\noperation_types = ["llm_inference", "embedding_generation", "text_classification"]\nmodel_names = ["gpt-4", "bert-base", "roberta-large"]\nenvironments = ["production", "staging", "development"]\n\n\ndef simulate_operation(op_type, model_name, duration_ms):\n    """Simulate an AI/ML operation"""\n    time.sleep(duration_ms / 1000.0)\n\n    # Simulate occasional errors\n    if random.random() < 0.1:\n        raise Exception(f"Simulated error in {op_type}")\n\n    return f"Completed {op_type} with {model_name}"\n\n\n# Create diverse traces\nfor i in range(20):\n    op_type = random.choice(operation_types)\n    model_name = random.choice(model_names)\n    environment = random.choice(environments)\n    duration = random.randint(50, 2000)  # 50ms to 2s\n\n    try:\n        with mlflow.start_run():\n            mlflow.set_tag("environment", environment)\n\n            with trace(\n                name=f"{op_type}_{i}",\n                tags={\n                    "operation_type": op_type,\n                    "model_name": model_name,\n                    "environment": environment,\n                    "input_tokens": str(random.randint(10, 500)),\n                },\n            ) as span:\n                result = simulate_operation(op_type, model_name, duration)\n                span.set_attribute("result", result)\n\n    except Exception:\n        # Creates ERROR status traces\n        continue\n\nprint("Created 20 example traces with various characteristics")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Start MLflow UI to explore:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mlflow ui\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.code,{children:"http://localhost:5000/"})," to see your traces in the UI."]}),"\n",(0,s.jsxs)(n.p,{children:["With these traces created, you can experiment with searching within the UI or programmatically via either the fluent or client ",(0,s.jsx)(n.code,{children:"search_traces"})," APIs."]}),"\n",(0,s.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,s.jsx)(n.h3,{id:"mlflow-version-compatibility",children:"MLflow Version Compatibility"}),"\n",(0,s.jsx)(n.admonition,{title:"Schema Changes in MLflow 3",type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"DataFrame Schema"}),": The format depends on the MLflow version used to ",(0,s.jsx)(n.strong,{children:"call"})," the ",(0,s.jsx)(n.code,{children:"search_traces"})," API, not the version used to log the traces. MLflow 3.x uses different column names than 2.x."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Return Type Support:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["MLflow 2.21.1+: ",(0,s.jsx)(n.code,{children:"return_type"})," parameter available in ",(0,s.jsx)(n.code,{children:"mlflow.search_traces()"})]}),"\n",(0,s.jsxs)(n.li,{children:["Earlier versions: Use ",(0,s.jsx)(n.code,{children:"MlflowClient.search_traces()"})," for list output"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use timestamp filters"})," to limit search space"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Limit max_results"})," for faster queries when ordering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use pagination"})," for large result sets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Index frequently queried tags"})," in your storage system"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"backend-considerations",children:"Backend Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Backend"}),": Optimized performance with proper indexing on timestamp and status"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Databricks"}),": Enhanced performance with ",(0,s.jsx)(n.code,{children:"sql_warehouse_id"})," parameter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local File Store"}),": May be slower with large datasets. Not recommended, only suitable for storing small number of traces."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"search_traces"})," API provides powerful trace discovery and analysis capabilities in MLflow. By combining flexible filtering, time-based queries, tag-based organization, and advanced features like span field extraction, you can efficiently investigate trace patterns, debug issues, and monitor system performance."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key takeaways:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use SQL-like syntax with ",(0,s.jsx)(n.code,{children:"tags."}),"/",(0,s.jsx)(n.code,{children:"tag."}),", ",(0,s.jsx)(n.code,{children:"metadata."}),", and direct attribute references"]}),"\n",(0,s.jsx)(n.li,{children:"Filter by execution time, status, timestamps, and custom tags"}),"\n",(0,s.jsx)(n.li,{children:"Combine multiple conditions with AND (OR is not supported)"}),"\n",(0,s.jsx)(n.li,{children:"Use ordering and pagination for efficient data exploration"}),"\n",(0,s.jsx)(n.li,{children:"Leverage span field extraction for evaluation dataset creation"}),"\n",(0,s.jsx)(n.li,{children:"Choose appropriate return type based on your use case"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether you're debugging production issues, analyzing model performance, monitoring system health, or creating evaluation datasets, mastering the trace search API will make your MLflow workflow more efficient and insightful."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);