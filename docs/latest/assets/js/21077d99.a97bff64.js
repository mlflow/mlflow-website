"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3936],{7676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"llms/deployments/guides/step1-create-deployments/index","title":"Configuring and Starting the Gateway Server","description":"Step 1: Install","source":"@site/docs/llms/deployments/guides/step1-create-deployments/index.mdx","sourceDirName":"llms/deployments/guides/step1-create-deployments","slug":"/llms/deployments/guides/step1-create-deployments/","permalink":"/docs/latest/llms/deployments/guides/step1-create-deployments/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Getting Started with MLflow Deployments for LLMs","permalink":"/docs/latest/llms/deployments/guides/"},"next":{"title":"Querying Endpoints in the MLflow Deployment Server","permalink":"/docs/latest/llms/deployments/guides/step2-query-deployments/"}}');var i=t(74848),s=t(28453);const r={},o="Configuring and Starting the Gateway Server",l={},d=[{value:"Step 1: Install",id:"step-1-install",level:2},{value:"Step 2: Set the OpenAI Token as an Environment Variable",id:"step-2-set-the-openai-token-as-an-environment-variable",level:2},{value:"Step 3: Configure the gateway server",id:"step-3-configure-the-gateway-server",level:2},{value:"Step 4: Start the Server",id:"step-4-start-the-server",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"configuring-and-starting-the-gateway-server",children:"Configuring and Starting the Gateway Server"})}),"\n",(0,i.jsx)(n.h2,{id:"step-1-install",children:"Step 1: Install"}),"\n",(0,i.jsxs)(n.p,{children:["First, install MLflow along with the ",(0,i.jsx)(n.code,{children:"genai"})," extras to get access to a range of serving-related\ndependencies, including ",(0,i.jsx)(n.code,{children:"uvicorn"})," and ",(0,i.jsx)(n.code,{children:"fastapi"}),". Note that direct dependencies on OpenAI are\nunnecessary, as all supported providers are abstracted from the developer."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install 'mlflow[genai]'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-set-the-openai-token-as-an-environment-variable",children:"Step 2: Set the OpenAI Token as an Environment Variable"}),"\n",(0,i.jsx)(n.p,{children:"Next, set the OpenAI API key as an environment variable in your CLI."}),"\n",(0,i.jsx)(n.p,{children:"This approach allows the MLflow AI Gateway to read the sensitive API key safely, reducing the risk\nof leaking the token in code. The gateway server, when started, will read the value set by this environment\nvariable without any additional action required."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"export OPENAI_API_KEY=your_api_key_here\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-configure-the-gateway-server",children:"Step 3: Configure the gateway server"}),"\n",(0,i.jsx)(n.p,{children:"Third, set up several routes for the gateway server to host. The configuration of the gateway server is done through\nediting a YAML file that is read by the server initialization command (covered in step 4)."}),"\n",(0,i.jsx)(n.p,{children:"Notably, the gateway server allows real-time updates to an active server through the YAML configuration;\nservice restart is not required for changes to take effect and can instead be done simply by editing the\nconfiguration file that is defined at server start, permitting dynamic route creation without downtime of the service."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"endpoints:\n  - name: completions\n    endpoint_type: llm/v1/completions\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: chat\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: chat_3.5\n    endpoint_type: llm/v1/chat\n    model:\n      provider: openai\n      name: gpt-4o-mini\n      config:\n        openai_api_key: $OPENAI_API_KEY\n\n  - name: embeddings\n    endpoint_type: llm/v1/embeddings\n    model:\n      provider: openai\n      name: text-embedding-ada-002\n      config:\n        openai_api_key: $OPENAI_API_KEY\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-start-the-server",children:"Step 4: Start the Server"}),"\n",(0,i.jsx)(n.p,{children:"Fourth, let's test the gateway server!"}),"\n",(0,i.jsx)(n.p,{children:"To launch the gateway server using a YAML config file, use the deployments CLI command."}),"\n",(0,i.jsxs)(n.p,{children:["The gateway server will automatically start on ",(0,i.jsx)(n.code,{children:"localhost"})," at port ",(0,i.jsx)(n.code,{children:"5000"}),", accessible via\nthe URL: ",(0,i.jsx)(n.code,{children:"http://localhost:5000"}),". To modify these default settings, use the\n",(0,i.jsx)(n.code,{children:"mlflow gateway start --help"})," command to view additional configuration options."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mlflow gateway start --config-path config.yaml\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["MLflow AI Gateway automatically creates API docs. You can validate your deployment server\nis running by viewing the docs. Go to ",(0,i.jsx)(n.em,{children:"http://{host}:{port}"})," in your web browser."]})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(96540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);