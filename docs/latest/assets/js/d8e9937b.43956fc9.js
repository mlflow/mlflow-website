"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7262],{28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>a});var o=n(96540);const r={},s=o.createContext(r);function t(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:i},e.children)}},38026:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"prompt-version-mgmt/prompt-registry/use-prompts-in-deployed-apps","title":"Use Prompts in Deployed Apps","description":"Learn how to effectively use prompts from the MLflow Prompt Registry in your deployed GenAI applications, leveraging aliases for dynamic updates and A/B testing.","source":"@site/docs/genai/prompt-version-mgmt/prompt-registry/use-prompts-in-deployed-apps.mdx","sourceDirName":"prompt-version-mgmt/prompt-registry","slug":"/prompt-version-mgmt/prompt-registry/use-prompts-in-deployed-apps","permalink":"/docs/latest/genai/prompt-version-mgmt/prompt-registry/use-prompts-in-deployed-apps","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Use Prompts in Deployed Apps","description":"Learn how to effectively use prompts from the MLflow Prompt Registry in your deployed GenAI applications, leveraging aliases for dynamic updates and A/B testing."},"sidebar":"genAISidebar","previous":{"title":"Log Prompts with Models","permalink":"/docs/latest/genai/prompt-version-mgmt/prompt-registry/log-with-model"},"next":{"title":"Optimize Prompts \ud83c\udd95","permalink":"/docs/latest/genai/prompt-version-mgmt/optimize-prompts/"}}');var r=n(74848),s=n(28453);const t={title:"Use Prompts in Deployed Apps",description:"Learn how to effectively use prompts from the MLflow Prompt Registry in your deployed GenAI applications, leveraging aliases for dynamic updates and A/B testing."},a="Use Prompts in Deployed Apps",l={},p=[{value:"Configuring Production Applications to Use Registry Prompts",id:"configuring-production-applications-to-use-registry-prompts",level:2},{value:"Prompt Versioning Strategies for Deployment",id:"prompt-versioning-strategies-for-deployment",level:2},{value:"Updating Prompts via Aliases Without Redeployment",id:"updating-prompts-via-aliases-without-redeployment",level:2},{value:"Monitoring Prompt Usage in Production",id:"monitoring-prompt-usage-in-production",level:2},{value:"Utilizing Aliases for A/B Testing and Rollbacks",id:"utilizing-aliases-for-ab-testing-and-rollbacks",level:2},{value:"Key Takeaways",id:"key-takeaways",level:2},{value:"Prerequisites",id:"prerequisites",level:2}];function c(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"use-prompts-in-deployed-apps",children:"Use Prompts in Deployed Apps"})}),"\n",(0,r.jsx)(i.p,{children:"Integrating versioned prompts from the MLflow Prompt Registry into your deployed GenAI applications requires careful consideration of versioning strategies, dynamic updates, and risk management. This page focuses on best practices for using prompts in a production environment, with a strong emphasis on leveraging aliases for flexibility and control."}),"\n",(0,r.jsx)(i.p,{children:"You will learn about:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Configuring production applications to use registry prompts, particularly via aliases."}),"\n",(0,r.jsx)(i.li,{children:"Strategies for prompt versioning in deployment (pinning vs. aliases)."}),"\n",(0,r.jsx)(i.li,{children:"How to update prompts referenced by aliases without redeploying your application."}),"\n",(0,r.jsx)(i.li,{children:"Monitoring prompt usage in production (conceptually)."}),"\n",(0,r.jsx)(i.li,{children:"Utilizing aliases for A/B testing different prompt versions and for facilitating rollbacks."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"configuring-production-applications-to-use-registry-prompts",children:"Configuring Production Applications to Use Registry Prompts"}),"\n",(0,r.jsxs)(i.p,{children:["When your GenAI application is deployed to a production environment, it should load its prompts from the MLflow Prompt Registry. The recommended way to do this is by referencing a ",(0,r.jsx)(i.strong,{children:"prompt alias"})," rather than a specific version number in your application's configuration or code."]}),"\n",(0,r.jsxs)(i.p,{children:["Recall that an alias (e.g., ",(0,r.jsx)(i.code,{children:"production"}),", ",(0,r.jsx)(i.code,{children:"live-summary-prompt"}),") is a mutable pointer to a specific, immutable prompt version. By using an alias, you can change the underlying prompt version that your deployed application uses ",(0,r.jsx)(i.em,{children:"without needing to redeploy the application itself"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"prompt-versioning-strategies-for-deployment",children:"Prompt Versioning Strategies for Deployment"}),"\n",(0,r.jsx)(i.p,{children:"You have two main strategies for managing which prompt versions your deployed application uses:"}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pinning to Specific Versions"}),": Your application code or configuration explicitly references a specific version number (e.g., ",(0,r.jsx)(i.code,{children:"prompts:/my-prompt/3"}),").","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pros"}),": Maximum stability and predictability. You know exactly which version is running."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cons"}),": Updating the prompt requires a code change and redeployment of your application."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Using Aliases (Recommended for most production scenarios)"}),": Your application code or configuration references an alias (e.g., ",(0,r.jsx)(i.code,{children:"prompts:/my-prompt/production"}),").","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Pros"}),": Flexibility. You can update the prompt version by simply changing where the alias points in the MLflow Prompt Registry, without any application code changes or redeployment. This allows for rapid iteration and hotfixes."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Cons"}),": Requires careful management of aliases to ensure the correct version is live. Changes to aliases should be audited."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["For most production use cases, ",(0,r.jsx)(i.strong,{children:"using aliases is the preferred method"})," due to the operational flexibility it offers."]}),"\n",(0,r.jsx)(i.h2,{id:"updating-prompts-via-aliases-without-redeployment",children:"Updating Prompts via Aliases Without Redeployment"}),"\n",(0,r.jsx)(i.p,{children:"This is one of the most powerful features of using aliases with the Prompt Registry."}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Scenario"}),": You have a prompt ",(0,r.jsx)(i.code,{children:"invoice-parser"})," and the alias ",(0,r.jsx)(i.code,{children:"production"})," currently points to version ",(0,r.jsx)(i.code,{children:"2"}),". Your application is configured to use ",(0,r.jsx)(i.code,{children:"prompts:/invoice-parser/production"}),"."]}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Develop and Test a New Version"}),": You create and thoroughly test version ",(0,r.jsx)(i.code,{children:"3"})," of ",(0,r.jsx)(i.code,{children:"invoice-parser"}),", which significantly improves accuracy."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Update the Alias"}),": Using the MLflow UI or the ",(0,r.jsx)(i.code,{children:"mlflow.genai.set_prompt_alias()"})," Python API, you change the ",(0,r.jsx)(i.code,{children:"production"})," alias for ",(0,r.jsx)(i.code,{children:"invoice-parser"})," to now point to version ",(0,r.jsx)(i.code,{children:"3"}),"."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Application Behavior"}),": The next time your deployed application instances (which might have caching, see below) load the prompt ",(0,r.jsx)(i.code,{children:"prompts:/invoice-parser/production"}),", they will automatically fetch version ",(0,r.jsx)(i.code,{children:"3"})," without any code changes or restarts."]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"Considerations for Caching"}),": Deployed applications might cache loaded prompts for performance. Ensure your application has a strategy to periodically refresh cached prompts or a mechanism to trigger a refresh if immediate updates are critical."]}),"\n",(0,r.jsx)(i.h2,{id:"monitoring-prompt-usage-in-production",children:"Monitoring Prompt Usage in Production"}),"\n",(0,r.jsx)(i.p,{children:"While the Prompt Registry manages the prompts themselves, monitoring their usage and performance in production relies on your application's observability stack, ideally integrated with MLflow Tracing."}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Log Prompt Identifiers"}),": Ensure your application logs include the specific prompt name and version (or the alias used and the version it resolved to) for each transaction."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Trace Integration"}),": If using MLflow Tracing, the ",(0,r.jsx)(i.code,{children:"mlflow.genai.load_prompt()"})," call can automatically add metadata to your traces about the prompt URI used. This allows you to correlate application behavior, LLM outputs, and performance metrics (latency, cost) with specific prompt versions in the MLflow Tracing UI."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Performance Metrics"}),": Track LLM response times, token counts, and error rates. Segment these metrics by prompt version to identify if a new prompt version has impacted performance."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Quality Metrics"}),": Collect user feedback (e.g., thumbs up/down, explicit feedback) and run offline evaluations or online monitoring with LLM judges on production traffic, associating results back to the prompt versions used."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"utilizing-aliases-for-ab-testing-and-rollbacks",children:"Utilizing Aliases for A/B Testing and Rollbacks"}),"\n",(0,r.jsx)(i.p,{children:"Aliases are also invaluable for advanced deployment strategies:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"A/B Testing"}),": You can introduce a new prompt version to a subset of users or traffic. For example, have a separate alias like ",(0,r.jsx)(i.code,{children:"experimental-parser"})," pointing to version ",(0,r.jsx)(i.code,{children:"4"}),". Your application or load balancer could route a percentage of requests to use this experimental alias, allowing you to compare its performance against the main ",(0,r.jsx)(i.code,{children:"production"})," alias before a full rollout."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Easy Rollbacks"}),": If a newly promoted prompt version (e.g., version ",(0,r.jsx)(i.code,{children:"3"})," pointed to by ",(0,r.jsx)(i.code,{children:"production"}),") is found to have issues, you can quickly roll back by simply updating the ",(0,r.jsx)(i.code,{children:"production"})," alias to point back to the previously stable version (e.g., version ",(0,r.jsx)(i.code,{children:"2"}),"). This can be done in seconds without a stressful redeployment."]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["Using ",(0,r.jsx)(i.strong,{children:"aliases"})," (e.g., ",(0,r.jsx)(i.code,{children:"prompts:/my-prompt/production"}),") in deployed applications is highly recommended for dynamic prompt updates without redeployment."]}),"\n",(0,r.jsx)(i.li,{children:"Updating an alias in the MLflow Prompt Registry allows for hot-swapping prompt versions in live applications."}),"\n",(0,r.jsx)(i.li,{children:"Careful alias management and auditing are crucial."}),"\n",(0,r.jsx)(i.li,{children:"Integrate prompt version information into your production logging and MLflow Tracing for effective monitoring."}),"\n",(0,r.jsx)(i.li,{children:"Aliases facilitate A/B testing of new prompt versions and enable rapid rollbacks if issues arise."}),"\n",(0,r.jsx)(i.li,{children:"Be mindful of prompt caching strategies in your deployed applications."}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"A production-ready GenAI application."}),"\n",(0,r.jsx)(i.li,{children:"An established deployment pipeline."}),"\n",(0,r.jsx)(i.li,{children:"MLflow Prompt Registry populated with versioned prompts and aliases."}),"\n",(0,r.jsx)(i.li,{children:"(Recommended) MLflow Tracing implemented in your application for monitoring."}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"By strategically using prompts from the registry, especially with aliases, you can significantly improve the agility, reliability, and maintainability of your deployed GenAI applications."})]})}function d(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);