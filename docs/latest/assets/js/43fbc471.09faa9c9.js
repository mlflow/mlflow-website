"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5721],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(96540);const o={},l=t.createContext(o);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},49374:(e,n,i)=>{i.d(n,{B:()=>r});i(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=i(86025),l=i(28774),a=i(74848);const s=e=>{const n=e.split(".");for(let i=n.length;i>0;i--){const e=n.slice(0,i).join(".");if(t[e])return e}return null};function r({fn:e,children:n}){const i=s(e);if(!i)return(0,a.jsx)(a.Fragment,{children:n});const r=(0,o.Ay)(`/${t[i]}#${e}`);return(0,a.jsx)(l.A,{to:r,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}},88351:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"deep-learning/spacy/guide/index","title":"spaCy within MLflow","description":"spaCy is the leading industrial-strength natural language processing library, designed from the ground up for production use. Created by Explosion AI, spaCy combines cutting-edge research with practical engineering to deliver fast, accurate, and scalable NLP solutions that power everything from chatbots and content analysis to document processing and knowledge extraction systems.","source":"@site/docs/classic-ml/deep-learning/spacy/guide/index.mdx","sourceDirName":"deep-learning/spacy/guide","slug":"/deep-learning/spacy/guide/","permalink":"/docs/latest/ml/deep-learning/spacy/guide/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"spaCy","permalink":"/docs/latest/ml/deep-learning/spacy/"},"next":{"title":"Overview","permalink":"/docs/latest/ml/tracking/"}}');var o=i(74848),l=i(28453),a=i(49374);const s={},r="spaCy within MLflow",c={},p=[{value:"Logging spaCy Models to MLflow",id:"logging-spacy-models-to-mlflow",level:2},{value:"Basic Model Logging",id:"basic-model-logging",level:3},{value:"Model Components &amp; Architecture",id:"model-components--architecture",level:4},{value:"Dependencies &amp; Environment",id:"dependencies--environment",level:4},{value:"Deployment Artifacts",id:"deployment-artifacts",level:4},{value:"Automatic PyFunc Flavor for Text Classification",id:"automatic-pyfunc-flavor-for-text-classification",level:3},{value:"Automatic PyFunc Generation",id:"automatic-pyfunc-generation",level:4},{value:"Input/Output Format",id:"inputoutput-format",level:4},{value:"Deployment Benefits",id:"deployment-benefits",level:4},{value:"Advanced spaCy Training with MLflow Integration",id:"advanced-spacy-training-with-mlflow-integration",level:2},{value:"Custom Training Logger",id:"custom-training-logger",level:3},{value:"Configuration File Integration",id:"configuration-file-integration",level:4},{value:"Advanced Logger Features",id:"advanced-logger-features",level:4},{value:"Complete Training Integration Example",id:"complete-training-integration-example",level:3},{value:"Saving and Loading spaCy Models",id:"saving-and-loading-spacy-models",level:2},{value:"Basic Model Operations",id:"basic-model-operations",level:3},{value:"Native spaCy Loading",id:"native-spacy-loading",level:4},{value:"PyFunc Loading (Text Classification Only)",id:"pyfunc-loading-text-classification-only",level:4},{value:"When to Use Each Approach",id:"when-to-use-each-approach",level:4},{value:"Model Signatures for spaCy Models",id:"model-signatures-for-spacy-models",level:3},{value:"Advanced spaCy Tracking Patterns",id:"advanced-spacy-tracking-patterns",level:2},{value:"Custom Component Tracking",id:"custom-component-tracking",level:3},{value:"Multi-Language Model Tracking",id:"multi-language-model-tracking",level:3},{value:"Benefits of Multilingual Tracking",id:"benefits-of-multilingual-tracking",level:4},{value:"Pipeline Optimization Tracking",id:"pipeline-optimization-tracking",level:3},{value:"Production Deployment",id:"production-deployment",level:2},{value:"Local Model Serving",id:"local-model-serving",level:3},{value:"Real-World Applications",id:"real-world-applications",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"spacy-within-mlflow",children:"spaCy within MLflow"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"spaCy"})," is the leading industrial-strength natural language processing library, designed from the ground up for production use. Created by Explosion AI, spaCy combines cutting-edge research with practical engineering to deliver fast, accurate, and scalable NLP solutions that power everything from chatbots and content analysis to document processing and knowledge extraction systems."]}),"\n",(0,o.jsxs)(n.p,{children:["spaCy's ",(0,o.jsx)(n.strong,{children:"production-first philosophy"})," sets it apart from academic NLP libraries. With its streamlined API, extensive pre-trained models, and robust pipeline architecture, spaCy enables developers to build sophisticated NLP applications without sacrificing speed or maintainability."]}),"\n",(0,o.jsx)(n.h2,{id:"logging-spacy-models-to-mlflow",children:"Logging spaCy Models to MLflow"}),"\n",(0,o.jsx)(n.h3,{id:"basic-model-logging",children:"Basic Model Logging"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow provides native support for spaCy models through the ",(0,o.jsx)(a.B,{fn:"mlflow.spacy.log_model"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\n\n# Load or train your spaCy model\nnlp = spacy.load("en_core_web_sm")\n\n# Log the model to MLflow\nwith mlflow.start_run():\n    mlflow.spacy.log_model(nlp, name="spacy_model")\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"What Gets Automatically Captured"}),(0,o.jsx)(n.h4,{id:"model-components--architecture",children:"Model Components & Architecture"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,o.jsx)(n.strong,{children:"Pipeline Components"}),": All pipeline components (tokenizer, tagger, parser, NER, text categorizer)"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcd0 ",(0,o.jsx)(n.strong,{children:"Model Configuration"}),": Architecture details, hyperparameters, and component settings"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,o.jsx)(n.strong,{children:"Component Metadata"}),": Individual component configurations and performance metrics"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd27 ",(0,o.jsx)(n.strong,{children:"Custom Components"}),": User-defined pipeline components and extensions"]}),"\n"]}),(0,o.jsx)(n.h4,{id:"dependencies--environment",children:"Dependencies & Environment"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,o.jsx)(n.strong,{children:"spaCy Version"}),": Exact spaCy version for reproducibility"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udc0d ",(0,o.jsx)(n.strong,{children:"Python Environment"}),": Complete environment specification with all dependencies"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udccb ",(0,o.jsx)(n.strong,{children:"Requirements"}),": Automatic generation of pip requirements and conda environment"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd17 ",(0,o.jsx)(n.strong,{children:"Model Dependencies"}),": Language models and custom extensions"]}),"\n"]}),(0,o.jsx)(n.h4,{id:"deployment-artifacts",children:"Deployment Artifacts"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83e\udd16 ",(0,o.jsx)(n.strong,{children:"Complete Model"}),": Full model serialization with vocabularies and weights"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Model Metadata"}),": Model size, components, and performance characteristics"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udff7\ufe0f ",(0,o.jsx)(n.strong,{children:"Model Signatures"}),": Input/output schemas for validation (when applicable)"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"automatic-pyfunc-flavor-for-text-classification",children:"Automatic PyFunc Flavor for Text Classification"}),"\n",(0,o.jsxs)(n.p,{children:["When your spaCy model includes a ",(0,o.jsx)(n.code,{children:"TextCategorizer"})," component, MLflow automatically adds the PyFunc flavor for easy deployment:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\nfrom spacy import Language\nimport pandas as pd\n\n\n# Create a text classification pipeline\n@Language.component("custom_textcat")\ndef create_textcat(nlp, name="textcat"):\n    return nlp.add_pipe("textcat", name=name)\n\n\nnlp = spacy.blank("en")\nnlp.add_pipe("textcat")\n\n# Add labels to the text categorizer\nnlp.get_pipe("textcat").add_label("POSITIVE")\nnlp.get_pipe("textcat").add_label("NEGATIVE")\n\n# Train your model (training code omitted for brevity)\n\nwith mlflow.start_run():\n    # Log model - PyFunc flavor added automatically\n    model_info = mlflow.spacy.log_model(nlp, name="text_classifier")\n\n# Load and use for inference\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\n# Prepare input data as DataFrame\ntest_data = pd.DataFrame({"text": ["This is great!", "This is terrible!"]})\npredictions = loaded_model.predict(test_data)\nprint(predictions)\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Text Classification Integration Details"}),(0,o.jsx)(n.h4,{id:"automatic-pyfunc-generation",children:"Automatic PyFunc Generation"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,o.jsx)(n.strong,{children:"Smart Detection"}),": MLflow automatically detects TextCategorizer components"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"DataFrame Input"}),": PyFunc wrapper accepts pandas DataFrame with text column"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Batch Processing"}),": Efficient inference on multiple texts simultaneously"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcc8 ",(0,o.jsx)(n.strong,{children:"Probability Scores"}),": Returns prediction probabilities for all categories"]}),"\n"]}),(0,o.jsx)(n.h4,{id:"inputoutput-format",children:"Input/Output Format"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Input"}),": pandas DataFrame with exactly one column containing text data"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Output"}),': pandas DataFrame with "predictions" column containing category probabilities']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Format"}),": Each prediction is a dictionary with category names as keys and probabilities as values"]}),"\n"]}),(0,o.jsx)(n.h4,{id:"deployment-benefits",children:"Deployment Benefits"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,o.jsx)(n.strong,{children:"Universal Interface"}),": Use standard MLflow serving infrastructure"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,o.jsx)(n.strong,{children:"Easy Integration"}),": Compatible with MLflow's deployment tools and APIs"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,o.jsx)(n.strong,{children:"Model Validation"}),": Automatic input validation and error handling"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Monitoring"}),": Integration with MLflow's model monitoring capabilities"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"advanced-spacy-training-with-mlflow-integration",children:"Advanced spaCy Training with MLflow Integration"}),"\n",(0,o.jsx)(n.h3,{id:"custom-training-logger",children:"Custom Training Logger"}),"\n",(0,o.jsx)(n.p,{children:"spaCy's training system can be integrated with MLflow through custom loggers registered in spaCy's component registry:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import sys\nimport spacy\nfrom spacy import Language\nfrom typing import IO, Callable, Tuple, Dict, Any, Optional\nimport mlflow\n\n\n@spacy.registry.loggers("mlflow_logger.v1")\ndef mlflow_logger():\n    """Custom MLflow logger for spaCy training integration."""\n\n    def setup_logger(\n        nlp: Language,\n        stdout: IO = sys.stdout,\n        stderr: IO = sys.stderr,\n    ) -> Tuple[Callable, Callable]:\n        def log_step(info: Optional[Dict[str, Any]]):\n            """Called by spaCy for every evaluation step."""\n            if info:\n                step = info["step"]\n                score = info["score"]\n                metrics = {}\n\n                # Log component-specific losses and scores\n                for pipe_name in nlp.pipe_names:\n                    if pipe_name in info["losses"]:\n                        loss = info["losses"][pipe_name]\n                        metrics[f"{pipe_name}_loss"] = loss\n                        metrics[f"{pipe_name}_score"] = score\n\n                # Log overall metrics\n                metrics["overall_score"] = score\n                mlflow.log_metrics(metrics, step=step)\n\n        def finalize():\n            """Called by spaCy after training completion."""\n            # Log the final trained model\n            mlflow.spacy.log_model(nlp, name="trained_model")\n            mlflow.end_run()\n\n        return log_step, finalize\n\n    return setup_logger\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Training Configuration Setup"}),(0,o.jsx)(n.h4,{id:"configuration-file-integration",children:"Configuration File Integration"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Generate Base Configuration"}),":"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"python -m spacy init config --pipeline textcat --lang en config.cfg\n"})}),(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Update Logger Configuration"}),":"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:'[training.logger]\n@loggers = "mlflow_logger.v1"\n\n[training]\nmax_steps = 1000\neval_frequency = 100\n'})}),(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Configure Data Paths"}),":"]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:'[paths]\ntrain = "./train.spacy"\ndev = "./dev.spacy"\n'})}),(0,o.jsx)(n.h4,{id:"advanced-logger-features",children:"Advanced Logger Features"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Component-Level Tracking"}),": Monitor individual pipeline component performance"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udfaf ",(0,o.jsx)(n.strong,{children:"Custom Metrics"}),": Log domain-specific evaluation metrics"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcc8 ",(0,o.jsx)(n.strong,{children:"Training Dynamics"}),": Track learning curves and convergence patterns"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Automatic Model Saving"}),": Save best models based on validation performance"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcdd ",(0,o.jsx)(n.strong,{children:"Experiment Metadata"}),": Log training configuration and hyperparameters"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"complete-training-integration-example",children:"Complete Training Integration Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's a comprehensive example showing spaCy training with MLflow integration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\nimport pandas as pd\nfrom spacy.tokens import DocBin\nfrom spacy.cli.train import train as spacy_train\nimport tempfile\nimport os\n\n\ndef prepare_training_data():\n    """Prepare sample training data for text classification."""\n    # Sample data preparation\n    train_data = [\n        ("This movie is excellent!", {"cats": {"POSITIVE": 1.0, "NEGATIVE": 0.0}}),\n        ("Terrible film, waste of time", {"cats": {"POSITIVE": 0.0, "NEGATIVE": 1.0}}),\n        ("Amazing storyline and acting", {"cats": {"POSITIVE": 1.0, "NEGATIVE": 0.0}}),\n        ("Boring and predictable", {"cats": {"POSITIVE": 0.0, "NEGATIVE": 1.0}}),\n    ]\n\n    # Convert to spaCy format\n    nlp = spacy.blank("en")\n    doc_bin = DocBin()\n\n    for text, annotations in train_data:\n        doc = nlp.make_doc(text)\n        doc.cats = annotations["cats"]\n        doc_bin.add(doc)\n\n    return doc_bin\n\n\n# Prepare training data\ntrain_docs = prepare_training_data()\ndev_docs = prepare_training_data()  # Use same data for simplicity\n\n# Save training data\ntrain_docs.to_disk("./train.spacy")\ndev_docs.to_disk("./dev.spacy")\n\n# Configuration content\nconfig_content = """\n[nlp]\nlang = "en"\npipeline = ["textcat"]\n\n[components]\n\n[components.textcat]\nfactory = "textcat"\n\n[training]\nmax_steps = 100\neval_frequency = 20\n\n[training.logger]\n@loggers = "mlflow_logger.v1"\n\n[paths]\ntrain = "./train.spacy"\ndev = "./dev.spacy"\n"""\n\n# Write configuration file\nwith open("config.cfg", "w") as f:\n    f.write(config_content)\n\n# Start MLflow experiment\nwith mlflow.start_run(run_name="spacy_text_classification"):\n    # Log training configuration\n    mlflow.log_params(\n        {\n            "model_type": "text_classification",\n            "pipeline": "textcat",\n            "language": "en",\n            "max_steps": 100,\n            "eval_frequency": 20,\n        }\n    )\n\n    # Train the model (this will use our custom logger)\n    spacy_train("config.cfg")\n\nprint("Training completed and logged to MLflow!")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"saving-and-loading-spacy-models",children:"Saving and Loading spaCy Models"}),"\n",(0,o.jsx)(n.h3,{id:"basic-model-operations",children:"Basic Model Operations"}),"\n",(0,o.jsx)(n.p,{children:"MLflow provides multiple ways to save and load spaCy models:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\n\n# Load a pre-trained model\nnlp = spacy.load("en_core_web_sm")\n\n# Save with MLflow\nmodel_info = mlflow.spacy.log_model(nlp, name="spacy_model")\n\n# Load back in native spaCy format\nloaded_nlp = mlflow.spacy.load_model(model_info.model_uri)\n\n# Use the loaded model\ndoc = loaded_nlp("This is a test sentence.")\nfor token in doc:\n    print(f"{token.text}: {token.pos_}, {token.dep_}")\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Loading Options and Use Cases"}),(0,o.jsx)(n.h4,{id:"native-spacy-loading",children:"Native spaCy Loading"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Full spaCy functionality - all pipeline components\nnlp = mlflow.spacy.load_model(model_info.model_uri)\n\n# Access all spaCy features\ndoc = nlp("Analyze this text completely.")\nentities = [(ent.text, ent.label_) for ent in doc.ents]\ndependencies = [(token.text, token.dep_, token.head.text) for token in doc]\n'})}),(0,o.jsx)(n.h4,{id:"pyfunc-loading-text-classification-only",children:"PyFunc Loading (Text Classification Only)"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Simplified interface for text classification\nclassifier = mlflow.pyfunc.load_model(model_info.model_uri)\n\n# DataFrame input required\nimport pandas as pd\n\ntest_data = pd.DataFrame({"text": ["Sample text to classify"]})\npredictions = classifier.predict(test_data)\n'})}),(0,o.jsx)(n.h4,{id:"when-to-use-each-approach",children:"When to Use Each Approach"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,o.jsx)(n.strong,{children:"Native spaCy"}),": Full NLP pipeline access, custom components, advanced features"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"PyFunc"}),": Text classification deployment, simple inference, production serving"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Mixed Approach"}),": Development with native, deployment with PyFunc"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"model-signatures-for-spacy-models",children:"Model Signatures for spaCy Models"}),"\n",(0,o.jsx)(n.p,{children:"Adding signatures to spaCy models improves documentation and enables validation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.models import infer_signature\nimport pandas as pd\nimport spacy\n\n# Load and prepare model\nnlp = spacy.load("en_core_web_sm")\n\n# For text classification models, create sample data\nsample_input = pd.DataFrame({"text": ["This is a sample sentence for classification."]})\n\n# If model has TextCategorizer, get predictions for signature\nif nlp.has_pipe("textcat"):\n    # Create wrapper for prediction\n    class SpacyWrapper:\n        def __init__(self, nlp):\n            self.nlp = nlp\n\n        def predict(self, df):\n            results = []\n            for text in df.iloc[:, 0]:\n                doc = self.nlp(text)\n                results.append({"predictions": doc.cats})\n            return pd.DataFrame(results)\n\n    wrapper = SpacyWrapper(nlp)\n    sample_output = wrapper.predict(sample_input)\n    signature = infer_signature(sample_input, sample_output)\nelse:\n    signature = None\n\n# Log model with signature\nmlflow.spacy.log_model(\n    nlp, name="spacy_model", signature=signature, input_example=sample_input\n)\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Manual Signature Definition"}),(0,o.jsx)(n.p,{children:"For complete control over your model signature:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.types import Schema, ColSpec\nfrom mlflow.models import ModelSignature\n\n# Define input schema for text classification\ninput_schema = Schema([ColSpec("string", "text")])\n\n# Define output schema\noutput_schema = Schema(\n    [ColSpec("object", "predictions")]  # Dictionary with category probabilities\n)\n\n# Create signature\nsignature = ModelSignature(inputs=input_schema, outputs=output_schema)\n\n# Log model with manual signature\nmlflow.spacy.log_model(nlp, name="model", signature=signature)\n'})}),(0,o.jsx)(n.p,{children:"Manual signatures are useful when:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"You need precise control over input/output specifications"}),"\n",(0,o.jsx)(n.li,{children:"Working with custom output formats"}),"\n",(0,o.jsx)(n.li,{children:"The automatic inference doesn't capture your intended schema"}),"\n",(0,o.jsx)(n.li,{children:"You want to document expected data types explicitly"}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"advanced-spacy-tracking-patterns",children:"Advanced spaCy Tracking Patterns"}),"\n",(0,o.jsx)(n.h3,{id:"custom-component-tracking",children:"Custom Component Tracking"}),"\n",(0,o.jsx)(n.p,{children:"Track custom spaCy components and their performance:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\nfrom spacy import Language\nfrom spacy.tokens import Doc, Span\n\n\n@Language.component("sentiment_analyzer")\ndef sentiment_analyzer(doc):\n    """Custom component for sentiment analysis."""\n    # Simple rule-based sentiment (replace with actual ML model)\n    positive_words = {"good", "great", "excellent", "amazing", "wonderful"}\n    negative_words = {"bad", "terrible", "awful", "horrible", "worst"}\n\n    pos_count = sum(1 for token in doc if token.lower_ in positive_words)\n    neg_count = sum(1 for token in doc if token.lower_ in negative_words)\n\n    if pos_count > neg_count:\n        sentiment = "positive"\n        score = 0.8\n    elif neg_count > pos_count:\n        sentiment = "negative"\n        score = 0.8\n    else:\n        sentiment = "neutral"\n        score = 0.5\n\n    # Add sentiment as custom attribute\n    doc._.sentiment = sentiment\n    doc._.sentiment_score = score\n    return doc\n\n\n# Register custom extensions\nDoc.set_extension("sentiment", default=None)\nDoc.set_extension("sentiment_score", default=0.0)\n\n# Create pipeline with custom component\nnlp = spacy.blank("en")\nnlp.add_pipe("sentiment_analyzer")\n\n# Test and evaluate custom component\ntest_texts = [\n    "This is a great product!",\n    "Terrible service, very bad.",\n    "It\'s okay, nothing special.",\n]\n\nwith mlflow.start_run():\n    # Log component information\n    mlflow.log_params(\n        {\n            "custom_components": ["sentiment_analyzer"],\n            "pipeline": nlp.pipe_names,\n            "model_version": "1.0",\n        }\n    )\n\n    # Evaluate custom component\n    correct_predictions = 0\n    total_predictions = len(test_texts)\n\n    results = []\n    for text in test_texts:\n        doc = nlp(text)\n        results.append(\n            {"text": text, "sentiment": doc._.sentiment, "score": doc._.sentiment_score}\n        )\n\n    # Log evaluation metrics\n    mlflow.log_metric("component_accuracy", correct_predictions / total_predictions)\n\n    # Log model with custom component\n    mlflow.spacy.log_model(nlp, name="custom_sentiment_model")\n\n    # Log evaluation results as artifact\n    import json\n\n    with open("evaluation_results.json", "w") as f:\n        json.dump(results, f, indent=2)\n    mlflow.log_artifact("evaluation_results.json")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"multi-language-model-tracking",children:"Multi-Language Model Tracking"}),"\n",(0,o.jsx)(n.p,{children:"Track experiments across different languages and models:"}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Multilingual Experiment Tracking"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\nfrom collections import defaultdict\n\n\ndef evaluate_multilingual_models():\n    """Evaluate performance across multiple language models."""\n\n    # Define language models to test\n    models = {\n        "en": "en_core_web_sm",\n        "de": "de_core_news_sm",\n        "fr": "fr_core_news_sm",\n        "es": "es_core_news_sm",\n    }\n\n    # Sample texts for each language\n    test_texts = {\n        "en": "Apple Inc. is a technology company based in California.",\n        "de": "Apple Inc. ist ein Technologieunternehmen in Kalifornien.",\n        "fr": "Apple Inc. est une entreprise technologique bas\xe9e en Californie.",\n        "es": "Apple Inc. es una empresa de tecnolog\xeda con sede en California.",\n    }\n\n    with mlflow.start_run(run_name="multilingual_comparison"):\n        results = {}\n\n        for lang, model_name in models.items():\n            try:\n                with mlflow.start_run(run_name=f"{lang}_model", nested=True):\n                    # Load language-specific model\n                    nlp = spacy.load(model_name)\n\n                    # Log model information\n                    mlflow.log_params(\n                        {\n                            "language": lang,\n                            "model_name": model_name,\n                            "pipeline_components": nlp.pipe_names,\n                            "model_size": len(nlp.vocab),\n                        }\n                    )\n\n                    # Process text and extract entities\n                    doc = nlp(test_texts[lang])\n                    entities = [(ent.text, ent.label_) for ent in doc.ents]\n\n                    # Log results\n                    mlflow.log_metrics(\n                        {\n                            "num_entities": len(entities),\n                            "num_tokens": len(doc),\n                            "processing_time": 0.1,  # Placeholder\n                        }\n                    )\n\n                    # Log the model\n                    mlflow.spacy.log_model(nlp, name=f"{lang}_model")\n\n                    results[lang] = {"entities": entities, "tokens": len(doc)}\n\n            except OSError:\n                print(f"Model {model_name} not available, skipping {lang}")\n\n        # Log summary results\n        mlflow.log_param("total_languages", len(results))\n        mlflow.log_metric(\n            "avg_entities_per_lang",\n            sum(r["entities"].__len__() for r in results.values()) / len(results),\n        )\n\n        return results\n\n\n# Run multilingual evaluation\nresults = evaluate_multilingual_models()\n'})}),(0,o.jsx)(n.h4,{id:"benefits-of-multilingual-tracking",children:"Benefits of Multilingual Tracking"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,o.jsx)(n.strong,{children:"Cross-Language Comparison"}),": Compare model performance across languages"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Unified Metrics"}),": Track consistent metrics across different language models"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Model Selection"}),": Choose best models for multilingual applications"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcc8 ",(0,o.jsx)(n.strong,{children:"Performance Analysis"}),": Identify language-specific strengths and weaknesses"]}),"\n"]})]}),"\n",(0,o.jsx)(n.h3,{id:"pipeline-optimization-tracking",children:"Pipeline Optimization Tracking"}),"\n",(0,o.jsx)(n.p,{children:"Track different pipeline configurations and optimizations:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport spacy\nimport time\nfrom itertools import combinations, product\n\n\ndef optimize_pipeline_configuration():\n    """Test different pipeline configurations for optimal performance."""\n\n    # Define pipeline variations to test\n    base_components = ["tok2vec", "tagger", "parser", "ner"]\n    optional_components = ["lemmatizer", "textcat"]\n\n    # Test different combinations\n    configurations = []\n    for r in range(len(optional_components) + 1):\n        for combo in combinations(optional_components, r):\n            config = base_components + list(combo)\n            configurations.append(config)\n\n    with mlflow.start_run(run_name="pipeline_optimization"):\n        best_config = None\n        best_score = 0\n\n        for i, components in enumerate(configurations):\n            with mlflow.start_run(run_name=f"config_{i}", nested=True):\n                # Create model with specific components\n                nlp = spacy.blank("en")\n\n                # Add components (simplified for example)\n                available_components = {\n                    "tok2vec": "tok2vec",\n                    "tagger": "tagger",\n                    "parser": "parser",\n                    "ner": "ner",\n                    "lemmatizer": "lemmatizer",\n                }\n\n                pipeline_components = []\n                for comp in components:\n                    if comp in available_components:\n                        try:\n                            nlp.add_pipe(comp)\n                            pipeline_components.append(comp)\n                        except:\n                            continue\n\n                # Log configuration\n                mlflow.log_params(\n                    {\n                        "components": pipeline_components,\n                        "num_components": len(pipeline_components),\n                        "config_id": i,\n                    }\n                )\n\n                # Simulate performance testing\n                test_text = "This is a test sentence for pipeline evaluation."\n\n                start_time = time.time()\n                doc = nlp(test_text)\n                processing_time = time.time() - start_time\n\n                # Calculate synthetic performance score\n                performance_score = (\n                    len(pipeline_components) * 10 - processing_time * 100\n                )\n\n                # Log metrics\n                mlflow.log_metrics(\n                    {\n                        "processing_time": processing_time,\n                        "performance_score": performance_score,\n                        "memory_usage": len(nlp.vocab),  # Simplified metric\n                    }\n                )\n\n                # Log model\n                mlflow.spacy.log_model(nlp, name="pipeline_model")\n\n                # Track best configuration\n                if performance_score > best_score:\n                    best_score = performance_score\n                    best_config = pipeline_components\n\n        # Log best configuration summary\n        mlflow.log_params(\n            {\n                "best_config": best_config,\n                "best_score": best_score,\n                "total_configs_tested": len(configurations),\n            }\n        )\n\n        return best_config, best_score\n\n\n# Run pipeline optimization\nbest_config, score = optimize_pipeline_configuration()\nprint(f"Best configuration: {best_config} with score: {score}")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,o.jsx)(n.h3,{id:"local-model-serving",children:"Local Model Serving"}),"\n",(0,o.jsx)(n.p,{children:"Deploy your spaCy models locally using MLflow's serving infrastructure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# First, log your model with proper configuration\nimport mlflow\nimport spacy\nimport pandas as pd\n\nnlp = spacy.load("en_core_web_sm")\n\nwith mlflow.start_run() as run:\n    # Create example input for signature\n    sample_input = pd.DataFrame({"text": ["Sample text for classification"]})\n\n    # Log model with dependencies\n    model_info = mlflow.spacy.log_model(\n        nlp,\n        name="spacy_model",\n        input_example=sample_input,\n        pip_requirements=["spacy>=3.0.0"],\n    )\n\n    model_uri = (\n        model_info.model_uri\n    )  # The format of this attribute is \'models:/<model_id>\'\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then deploy the model using the MLflow CLI:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Serve the model locally (for text classification models with PyFunc flavor)\nmlflow models serve -m models:/<model_id> -p 5000\n\n# Test the deployment\ncurl http://localhost:5000/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{"inputs": [{"text": "This is a great product!"}]}\'\n'})}),"\n",(0,o.jsxs)(i,{children:[(0,o.jsx)("summary",{children:"Advanced Deployment Options"}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"mlflow models serve"})," command supports several options for spaCy models:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Specify environment manager\nmlflow models serve -m models:/<model_id> -p 5000 --env-manager conda\n\n# Enable MLServer for enhanced performance\nmlflow models serve -m models:/<model_id> -p 5000 --enable-mlserver\n\n# Set custom host for network access\nmlflow models serve -m models:/<model_id> -p 5000 --host 0.0.0.0\n"})}),(0,o.jsx)(n.p,{children:"For production deployments, consider:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Using MLServer (",(0,o.jsx)(n.code,{children:"--enable-mlserver"}),") for better performance and scalability"]}),"\n",(0,o.jsxs)(n.li,{children:["Building Docker images with ",(0,o.jsx)(n.code,{children:"mlflow models build-docker"})]}),"\n",(0,o.jsx)(n.li,{children:"Deploying to cloud platforms like Azure ML or Amazon SageMaker"}),"\n",(0,o.jsx)(n.li,{children:"Setting up proper environment management and dependency isolation"}),"\n",(0,o.jsx)(n.li,{children:"Implementing model monitoring and health checks"}),"\n"]})]}),"\n",(0,o.jsx)(n.h2,{id:"real-world-applications",children:"Real-World Applications"}),"\n",(0,o.jsx)(n.p,{children:"The MLflow-spaCy integration excels across diverse NLP domains:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcf0 ",(0,o.jsx)(n.strong,{children:"Content Analysis"}),": Track sentiment analysis, topic modeling, and content classification systems for media and publishing"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udfe5 ",(0,o.jsx)(n.strong,{children:"Healthcare NLP"}),": Monitor clinical text processing, medical entity extraction, and diagnostic support systems"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcbc ",(0,o.jsx)(n.strong,{children:"Enterprise Search"}),": Log document processing, information extraction, and knowledge management pipelines"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\uded2 ",(0,o.jsx)(n.strong,{children:"E-commerce Intelligence"}),": Track product categorization, review analysis, and customer intent recognition"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,o.jsx)(n.strong,{children:"Communications Processing"}),": Monitor email classification, chatbot training, and customer service automation"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udfdb\ufe0f ",(0,o.jsx)(n.strong,{children:"Legal Tech"}),": Log contract analysis, document review, and legal entity recognition systems"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,o.jsx)(n.strong,{children:"Multilingual Applications"}),": Track translation quality, cross-lingual transfer, and international content processing"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Business Intelligence"}),": Monitor text analytics, report generation, and automated insights extraction"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"The MLflow-spaCy integration provides a comprehensive solution for tracking, managing, and deploying production-grade NLP systems. By combining spaCy's industrial-strength capabilities with MLflow's experiment tracking, you create a workflow that is:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd0d ",(0,o.jsx)(n.strong,{children:"Transparent"}),": Every aspect of NLP model development is documented and trackable"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,o.jsx)(n.strong,{children:"Reproducible"}),": Experiments can be recreated exactly with proper environment management"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcca ",(0,o.jsx)(n.strong,{children:"Comparable"}),": Different approaches can be evaluated side-by-side with consistent metrics"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udcc8 ",(0,o.jsx)(n.strong,{children:"Scalable"}),": From simple prototypes to enterprise-scale NLP systems"]}),"\n",(0,o.jsxs)(n.li,{children:["\ud83d\udc65 ",(0,o.jsx)(n.strong,{children:"Collaborative"}),": Team members can share and build upon each other's NLP research and development"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Whether you're building intelligent chatbots, analyzing customer feedback, or extracting insights from unstructured text, the MLflow-spaCy integration provides the foundation for organized, reproducible, and scalable NLP development that grows with your ambitions from prototype to production-scale deployment."})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);