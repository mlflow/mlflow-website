"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9428],{16734:(e,n,t)=>{t.d(n,{d:()=>r});var s=t(58069);const i="codeBlock_oJcR";var a=t(74848);const r=e=>{let{children:n,executionCount:t}=e;return(0,a.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,a.jsx)(s.A,{className:i,language:"python",children:n})})}},20723:(e,n,t)=>{t.d(n,{O:()=>a});var s=t(96540),i=t(74848);function a(e){let{children:n,href:t}=e;const a=(0,s.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:t})}catch{}const n=await fetch(t),s=await n.blob(),i=window.URL.createObjectURL(s),a=document.createElement("a");a.style.display="none",a.href=i;const r=t.split("/").pop();a.download=r,document.body.appendChild(a),a.click(),window.URL.revokeObjectURL(i),document.body.removeChild(a)}),[t]);return(0,i.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:t,download:!0,onClick:a,children:n})}},61536:(e,n,t)=>{t.d(n,{p:()=>i});var s=t(74848);const i=e=>{let{children:n,isStderr:t}=e;return(0,s.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:n})}},86563:(e,n,t)=>{t.d(n,{Q:()=>i});var s=t(74848);const i=e=>{let{children:n}=e;return(0,s.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:n})}},88994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>f,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"llms/rag/notebooks/mlflow-e2e-evaluation-ipynb","title":"LLM RAG Evaluation with MLflow Example Notebook","description":"Download this notebook","source":"@site/docs/llms/rag/notebooks/mlflow-e2e-evaluation-ipynb.mdx","sourceDirName":"llms/rag/notebooks","slug":"/llms/rag/notebooks/mlflow-e2e-evaluation","permalink":"/docs/latest/llms/rag/notebooks/mlflow-e2e-evaluation","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/rag/notebooks/mlflow-e2e-evaluation.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/rag/notebooks/mlflow-e2e-evaluation.ipynb","slug":"mlflow-e2e-evaluation"}}');var i=t(74848),a=t(28453),r=t(16734),o=t(61536),l=(t(86563),t(20723));const d={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/llms/rag/notebooks/mlflow-e2e-evaluation.ipynb",slug:"mlflow-e2e-evaluation"},c="LLM RAG Evaluation with MLflow Example Notebook",h={},u=[{value:"What You Will Learn:",id:"what-you-will-learn",level:3},{value:"Set-up Databricks Workspace Secrets",id:"set-up-databricks-workspace-secrets",level:3},{value:"Create and Test Endpoint on MLflow for OpenAI",id:"create-and-test-endpoint-on-mlflow-for-openai",level:3},{value:"Create RAG POC with LangChain and log with MLflow",id:"create-rag-poc-with-langchain-and-log-with-mlflow",level:3},{value:"Evaluate the Vector Database and Retrieval using <code>mlflow.evaluate()</code>",id:"evaluate-the-vector-database-and-retrieval-using-mlflowevaluate",level:3},{value:"Create an eval dataset (Golden Dataset)",id:"create-an-eval-dataset-golden-dataset",level:4},{value:"Evaluating the Embedding Model with MLflow",id:"evaluating-the-embedding-model-with-mlflow",level:3},{value:"Creating Evaluation Data",id:"creating-evaluation-data",level:4},{value:"The <code>evaluate_embedding</code> Function",id:"the-evaluate_embedding-function",level:4},{value:"MLflow Evaluation",id:"mlflow-evaluation",level:4},{value:"Further Evaluation with Metrics",id:"further-evaluation-with-metrics",level:4},{value:"Evaluate different Top K strategy with MLflow",id:"evaluate-different-top-k-strategy-with-mlflow",level:3},{value:"Evaluate the Chunking Strategy with MLflow",id:"evaluate-the-chunking-strategy-with-mlflow",level:3},{value:"Importance of Chunking:",id:"importance-of-chunking",level:4},{value:"Evaluating Different Chunk Sizes:",id:"evaluating-different-chunk-sizes",level:4},{value:"Evaluate the RAG system using <code>mlflow.evaluate()</code>",id:"evaluate-the-rag-system-using-mlflowevaluate",level:3},{value:"Relevance Metric:",id:"relevance-metric",level:4},{value:"Latency:",id:"latency",level:4},{value:"Create an evaluation dataset (Golden Dataset)",id:"create-an-evaluation-dataset-golden-dataset",level:3},{value:"Evaluate using LLM as a Judge and Basic Metrics",id:"evaluate-using-llm-as-a-judge-and-basic-metrics",level:3},{value:"Key Steps in the Evaluation:",id:"key-steps-in-the-evaluation",level:4}];function m(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"llm-rag-evaluation-with-mlflow-example-notebook",children:"LLM RAG Evaluation with MLflow Example Notebook"})}),"\n",(0,i.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/llms/rag/notebooks/mlflow-e2e-evaluation.ipynb",children:"Download this notebook"}),"\n",(0,i.jsx)(n.p,{children:"Welcome to this comprehensive tutorial on evaluating Retrieval-Augmented Generation (RAG) systems using MLflow. This tutorial is designed to guide you through the intricacies of assessing various RAG systems, focusing on how they can be effectively integrated and evaluated in a real-world context. Whether you are a data scientist, a machine learning engineer, or simply an enthusiast in the field of AI, this tutorial offers valuable insights and practical knowledge."}),"\n",(0,i.jsx)(n.h3,{id:"what-you-will-learn",children:"What You Will Learn:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Setting Up the Environment"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learn how to set up your development environment with all the necessary tools and libraries, including MLflow, OpenAI, ChromaDB, LangChain, and more. This section ensures you have everything you need to start working with RAG systems."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Understanding RAG Systems"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Delve into the concept of Retrieval-Augmented Generation and its significance in modern AI applications. Understand how RAG systems leverage both retrieval and generation capabilities to provide accurate and contextually relevant responses."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Securely Managing API Keys with Databricks Secrets"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Explore the best practices for securely managing API keys using Databricks Secrets. This part is crucial for ensuring the security and integrity of your application."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Deploying and Testing RAG Systems with MLflow"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learn how to create, deploy, and test RAG systems using MLflow. This includes setting up endpoints, deploying models, and querying them to see their responses in action."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Evaluating Performance with MLflow"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Dive into evaluating the RAG systems using MLflow's evaluation tools. Understand how to use metrics like relevance and latency to assess the performance of your RAG system."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Experimenting with Chunking Strategies"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Experiment with different text chunking strategies to optimize the performance of RAG systems. Understand how the size of text chunks affects retrieval accuracy and system responsiveness."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Creating and Using Evaluation Datasets"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learn how to create and utilize evaluation datasets (Golden Datasets) to effectively assess the performance of your RAG system."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Combining Retrieval and Generation for Question Answering"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gain insights into how retrieval and generation components work together in a RAG system to answer questions based on a given context or documentation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By the end of this tutorial, you will have a thorough understanding of how to evaluate and optimize RAG systems using MLflow. You will be equipped with the knowledge to deploy, test, and refine RAG systems, making them suitable for various practical applications. This tutorial is your stepping stone into the world of advanced AI model evaluation and deployment."}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"%pip install mlflow>=2.8.1\n%pip install openai\n%pip install chromadb==0.4.15\n%pip install langchain==0.0.348\n%pip install tiktoken\n%pip install 'mlflow[genai]'\n%pip install databricks-sdk --upgrade"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"dbutils.library.restartPython()  # noqa: F821"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"import ast\nimport os\n\nimport chromadb\nimport pandas as pd\nfrom langchain.chains import RetrievalQA\nfrom langchain.document_loaders import WebBaseLoader\nfrom langchain.embeddings.databricks import DatabricksEmbeddings\nfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddings\nfrom langchain.llms import Databricks\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\n\nimport mlflow\nimport mlflow.deployments\nfrom mlflow.deployments import set_deployments_target\nfrom mlflow.metrics.genai.metric_definitions import relevance"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"# check mlflow version\nmlflow.__version__"}),"\n",(0,i.jsx)(o.p,{children:"'2.9.1'"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"# check chroma version\nchromadb.__version__"}),"\n",(0,i.jsx)(o.p,{children:"'0.4.18'"}),"\n",(0,i.jsx)(n.h3,{id:"set-up-databricks-workspace-secrets",children:"Set-up Databricks Workspace Secrets"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use the secrets that are defined within this notebook, ensure that they are set via following the ",(0,i.jsx)(n.a,{href:"https://docs.databricks.com/en/security/secrets/secrets.html",children:"guide to Databricks Secrets here"}),". It is highly recommended to utilize the ",(0,i.jsx)(n.a,{href:"https://docs.databricks.com/en/dev-tools/cli/index.html",children:"Databricks CLI"})," to set secrets within your workspace for a secure experience."]}),"\n",(0,i.jsx)(n.p,{children:"In order to safely store and access your API KEY for Azure OpenAI, ensure that you are setting the following when registering your secret:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"KEY_NAME"}),": The name that you will be setting for your Azure OpenAI Key"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SCOPE_NAME"}),": The referenced scope that your secret will reside in, within Databricks Secrets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OPENAI_API_KEY"}),": Your Azure OpenAI Key"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As an example, you would set these keys through a terminal as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'    databricks secrets put-secret "<SCOPE_NAME>" "<KEY_NAME>" --string-value "<OPENAI_API_KEY>"\n'})}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"# Set your Scope and Key Names that you used when registering your API KEY from the Databricks CLI\n# Do not put your OpenAI API Key in the notebook!\nSCOPE_NAME = ...\nKEY_NAME = ..."}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'os.environ["OPENAI_API_KEY"] = dbutils.secrets.get(scope=SCOPE_NAME, key=KEY_NAME)  # noqa: F821\nos.environ["OPENAI_API_TYPE"] = "azure"\nos.environ["OPENAI_API_VERSION"] = "2023-05-15"\n# Ensure that you set the name of your OPEN_API_BASE value to the name of your OpenAI instance on Azure\nos.environ["OPENAI_API_BASE"] = "https://<NAME_OF_YOUR_INSTANCE>.openai.azure.com/"  # replace this!\nos.environ["OPENAI_DEPLOYMENT_NAME"] = "gpt-4o-mini"\nos.environ["OPENAI_ENGINE"] = "gpt-4o-mini"'}),"\n",(0,i.jsx)(n.h3,{id:"create-and-test-endpoint-on-mlflow-for-openai",children:"Create and Test Endpoint on MLflow for OpenAI"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'client = mlflow.deployments.get_deploy_client("databricks")\n\nendpoint_name = "<your-endpoint-name>"  # replace this!\nclient.create_endpoint(\n  name=endpoint_name,\n  config={\n      "served_entities": [\n          {\n              "name": "test-gpt",  # Provide a unique identifying name for your deployments endpoint\n              "external_model": {\n                  "name": "gpt-4o-mini",\n                  "provider": "openai",\n                  "task": "llm/v1/completions",\n                  "openai_config": {\n                      "openai_api_type": "azure",\n                      # replace with your own secrets, for reference see https://docs.databricks.com/en/security/secrets/secrets.html\n                      "openai_api_key": "{{secrets/scope/openai_api_key}}",\n                      "openai_api_base": "{{secrets/scope/openai_api_base}}",\n                      "openai_deployment_name": "gpt-4o-mini",\n                      "openai_api_version": "2023-05-15",\n                  },\n              },\n          }\n      ],\n  },\n)'}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'print(\n  client.predict(\n      endpoint=endpoint_name,\n      inputs={\n          "prompt": "How is Pi calculated? Be very concise.",\n          "max_tokens": 100,\n      },\n  )\n)'}),"\n",(0,i.jsx)(n.h3,{id:"create-rag-poc-with-langchain-and-log-with-mlflow",children:"Create RAG POC with LangChain and log with MLflow"}),"\n",(0,i.jsx)(n.p,{children:"Use Langchain and Chroma to create a RAG system that answers questions based on the MLflow documentation."}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'loader = WebBaseLoader(\n  [\n      "https://mlflow.org/docs/latest/index.html",\n      "https://mlflow.org/docs/latest/tracking/autolog.html",\n      "https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html",\n      "https://mlflow.org/docs/latest/python_api/mlflow.deployments.html",\n  ]\n)\n\ndocuments = loader.load()\nCHUNK_SIZE = 1000\ntext_splitter = CharacterTextSplitter(chunk_size=CHUNK_SIZE, chunk_overlap=0)\ntexts = text_splitter.split_documents(documents)\n\nllm = Databricks(\n  endpoint_name="<your-endpoint-name>",  # replace this!\n  extra_params={\n      "temperature": 0.1,\n      "top_p": 0.1,\n      "max_tokens": 500,\n  },  # parameters used in AI Playground\n)\n\n\n# create the embedding function using Databricks Foundation Model APIs\nembedding_function = DatabricksEmbeddings(endpoint="databricks-bge-large-en")\ndocsearch = Chroma.from_documents(texts, embedding_function)\n\nqa = RetrievalQA.from_chain_type(\n  llm=llm,\n  chain_type="stuff",\n  retriever=docsearch.as_retriever(fetch_k=3),\n  return_source_documents=True,\n)'}),"\n",(0,i.jsxs)(n.h3,{id:"evaluate-the-vector-database-and-retrieval-using-mlflowevaluate",children:["Evaluate the Vector Database and Retrieval using ",(0,i.jsx)(n.code,{children:"mlflow.evaluate()"})]}),"\n",(0,i.jsx)(n.h4,{id:"create-an-eval-dataset-golden-dataset",children:"Create an eval dataset (Golden Dataset)"}),"\n",(0,i.jsxs)(n.p,{children:["We can ",(0,i.jsx)(n.a,{href:"https://mlflow.org/docs/latest/llms/rag/notebooks/question-generation-retrieval-evaluation.html",children:"leveraging the power of an LLM to generate synthetic data for testing"}),", offering a creative and efficient alternative. To our readers and customers, we emphasize the importance of crafting a dataset that mirrors the expected inputs and outputs of your RAG application. It's a journey worth taking for the incredible insights you'll gain!"]}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'EVALUATION_DATASET_PATH = "https://raw.githubusercontent.com/mlflow/mlflow/master/examples/llms/RAG/static_evaluation_dataset.csv"\n\nsynthetic_eval_data = pd.read_csv(EVALUATION_DATASET_PATH)\n\n# Load the static evaluation dataset from disk and deserialize the source and retrieved doc ids\nsynthetic_eval_data["source"] = synthetic_eval_data["source"].apply(ast.literal_eval)\nsynthetic_eval_data["retrieved_doc_ids"] = synthetic_eval_data["retrieved_doc_ids"].apply(\n  ast.literal_eval\n)'}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:"display(synthetic_eval_data)"}),"\n",(0,i.jsx)(n.h3,{id:"evaluating-the-embedding-model-with-mlflow",children:"Evaluating the Embedding Model with MLflow"}),"\n",(0,i.jsx)(n.p,{children:"In this part of the tutorial, we focus on evaluating the embedding model's performance in the context of a retrieval system. The process involves a series of steps to assess how effectively the model can retrieve relevant documents based on given questions."}),"\n",(0,i.jsx)(n.h4,{id:"creating-evaluation-data",children:"Creating Evaluation Data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We start by defining a set of questions and their corresponding source URLs. This ",(0,i.jsx)(n.code,{children:"eval_data"})," DataFrame acts as our evaluation dataset, allowing us to test the model's ability to link questions to the correct source documents."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"the-evaluate_embedding-function",children:["The ",(0,i.jsx)(n.code,{children:"evaluate_embedding"})," Function"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"evaluate_embedding"})," function is designed to assess the performance of a given embedding function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chunking Strategy"}),": The function begins by splitting a list of documents into chunks using a ",(0,i.jsx)(n.code,{children:"CharacterTextSplitter"}),". The size of these chunks is crucial, as it can influence the retrieval accuracy."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retriever Initialization"}),": We then use ",(0,i.jsx)(n.code,{children:"Chroma.from_documents"})," to create a retriever with the specified embedding function. This retriever is responsible for finding documents relevant to a given query."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retrieval Process"}),": The function defines a ",(0,i.jsx)(n.code,{children:"retriever_model_function"})," that applies the retriever to each question in the evaluation dataset. It retrieves document IDs that the model finds most relevant for each question."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"mlflow-evaluation",children:"MLflow Evaluation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["With ",(0,i.jsx)(n.code,{children:"mlflow.start_run()"}),", we initiate an evaluation run. ",(0,i.jsx)(n.code,{children:"mlflow.evaluate"})," is then called to evaluate our retriever model function against the evaluation dataset."]}),"\n",(0,i.jsx)(n.li,{children:"We use the default evaluator with specified targets to assess the model's performance."}),"\n",(0,i.jsxs)(n.li,{children:["The results of this evaluation, stored in ",(0,i.jsx)(n.code,{children:"eval_results_of_retriever_df_bge"}),", are displayed, providing insights into the effectiveness of the embedding model in document retrieval."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"further-evaluation-with-metrics",children:"Further Evaluation with Metrics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Additionally, we perform a more detailed evaluation using various metrics like precision, recall, and NDCG at different 'k' values. These metrics offer a deeper understanding of the model's retrieval accuracy and ranking effectiveness."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This evaluation step is integral to understanding the strengths and weaknesses of our embedding model in a real-world RAG system. By analyzing these results, we can make informed decisions about model adjustments or optimizations to improve overall system performance."}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'eval_data = pd.DataFrame(\n  {\n      "question": [\n          "What is MLflow?",\n          "What is Databricks?",\n          "How to serve a model on Databricks?",\n          "How to enable MLflow Autologging for my workspace by default?",\n      ],\n      "source": [\n          ["https://mlflow.org/docs/latest/index.html"],\n          ["https://mlflow.org/docs/latest/getting-started/tracking-server-overview/index.html"],\n          ["https://mlflow.org/docs/latest/python_api/mlflow.deployments.html"],\n          ["https://mlflow.org/docs/latest/tracking/autolog.html"],\n      ],\n  }\n)'}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'def evaluate_embedding(embedding_function):\n  CHUNK_SIZE = 1000\n  list_of_documents = loader.load()\n  text_splitter = CharacterTextSplitter(chunk_size=CHUNK_SIZE, chunk_overlap=0)\n  docs = text_splitter.split_documents(list_of_documents)\n  retriever = Chroma.from_documents(docs, embedding_function).as_retriever()\n\n  def retrieve_doc_ids(question: str) -> list[str]:\n      docs = retriever.get_relevant_documents(question)\n      return [doc.metadata["source"] for doc in docs]\n\n  def retriever_model_function(question_df: pd.DataFrame) -> pd.Series:\n      return question_df["question"].apply(retrieve_doc_ids)\n\n  with mlflow.start_run():\n      return mlflow.evaluate(\n          model=retriever_model_function,\n          data=eval_data,\n          model_type="retriever",\n          targets="source",\n          evaluators="default",\n      )\n\n\nresult1 = evaluate_embedding(DatabricksEmbeddings(endpoint="databricks-bge-large-en"))\n# To validate the results of a different model, comment out the above line and uncomment the below line:\n# result2 = evaluate_embedding(SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2"))\n\neval_results_of_retriever_df_bge = result1.tables["eval_results_table"]\n# To validate the results of a different model, comment out the above line and uncomment the below line:\n# eval_results_of_retriever_df_MiniLM = result2.tables["eval_results_table"]\ndisplay(eval_results_of_retriever_df_bge)'}),"\n",(0,i.jsx)(n.h3,{id:"evaluate-different-top-k-strategy-with-mlflow",children:"Evaluate different Top K strategy with MLflow"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'with mlflow.start_run() as run:\n  evaluate_results = mlflow.evaluate(\n      data=eval_results_of_retriever_df_bge,\n      targets="source",\n      predictions="outputs",\n      evaluators="default",\n      extra_metrics=[\n          mlflow.metrics.precision_at_k(1),\n          mlflow.metrics.precision_at_k(2),\n          mlflow.metrics.precision_at_k(3),\n          mlflow.metrics.recall_at_k(1),\n          mlflow.metrics.recall_at_k(2),\n          mlflow.metrics.recall_at_k(3),\n          mlflow.metrics.ndcg_at_k(1),\n          mlflow.metrics.ndcg_at_k(2),\n          mlflow.metrics.ndcg_at_k(3),\n      ],\n  )\n\ndisplay(evaluate_results.tables["eval_results_table"])'}),"\n",(0,i.jsx)(n.h3,{id:"evaluate-the-chunking-strategy-with-mlflow",children:"Evaluate the Chunking Strategy with MLflow"}),"\n",(0,i.jsx)(n.p,{children:"In the realm of RAG systems, the strategy for dividing text into chunks plays a pivotal role in both retrieval effectiveness and the overall system performance. Let's delve into why and how we evaluate different chunking strategies:"}),"\n",(0,i.jsx)(n.h4,{id:"importance-of-chunking",children:"Importance of Chunking:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Influences Retrieval Accuracy"}),": The way text is chunked can significantly affect the retrieval component of RAG systems. Smaller chunks may lead to more focused and relevant document retrieval, while larger chunks might capture broader context."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Impacts System's Responsiveness"}),": The size of text chunks also influences the speed of document retrieval and processing. Smaller chunks can be processed more quickly but may require the system to evaluate more chunks overall."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"evaluating-different-chunk-sizes",children:"Evaluating Different Chunk Sizes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": By evaluating different chunk sizes, we aim to find an optimal balance between retrieval accuracy and processing efficiency. This involves experimenting with various chunk sizes to see how they impact the system's performance."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Method"}),": We create text chunks of different sizes (e.g., 1000 characters, 2000 characters) and then evaluate how each chunking strategy affects the RAG system. Key aspects to observe include the relevance of retrieved documents and the system's latency."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In this example below, we're using the default evaluation suite to provide a comprehensive adjudication of the quality of the responses to retrieved document contents to determine what the impact to the quality of the returned references are, allowing us to explore and tune the chunk size in order to arrive at a configuration that best handles our suite of test questions."}),"\n",(0,i.jsxs)(n.p,{children:["Note that the embedding model has changed in this next code block. Above, we were using ",(0,i.jsx)(n.code,{children:'DatabricksEmbeddings(endpoint="databricks-bge-large-en")'}),", while now we're evaluating the performance of ",(0,i.jsx)(n.code,{children:'SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")'})]}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'def evaluate_chunk_size(chunk_size):\n  list_of_documents = loader.load()\n  text_splitter = CharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=0)\n  docs = text_splitter.split_documents(list_of_documents)\n  embedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")\n  retriever = Chroma.from_documents(docs, embedding_function).as_retriever()\n\n  def retrieve_doc_ids(question: str) -> list[str]:\n      docs = retriever.get_relevant_documents(question)\n      return [doc.metadata["source"] for doc in docs]\n\n  def retriever_model_function(question_df: pd.DataFrame) -> pd.Series:\n      return question_df["question"].apply(retrieve_doc_ids)\n\n  with mlflow.start_run():\n      return mlflow.evaluate(\n          model=retriever_model_function,\n          data=eval_data,\n          model_type="retriever",\n          targets="source",\n          evaluators="default",\n      )\n\n\nresult1 = evaluate_chunk_size(1000)\nresult2 = evaluate_chunk_size(2000)\n\n\ndisplay(result1.tables["eval_results_table"])\ndisplay(result2.tables["eval_results_table"])'}),"\n",(0,i.jsxs)(n.h3,{id:"evaluate-the-rag-system-using-mlflowevaluate",children:["Evaluate the RAG system using ",(0,i.jsx)(n.code,{children:"mlflow.evaluate()"})]}),"\n",(0,i.jsxs)(n.p,{children:["In this section, we'll delve into evaluating the Retrieval-Augmented Generation (RAG) systems using ",(0,i.jsx)(n.code,{children:"mlflow.evaluate()"}),". This evaluation is crucial for assessing the effectiveness and efficiency of RAG systems in question-answering contexts. We focus on two key metrics: ",(0,i.jsx)(n.code,{children:"relevance_metric"})," and ",(0,i.jsx)(n.code,{children:"latency"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"relevance-metric",children:"Relevance Metric:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What It Measures"}),": The ",(0,i.jsx)(n.code,{children:"relevance_metric"})," quantifies how relevant the RAG system's answers are to the input questions. This metric is critical for understanding the accuracy and contextual appropriateness of the system's responses."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Why It's Important"}),": In question-answering systems, relevance is paramount. The ability of a RAG system to provide accurate and contextually correct answers determines its utility and effectiveness in real-world applications, such as information retrieval and customer support."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tutorial Context"}),": Within our tutorial, we utilize the ",(0,i.jsx)(n.code,{children:"relevance_metric"})," to evaluate the quality of answers provided by the RAG system. It serves as a quantitative measure of the system's content accuracy, reflecting its capability to generate useful and precise responses."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"latency",children:"Latency:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"What It Measures"}),": The ",(0,i.jsx)(n.code,{children:"latency"})," metric captures the response time of the RAG system. It measures the duration taken by the system to generate an answer after receiving a query."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Why It's Important"}),": Response time is a critical factor in user experience. In interactive systems, lower latency leads to a more efficient and satisfying user experience. High latency, conversely, can be detrimental to user satisfaction."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tutorial Context"}),": In this tutorial, we assess the system's efficiency in terms of response time through the ",(0,i.jsx)(n.code,{children:"latency"})," metric. This evaluation is vital for understanding the system's performance in a production environment, where timely responses are as important as their accuracy."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To start with evaluating, we'll create a simple function that runs each input through the RAG chain"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'def model(input_df):\n  return input_df["questions"].map(qa).tolist()'}),"\n",(0,i.jsx)(n.h3,{id:"create-an-evaluation-dataset-golden-dataset",children:"Create an evaluation dataset (Golden Dataset)"}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'eval_df = pd.DataFrame(\n  {\n      "questions": [\n          "What is MLflow?",\n          "What is Databricks?",\n          "How to serve a model on Databricks?",\n          "How to enable MLflow Autologging for my workspace by default?",\n      ],\n  }\n)\ndisplay(eval_df)'}),"\n",(0,i.jsx)(n.h3,{id:"evaluate-using-llm-as-a-judge-and-basic-metrics",children:"Evaluate using LLM as a Judge and Basic Metrics"}),"\n",(0,i.jsx)(n.p,{children:"In this concluding section of the tutorial, we perform a final evaluation of our RAG system using MLflow's powerful evaluation tools. This evaluation is crucial for assessing the performance and efficiency of the question-answering model."}),"\n",(0,i.jsx)(n.h4,{id:"key-steps-in-the-evaluation",children:"Key Steps in the Evaluation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Setting the Deployment Target"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The deployment target is set to Databricks, enabling us to retrieve all endpoints in the Databricks Workspace. This is essential for accessing our deployed models."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Relevance Metric Setup"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We initialize the ",(0,i.jsx)(n.code,{children:"relevance"})," metric using a model hosted on Databricks. This metric assesses how relevant the answers generated by our RAG system are in response to the input questions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Running the Evaluation"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["An MLflow run is initiated, and ",(0,i.jsx)(n.code,{children:"mlflow.evaluate()"})," is called to evaluate our RAG model against the prepared evaluation dataset."]}),"\n",(0,i.jsx)(n.li,{children:'The model is evaluated as a "question-answering" system using default evaluators.'}),"\n",(0,i.jsxs)(n.li,{children:["Additional metrics, including the ",(0,i.jsx)(n.code,{children:"relevance_metric"})," and ",(0,i.jsx)(n.code,{children:"latency"}),", are specified. These metrics provide insights into the relevance of the answers and the response time of the model."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"evaluator_config"})," maps the input questions and context, ensuring the correct evaluation of the RAG system."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Results and Metrics Display"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The results of the evaluation, including key metrics, are displayed in a table format, providing a clear and structured view of the model's performance based on relevance and latency."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This comprehensive evaluation step is vital for understanding the effectiveness and efficiency of our RAG system. By assessing both the relevance of the answers and the latency of the responses, we gain a holistic view of the model's performance, guiding any further optimization or deployment decisions."}),"\n",(0,i.jsx)(r.d,{executionCount:" ",children:'set_deployments_target("databricks")  # To retrieve all endpoint in your Databricks Workspace\n\nrelevance_metric = relevance(\n  model="endpoints:/databricks-llama-2-70b-chat"\n)  # You can also use any model you have hosted on Databricks, models from the Marketplace or models in the Foundation model API\n\nwith mlflow.start_run():\n  results = mlflow.evaluate(\n      model,\n      eval_df,\n      model_type="question-answering",\n      evaluators="default",\n      predictions="result",\n      extra_metrics=[relevance_metric, mlflow.metrics.latency()],\n      evaluator_config={\n          "col_mapping": {\n              "inputs": "questions",\n              "context": "source_documents",\n          }\n      },\n  )\n  print(results.metrics)\n\ndisplay(results.tables["eval_results_table"])'})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);