"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7845],{24806:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_4b_model_alias-edaf3a0ec9b9e8d04509da501b825680.png"},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var t=o(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},31740:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_6_version-47e401356a88066d76485405ae5823e4.png"},34592:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_1_register-a71f2ea36d15265894cf0ea1810dd95f.png"},46677:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_3b_version-8c7b684d255efa3a4f39dbdb2d3321ed.png"},49374:(e,n,o)=>{o.d(n,{B:()=>a});o(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=o(86025),i=o(28774),s=o(74848);const l=e=>{const n=e.split(".");for(let o=n.length;o>0;o--){const e=n.slice(0,o).join(".");if(t[e])return e}return null};function a({fn:e,children:n}){const o=l(e);if(!o)return(0,s.jsx)(s.Fragment,{children:n});const a=(0,r.Ay)(`/${t[o]}#${e}`);return(0,s.jsx)(i.A,{to:a,target:"_blank",children:n??(0,s.jsxs)("code",{children:[e,"()"]})})}},55492:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_3_overview-daec63473b4d7bbf47c559600bf5c35d.png"},66658:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_2_dialog-1ac2c5e115d621eb507274c577093173.png"},80595:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_5_version-9292e6f469bcd5a9f2ed7d20b047d612.png"},86450:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>m,contentTitle:()=>d,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"model-registry/workflow","title":"Model Registry Workflows","description":"This guide walks you through using the MLflow Model Registry via both the UI and API. Learn how to register models, manage versions, apply aliases and tags, and organize your models for deployment.","source":"@site/docs/classic-ml/model-registry/workflow.mdx","sourceDirName":"model-registry","slug":"/model-registry/workflow","permalink":"/docs/latest/ml/model-registry/workflow","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15,"toc_max_heading_level":4,"sidebar_label":"Workflow"},"sidebar":"classicMLSidebar","previous":{"title":"Tutorial","permalink":"/docs/latest/ml/model-registry/tutorial"},"next":{"title":"MLflow Serving","permalink":"/docs/latest/ml/deployment/"}}');var r=o(74848),i=o(28453),s=o(49374),l=o(28774);const a={sidebar_position:15,toc_max_heading_level:4,sidebar_label:"Workflow"},d="Model Registry Workflows",m={},c=[{value:"UI Workflow",id:"ui-workflow",level:2},{value:"Register a Model",id:"register-a-model",level:3},{value:"Find Registered Models",id:"find-registered-models",level:3},{value:"Deploy and Organize Models",id:"deploy-and-organize-models",level:3},{value:"API Workflow",id:"api-workflow",level:2},{value:"Adding an MLflow Model to the Model Registry",id:"adding-an-mlflow-model-to-the-model-registry",level:3},{value:"Databricks Unity Catalog Model Registry",id:"databricks-unity-catalog-model-registry",level:3},{value:"OSS Unity Catalog Model Registry",id:"oss-unity-catalog-model-registry",level:3},{value:"Deploy and Organize Models with Aliases and Tags",id:"deploy-and-organize-models-with-aliases-and-tags",level:3},{value:"Fetching an MLflow Model from the Model Registry",id:"fetching-an-mlflow-model-from-the-model-registry",level:3},{value:"Serving an MLflow Model from Model Registry",id:"serving-an-mlflow-model-from-model-registry",level:3},{value:"Promoting an MLflow Model across environments",id:"promoting-an-mlflow-model-across-environments",level:3},{value:"Adding or Updating an MLflow Model Descriptions",id:"adding-or-updating-an-mlflow-model-descriptions",level:4},{value:"Renaming an MLflow Model",id:"renaming-an-mlflow-model",level:3},{value:"Listing and Searching MLflow Models",id:"listing-and-searching-mlflow-models",level:3},{value:"Deleting MLflow Models",id:"deleting-mlflow-models",level:3},{value:"Registering a Model Saved Outside MLflow",id:"registering-a-model-saved-outside-mlflow",level:4},{value:"Registering an Unsupported Machine Learning Model",id:"registering-an-unsupported-machine-learning-model",level:3},{value:"Deprecated: Using Model Stages",id:"deprecated-using-model-stages",level:3},{value:"Migrating from Stages",id:"migrating-from-stages",level:2},{value:"New model deployment tools",id:"new-model-deployment-tools",level:3},{value:"Migrating models away from stages",id:"migrating-models-away-from-stages",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"model-registry-workflows",children:"Model Registry Workflows"})}),"\n",(0,r.jsx)(n.p,{children:"This guide walks you through using the MLflow Model Registry via both the UI and API. Learn how to register models, manage versions, apply aliases and tags, and organize your models for deployment."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If running your own MLflow server, you must use a database-backed backend store in order to access\nthe model registry via the UI or API. ",(0,r.jsx)(n.a,{href:"/ml/tracking/backend-stores",children:"See here"})," for more information."]})}),"\n",(0,r.jsxs)(n.p,{children:["Before you can add a model to the Model Registry, you must log it using the ",(0,r.jsx)(n.code,{children:"log_model"})," methods\nof the corresponding model flavors. Once a model has been logged, you can add, modify, update,\nor delete the model in the Model Registry through the UI or the API."]}),"\n",(0,r.jsx)(n.h2,{id:"ui-workflow",children:"UI Workflow"}),"\n",(0,r.jsx)(n.p,{children:"This section demonstrates how to use the MLflow Model Registry UI to manage your MLflow models."}),"\n",(0,r.jsx)(n.h3,{id:"register-a-model",children:"Register a Model"}),"\n",(0,r.jsx)(n.p,{children:"Follow the steps below to register your MLflow model in the Model Registry."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Open the details page for the MLflow Run containing the logged MLflow model you'd like to register. Select the model folder containing the intended MLflow model in the\n",(0,r.jsx)(n.strong,{children:"Artifacts"})," section."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(34592).A+"",width:"2711",height:"1599"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Click the ",(0,r.jsx)(n.strong,{children:"Register Model"})," button, which will trigger a form to pop up."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.strong,{children:"Model"}),' dropdown menu on the form, you can either select "Create New Model", which creates a new registered model with your MLflow model as its initial version,\nor select an existing registered model, which registers your model under it as a new version. The screenshot below demonstrates registering the MLflow model to a new registered\nmodel named ',(0,r.jsx)(n.code,{children:'"iris_model_testing"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(66658).A+"",width:"2710",height:"1597"})}),"\n",(0,r.jsx)(n.h3,{id:"find-registered-models",children:"Find Registered Models"}),"\n",(0,r.jsx)(n.p,{children:"After you've registered your models in the Model Registry, you can navigate to them in the following ways."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Navigate to the ",(0,r.jsx)(n.strong,{children:"Registered Models"})," page, which links to your registered models and corresponding model versions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(55492).A+"",width:"2348",height:"1118"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Go to the ",(0,r.jsx)(n.strong,{children:"Artifacts"})," section of your MLflow Runs details page, click the model folder, and then click the model version at the top right to view the version created from that model."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(46677).A+"",width:"2738",height:"468"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deploy-and-organize-models",children:"Deploy and Organize Models"}),"\n",(0,r.jsx)(n.p,{children:"You can deploy and organize your models in the Model Registry using model aliases and tags. To set aliases and tags for model versions in your registered model, navigate to the overview\npage of your registered model, such as the one below."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(86797).A+"",width:"2636",height:"1066"})}),"\n",(0,r.jsxs)(n.p,{children:["You can add or edit aliases and tags for a specific model version by clicking on the corresponding ",(0,r.jsx)(n.code,{children:"Add"})," link or pencil icon in the model version table."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(24806).A+"",width:"2624",height:"1244"})}),"\n",(0,r.jsx)(n.p,{children:"To learn more about a specific model version, navigate to the details page for that model version."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(80595).A+"",width:"2636",height:"1166"})}),"\n",(0,r.jsx)(n.p,{children:"In this page, you can inspect model version details like the model signature, MLflow source run, and creation timestamp. You can also view and configure the version's aliases,\ntags, and description."}),"\n",(0,r.jsx)(n.h2,{id:"api-workflow",children:"API Workflow"}),"\n",(0,r.jsxs)(n.p,{children:["An alternative way to interact with Model Registry is using the ",(0,r.jsx)(l.A,{to:"/api_reference/python_api/index.html",target:"\\_blank",children:"MLflow model flavor"}),"\no ",(0,r.jsx)(l.A,{to:"/api_reference/python_api/mlflow.client.html",target:"\\_blank",children:"MLflow Client Tracking API"})," interface. In particular, you can register a model during an\nMLflow experiment run or after all your experiment runs."]}),"\n",(0,r.jsx)(n.h3,{id:"adding-an-mlflow-model-to-the-model-registry",children:"Adding an MLflow Model to the Model Registry"}),"\n",(0,r.jsxs)(n.p,{children:["There are three programmatic ways to add a model to the registry. First, you can use the ",(0,r.jsx)(n.code,{children:"mlflow.<model_flavor>.log_model()"})," method. For example, in your code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sklearn.datasets import make_regression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\nfrom mlflow.models import infer_signature\n\nwith mlflow.start_run() as run:\n    X, y = make_regression(n_features=4, n_informative=2, random_state=0, shuffle=False)\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42\n    )\n    params = {"max_depth": 2, "random_state": 42}\n    model = RandomForestRegressor(**params)\n    model.fit(X_train, y_train)\n\n    # Infer the model signature\n    y_pred = model.predict(X_test)\n    signature = infer_signature(X_test, y_pred)\n\n    # Log parameters and metrics using the MLflow APIs\n    mlflow.log_params(params)\n    mlflow.log_metrics({"mse": mean_squared_error(y_test, y_pred)})\n\n    # Log the sklearn model and register as version 1\n    mlflow.sklearn.log_model(\n        sk_model=model,\n        name="sklearn-model",\n        signature=signature,\n        registered_model_name="sk-learn-random-forest-reg-model",\n    )\n'})}),"\n",(0,r.jsx)(n.p,{children:"In the above code snippet, if a registered model with the name doesn\u2019t exist, the method registers a new model and creates Version 1.\nIf a registered model with the name exists, the method creates a new model version."}),"\n",(0,r.jsxs)(n.p,{children:["The second way is to use the ",(0,r.jsx)(s.B,{fn:"mlflow.register_model"})," method, after all your experiment runs complete and when you have decided which model is most suitable to add\nto the registry. For this method, you will need the ",(0,r.jsx)(n.code,{children:"run_id"})," as part of the ",(0,r.jsx)(n.code,{children:"runs:URI"})," argument."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = mlflow.register_model(\n    "runs:/d16076a3ec534311817565e6527539c0/sklearn-model", "sk-learn-random-forest-reg"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"If a registered model with the name doesn\u2019t exist, the method registers a new model, creates Version 1, and returns a ModelVersion MLflow object.\nIf a registered model with the name exists, the method creates a new model version and returns the version object."}),"\n",(0,r.jsxs)(n.p,{children:["And finally, you can use the ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.create_registered_model",children:(0,r.jsx)(n.code,{children:"create_registered_model()"})})," to create a new registered model.\nIf the model name exists, this method will throw an ",(0,r.jsx)(s.B,{fn:"mlflow.exceptions.MlflowException",children:"MLflowException"}),"\nbecause creating a new registered model requires a unique name."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\nclient.create_registered_model("sk-learn-random-forest-reg-model")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The method above creates an empty registered model with no version associated. You can use ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.create_model_version",children:(0,r.jsx)(n.code,{children:"create_model_version()"})}),"\nas shown below to create a new version of the model."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'client = MlflowClient()\nresult = client.create_model_version(\n    name="sk-learn-random-forest-reg-model",\n    source="mlruns/0/d16076a3ec534311817565e6527539c0/artifacts/sklearn-model",\n    run_id="d16076a3ec534311817565e6527539c0",\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"databricks-unity-catalog-model-registry",children:"Databricks Unity Catalog Model Registry"}),"\n",(0,r.jsxs)(n.p,{children:["To use the Databricks Unity Catalog model registry, set the MLflow registry URI to ",(0,r.jsx)(n.code,{children:'"databricks-uc"'}),", and define the two environmental variables\n",(0,r.jsx)(n.code,{children:'"DATABRICKS_HOST"'})," and ",(0,r.jsx)(n.code,{children:'"DATABRICKS_TOKEN"'}),". If you are using Databricks OAuth authentication, set the three environmental variables\n",(0,r.jsx)(n.code,{children:'"DATABRICKS_HOST"'}),", ",(0,r.jsx)(n.code,{children:'"DATABRICKS_CLIENT_ID"'})," and ",(0,r.jsx)(n.code,{children:'"DATABRICKS_CLIENT_SECRET"'}),". If you have configured your access auth within the\n",(0,r.jsx)(n.code,{children:"'~/.databrickscfg'"})," file, then you don't need to set above environmental variables. Instead, you can set the MLflow registry URI to\n",(0,r.jsx)(n.code,{children:'"databricks-uc://{profile}"'}),", the ",(0,r.jsx)(n.code,{children:"'{profile}'"})," part being the profile name in your ",(0,r.jsx)(n.code,{children:"'~/.databrickscfg'"})," configuration file. For details\nof Databricks authentication types, please refer to ",(0,r.jsx)(n.a,{href:"https://docs.databricks.com/en/dev-tools/auth/index.html#unified-auth",children:"this document"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Databricks unity catalog model registry by Databricks shard token"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\nmlflow.set_registry_uri("databricks-uc")\nos.environ["DATABRICKS_HOST"] = "<your Databricks shard URI>"\nos.environ["DATABRICKS_TOKEN"] = "<your Databricks shard access token>"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Databricks unity catalog model registry by Databricks OAuth authentication"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\nmlflow.set_registry_uri("databricks-uc")\nos.environ["DATABRICKS_HOST"] = "<your Databricks shard URI>"\nos.environ["DATABRICKS_CLIENT_ID"] = "<your Databricks oauth client ID>"\nos.environ["DATABRICKS_CLIENT_SECRET"] = "<your Databricks oauth client secret>"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Databricks unity catalog model registry with '~/.databrickscfg' configuration file"})}),"\n",(0,r.jsx)(n.p,{children:"Assuming you have configured local '~/.databrickscfg' file with a section like:"}),"\n",(0,r.jsxs)(n.p,{children:["[my-databricks-shard1]",(0,r.jsx)(n.br,{}),"\n","host = <your Databricks shard URI>",(0,r.jsx)(n.br,{}),"\n","token = <your Databricks shard access token>"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\nmlflow.set_registry_uri("databricks-uc://my-databricks-shard1")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"oss-unity-catalog-model-registry",children:"OSS Unity Catalog Model Registry"}),"\n",(0,r.jsxs)(n.p,{children:["To use an ",(0,r.jsx)(n.a,{href:"https://www.unitycatalog.io/",children:"OSS Unity Catalog"})," server as your MLflow model registry, specify the UC server address in the\nMLflow registry URI in the format ",(0,r.jsx)(n.code,{children:'"uc:http://localhost:8080"'}),". If your unity catalog server is configured to use authentication,\nset the environmental variable ",(0,r.jsx)(n.code,{children:'"MLFLOW_UC_OSS_TOKEN"'}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use the OSS unity catalog model registry using a bearer token"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\nmlflow.set_registry_uri("uc:http://localhost:8080")\n# Set this environment variable for MLflow to use your UC OSS token\nos.environ["MLFLOW_UC_OSS_TOKEN"] = "<your OSS UC access token>"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deploy-and-organize-models-with-aliases-and-tags",children:"Deploy and Organize Models with Aliases and Tags"}),"\n",(0,r.jsx)(n.p,{children:"Model aliases and tags help you deploy and organize your models in the Model Registry."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set and delete aliases on models"})}),"\n",(0,r.jsx)(n.p,{children:"To set, update, and delete aliases using the MLflow Client API, see the examples below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# create "champion" alias for version 1 of model "example-model"\nclient.set_registered_model_alias("example-model", "champion", 1)\n\n# reassign the "Champion" alias to version 2\nclient.set_registered_model_alias("example-model", "Champion", 2)\n\n# get a model version by alias\nclient.get_model_version_by_alias("example-model", "Champion")\n\n# delete the alias\nclient.delete_registered_model_alias("example-model", "Champion")\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set and delete tags on models"})}),"\n",(0,r.jsx)(n.p,{children:"To set and delete tags using the MLflow Client API, see the examples below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Set registered model tag\nclient.set_registered_model_tag("example-model", "task", "classification")\n\n# Delete registered model tag\nclient.delete_registered_model_tag("example-model", "task")\n\n# Set model version tag\nclient.set_model_version_tag("example-model", "1", "validation_status", "approved")\n\n# Delete model version tag\nclient.delete_model_version_tag("example-model", "1", "validation_status")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For more details on alias and tag client APIs, see the ",(0,r.jsx)(s.B,{fn:"mlflow.client",children:(0,r.jsx)(n.code,{children:"mlflow.client"})})," API documentation."]}),"\n",(0,r.jsx)(n.h3,{id:"fetching-an-mlflow-model-from-the-model-registry",children:"Fetching an MLflow Model from the Model Registry"}),"\n",(0,r.jsxs)(n.p,{children:["After you have registered an MLflow model, you can fetch that model using ",(0,r.jsx)(n.code,{children:"mlflow.<model_flavor>.load_model()"}),", or more\ngenerally, ",(0,r.jsx)(s.B,{fn:"mlflow.pyfunc.load_model",children:(0,r.jsx)(n.code,{children:"load_model()"})}),". You can use the loaded model for one off predictions or\nin inference workloads such as batch inference."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fetch a specific model version"})}),"\n",(0,r.jsx)(n.p,{children:"To fetch a specific model version, just supply that version number as part of the model URI."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow.pyfunc\n\nmodel_name = "sk-learn-random-forest-reg-model"\nmodel_version = 1\n\nmodel = mlflow.pyfunc.load_model(model_uri=f"models:/{model_name}/{model_version}")\n\nmodel.predict(data)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fetch a model version by alias"})}),"\n",(0,r.jsx)(n.p,{children:"To fetch a model version by alias, specify the model alias in the model URI, and it will fetch the model version currently under it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow.pyfunc\n\nmodel_name = "sk-learn-random-forest-reg-model"\nalias = "champion"\n\nchampion_version = mlflow.pyfunc.load_model(f"models:/{model_name}@{alias}")\n\nchampion_version.predict(data)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note that model alias assignments can be updated independently of your production code. If the ",(0,r.jsx)(n.code,{children:"champion"})," alias in the snippet above\nis reassigned to a new model version in the Model Registry, the next execution of this snippet will automatically pick up the new model\nversion. This allows you to decouple model deployments from your inference workloads."]}),"\n",(0,r.jsx)(n.h3,{id:"serving-an-mlflow-model-from-model-registry",children:"Serving an MLflow Model from Model Registry"}),"\n",(0,r.jsx)(n.p,{children:"After you have registered an MLflow model, you can serve the model as a service on your host."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env sh\n\n# Set environment variable for the tracking URL where the Model Registry resides\nexport MLFLOW_TRACKING_URI=http://localhost:5000\n\n# Serve the production model from the model registry\nmlflow models serve -m "models:/sk-learn-random-forest-reg-model@champion"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"promoting-an-mlflow-model-across-environments",children:"Promoting an MLflow Model across environments"}),"\n",(0,r.jsxs)(n.p,{children:["In mature DevOps and MLOps workflows, organizations use separate environments (typically, dev,\nstaging, and prod) with access controls to enable quick development without compromising stability\nin production. In MLflow, you can use registered models and ",(0,r.jsx)(n.a,{href:"/ml/auth",children:"MLflow Authentication"})," to\nexpress access-controlled environments for your MLflow models. For example, you can create registered\nmodels corresponding to each combination of environment and business problem (e.g.\n",(0,r.jsx)(n.code,{children:"prod.ml_team.revenue_forecasting"}),", ",(0,r.jsx)(n.code,{children:"dev.ml_team.revenue_forecasting"}),") and configure permissions\naccordingly. As you iterate on MLflow models for your business problem, you can promote them\nthrough the various environments for continuous integration and deployment."]}),"\n",(0,r.jsx)(n.p,{children:"For mature production-grade setups, we recommend setting up automated workflows that train and register\nmodels in each environment. To productionize the latest iteration on a business problem, promote your\nmachine learning code across environments via source control and CI/CD systems."}),"\n",(0,r.jsxs)(n.p,{children:["For simple model deployment use cases, you can register your trained MLflow Model to a dev environment\nregistered model as the latest model version and then use ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.copy_model_version",children:(0,r.jsx)(n.code,{children:"copy_model_version()"})}),"\nto promote it across registered models."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\nclient.copy_model_version(\n    src_model_uri="models:/regression-model-staging@candidate",\n    dst_name="regression-model-production",\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This code snippet copies the model version with the ",(0,r.jsx)(n.code,{children:"candidate"})," alias in the ",(0,r.jsx)(n.code,{children:"regression-model-staging"}),"\nmodel to the ",(0,r.jsx)(n.code,{children:"regression-model-production"})," model as the latest version."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also promote model versions in the UI. To do this, navigate to the model version details page\nand select the ",(0,r.jsx)(n.code,{children:"Promote model"})," button. This opens a modal where you can choose a registered model\nto which the current model version will be copied."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:o(31740).A+"",width:"2438",height:"1360"})}),"\n",(0,r.jsx)(n.h4,{id:"adding-or-updating-an-mlflow-model-descriptions",children:"Adding or Updating an MLflow Model Descriptions"}),"\n",(0,r.jsxs)(n.p,{children:["At any point in a model\u2019s lifecycle development, you can update a model version's description\nusing ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.update_model_version",children:(0,r.jsx)(n.code,{children:"update_model_version()"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'client = MlflowClient()\nclient.update_model_version(\n    name="sk-learn-random-forest-reg-model",\n    version=1,\n    description="This model version is a scikit-learn random forest containing 100 decision trees",\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"renaming-an-mlflow-model",children:"Renaming an MLflow Model"}),"\n",(0,r.jsxs)(n.p,{children:["As well as adding or updating a description of a specific version of the model, you can rename an existing registered model\nusing ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.rename_registered_model",children:(0,r.jsx)(n.code,{children:"rename_registered_model()"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'client = MlflowClient()\nclient.rename_registered_model(\n    name="sk-learn-random-forest-reg-model",\n    new_name="sk-learn-random-forest-reg-model-100",\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"listing-and-searching-mlflow-models",children:"Listing and Searching MLflow Models"}),"\n",(0,r.jsx)(n.admonition,{title:"important",type:"warning",children:(0,r.jsx)(n.p,{children:"When using MLflow \u2265 2.21.0 clients with older Model Registry servers (< 2.21.0), search API behavior may differ from expected results. This version mismatch can cause inconsistent search outcomes or missing results. To ensure consistent behavior, please align MLflow versions by either upgrading your server to MLflow 2.21.0 or newer (recommended) or downgrading your client to match your server version."})}),"\n",(0,r.jsx)(n.p,{children:"You can fetch a list of registered models in the registry with a simple method."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from pprint import pprint\n\nclient = MlflowClient()\nfor rm in client.search_registered_models():\n    pprint(dict(rm), indent=4)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This outputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"{   'creation_timestamp': 1582671933216,\n    'description': None,\n    'last_updated_timestamp': 1582671960712,\n    'latest_versions': [<ModelVersion: creation_timestamp=1582671933246, current_stage='Production', description='A random forest model containing 100 decision trees trained in scikit-learn', last_updated_timestamp=1582671960712, name='sk-learn-random-forest-reg-model', run_id='ae2cc01346de45f79a44a320aab1797b', source='./mlruns/0/ae2cc01346de45f79a44a320aab1797b/artifacts/sklearn-model', status='READY', status_message=None, user_id=None, version=1>,\n                        <ModelVersion: creation_timestamp=1582671960628, current_stage='None', description=None, last_updated_timestamp=1582671960628, name='sk-learn-random-forest-reg-model', run_id='d994f18d09c64c148e62a785052e6723', source='./mlruns/0/d994f18d09c64c148e62a785052e6723/artifacts/sklearn-model', status='READY', status_message=None, user_id=None, version=2>],\n    'name': 'sk-learn-random-forest-reg-model'}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["With hundreds of models, it can be cumbersome to peruse the results returned from this call. A more efficient approach\nwould be to search for a specific model name and list its version details using ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.search_model_versions",children:(0,r.jsx)(n.code,{children:"search_model_versions()"})}),"\nmethod and provide a filter string such as ",(0,r.jsx)(n.code,{children:"\"name='sk-learn-random-forest-reg-model'\""})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"client = MlflowClient()\nfor mv in client.search_model_versions(\"name='sk-learn-random-forest-reg-model'\"):\n    pprint(dict(mv), indent=4)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This outputs:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'{\n    "creation_timestamp": 1582671933246,\n    "current_stage": "Production",\n    "description": "A random forest model containing 100 decision trees "\n    "trained in scikit-learn",\n    "last_updated_timestamp": 1582671960712,\n    "name": "sk-learn-random-forest-reg-model",\n    "run_id": "ae2cc01346de45f79a44a320aab1797b",\n    "source": "./mlruns/0/ae2cc01346de45f79a44a320aab1797b/artifacts/sklearn-model",\n    "status": "READY",\n    "status_message": None,\n    "user_id": None,\n    "version": 1,\n}\n\n{\n    "creation_timestamp": 1582671960628,\n    "current_stage": "None",\n    "description": None,\n    "last_updated_timestamp": 1582671960628,\n    "name": "sk-learn-random-forest-reg-model",\n    "run_id": "d994f18d09c64c148e62a785052e6723",\n    "source": "./mlruns/0/d994f18d09c64c148e62a785052e6723/artifacts/sklearn-model",\n    "status": "READY",\n    "status_message": None,\n    "user_id": None,\n    "version": 2,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"deleting-mlflow-models",children:"Deleting MLflow Models"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Deleting registered models or model versions is irrevocable, so use it judiciously."})}),"\n",(0,r.jsx)(n.p,{children:"You can either delete specific versions of a registered model or you can delete a registered model and all its versions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Delete versions 1,2, and 3 of the model\nclient = MlflowClient()\nversions = [1, 2, 3]\nfor version in versions:\n    client.delete_model_version(\n        name="sk-learn-random-forest-reg-model", version=version\n    )\n\n# Delete a registered model along with all its versions\nclient.delete_registered_model(name="sk-learn-random-forest-reg-model")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["While the above workflow API demonstrates interactions with the Model Registry, two exceptional cases require attention.\nOne is when you have existing ML models saved from training without the use of MLflow. Serialized and persisted on disk\nin sklearn's pickled format, you want to register this model with the Model Registry. The second is when you use\nan ML framework without a built-in MLflow model flavor support, for instance, ",(0,r.jsx)(n.code,{children:"vaderSentiment,"})," and want to register the model."]}),"\n",(0,r.jsx)(n.h4,{id:"registering-a-model-saved-outside-mlflow",children:"Registering a Model Saved Outside MLflow"}),"\n",(0,r.jsx)(n.p,{children:"Not everyone will start their model training with MLflow. So you may have some models trained before the use of MLflow.\nInstead of retraining the models, all you want to do is register your saved models with the Model Registry."}),"\n",(0,r.jsx)(n.p,{children:"This code snippet creates a sklearn model, which we assume that you had created and saved in native pickle format."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The sklearn library and pickle versions with which the model was saved should be compatible with the\ncurrent MLflow supported built-in sklearn model flavor."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import numpy as np\nimport pickle\n\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# source: https://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html\n\n# Load the diabetes dataset\ndiabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\n\n# Use only one feature\ndiabetes_X = diabetes_X[:, np.newaxis, 2]\n\n# Split the data into training/testing sets\ndiabetes_X_train = diabetes_X[:-20]\ndiabetes_X_test = diabetes_X[-20:]\n\n# Split the targets into training/testing sets\ndiabetes_y_train = diabetes_y[:-20]\ndiabetes_y_test = diabetes_y[-20:]\n\n\ndef print_predictions(m, y_pred):\n    # The coefficients\n    print("Coefficients: \\n", m.coef_)\n    # The mean squared error\n    print("Mean squared error: %.2f" % mean_squared_error(diabetes_y_test, y_pred))\n    # The coefficient of determination: 1 is perfect prediction\n    print("Coefficient of determination: %.2f" % r2_score(diabetes_y_test, y_pred))\n\n\n# Create linear regression object\nlr_model = linear_model.LinearRegression()\n\n# Train the model using the training sets\nlr_model.fit(diabetes_X_train, diabetes_y_train)\n\n# Make predictions using the testing set\ndiabetes_y_pred = lr_model.predict(diabetes_X_test)\nprint_predictions(lr_model, diabetes_y_pred)\n\n# save the model in the native sklearn format\nfilename = "lr_model.pkl"\npickle.dump(lr_model, open(filename, "wb"))\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Coefficients:\n[938.23786125]\nMean squared error: 2548.07\nCoefficient of determination: 0.47\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once saved in pickled format, you can load the sklearn model into memory using pickle API and\nregister the loaded model with the Model Registry."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.models import infer_signature\nimport numpy as np\nfrom sklearn import datasets\n\n# load the model into memory\nloaded_model = pickle.load(open(filename, "rb"))\n\n# create a signature for the model based on the input and output data\ndiabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)\ndiabetes_X = diabetes_X[:, np.newaxis, 2]\nsignature = infer_signature(diabetes_X, diabetes_y)\n\n# log and register the model using MLflow scikit-learn API\nmlflow.set_tracking_uri("sqlite:///mlruns.db")\nreg_model_name = "SklearnLinearRegression"\nprint("--")\nmlflow.sklearn.log_model(\n    loaded_model,\n    name="sk_learn",\n    serialization_format="cloudpickle",\n    signature=signature,\n    registered_model_name=reg_model_name,\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--\nSuccessfully registered model 'SklearnLinearRegression'.\n2021/04/02 16:30:57 INFO mlflow.tracking._model_registry.client: Waiting up to 300 seconds for model version to finish creation.\nModel name: SklearnLinearRegression, version 1\nCreated version '1' of model 'SklearnLinearRegression'.\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now, using MLflow fluent APIs, you reload the model from the Model Registry and score."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# load the model from the Model Registry and score\nmodel_uri = f"models:/{reg_model_name}/1"\nloaded_model = mlflow.sklearn.load_model(model_uri)\nprint("--")\n\n# Make predictions using the testing set\ndiabetes_y_pred = loaded_model.predict(diabetes_X_test)\nprint_predictions(loaded_model, diabetes_y_pred)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--\nCoefficients:\n[938.23786125]\nMean squared error: 2548.07\nCoefficient of determination: 0.47\n"})}),"\n",(0,r.jsx)(n.h3,{id:"registering-an-unsupported-machine-learning-model",children:"Registering an Unsupported Machine Learning Model"}),"\n",(0,r.jsxs)(n.p,{children:["In some cases, you might use a machine learning framework without its built-in MLflow Model flavor support.\nFor instance, the ",(0,r.jsx)(n.code,{children:"vaderSentiment"})," library is a standard Natural Language Processing (NLP) library used\nfor sentiment analysis. Since it lacks a built-in MLflow Model flavor, you cannot log or register the model\nusing MLflow Model fluent APIs."]}),"\n",(0,r.jsxs)(n.p,{children:["To work around this problem, you can create an instance of a ",(0,r.jsx)(s.B,{fn:"mlflow.pyfunc",children:(0,r.jsx)(n.code,{children:"mlflow.pyfunc"})}),"\nmodel flavor and embed your NLP model inside it, allowing you to save, log or register the model. Once registered,\nload the model from the Model Registry and score using the ",(0,r.jsx)(l.A,{to:"/api_reference/python_api/mlflow.pyfunc.html#mlflow.pyfunc.PyFuncModel.predict",target:"\\_blank",children:(0,r.jsx)(n.code,{children:"predict"})}),"\nfunction."]}),"\n",(0,r.jsxs)(n.p,{children:["The code sections below demonstrate how to create a ",(0,r.jsx)(n.code,{children:"PythonFuncModel"})," class with a ",(0,r.jsx)(n.code,{children:"vaderSentiment"})," model embedded in it,\nsave, log, register, and load from the Model Registry and score."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To use this example, you will need to ",(0,r.jsx)(n.code,{children:"pip install vaderSentiment"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sys import version_info\nimport cloudpickle\nimport pandas as pd\n\nimport mlflow.pyfunc\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\n#\n# Good and readable paper from the authors of this package\n# http://comp.social.gatech.edu/papers/icwsm14.vader.hutto.pdf\n#\n\nINPUT_TEXTS = [\n    {"text": "This is a bad movie. You don\'t want to see it! :-)"},\n    {"text": "Ricky Gervais is smart, witty, and creative!!!!!! :D"},\n    {"text": "LOL, this guy fell off a chair while sleeping and snoring in a meeting"},\n    {"text": "Men shoots himself while trying to steal a dog, OMG"},\n    {"text": "Yay!! Another good phone interview. I nailed it!!"},\n    {\n        "text": "This is INSANE! I can\'t believe it. How could you do such a horrible thing?"\n    },\n]\n\nPYTHON_VERSION = f"{version_info.major}.{version_info.minor}.{version_info.micro}"\n\n\ndef score_model(model):\n    # Use inference to predict output from the customized PyFunc model\n    for i, text in enumerate(INPUT_TEXTS):\n        text = INPUT_TEXTS[i]["text"]\n        m_input = pd.DataFrame([text])\n        scores = loaded_model.predict(m_input)\n        print(f"<{text}> -- {str(scores[0])}")\n\n\n# Define a class and extend from PythonModel\nclass SocialMediaAnalyserModel(mlflow.pyfunc.PythonModel):\n    def __init__(self):\n        super().__init__()\n        # embed your vader model instance\n        self._analyser = SentimentIntensityAnalyzer()\n\n    # preprocess the input with prediction from the vader sentiment model\n    def _score(self, txt):\n        prediction_scores = self._analyser.polarity_scores(txt)\n        return prediction_scores\n\n    def predict(self, context, model_input, params=None):\n        # Apply the preprocess function from the vader model to score\n        model_output = model_input.apply(lambda col: self._score(col))\n        return model_output\n\n\nmodel_path = "vader"\nreg_model_name = "PyFuncVaderSentiments"\nvader_model = SocialMediaAnalyserModel()\n\n# Set the tracking URI to use local SQLAlchemy db file and start the run\n# Log MLflow entities and save the model\nmlflow.set_tracking_uri("sqlite:///mlruns.db")\n\n# Save the conda environment for this model.\nconda_env = {\n    "channels": ["defaults", "conda-forge"],\n    "dependencies": [f"python={PYTHON_VERSION}", "pip"],\n    "pip": [\n        "mlflow",\n        f"cloudpickle=={cloudpickle.__version__}",\n        "vaderSentiment==3.3.2",\n    ],\n    "name": "mlflow-env",\n}\n\n# Save the model\nwith mlflow.start_run(run_name="Vader Sentiment Analysis") as run:\n    model_path = f"{model_path}-{run.info.run_id}"\n    mlflow.log_param("algorithm", "VADER")\n    mlflow.log_param("total_sentiments", len(INPUT_TEXTS))\n    mlflow.pyfunc.save_model(\n        path=model_path, python_model=vader_model, conda_env=conda_env\n    )\n\n# Use the saved model path to log and register into the model registry\nmlflow.pyfunc.log_model(\n    name=model_path,\n    python_model=vader_model,\n    registered_model_name=reg_model_name,\n    conda_env=conda_env,\n)\n\n# Load the model from the model registry and score\nmodel_uri = f"models:/{reg_model_name}/1"\nloaded_model = mlflow.pyfunc.load_model(model_uri)\nscore_model(loaded_model)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Successfully registered model 'PyFuncVaderSentiments'.\n2021/04/05 10:34:15 INFO mlflow.tracking._model_registry.client: Waiting up to 300 seconds for model version to finish creation.\nCreated version '1' of model 'PyFuncVaderSentiments'.\n\n<This is a bad movie. You don't want to see it! :-)> -- {'neg': 0.307, 'neu': 0.552, 'pos': 0.141, 'compound': -0.4047}\n<Ricky Gervais is smart, witty, and creative!!!!!! :D> -- {'neg': 0.0, 'neu': 0.316, 'pos': 0.684, 'compound': 0.8957}\n<LOL, this guy fell off a chair while sleeping and snoring in a meeting> -- {'neg': 0.0, 'neu': 0.786, 'pos': 0.214, 'compound': 0.5473}\n<Men shoots himself while trying to steal a dog, OMG> -- {'neg': 0.262, 'neu': 0.738, 'pos': 0.0, 'compound': -0.4939}\n<Yay!! Another good phone interview. I nailed it!!> -- {'neg': 0.0, 'neu': 0.446, 'pos': 0.554, 'compound': 0.816}\n<This is INSANE! I can't believe it. How could you do such a horrible thing?> -- {'neg': 0.357, 'neu': 0.643, 'pos': 0.0, 'compound': -0.8034}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"deprecated-using-model-stages",children:"Deprecated: Using Model Stages"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Model Stages are deprecated and will be removed in a future major release. To learn more about this deprecation, see our ",(0,r.jsx)(n.a,{href:"#migrating-from-stages",children:"migration guide"})," below."]})}),"\n",(0,r.jsx)(n.p,{children:"See the sections below on using Model Stages in the MLflow Model Registry."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Transitioning an MLflow Model\u2019s Stage"})}),"\n",(0,r.jsxs)(n.p,{children:["Over the course of the model\u2019s lifecycle, a model evolves\u2014from development to staging to production.\nYou can transition a registered model to one of the stages: ",(0,r.jsx)(n.strong,{children:"Staging"}),", ",(0,r.jsx)(n.strong,{children:"Production"})," or ",(0,r.jsx)(n.strong,{children:"Archived"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'client = MlflowClient()\nclient.transition_model_version_stage(\n    name="sk-learn-random-forest-reg-model", version=3, stage="Production"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The accepted values for <stage> are: Staging|Archived|Production|None."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fetch the latest model version in a specific stage"})}),"\n",(0,r.jsx)(n.p,{children:"To fetch a model version by stage, simply provide the model stage as part of the model URI, and it will fetch the most recent version of the model in that stage."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow.pyfunc\n\nmodel_name = "sk-learn-random-forest-reg-model"\nstage = "Staging"\n\nmodel = mlflow.pyfunc.load_model(model_uri=f"models:/{model_name}/{stage}")\n\nmodel.predict(data)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Archiving an MLflow Model"})}),"\n",(0,r.jsxs)(n.p,{children:["You can move models versions out of a ",(0,r.jsx)(n.strong,{children:"Production"})," stage into an ",(0,r.jsx)(n.strong,{children:"Archived"})," stage.\nAt a later point, if that archived model is not needed, you can delete it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Archive models version 3 from Production into Archived\nclient = MlflowClient()\nclient.transition_model_version_stage(\n    name="sk-learn-random-forest-reg-model", version=3, stage="Archived"\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migrating-from-stages",children:"Migrating from Stages"}),"\n",(0,r.jsx)(n.p,{children:"As of MLflow 2.9.0, Model Stages have been deprecated and will be removed in a future major release.\nThis is the culmination of extensive feedback on the inflexibility of model stages for expressing MLOps\nworkflows, from which we developed and introduced of new tools for managing and deploying models in the\nMLflow Model Registry. Learn more below."}),"\n",(0,r.jsx)(n.h3,{id:"new-model-deployment-tools",children:"New model deployment tools"}),"\n",(0,r.jsxs)(n.p,{children:["Model stages were used to express the lifecycle of MLflow Models for productionization and deployment.\nUsers transitioned model versions through four fixed stages (from ",(0,r.jsx)(n.strong,{children:"none"}),", to ",(0,r.jsx)(n.strong,{children:"staging"}),", to ",(0,r.jsx)(n.strong,{children:"production"}),",\nand then to ",(0,r.jsx)(n.strong,{children:"archived"}),") as they proposed, validated, deployed, and deprecated models for their ML use-cases.\nIn doing so, model registry stages provided labeling and aliasing functionality for the model versions, by\ndenoting the status of a model version in the UI and providing named references to model versions in the code\n(e.g. ",(0,r.jsx)(n.code,{children:"/Staging"})," in the model URI). Model registry stages were also used to denote the environment that the model\nis in, though it was not possible to set up access controls for them."]}),"\n",(0,r.jsxs)(n.p,{children:["To replace and improve upon stages, we elevated ",(0,r.jsx)(n.strong,{children:"model version tags"})," in the UI and introduced ",(0,r.jsx)(n.strong,{children:"model version aliases"}),"\nto provide flexible and powerful ways to label and alias MLflow models in the Model Registry. We also made it\npossible to ",(0,r.jsx)(n.strong,{children:"set up separate environments"})," for your models and configure access controls for each environment."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Model version tags"})}),"\n",(0,r.jsxs)(n.p,{children:["Model version tags can be used to annotate model versions with their status. For example, you could apply a tag\nof key ",(0,r.jsx)(n.code,{children:"validation_status"})," and value ",(0,r.jsx)(n.code,{children:"pending"})," to a model version while it is being validated and then update the tag\nvalue to ",(0,r.jsx)(n.code,{children:"passed"})," when it has passed smoke tests and performance tests."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Model version aliases"})}),"\n",(0,r.jsxs)(n.p,{children:["Model version aliases provide a flexible way to create named references for particular model versions, and are useful\nfor identifying which model version(s) are deployed within an environment. For example, setting a ",(0,r.jsx)(n.strong,{children:"champion"})," alias\non a model version enables you to fetch the model version by that alias via\nthe ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.get_model_version_by_alias",children:(0,r.jsx)(n.code,{children:"get_model_version_by_alias()"})})," client API\nor the model URI ",(0,r.jsx)(n.code,{children:"models:/<registered model name>@champion"}),". Aliases can be reassigned to new model versions via the UI\nand client API. Unlike model registry stages, more than one alias can be applied to any given model version, allowing\nfor easier A/B testing and model rollout."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set up separate environments for models"})}),"\n",(0,r.jsxs)(n.p,{children:["In mature DevOps and MLOps workflows, organizations use separate environments (typically, dev, staging, and prod) with\naccess controls to enable quick development without compromising stability in production. With ",(0,r.jsx)(n.a,{href:"/ml/auth",children:"MLflow Authentication"}),",\nyou can use registered models to express access-controlled environments for your MLflow models. For example, you can create\nregistered models corresponding to each combination of environment and business problem (e.g. ",(0,r.jsx)(n.code,{children:"prod.ml_team.revenue_forecasting"}),",\n",(0,r.jsx)(n.code,{children:"dev.ml_team.revenue_forecasting"}),") and configure permissions accordingly. Automate model retraining against your production\nregistered models, or for simple model deployment use cases, use ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.copy_model_version",children:(0,r.jsx)(n.code,{children:"copy_model_version()"})}),"\nto promote model versions across registered models."]}),"\n",(0,r.jsx)(n.h3,{id:"migrating-models-away-from-stages",children:"Migrating models away from stages"}),"\n",(0,r.jsx)(n.p,{children:"See the information below to learn how to use the new tools for your legacy Model Stage use-cases."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Model environments"})}),"\n",(0,r.jsx)(n.p,{children:"To set up separate environments and permissions for your model versions, create separate registered models:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Given a base name for your model\u2019s use-case, e.g. ",(0,r.jsx)(n.code,{children:"revenue_forecasting"}),", set up various registered models corresponding\nto your environments with different prefixes."]}),"\n",(0,r.jsxs)(n.li,{children:["For example, if you want three separate dev, staging, and production environments, you can set up\n",(0,r.jsx)(n.code,{children:"dev.ml_team.revenue_forecasting"}),", ",(0,r.jsx)(n.code,{children:"staging.ml_team.revenue_forecasting"}),", and ",(0,r.jsx)(n.code,{children:"prod.ml_team.revenue_forecasting"})," registered models."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.a,{href:"/ml/auth",children:"MLflow Authentication"})," to grant appropriate permissions on these models."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Transition models across environments"})}),"\n",(0,r.jsx)(n.p,{children:"Once you have registered models set up for each environment, you can build your MLOps workflows on top of them."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For simple model promotion use cases, you can first register your MLflow models under the dev registered model and then\npromote models across environments using the ",(0,r.jsx)(s.B,{fn:"mlflow.client.MlflowClient.copy_model_version",children:(0,r.jsx)(n.code,{children:"copy_model_version()"})}),"\nclient API."]}),"\n",(0,r.jsx)(n.li,{children:"For more mature production-grade setups, we recommend promoting your ML code (including model training code, inference\ncode, and ML infrastructure as code) across environments. This eliminates the need to transition models across environments.\nDev ML code is experimental and in a dev environment, hence targeting the dev registered model. Before merging developed ML\ncode into your source code repository, your CI stages the code in a staging environment for integration testing (targeting\nthe staging registered model). Post-merge, the ML code is deployed to production for automated retraining (targeting the prod\nregistered model). Such setups enable safe and robust CI/CD of ML systems - including not just model training, but also feature\nengineering, model monitoring, and automated retraining."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Model aliasing"})}),"\n",(0,r.jsxs)(n.p,{children:["To specify (via named references) which model version to deploy to serve traffic within an environment (e.g. production), use ",(0,r.jsx)(n.strong,{children:"model aliases"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Decide on an equivalent model alias for each model registry stage (e.g., ",(0,r.jsx)(n.strong,{children:"champion"})," for the ",(0,r.jsx)(n.strong,{children:"Production"})," stage, to specify\nthe model intended to serve the majority of traffic)"]}),"\n",(0,r.jsx)(n.li,{children:"Assign the chosen alias to the latest model version under each stage. You can use the helper function below for this."}),"\n",(0,r.jsxs)(n.li,{children:["Update ML workflows to target the alias rather than the stage. For example, the model URI ",(0,r.jsx)(n.code,{children:"models:/regression_model/Production"}),"\nwill be replaced by the model URI ",(0,r.jsx)(n.code,{children:"models:/prod.ml_team.regression_model@champion"})," in the production code."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\n# Initialize an MLflow Client\nclient = MlflowClient()\n\n\ndef assign_alias_to_stage(model_name, stage, alias):\n    """\n    Assign an alias to the latest version of a registered model within a specified stage.\n\n    :param model_name: The name of the registered model.\n    :param stage: The stage of the model version for which the alias is to be assigned. Can be\n                "Production", "Staging", "Archived", or "None".\n    :param alias: The alias to assign to the model version.\n    :return: None\n    """\n    latest_mv = client.get_latest_versions(model_name, stages=[stage])[0]\n    client.set_registered_model_alias(model_name, alias, latest_mv.version)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Model status"})}),"\n",(0,r.jsx)(n.p,{children:"To represent and communicate the status of your model versions, use model version tags:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Set tags on model versions to indicate the status of the model."}),"\n",(0,r.jsxs)(n.li,{children:["For example, to indicate the review status of a model version, you can set a tag with key ",(0,r.jsx)(n.code,{children:"validation_status"})," and value ",(0,r.jsx)(n.code,{children:"pending"})," or ",(0,r.jsx)(n.code,{children:"passed"}),"."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},86797:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/oss_registry_4_model-896443ab363865321094350c4f290ce0.png"}}]);