"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8222],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const o={},l=s.createContext(o);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},65702:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"llms/responses-agent-intro/index","title":"ResponsesAgent Introduction","description":"What is a ResponsesAgent?","source":"@site/docs/llms/responses-agent-intro/index.mdx","sourceDirName":"llms/responses-agent-intro","slug":"/llms/responses-agent-intro/","permalink":"/docs/latest/llms/responses-agent-intro/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Production Monitoring","permalink":"/docs/latest/tracing/production"},"next":{"title":"What is ChatModel?","permalink":"/docs/latest/llms/chat-model-intro/"}}');var o=t(74848),l=t(28453),a=t(67756);const i={},r="ResponsesAgent Introduction",p={},c=[{value:"What is a ResponsesAgent?",id:"what-is-a-responsesagent",level:2},{value:"Author a ResponsesAgent",id:"author-a-responsesagent",level:2},{value:"Getting started",id:"getting-started",level:3},{value:"Creating agent output",id:"creating-agent-output",level:3},{value:"Streaming agent output",id:"streaming-agent-output",level:3},{value:"Basic text streaming",id:"basic-text-streaming",level:4},{value:"Tool calling with streaming",id:"tool-calling-with-streaming",level:4},{value:"Log your agent",id:"log-your-agent",level:2},{value:"Testing out your agent",id:"testing-out-your-agent",level:2},{value:"Migrating from <code>ChatAgent</code>",id:"migrating-from-chatagent",level:2},{value:"Standard Text Response",id:"standard-text-response",level:3},{value:"ResponsesAgent",id:"responsesagent",level:4},{value:"ChatAgent",id:"chatagent",level:4},{value:"Tool Calls",id:"tool-calls",level:3},{value:"ResponsesAgent",id:"responsesagent-1",level:4},{value:"ChatAgent",id:"chatagent-1",level:4},{value:"Tool Call Results",id:"tool-call-results",level:3},{value:"ResponsesAgent",id:"responsesagent-2",level:4},{value:"ChatAgent",id:"chatagent-2",level:4},{value:"Tool Definitions",id:"tool-definitions",level:3},{value:"ResponsesAgent",id:"responsesagent-3",level:4},{value:"ChatAgent",id:"chatagent-3",level:4},{value:"Simple Chat Example",id:"simple-chat-example",level:2},{value:"Tool Calling Example",id:"tool-calling-example",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"responsesagent-introduction",children:"ResponsesAgent Introduction"})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-a-responsesagent",children:"What is a ResponsesAgent?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent",children:(0,o.jsx)(n.code,{children:"ResponsesAgent"})})," is a subclass of ",(0,o.jsx)(n.code,{children:"PythonModel"})," that provides a framework-agnostic way to create an agent model. Authoring an agent using ",(0,o.jsx)(n.code,{children:"ResponsesAgent"})," provides the following benefits:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Support for returning multiple output messages, including intermediate outputs from tool-calling"}),"\n",(0,o.jsx)(n.li,{children:"Support for multi-agent scenarios"}),"\n",(0,o.jsx)(n.li,{children:"Ensure compatibility with MLflow logging, tracing, and model serving"}),"\n",(0,o.jsx)(n.li,{children:"Ensure your model is compatible with OpenAI Responses API, making it compatible with OpenAI's responses client and other downstream UIs/applications"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We recommend ",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent",children:(0,o.jsx)(n.code,{children:"ResponsesAgent"})})," instead of ",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ChatModel",children:(0,o.jsx)(n.code,{children:"ChatModel"})})," and ",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ChatAgent",children:(0,o.jsx)(n.code,{children:"ChatAgent"})}),", as it has all the benefits of ",(0,o.jsx)(n.code,{children:"ChatAgent"})," and and supports additional features like annotations."]}),"\n",(0,o.jsx)(n.h2,{id:"author-a-responsesagent",children:"Author a ResponsesAgent"}),"\n",(0,o.jsx)(n.h3,{id:"getting-started",children:"Getting started"}),"\n",(0,o.jsxs)(n.p,{children:["To create your own agent, subclass ",(0,o.jsx)(n.code,{children:"mlflow.pyfunc.ResponsesAgent"})," and implement your agent logic in the ",(0,o.jsx)(n.code,{children:"predict"})," method. The implementation is framework-agnostic, allowing you to use any agent authoring framework. Note that ",(0,o.jsx)(n.code,{children:"pydantic>=2"})," is required to use ResponsesAgent. For example implementations, see the ",(0,o.jsx)(n.a,{href:"#simple-chat-example",children:"simple chat agent"})," and the ",(0,o.jsx)(n.a,{href:"#tool-calling-example",children:"tool calling agent"})," below."]}),"\n",(0,o.jsx)(n.h3,{id:"creating-agent-output",children:"Creating agent output"}),"\n",(0,o.jsxs)(n.p,{children:["When implementing your agent, you'll work with two main output types: ",(0,o.jsx)(a.B,{fn:"mlflow.types.responses.ResponsesAgentResponse",children:(0,o.jsx)(n.code,{children:"ResponsesAgentResponse"})})," and ",(0,o.jsx)(a.B,{fn:"mlflow.types.responses.ResponsesAgentResponse",children:(0,o.jsx)(n.code,{children:"ResponsesAgentStreamEvent"})}),". These are the only pydantic objects you should create directly. The remaining classes in ",(0,o.jsx)(n.code,{children:"mlflow.types.responses_helpers"})," are only for validating dictionaries."]}),"\n",(0,o.jsxs)(n.p,{children:["If you want to return outputs that don't fit into the standard interface, you can use the ",(0,o.jsx)(n.code,{children:"custom_outputs"})," field."]}),"\n",(0,o.jsx)(n.p,{children:"Below are some helper methods you can use to create common outputs within the ResponsesAgent interface:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent.create_text_output_item"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent.create_function_call_item"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent.create_function_call_output_item"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ResponsesAgent.create_text_delta"})," (only for streaming)"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of a complete tool calling sequence using ",(0,o.jsx)(n.code,{children:"ResponsesAgentResponse"})," with a custom output:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.pyfunc import ResponsesAgent\nfrom mlflow.types.responses import ResponsesAgentRequest, ResponsesAgentResponse\n\n\nclass SimpleResponsesAgent(ResponsesAgent):\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict(self, request: ResponsesAgentRequest) -> ResponsesAgentResponse:\n        return ResponsesAgentResponse(\n            output=[\n                self.create_function_call_item(\n                    id="fc_1",\n                    call_id="call_1",\n                    name="python_exec",\n                    arguments=\'{"code":"result = 4 * 3\\\\nprint(result)"}\',\n                ),\n                self.create_function_call_output_item(\n                    call_id="call_1",\n                    output="12\\n",\n                ),\n                self.create_text_output_item(\n                    text="The result of 4 * 3 in Python is 12.",\n                    id="msg_1",\n                ),\n            ],\n            custom_outputs={"key1": "custom-value1"},\n        )\n'})}),"\n",(0,o.jsx)(n.h3,{id:"streaming-agent-output",children:"Streaming agent output"}),"\n",(0,o.jsx)(n.p,{children:"For real-time processing, you can use streaming events instead of returning a complete response. Streaming allows you to send partial results as they become available, which is useful for long-running operations or when you want to show progress to users."}),"\n",(0,o.jsx)(n.h4,{id:"basic-text-streaming",children:"Basic text streaming"}),"\n",(0,o.jsx)(n.p,{children:"To stream text within the ResponsesAgent interface, you should:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["yield ",(0,o.jsx)(n.code,{children:"response.output_text.delta"})," events with the chunks as they become available","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["it must have an ",(0,o.jsx)(n.code,{children:"item_id"})," that corresponds related events to a single output item"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["yield a ",(0,o.jsx)(n.code,{children:"response.output_item.done"})," event to aggregate all chunks"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.types.responses import ResponsesAgentStreamEvent\n\n\nclass SimpleResponsesAgent(ResponsesAgent):\n    # ... continuing from above\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict_stream(\n        self, request: ResponsesAgentRequest\n    ) -> Generator[ResponsesAgentStreamEvent, None, None]:\n        # stream text, all with the same item_id\n        yield ResponsesAgentStreamEvent(\n            **self.create_text_delta(delta="Hello", item_id="msg_1"),\n        )\n        yield ResponsesAgentStreamEvent(\n            **self.create_text_delta(delta="world", item_id="msg_1"),\n        )\n        yield ResponsesAgentStreamEvent(\n            **self.create_text_delta(delta="!", item_id="msg_1"),\n        )\n\n        # the text output item id should be the same\n        # item_id as the streamed text deltas\n        yield ResponsesAgentStreamEvent(\n            type="response.output_item.done",\n            item=self.create_text_output_item(\n                text="Hello world!",\n                id="msg_1",\n            ),\n        )\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tool-calling-with-streaming",children:"Tool calling with streaming"}),"\n",(0,o.jsxs)(n.p,{children:["You can also stream tool calls and their results. Each tool call and its output are sent as separate ",(0,o.jsx)(n.code,{children:"response.output_item.done"})," events. This enables MLflow tracing and makes it easier for clients to reconstruct streamed message history."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.types.responses import ResponsesAgentStreamEvent\n\n\nclass SimpleResponsesAgent(ResponsesAgent):\n    # ... continuing from above\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict_stream(\n        self, request: ResponsesAgentRequest\n    ) -> Generator[ResponsesAgentStreamEvent, None, None]:\n        yield ResponsesAgentStreamEvent(\n            type="response.output_item.done",\n            item=self.create_function_call_item(\n                id="fc_1",\n                call_id="call_1",\n                name="python_exec",\n                arguments=\'{"code":"result = 4 * 3\\\\nprint(result)"}\',\n            ),\n        )\n        yield ResponsesAgentStreamEvent(\n            type="response.output_item.done",\n            item=self.create_function_call_output_item(\n                call_id="call_1",\n                output="12\\n",\n            ),\n        )\n        yield ResponsesAgentStreamEvent(\n            type="response.output_item.done",\n            item=self.create_text_output_item(\n                text="The result of 4 * 3 in Python is 12.",\n                id="msg_1",\n            ),\n        )\n'})}),"\n",(0,o.jsx)(n.h2,{id:"log-your-agent",children:"Log your agent"}),"\n",(0,o.jsxs)(n.p,{children:["Log your agent using the ",(0,o.jsx)(n.a,{href:"/model/models-from-code",children:"Models-from-code"})," approach. This approach is framework-agnostic and supports all authoring frameworks:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'with mlflow.start_run():\n    logged_agent_info = mlflow.pyfunc.log_model(\n        python_model="agent.py",  # replace with your relative path to agent code\n        name="agent",\n    )\n'})}),"\n",(0,o.jsx)(n.p,{children:"For ease of use, MLflow has built in the following features:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Automatic model signature inference","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"An input and output signature that adheres to the ResponsesAgentRequest and ResponsesAgentResponse schemas will be set"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Metadata","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:'{"task": "agent/v1/responses"}'})," will be automatically appended to any metadata that you may pass in when logging the model"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Input Example","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Providing an input example is optional, ",(0,o.jsx)(n.code,{children:"mlflow.types.responses.RESPONSES_AGENT_INPUT_EXAMPLE"})," will be used by default"]}),"\n",(0,o.jsx)(n.li,{children:"If you do provide an input example, ensure it's a dictionary of the ResponsesAgentRequest schema"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"testing-out-your-agent",children:"Testing out your agent"}),"\n",(0,o.jsx)(n.p,{children:"To test out a ResponsesAgent, you can pass a single input dictionary that follows the ResponsesAgentRequest schema both before and after logging it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from mlflow.pyfunc import ResponsesAgent\n\n\nclass MyResponsesAgent(ResponsesAgent):\n    ...\n\n\nresponses_agent = MyResponsesAgent()\nresponses_agent.predict(\n    {\n        "input": [{"role": "user", "content": "what is 4*3 in python"}],\n        "context": {"conversation_id": "123", "user_id": "456"},\n    }\n)\n# ... log responses_agent using code from above\n# load it back from mlflow\nloaded_model = mlflow.pyfunc.load_model(path)\nloaded_model.predict(\n    {\n        "input": [{"role": "user", "content": "what is 4*3 in python"}],\n        "context": {"conversation_id": "123", "user_id": "456"},\n    }\n)\n'})}),"\n",(0,o.jsxs)(n.h2,{id:"migrating-from-chatagent",children:["Migrating from ",(0,o.jsx)(n.code,{children:"ChatAgent"})]}),"\n",(0,o.jsxs)(n.p,{children:["When migrating from ",(0,o.jsx)(n.code,{children:"ChatAgent"})," to ",(0,o.jsx)(n.code,{children:"ResponsesAgent"}),", the primary task involves adapting your message formats from the ChatCompletion API to the Responses API schema. For detailed information about these changes, refer to the OpenAI documentation:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/responses-vs-chat-completions",children:"Responses vs Chat Completions"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://platform.openai.com/docs/api-reference/responses",children:"Responses API Docs"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"If the LLM provider you are using uses chat completions, you can modify the below helper function to convert the output from your ResponsesAgent into chat completions messages to support multi-turn agent chat:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def convert_to_chat_completion_format(message: dict[str, Any]) -> list[dict[str, Any]]:\n    """Convert from ResponsesAgent output to a ChatCompletions compatible list of messages"""\n    msg_type = message.get("type", None)\n    if msg_type == "function_call":\n        return [\n            {\n                "role": "assistant",\n                "content": None,\n                "tool_calls": [\n                    {\n                        "id": message["call_id"],\n                        "type": "function",\n                        "function": {\n                            "arguments": message["arguments"],\n                            "name": message["name"],\n                        },\n                    }\n                ],\n            }\n        ]\n    elif msg_type == "message" and isinstance(message["content"], list):\n        return [\n            {"role": message["role"], "content": content["text"]}\n            for content in message["content"]\n        ]\n    elif msg_type == "function_call_output":\n        return [\n            {\n                "role": "tool",\n                "content": message["output"],\n                "tool_call_id": message["call_id"],\n            }\n        ]\n    compatible_keys = ["role", "content", "name", "tool_calls", "tool_call_id"]\n    return [{k: v for k, v in message.items() if k in compatible_keys}]\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ResponsesAgent"})," interface extends all functionality previously available in ",(0,o.jsx)(a.B,{fn:"mlflow.pyfunc.ChatAgent",children:(0,o.jsx)(n.code,{children:"ChatAgent"})}),", while introducing new features. Below, we outline the key differences in message representation between the two interfaces for common use cases:"]}),"\n",(0,o.jsx)(n.h3,{id:"standard-text-response",children:"Standard Text Response"}),"\n",(0,o.jsx)(n.h4,{id:"responsesagent",children:"ResponsesAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "type": "message",\n  "id": "",\n  "content": [\n    {\n      "annotations": [],\n      "text": "",\n      "type": "output_text"\n    }\n  ],\n  "role": "assistant",\n  "status": "completed"\n}\n\n'})}),"\n",(0,o.jsx)(n.h4,{id:"chatagent",children:"ChatAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "role": "assistant",\n  "content": ""\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"tool-calls",children:"Tool Calls"}),"\n",(0,o.jsx)(n.h4,{id:"responsesagent-1",children:"ResponsesAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "type": "function_call",\n  "id": "fc_1",\n  "arguments": "",\n  "call_id": "call_1",\n  "name": "",\n  "status": "completed"\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"chatagent-1",children:"ChatAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "role": "assistant",\n  "content": "",\n  "tool_calls": [\n    {\n      "id": "call_1",\n      "type": "function",\n      "function": {\n        "name": "",\n        "arguments": ""\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"tool-call-results",children:"Tool Call Results"}),"\n",(0,o.jsx)(n.h4,{id:"responsesagent-2",children:"ResponsesAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "type": "function_call_output",\n  "call_id": "call_1",\n  "output": ""\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"chatagent-2",children:"ChatAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "role": "tool",\n  "content": "12",\n  "tool_call_id": "call_1"\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"tool-definitions",children:"Tool Definitions"}),"\n",(0,o.jsx)(n.h4,{id:"responsesagent-3",children:"ResponsesAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "name": "",\n  "parameters": {},\n  "strict": true,\n  "type": "function",\n  "description": ""\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"chatagent-3",children:"ChatAgent"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "type": "function",\n  "function": {\n    "name": "",\n    "description": "",\n    "parameters": {},\n    "strict": true\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"simple-chat-example",children:"Simple Chat Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of an agent that calls OpenAI's gpt-4o model with a simple tool:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# uncomment below if running inside a jupyter notebook\n# %%writefile agent.py\nimport os\nfrom typing import Generator\n\nimport mlflow\nfrom mlflow.entities.span import SpanType\nfrom mlflow.models import set_model\nfrom mlflow.pyfunc.model import ResponsesAgent\nfrom mlflow.types.responses import (\n    ResponsesAgentRequest,\n    ResponsesAgentResponse,\n    ResponsesAgentStreamEvent,\n)\nfrom openai import OpenAI\n\n\nclass SimpleResponsesAgent(ResponsesAgent):\n    def __init__(self, model: str):\n        self.client = OpenAI()\n        self.model = model\n\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict(self, request: ResponsesAgentRequest) -> ResponsesAgentResponse:\n        response = self.client.responses.create(input=request.input, model=self.model)\n        return ResponsesAgentResponse(**response.to_dict())\n\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict_stream(\n        self, request: ResponsesAgentRequest\n    ) -> Generator[ResponsesAgentStreamEvent, None, None]:\n        for event in self.client.responses.create(\n            input=request.input, stream=True, model=self.model\n        ):\n            yield ResponsesAgentStreamEvent(**event.to_dict())\n\n\nmlflow.openai.autolog()\nagent = SimpleResponsesAgent(model="gpt-4o")\nset_model(agent)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"tool-calling-example",children:"Tool Calling Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's an example of an agent that calls OpenAI's gpt-4o model with a simple tool:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# uncomment below if running inside a jupyter notebook\n# %%writefile agent.py\nimport json\nfrom typing import Any, Callable, Generator\nimport os\nfrom uuid import uuid4\n\nimport backoff\nimport mlflow\nimport openai\nfrom mlflow.entities import SpanType\nfrom mlflow.pyfunc import ResponsesAgent\nfrom mlflow.types.responses import (\n    ResponsesAgentRequest,\n    ResponsesAgentResponse,\n    ResponsesAgentStreamEvent,\n)\nfrom openai import OpenAI\nfrom pydantic import BaseModel\n\n\nclass ToolInfo(BaseModel):\n    """\n    Class representing a tool for the agent.\n    - "name" (str): The name of the tool.\n    - "spec" (dict): JSON description of the tool (matches OpenAI Responses format)\n    - "exec_fn" (Callable): Function that implements the tool logic\n    """\n\n    name: str\n    spec: dict\n    exec_fn: Callable\n\n\nclass ToolCallingAgent(ResponsesAgent):\n    """\n    Class representing a tool-calling Agent\n    """\n\n    def __init__(self, model: str, tools: list[ToolInfo]):\n        """Initializes the ToolCallingAgent with tools."""\n        self.model = model\n        self.client: OpenAI = OpenAI()\n        self._tools_dict = {tool.name: tool for tool in tools}\n\n    def get_tool_specs(self) -> list[dict]:\n        """Returns tool specifications in the format OpenAI expects."""\n        return [tool_info.spec for tool_info in self._tools_dict.values()]\n\n    @mlflow.trace(span_type=SpanType.TOOL)\n    def execute_tool(self, tool_name: str, args: dict) -> Any:\n        """Executes the specified tool with the given arguments."""\n        return self._tools_dict[tool_name].exec_fn(**args)\n\n    @backoff.on_exception(backoff.expo, openai.RateLimitError)\n    @mlflow.trace(span_type=SpanType.LLM)\n    def call_llm(self, input_messages) -> ResponsesAgentStreamEvent:\n        return (\n            self.client.responses.create(\n                model=self.model,\n                input=input_messages,\n                tools=self.get_tool_specs(),\n            )\n            .output[0]\n            .model_dump(exclude_none=True)\n        )\n\n    def handle_tool_call(self, tool_call: dict[str, Any]) -> ResponsesAgentStreamEvent:\n        """\n        Execute tool calls and return a ResponsesAgentStreamEvent w/ tool output\n        """\n        args = json.loads(tool_call["arguments"])\n        result = str(self.execute_tool(tool_name=tool_call["name"], args=args))\n\n        tool_call_output = {\n            "type": "function_call_output",\n            "call_id": tool_call["call_id"],\n            "output": result,\n        }\n        return ResponsesAgentStreamEvent(\n            type="response.output_item.done", item=tool_call_output\n        )\n\n    def call_and_run_tools(\n        self,\n        input_messages,\n        max_iter: int = 10,\n    ) -> Generator[ResponsesAgentStreamEvent, None, None]:\n        for _ in range(max_iter):\n            last_msg = input_messages[-1]\n            if (\n                last_msg.get("type", None) == "message"\n                and last_msg.get("role", None) == "assistant"\n            ):\n                return\n            if last_msg.get("type", None) == "function_call":\n                tool_call_res = self.handle_tool_call(last_msg)\n                input_messages.append(tool_call_res.item)\n                yield tool_call_res\n            else:\n                llm_output = self.call_llm(input_messages=input_messages)\n                input_messages.append(llm_output)\n                yield ResponsesAgentStreamEvent(\n                    type="response.output_item.done",\n                    item=llm_output,\n                )\n\n        yield ResponsesAgentStreamEvent(\n            type="response.output_item.done",\n            item={\n                "id": str(uuid4()),\n                "content": [\n                    {\n                        "type": "output_text",\n                        "text": "Max iterations reached. Stopping.",\n                    }\n                ],\n                "role": "assistant",\n                "type": "message",\n            },\n        )\n\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict(self, request: ResponsesAgentRequest) -> ResponsesAgentResponse:\n        outputs = [\n            event.item\n            for event in self.predict_stream(request)\n            if event.type == "response.output_item.done"\n        ]\n        return ResponsesAgentResponse(\n            output=outputs, custom_outputs=request.custom_inputs\n        )\n\n    @mlflow.trace(span_type=SpanType.AGENT)\n    def predict_stream(\n        self, request: ResponsesAgentRequest\n    ) -> Generator[ResponsesAgentStreamEvent, None, None]:\n        input_messages = [{"role": "system", "content": SYSTEM_PROMPT}] + [\n            i.model_dump() for i in request.input\n        ]\n        yield from self.call_and_run_tools(input_messages=input_messages)\n\n\ntools = [\n    ToolInfo(\n        name="get_weather",\n        spec={\n            "type": "function",\n            "name": "get_weather",\n            "description": "Get current temperature for provided coordinates in celsius.",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "latitude": {"type": "number"},\n                    "longitude": {"type": "number"},\n                },\n                "required": ["latitude", "longitude"],\n                "additionalProperties": False,\n            },\n            "strict": True,\n        },\n        exec_fn=lambda latitude, longitude: 70,  # dummy tool implementation\n    )\n]\n\nos.environ["OPENAI_API_KEY"] = "your OpenAI API key"\n\nSYSTEM_PROMPT = "You are a helpful assistant that can call tools to get information."\nmlflow.openai.autolog()\nAGENT = ToolCallingAgent(model="gpt-4o", tools=tools)\nmlflow.models.set_model(AGENT)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},67756:(e,n,t)=>{t.d(n,{B:()=>r});t(96540);const s=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(29030),l=t(56289),a=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(s[e])return e}return null};function r(e){let{fn:n,children:t}=e;const r=i(n);if(!r)return(0,a.jsx)(a.Fragment,{children:t});const p=(0,o.Ay)(`/${s[r]}#${n}`);return(0,a.jsx)(l.A,{to:p,target:"_blank",children:t??(0,a.jsxs)("code",{children:[n,"()"]})})}}}]);