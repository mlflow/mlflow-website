"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5380],{25454:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/logged_models-dbdb76980204a94fa9ab415d4051ef52.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(96540);const r={},l=a.createContext(r);function o(e){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(l.Provider,{value:t},e.children)}},49374:(e,t,n)=>{n.d(t,{B:()=>s});n(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=n(86025),l=n(28774),o=n(74848);const i=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(a[e])return e}return null};function s({fn:e,children:t}){const n=i(e);if(!n)return(0,o.jsx)(o.Fragment,{children:t});const s=(0,r.Ay)(`/${a[n]}#${e}`);return(0,o.jsx)(l.A,{to:s,target:"_blank",children:t??(0,o.jsxs)("code",{children:[e,"()"]})})}},51562:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/model_artifacts-d61ee9525cd9dd9b7d7ecdce43bb98d3.png"},54329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"getting-started/deep-learning","title":"Deep Learning Quickstart","description":"In this example, we demonstrate how to use MLflow 3 to track and evaluate deep learning models with a PyTorch-based Iris classifier.","source":"@site/docs/classic-ml/getting-started/deep-learning.mdx","sourceDirName":"getting-started","slug":"/getting-started/deep-learning","permalink":"/docs/latest/ml/getting-started/deep-learning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"toc_max_heading_level":4,"sidebar_label":"Deep Learning Quickstart"},"sidebar":"classicMLSidebar","previous":{"title":"Hyperparameter Tuning & Deployment Quickstart","permalink":"/docs/latest/ml/getting-started/hyperparameter-tuning/"},"next":{"title":"Model Registry Quickstart","permalink":"/docs/latest/ml/getting-started/registering-first-model/"}}');var r=n(74848),l=n(28453),o=n(49374);const i={sidebar_position:2,toc_max_heading_level:4,sidebar_label:"Deep Learning Quickstart"},s="Deep Learning Quickstart",m={},c=[];function p(e){const t={code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"deep-learning-quickstart",children:"Deep Learning Quickstart"})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, we demonstrate how to use MLflow 3 to track and evaluate deep learning models with a PyTorch-based Iris classifier.\nThe example showcases how to ",(0,r.jsx)(t.strong,{children:"log checkpoints, link metrics to datasets, and rank models"})," based on performance metrics.\nWith ",(0,r.jsx)(o.B,{fn:"mlflow.search_logged_models"})," you can easily find the best model based on the metric value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import pandas as pd\nimport torch\nimport torch.nn as nn\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.pytorch\nfrom mlflow.entities import Dataset\n\n\n# Helper function to prepare data\ndef prepare_data(df):\n    X = torch.tensor(df.iloc[:, :-1].values, dtype=torch.float32)\n    y = torch.tensor(df.iloc[:, -1].values, dtype=torch.long)\n    return X, y\n\n\n# Helper function to compute accuracy\ndef compute_accuracy(model, X, y):\n    with torch.no_grad():\n        outputs = model(X)\n        _, predicted = torch.max(outputs, 1)\n        accuracy = (predicted == y).sum().item() / y.size(0)\n    return accuracy\n\n\n# Define a basic PyTorch classifier\nclass IrisClassifier(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super().__init__()\n        self.fc1 = nn.Linear(input_size, hidden_size)\n        self.relu = nn.ReLU()\n        self.fc2 = nn.Linear(hidden_size, output_size)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.relu(x)\n        x = self.fc2(x)\n        return x\n\n\n# Load Iris dataset and prepare the DataFrame\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\niris_df["target"] = iris.target\n\n# Split into training and testing datasets\ntrain_df, test_df = train_test_split(iris_df, test_size=0.2, random_state=42)\n\n# Prepare training data\ntrain_dataset = mlflow.data.from_pandas(train_df, name="train")\nX_train, y_train = prepare_data(train_dataset.df)\n\n# Define the PyTorch model and move it to the device\ninput_size = X_train.shape[1]\nhidden_size = 16\noutput_size = len(iris.target_names)\ndevice = torch.device("cuda" if torch.cuda.is_available() else "cpu")\nscripted_model = IrisClassifier(input_size, hidden_size, output_size).to(device)\nscripted_model = torch.jit.script(scripted_model)\n\n# Start a run to represent the training job\nwith mlflow.start_run() as run:\n    # Load the training dataset with MLflow. We will link training metrics to this dataset.\n    train_dataset: Dataset = mlflow.data.from_pandas(train_df, name="train")\n    X_train, y_train = prepare_data(train_dataset.df)\n\n    criterion = nn.CrossEntropyLoss()\n    optimizer = torch.optim.Adam(scripted_model.parameters(), lr=0.01)\n\n    for epoch in range(101):\n        X_train, y_train = X_train.to(device), y_train.to(device)\n        out = scripted_model(X_train)\n        loss = criterion(out, y_train)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n        # Log a checkpoint with metrics every 10 epochs\n        if epoch % 10 == 0:\n            # Each newly created LoggedModel checkpoint is linked with its name and step\n            model_info = mlflow.pytorch.log_model(\n                pytorch_model=scripted_model,\n                name=f"torch-iris-{epoch}",\n                step=epoch,\n                input_example=X_train.numpy(),\n            )\n            # log params to the run, LoggedModel inherits those params\n            mlflow.log_params(\n                params={\n                    "n_layers": 3,\n                    "activation": "ReLU",\n                    "criterion": "CrossEntropyLoss",\n                    "optimizer": "Adam",\n                }\n            )\n            # Log metric on training dataset at step and link to LoggedModel\n            mlflow.log_metric(\n                key="accuracy",\n                value=compute_accuracy(scripted_model, X_train, y_train),\n                step=epoch,\n                model_id=model_info.model_id,\n                dataset=train_dataset,\n            )\n'})}),"\n",(0,r.jsxs)(t.p,{children:["In the run page, you can see the logged models generated, and the model names follow the pattern of ",(0,r.jsx)(t.code,{children:"torch-iris-<epoch>"}),":"]}),"\n",(0,r.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"The MLflow UI showing the run page with logged\nmodels",src:n(83358).A+"",width:"4672",height:"3032"})})}),"\n",(0,r.jsxs)(t.p,{children:["The logged models also show up in the ",(0,r.jsx)(t.strong,{children:"Models"})," tab of the experiment, including their dataset, parameters and metrics:"]}),"\n",(0,r.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"The MLflow UI showing the logged models\ntab",src:n(25454).A+"",width:"4672",height:"1472"})})}),"\n",(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(o.B,{fn:"mlflow.search_logged_models"})})," to search the logged models attached to the run, ordering them by the ",(0,r.jsx)(t.code,{children:"accuracy"})," metric value to easily fetch the best and worst models:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"ranked_checkpoints = mlflow.search_logged_models(\n    filter_string=f\"source_run_id='{run.info.run_id}'\",\n    order_by=[{\"field_name\": \"metrics.accuracy\", \"ascending\": False}],\n    output_format=\"list\",\n)\n\nbest_checkpoint = ranked_checkpoints[0]\nprint(f\"Best model: {best_checkpoint}\")\nprint(best_checkpoint.metrics)\n\n# Best model: <LoggedModel: artifact_location='file:///Users/serena.ruan/Documents/repos/mlflow-3-doc/mlruns/0/models/41bd5a16-25a6-447b-90e0-0f7b7e5cb6cf/artifacts', creation_timestamp=1743734069924, experiment_id='0', last_updated_timestamp=1743734075018, metrics=[<Metric: dataset_digest='1f1c13b5', dataset_name='train', key='accuracy', model_id='41bd5a16-25a6-447b-90e0-0f7b7e5cb6cf', run_id='12f143a7fda1461e9240d7ffad4ea5bd', step=100, timestamp=1743734075029, value=0.975>], model_id='41bd5a16-25a6-447b-90e0-0f7b7e5cb6cf', model_type='', model_uri='models:/41bd5a16-25a6-447b-90e0-0f7b7e5cb6cf', name='torch-iris-100', params={'activation': 'ReLU',\n#  'criterion': 'CrossEntropyLoss',\n#  'n_layers': '3',\n#  'optimizer': 'Adam'}, source_run_id='12f143a7fda1461e9240d7ffad4ea5bd', status=<LoggedModelStatus.READY: 'READY'>, status_message='', tags={'mlflow.source.git.commit': '7324c807f07a1766d4b951733e3d723504b4576e',\n#  'mlflow.source.name': 'a.py',\n#  'mlflow.source.type': 'LOCAL',\n#  'mlflow.user': 'serena.ruan'}>\n# [<Metric: dataset_digest='1f1c13b5', dataset_name='train', key='accuracy', model_id='41bd5a16-25a6-447b-90e0-0f7b7e5cb6cf', run_id='12f143a7fda1461e9240d7ffad4ea5bd', step=100, timestamp=1743734075029, value=0.975>]\n\nworst_checkpoint = ranked_checkpoints[-1]\nprint(f\"Worst model: {worst_checkpoint}\")\nprint(worst_checkpoint.metrics)\n\n# Worst model: <LoggedModel: artifact_location='file:///Users/serena.ruan/Documents/repos/mlflow-3-doc/mlruns/0/models/0d789084-9a3b-4b85-9d43-6a148c014b7e/artifacts', creation_timestamp=1743734016290, experiment_id='0', last_updated_timestamp=1743734022728, metrics=[<Metric: dataset_digest='1f1c13b5', dataset_name='train', key='accuracy', model_id='0d789084-9a3b-4b85-9d43-6a148c014b7e', run_id='12f143a7fda1461e9240d7ffad4ea5bd', step=0, timestamp=1743734022737, value=0.3>], model_id='0d789084-9a3b-4b85-9d43-6a148c014b7e', model_type='', model_uri='models:/0d789084-9a3b-4b85-9d43-6a148c014b7e', name='torch-iris-0', params={}, source_run_id='12f143a7fda1461e9240d7ffad4ea5bd', status=<LoggedModelStatus.READY: 'READY'>, status_message='', tags={'mlflow.source.git.commit': '7324c807f07a1766d4b951733e3d723504b4576e',\n#  'mlflow.source.name': 'a.py',\n#  'mlflow.source.type': 'LOCAL',\n#  'mlflow.user': 'serena.ruan'}>\n# [<Metric: dataset_digest='1f1c13b5', dataset_name='train', key='accuracy', model_id='0d789084-9a3b-4b85-9d43-6a148c014b7e', run_id='12f143a7fda1461e9240d7ffad4ea5bd', step=0, timestamp=1743734022737, value=0.3>]\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Artifacts of the model can be viewed on the ",(0,r.jsx)(t.strong,{children:"Artifacts"})," tab of the model page:"]}),"\n",(0,r.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"The MLflow UI showing the model\nartifacts",src:n(51562).A+"",width:"4672",height:"2126"})})})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},83358:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/run_page-463080b1f243a397066dc102befd9347.png"}}]);