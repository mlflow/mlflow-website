"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6374],{21657:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/trace_info_architecture-0a66e4960efd9299f04427c0aef04a45.png"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},29899:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/spans_in_mlflow_ui-fb6052e2093862fc0477999a92b76f7a.png"},36924:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/trace_info_in_ui-ad801e1eeea03ac3004bed18a34fbf8c.png"},40135:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/span_architecture-01e1f5a3edf522f567e7eaad16f2b1d1.png"},44221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>h,default:()=>f,frontMatter:()=>c,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"tracing/tracing-schema","title":"Trace Data Structure","description":"This document provides a detailed view of the schema for traces and its ingredients. MLflow traces are compatible to OpenTelemetry specs,","source":"@site/docs/tracing/tracing-schema.mdx","sourceDirName":"tracing","slug":"/tracing/tracing-schema","permalink":"/docs/latest/tracing/tracing-schema","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"sidebar_label":"Data Structure","pagination_label":"Trace Data Structure"},"sidebar":"docsSidebar","previous":{"title":"FAQ","permalink":"/docs/latest/tracing/faq"},"next":{"title":"Tutorials","permalink":"/docs/latest/tracing/tutorials/"}}');var r=n(74848),i=n(28453),a=n(67756),o=n(65537),l=n(79329);const c={sidebar_position:7,sidebar_label:"Data Structure",pagination_label:"Trace Data Structure"},h="Trace Data Structure",d={},p=[{value:"Structure of Traces",id:"structure-of-traces",level:2},{value:"Trace Structure",id:"trace-structure",level:4},{value:"Trace Info Structure",id:"trace-info-structure",level:4},{value:"Trace Data Structure",id:"trace-data-structure-1",level:4},{value:"Span Structure",id:"span-structure",level:4},{value:"Trace",id:"trace",level:2},{value:"Trace Info",id:"trace-info",level:2},{value:"Trace Data",id:"trace-data",level:2},{value:"Span Schema",id:"span-schema",level:2},{value:"Span Types",id:"span-types",level:2},{value:"Schema for specific span types",id:"schema-for-specific-span-types",level:2},{value:"Retriever Spans",id:"retriever-spans",level:3},{value:"Chat Completion Spans",id:"chat-completion-spans",level:3}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"trace-data-structure",children:"Trace Data Structure"})}),"\n",(0,r.jsxs)(t.p,{children:["This document provides a detailed view of the schema for traces and its ingredients. MLflow traces are ",(0,r.jsx)(t.strong,{children:"compatible to OpenTelemetry specs"}),",\nbut we also define a few additional layers of structure upon the OpenTelemetry Spans to provide additional metadata about the trace."]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"request_id"})," field was renamed to ",(0,r.jsx)(t.code,{children:"trace_id"})," in MLflow 3."]})}),"\n",(0,r.jsx)(t.h2,{id:"structure-of-traces",children:"Structure of Traces"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"TL;DR"}),": ",(0,r.jsx)(t.code,{children:"Trace = TraceInfo + TraceData"})," where ",(0,r.jsx)(t.code,{children:"TraceData = List[Span]"})]}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(l.A,{value:"trace",label:"Trace",default:!0,children:[(0,r.jsx)(t.h4,{id:"trace-structure",children:"Trace Structure"}),(0,r.jsxs)(t.p,{children:["A ",(0,r.jsx)(a.B,{fn:"mlflow.entities.Trace",children:(0,r.jsx)(t.code,{children:"Trace"})})," in MLflow consists of two components:\n",(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceInfo",children:(0,r.jsx)(t.code,{children:"Trace Info"})})," and\n",(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceData",children:(0,r.jsx)(t.code,{children:"Trace Data"})}),"."]}),(0,r.jsxs)(t.p,{children:["The metadata that aids in explaining the origination\nof the trace, the status of the trace, and the information about the total execution time is stored within the Trace Info. The Trace\nData is comprised entirely of the instrumented ",(0,r.jsx)(a.B,{fn:"mlflow.entities.Span",children:(0,r.jsx)(t.code,{children:"Span"})}),"\nobjects that make up the core of the trace."]}),(0,r.jsx)("div",{class:"max-height-img-container",style:{maxHeight:"400px"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Trace Architecture",src:n(58090).A+"",width:"1204",height:"903"})})})]}),(0,r.jsxs)(l.A,{value:"trace-info",label:"Trace Info",children:[(0,r.jsx)(t.h4,{id:"trace-info-structure",children:"Trace Info Structure"}),(0,r.jsx)(t.p,{children:"The Trace Info within MLflow's tracing feature aims to provide a lightweight snapshot of critical data about the overall trace.\nThis includes the logistical information about the trace, such as the experiment_id, providing the storage location for the trace,\nas well as trace-level data such as start time and total execution time. The Trace Info also includes tags and status information for\nthe trace as a whole."}),(0,r.jsx)("div",{class:"max-height-img-container",style:{maxHeight:"400px"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Trace Info Architecture",src:n(21657).A+"",width:"1242",height:"994"})})})]}),(0,r.jsxs)(l.A,{value:"trace-data",label:"Trace Data",children:[(0,r.jsx)(t.h4,{id:"trace-data-structure-1",children:"Trace Data Structure"}),(0,r.jsxs)(t.p,{children:["The Trace Data within MLflow's tracing feature provides the core of the trace information. Within this object is a list of\n",(0,r.jsx)(a.B,{fn:"mlflow.entities.Span",children:(0,r.jsx)(t.code,{children:"Span"})})," objects that represent the individual steps of the trace.\nThese spans are associated with one another in a hierarchical relationship, providing a clear order-of-operations linkage of what\nhappened within your application during the trace."]}),(0,r.jsx)("div",{class:"max-height-img-container",style:{maxHeight:"400px"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Trace Data Architecture",src:n(60629).A+"",width:"1243",height:"935"})})})]}),(0,r.jsxs)(l.A,{value:"span",label:"Span",children:[(0,r.jsx)(t.h4,{id:"span-structure",children:"Span Structure"}),(0,r.jsxs)(t.p,{children:["The Span object within MLflow's tracing feature provides detailed information about the individual steps of the trace.\nIt complies to the ",(0,r.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces#spans",children:"OpenTelemetry Span spec"}),".\nEach Span object contains information about the step being instrumented, including the span_id, name, start_time, parent_id, status,\ninputs, outputs, attributes, and events."]}),(0,r.jsx)("div",{class:"max-height-img-container",style:{maxHeight:"400px"},children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Span Architecture",src:n(40135).A+"",width:"1880",height:"1149"})})})]})]}),"\n",(0,r.jsx)(t.h2,{id:"trace",children:"Trace"}),"\n",(0,r.jsx)(t.p,{children:"A trace is a root object composed of two components:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceInfo",children:(0,r.jsx)(t.code,{children:"TraceInfo"})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceData",children:(0,r.jsx)(t.code,{children:"TraceData"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Check the API documentation for helper methods on these ",(0,r.jsx)(t.code,{children:"dataclass"})," objects for more information on how to convert or extract data from them."]})}),"\n",(0,r.jsx)(t.h2,{id:"trace-info",children:"Trace Info"}),"\n",(0,r.jsxs)(t.p,{children:["Trace Info is a ",(0,r.jsx)(t.code,{children:"dataclass"})," object that contains metadata about the trace. This metadata includes information about the trace's origin, status, and\nvarious other data that aids in retrieving and filtering traces when used with ",(0,r.jsx)(a.B,{fn:"mlflow.client.MlflowClient.search_traces"})," and for\nnavigation of traces within the MLflow UI."]}),"\n",(0,r.jsxs)(t.p,{children:["To learn more about how ",(0,r.jsx)(t.code,{children:"TraceInfo"})," metadata is used for searching, you can see examples ",(0,r.jsx)(t.a,{href:"/tracing/api/search",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The data that is contained in the ",(0,r.jsx)(t.code,{children:"TraceInfo"})," object is used to populate the trace view page within the MLflow tracking UI, as shown below."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"TraceInfo as it is used in the MLflow UI",src:n(36924).A+"",width:"2920",height:"918"})}),"\n",(0,r.jsxs)(t.p,{children:["The primary components of MLflow ",(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceInfo",children:(0,r.jsx)(t.code,{children:"TraceInfo"})})," objects are listed below."]}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Property"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Type"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Note"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"trace_id"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"A unique identifier for the trace. The identifier is used within MLflow\nand integrated system to resolve the event being captured and to provide\nassociations for external systems to map the logged trace to the\noriginating caller."})}),(0,r.jsxs)("td",{children:["This value is generated by the tracing backend and is immutable. Within the tracing client APIs, you will need to deliberately pass this value to the ",(0,r.jsx)(a.B,{fn:"mlflow.client.MlflowClient.start_span",children:"span creation API"})," to ensure that a given span is associated with a trace."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"trace_location"})}),(0,r.jsx)("td",{children:(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceLocation"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The location where the trace is stored."})}),(0,r.jsx)("td",{children:"MLflow currently supports MLflow Experiment or Databricks Inference Table as a trace location."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"request_time"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The time that marks the moment when the root span of the trace was\ncreated. This is a Unix timestamp in milliseconds."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The time reflected in this property is the time at with the trace was\ncreated, not the time at which a request to your application was made.\nAs such, it does not factor into account the time it took to process the\nrequest to the environment in which your application is being served,\nwhich may introduce additional latency to the total round trip time,\ndepending on network configurations."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"execution_duration"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The time that marks the moment when the call to end the trace is made.\nThis is a Unix timestamp in milliseconds."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"This time does not include the networking time associated with sending\nthe response from the environment that generates the trace to the\nenvironment that is consuming the application\u2019s invocation result."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"state"})}),(0,r.jsx)("td",{children:(0,r.jsx)(a.B,{fn:"mlflow.entities.TraceState"})}),(0,r.jsx)("td",{children:"An enumerated value that denotes the state of the trace."}),(0,r.jsxs)("td",{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"TraceState"})," values are one of:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"OK"})," - The trace and the\ninstrumented call were successful."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"ERROR"})," - An error occurred\nwhile an application was being instrumented. The error can be seen\nwithin the span data for the trace."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"IN_PROGRESS"})," - The trace has\nstarted and is currently running. Temporary state that will update while\nspans are being logged to a trace."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"STATE_UNSPECIFIED"})," -\ninternal default state that should not be seen in logged traces."]}),"\n"]})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"request_preview"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsxs)("td",{children:["The ",(0,r.jsx)(t.code,{children:"request_preview"})," property is the input data for the entire trace. The input ",(0,r.jsx)(t.code,{children:"str"})," is a JSON-serialized string that contains the input data for the trace, typically the end-user request that was submitted as a call to the application."]}),(0,r.jsx)("td",{children:"Due to the varied structures of inputs that could go to a given application that is being instrumented by MLflow Tracing, all inputs are JSON serialized for compatibility's sake. This allows for the input data to be stored in a consistent format, regardless of the input data's structure. This field can be truncated if it exceeds the length limit."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"response_preview"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"str"})}),(0,r.jsxs)("td",{children:["The ",(0,r.jsx)(t.code,{children:"response_preview"})," property is the final output data that will be returned to the caller of the invocation of the application."]}),(0,r.jsx)("td",{children:"Similar to the request property, this value is a JSON-serialized string to maximize compatibility of disparate formats. This field can be truncated if it exceeds the length limit."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"trace_metadata"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"dict[str, str]"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The trace metadata are additional key-value pairs of information that\nare associated with the Trace, set and modified by the tracing backend."})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["These are not open for addition or modification by the user, but can\nprovide additional context about the trace, such as an MLflow ",(0,r.jsx)(t.code,{children:"run_id"}),"\nthat is associated with the trace."]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"tags"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:"dict[str, str]"})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["User-defined key-value pairs that can be applied to a trace for applying\nadditional context, aid in ",(0,r.jsx)(t.a,{href:"/tracing/api/search/",children:"search functionality"}),", or to\nprovide additional information during the creation or after the\nsuccessful logging of a trace."]})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"These tags are fully mutable and can be changed at any time, even long\nafter a trace has been logged to an experiment."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"assessments"})}),(0,r.jsxs)("td",{children:["List of ",(0,r.jsx)(a.B,{fn:"mlflow.entities.Assessment"})]}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"A list of assessments associated with the trace."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Currently, this property is only supported on Databricks."})})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"trace-data",children:"Trace Data"}),"\n",(0,r.jsxs)(t.p,{children:["The MLflow ",(0,r.jsx)(a.B,{fn:"mlflow.entities.trace_data.TraceData",children:(0,r.jsx)(t.code,{children:"TraceData"})})," object is a ",(0,r.jsx)(t.code,{children:"dataclass"})," object that holds the core of the trace data.\nThis object contains the following elements:"]}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Property"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Note"})})]})}),(0,r.jsx)("tbody",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"spans"})}),(0,r.jsxs)("td",{children:["This property is a list of ",(0,r.jsx)(a.B,{fn:"mlflow.entities.Span",children:"Span"})," objects that represent the individual steps of the trace."]}),(0,r.jsx)("td",{children:"For further information on the structure of Span objects, see the section below."})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"span-schema",children:"Span Schema"}),"\n",(0,r.jsx)(t.p,{children:"Spans are the core of the trace data. They record key, critical data about each of the steps within your genai application."}),"\n",(0,r.jsx)(t.p,{children:"When you view your traces within the MLflow UI, you're looking at a collection of spans, as shown below."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Spans within the MLflow UI",src:n(29899).A+"",width:"2684",height:"2068"})}),"\n",(0,r.jsx)(t.p,{children:"The sections below provide a detailed view of the structure of a span."}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Property"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Note"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"inputs"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The inputs are stored as JSON-serialized strings, representing the\ninput data that is passed into the particular stage (step) of your\napplication. Due to the wide variety of input data that can be passed\nbetween specific stages of a GenAI application, this data may be\nextremely large (such as when using the output of a vector store\nretrieval step)."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Reviewing the Inputs, along with the Outputs, of individual stages can\ndramatically increase the ability to diagnose and debug issues that\nexist with responses coming from your application."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"outputs"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The outputs are stored as JSON-serialized strings, representing the\noutput data that is passed out of the particular stage (step) of your\napplication."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Just as with the Inputs, the Outputs can be quite large, depending on\nthe complexity of the data that is being passed between stages."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"attributes"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Attributes are metadata that are associated with a given step within\nyour application. These attributes are key-value pairs that can be used\nto provide insight into behavioral modifications for function and method\ncalls, giving insight into how modification of them can affect the\nperformance of your application."})}),(0,r.jsxs)("td",{children:[(0,r.jsx)(t.p,{children:"Common examples of attributes that could be associated with a given\nspan include:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"model"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"temperature"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"document_count"})}),"\n"]}),(0,r.jsx)(t.p,{children:"These attributes provide additional context and insight into the results that are present in the outputs property for the span."})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"events"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Events are a system-level property that is optionally applied to a span\nonly if there was an issue during the execution of the span. These\nevents contain information about exceptions that were thrown in the\ninstrumented call, as well as the stack trace."})}),(0,r.jsxs)("td",{children:["This data is structured within a ",(0,r.jsx)(a.B,{fn:"mlflow.entities.SpanEvent",children:"SpanEvent"})," object, containing the properties:",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"name"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"timestamp"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"attributes"})}),"\n"]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"The attributes"})," property contains the stack trace of the exception that was thrown during the execution of the span if such an error occurred during execution."]})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"parent_id"})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"parent_id"})," property is an identifier that establishes the\nhierarchical association of a given span with its parent span. This is\nused to establish an event chain for the spans, helping to determine\nwhich step followed another step in the execution of the application."]})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["A span ",(0,r.jsx)(t.strong,{children:"must"})," have a ",(0,r.jsx)(t.code,{children:"parent_id"})," set."]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"span_id"})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"span_id"})," is a unique identifier that is generated for each span\nwithin a trace. This identifier is used to disambiguate spans from one\nanother and allow for proper association of the span within the\nsequential execution of other spans within a trace."]})}),(0,r.jsxs)("td",{children:["A ",(0,r.jsx)(t.code,{children:"span_id"})," is set when a span is created and is immutable."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"trace_id"})}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"trace_id"})," property is a unique identifier that is generated for\neach ",(0,r.jsx)(t.strong,{children:"trace"})," and is propagated to each span that is a member of that trace."]})}),(0,r.jsxs)("td",{children:["The ",(0,r.jsx)(t.code,{children:"trace_id"})," is a system-generated property and is immutable."]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"name"})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The name of the trace is either user-defined (optionally when using the\nfluent and client APIs) or is automatically generated through CallBack\nintegrations or when omitting the name argument when calling the fluent\nor client APIs. If the name is not overridden, the name will be\ngenerated based on the name of the function or method that is being\ninstrumented."})}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"It is recommended to provide a name for your span that is unique and\nrelevant to the functionality that is being executed when using manual\ninstrumentation via the client or fluent APIs. Generic names for spans or\nconfusing names can make it difficult to diagnose issues when reviewing\ntraces."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"status"})}),(0,r.jsxs)("td",{children:[(0,r.jsxs)(t.p,{children:["The status of a span is reflected in a value from the enumeration object\n",(0,r.jsx)(t.code,{children:"SpanStatusCode"}),". The span status object contains an optional description\nif the ",(0,r.jsx)(t.code,{children:"status_code"})," is reflecting an error that occurred. The values that\nthe status may have are:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"OK"})," - The span and the underlying instrumented\ncall were successful."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"UNSET"})," - The status of the span hasn\u2019t been set yet\n(this is the default value and should not be seen in logged trace\nevents)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"ERROR"})," - An issue happened within the call being instrumented.\nThe ",(0,r.jsx)(t.code,{children:"description"})," property will contain additional information about the\nerror that occurred."]}),"\n"]})]}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"Evaluating the status of spans can greatly reduce the amount of time and\neffort required to diagnose issues with your applications."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"start_time_ns"})}),(0,r.jsx)("td",{children:"The unix timestamp (in nanoseconds) when the span was started."}),(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:"The precision of this property is higher than that of the trace start\ntime, allowing for more granular analysis of the execution time of very\nshort-lived spans."})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"end_time_ns"})}),(0,r.jsx)("td",{children:"The unix timestamp (in nanoseconds) when the span was ended."}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["This precision is higher than the trace timestamps, similar to the\n",(0,r.jsx)(t.code,{children:"start_time_ns"})," timestamp above."]})})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"span-types",children:"Span Types"}),"\n",(0,r.jsxs)(t.p,{children:["Span types are a way to categorize spans within a trace. By default, the span type is set to ",(0,r.jsx)(t.code,{children:'"UNKNOWN"'})," when using the trace decorator. MLflow provides a set of predefined span types for common use cases, while also allowing you to setting custom span types."]}),"\n",(0,r.jsx)(t.p,{children:"The following span types are available:"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Span Type"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"LLM"'})}),(0,r.jsx)("td",{children:"Represents a call to an LLM endpoint or a local model."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"CHAT_MODEL"'})}),(0,r.jsx)("td",{children:"Represents a query to a chat model. This is a special case of an LLM interaction."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"CHAIN"'})}),(0,r.jsx)("td",{children:"Represents a chain of operations."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"AGENT"'})}),(0,r.jsx)("td",{children:"Represents an autonomous agent operation."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"TOOL"'})}),(0,r.jsx)("td",{children:"Represents a tool execution (typically by an agent), such as querying a search engine."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"EMBEDDING"'})}),(0,r.jsx)("td",{children:"Represents a text embedding operation."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"RETRIEVER"'})}),(0,r.jsx)("td",{children:"Represents a context retrieval operation, such as querying a vector database."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"PARSER"'})}),(0,r.jsx)("td",{children:"Represents a parsing operation, transforming text into a structured format."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"RERANKER"'})}),(0,r.jsx)("td",{children:"Represents a re-ranking operation, ordering the retrieved contexts based on relevance."})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.code,{children:'"UNKNOWN"'})}),(0,r.jsx)("td",{children:"A default span type that is used when no other span type is specified."})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["To set a span type, you can pass the ",(0,r.jsx)(t.code,{children:"span_type"})," parameter to the ",(0,r.jsx)(a.B,{fn:"mlflow.trace",children:(0,r.jsx)(t.code,{children:"@mlflow.trace"})})," decorator or ",(0,r.jsx)(a.B,{fn:"mlflow.start_span"}),"\ncontext manager. When you are using ",(0,r.jsx)(t.a,{href:"/tracing/#automatic-tracing",children:"automatic tracing"}),", the span type is automatically set by MLflow."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\n# Using a built-in span type\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_documents(query: str):\n    ...\n\n\n# Setting a custom span type\nwith mlflow.start_span(name="add", span_type="MATH") as span:\n    span.set_inputs({"x": z, "y": y})\n    z = x + y\n    span.set_outputs({"z": z})\n\n    print(span.span_type)\n    # Output: MATH\n'})}),"\n",(0,r.jsx)(t.h2,{id:"schema-for-specific-span-types",children:"Schema for specific span types"}),"\n",(0,r.jsxs)(t.p,{children:["MLflow has a set of 10 predefined types of spans (see ",(0,r.jsx)(a.B,{fn:"mlflow.entities.SpanType",children:"mlflow.entities.SpanType"}),"), and\ncertain span types have properties that are required in order to enable additional functionality\nwithin the UI and downstream tasks such as evaluation."]}),"\n",(0,r.jsx)(t.h3,{id:"retriever-spans",children:"Retriever Spans"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," span type is used for operations involving retrieving data from a data store (for example, querying\ndocuments from a vector store). The ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," span type has the following schema:"]}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Property"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Note"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"Input"})}),(0,r.jsx)("td",{children:"There are no restrictions on the span inputs"}),(0,r.jsx)("td",{})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"Output"})}),(0,r.jsxs)("td",{children:["The output must be of type ",(0,r.jsxs)("code",{children:["List[",(0,r.jsx)(a.B,{fn:"mlflow.entities.Document",children:"mlflow.entities.Document"}),"]"]}),", or a dict matching the structure of the dataclass*. The dataclass contains the following properties:",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"id"})," (",(0,r.jsx)(t.code,{children:"Optional[str]"}),") - An optional unique identifier for the document."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"page_content"})," (",(0,r.jsx)(t.code,{children:"str"}),") - The text content of the document."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"metadata"})," (",(0,r.jsx)(t.code,{children:"Optional[Dict[str,any]]"}),") - The metadata associated with the document. There are two important metadata keys that are reserved for the MLflow UI and evaluation metrics:","\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:'"doc_uri" (str)'}),": The URI for the document. This is used for rendering a link in the UI."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:'"chunk_id" (str)'}),": If your document is broken up into chunks in your data store, this key can be used to\nidentify the chunk that the document is a part of. This is used by some evaluation metrics."]}),"\n"]}),"\n"]}),"\n"]})]}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["This output structure is guaranteed to be provided if the traces are generated via MLflow autologging for the LangChain and LlamaIndex flavors.\nBy conforming to this specification, ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," spans will be rendered in a more user-friendly manner in the MLflow UI, and downstream tasks\nsuch as evaluation will function as expected."]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.strong,{children:"Attributes"})}),(0,r.jsx)("td",{children:"There are no restrictions on the span attributes"}),(0,r.jsx)("td",{})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["* For example, both ",(0,r.jsx)(t.code,{children:'[Document(page_content="Hello world", metadata={"doc_uri": "https://example.com"})]'})," and\n",(0,r.jsx)(t.code,{children:'[{"page_content": "Hello world", "metadata": {"doc_uri": "https://example.com"}}]'})," are valid outputs for a ",(0,r.jsx)(t.code,{children:"RETRIEVER"})," span."]}),"\n",(0,r.jsx)(t.h3,{id:"chat-completion-spans",children:"Chat Completion Spans"}),"\n",(0,r.jsxs)(t.p,{children:["Spans of type ",(0,r.jsx)(t.code,{children:"CHAT_MODEL"})," or ",(0,r.jsx)(t.code,{children:"LLM"})," are used to represent interactions with a chat completions API\n(for example, OpenAI's ",(0,r.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/chat/create",children:"chat completions"}),",\nor Anthropic's ",(0,r.jsx)(t.a,{href:"https://docs.anthropic.com/en/api/messages",children:"messages"})," API). As providers can have\ndifferent schemas for their API, there are no restrictions on the format of the span's inputs and\noutputs."]}),"\n",(0,r.jsx)(t.p,{children:"However, it is still important to have a common schema in order to enable certain UI features (e.g. rich\nconversation display), and to make authoring evaluation functions easier. To support this, we specify some\ncustom attributes for standardized chat messages and tool definitions:"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Attribute Name"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)("th",{children:(0,r.jsx)(t.strong,{children:"Note"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"mlflow.chat.messages"})})}),(0,r.jsxs)("td",{children:[(0,r.jsx)(t.p,{children:"This attribute represents the system/user/assistant messages involved in the\nconversation with the chat model. It enables rich conversation rendering in the UI,\nand will also be used in MLflow evaluation in the future."}),(0,r.jsxs)(t.p,{children:["The type must be ",(0,r.jsx)(t.code,{children:"List["})," ",(0,r.jsx)(a.B,{fn:"mlflow.types.chat.ChatMessage",children:"ChatMessage"})," ",(0,r.jsx)(t.code,{children:"]"})]})]}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["This attribute can be conveniently set using the ",(0,r.jsx)(a.B,{fn:"mlflow.tracing.set_span_chat_messages"})," function. This function\nwill throw a validation error if the data does not conform to the spec."]})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"mlflow.chat.tools"})})}),(0,r.jsxs)("td",{children:[(0,r.jsxs)(t.p,{children:["This attribute represents the tools that were available for the chat model to call. In the OpenAI\ncontext, this would be equivalent to the ",(0,r.jsx)(t.a,{href:"https://platform.openai.com/docs/api-reference/chat/create#chat-create-tools%3E",children:"tools"}),"\nparam in the Chat Completions API."]}),(0,r.jsxs)(t.p,{children:["The type must be ",(0,r.jsx)(t.code,{children:"List["})," ",(0,r.jsx)(a.B,{fn:"mlflow.types.chat.ChatTool",children:"ChatTool"})," ",(0,r.jsx)(t.code,{children:"]"})]})]}),(0,r.jsx)("td",{children:(0,r.jsxs)(t.p,{children:["This attribute can be conveniently set using the ",(0,r.jsx)(a.B,{fn:"mlflow.tracing.set_span_chat_tools"})," function. This function\nwill throw a validation error if the data does not conform to the spec."]})})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["Please refer to the example below for a quick demonstration of how to use the utility functions described above, as well as\nhow to retrieve them using the ",(0,r.jsx)(a.B,{fn:"mlflow.entities.Span.get_attribute",children:"span.get_attribute()"})," function:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities.span import SpanType\nfrom mlflow.tracing.constant import SpanAttributeKey\nfrom mlflow.tracing import set_span_chat_messages, set_span_chat_tools\n\n# example messages and tools\nmessages = [\n    {\n        "role": "system",\n        "content": "please use the provided tool to answer the user\'s questions",\n    },\n    {"role": "user", "content": "what is 1 + 1?"},\n]\n\ntools = [\n    {\n        "type": "function",\n        "function": {\n            "name": "add",\n            "description": "Add two numbers",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "a": {"type": "number"},\n                    "b": {"type": "number"},\n                },\n                "required": ["a", "b"],\n            },\n        },\n    }\n]\n\n\n@mlflow.trace(span_type=SpanType.CHAT_MODEL)\ndef call_chat_model(messages, tools):\n    # mocking a response\n    response = {\n        "role": "assistant",\n        "tool_calls": [\n            {\n                "id": "123",\n                "function": {"arguments": \'{"a": 1,"b": 2}\', "name": "add"},\n                "type": "function",\n            }\n        ],\n    }\n\n    combined_messages = messages + [response]\n\n    span = mlflow.get_current_active_span()\n    set_span_chat_messages(span, combined_messages)\n    set_span_chat_tools(span, tools)\n\n    return response\n\n\ncall_chat_model(messages, tools)\n\ntrace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id)\nspan = trace.data.spans[0]\n\nprint("Messages: ", span.get_attribute(SpanAttributeKey.CHAT_MESSAGES))\nprint("Tools: ", span.get_attribute(SpanAttributeKey.CHAT_TOOLS))\n'})})]})}function f(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},58090:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/trace_architecture-4d7b474a12b802862207e96a40040e12.png"},60629:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/trace_data_architecture-96cd4fb71c42d2616dd28acdba33b5e6.png"},65537:(e,t,n)=>{n.d(t,{A:()=>_});var s=n(96540),r=n(34164),i=n(65627),a=n(56347),o=n(50372),l=n(30604),c=n(11861),h=n(78749);function d(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=p(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[c,d]=f({queryString:n,groupId:r}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,h.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),j=(()=>{const e=c??m;return u({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{j&&l(j)}),[j]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!u({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),x(e)}),[d,x,i]),tabValues:i}}var x=n(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(74848);function w(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),h=e=>{const t=e.currentTarget,n=l.indexOf(t),r=o[n].value;r!==s&&(c(t),a(r))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:h,...i,className:(0,r.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function b(e){const t=m(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",j.tabList),children:[(0,g.jsx)(w,{...t,...e}),(0,g.jsx)(y,{...t,...e})]})}function _(e){const t=(0,x.A)();return(0,g.jsx)(b,{...e,children:d(e.children)},String(t))}},67756:(e,t,n)=>{n.d(t,{B:()=>l});n(96540);const s=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=n(29030),i=n(56289),a=n(74848);const o=e=>{const t=e.split(".");for(let n=t.length;n>0;n--){const e=t.slice(0,n).join(".");if(s[e])return e}return null};function l(e){let{fn:t,children:n}=e;const l=o(t);if(!l)return(0,a.jsx)(a.Fragment,{children:n});const c=(0,r.Ay)(`/${s[l]}#${t}`);return(0,a.jsx)(i.A,{to:c,target:"_blank",children:n??(0,a.jsxs)("code",{children:[t,"()"]})})}},79329:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);var s=n(34164);const r={tabItem:"tabItem_Ymn6"};var i=n(74848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,a),hidden:n,children:t})}}}]);