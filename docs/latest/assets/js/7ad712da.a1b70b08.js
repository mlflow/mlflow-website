"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9696],{11470:(e,n,t)=>{t.d(n,{A:()=>_});var a=t(96540),r=t(34164),i=t(23104),l=t(56347),o=t(205),s=t(57485),c=t(31682),p=t(70679);function m(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d({value:e,tabValues:n}){return n.some((n=>n.value===e))}function u({queryString:e=!1,groupId:n}){const t=(0,l.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=h(e),[l,s]=(0,a.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[c,m]=u({queryString:t,groupId:r}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,p.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),w=(()=>{const e=c??f;return d({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{w&&s(w)}),[w]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),g(e)}),[m,g,i]),tabValues:i}}var g=t(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function y({className:e,block:n,selectedValue:t,selectValue:a,tabValues:l}){const o=[],{blockElementScrollPositionUntilNextRender:s}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),i=l[r].value;i!==t&&(s(n),a(i))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:l.map((({value:e,label:n,attributes:a})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:p,onClick:c,...a,className:(0,r.A)("tabs__item",w.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function j({lazy:e,children:n,selectedValue:t}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find((e=>e.props.value===t));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function b(e){const n=f(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",w.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(j,{...n,...e})]})}function _(e){const n=(0,g.A)();return(0,x.jsx)(b,{...e,children:m(e.children)},String(n))}},16144:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"tracing/app-instrumentation/index","title":"Instrument your app","description":"Learn how to instrument your GenAI application with MLflow Tracing to capture and visualize the execution flow of your application. MLflow offers two main approaches to implementing tracing that can be used independently or together for comprehensive observability.","source":"@site/docs/genai/tracing/app-instrumentation/index.mdx","sourceDirName":"tracing/app-instrumentation","slug":"/tracing/app-instrumentation/","permalink":"/docs/latest/genai/tracing/app-instrumentation/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Quickstart","permalink":"/docs/latest/genai/tracing/quickstart"},"next":{"title":"Automatic Tracing","permalink":"/docs/latest/genai/tracing/app-instrumentation/automatic"}}');var r=t(74848),i=t(28453),l=t(11470),o=t(19365),s=t(49374);const c={},p="Instrument your app",m={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Environment Setup",id:"environment-setup",level:2},{value:"Tracing Approaches",id:"tracing-approaches",level:2},{value:"Quick Start Examples",id:"quick-start-examples",level:2},{value:"Automatic Tracing Example",id:"automatic-tracing-example",level:3},{value:"Manual Tracing Example",id:"manual-tracing-example",level:3},{value:"Automatic Tracing",id:"automatic-tracing",level:2},{value:"Manual Tracing",id:"manual-tracing",level:2},{value:"Span Types and Attributes",id:"span-types-and-attributes",level:3},{value:"View Logged Traces",id:"view-logged-traces",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"instrument-your-app",children:"Instrument your app"})}),"\n",(0,r.jsx)(n.p,{children:"Learn how to instrument your GenAI application with MLflow Tracing to capture and visualize the execution flow of your application. MLflow offers two main approaches to implementing tracing that can be used independently or together for comprehensive observability."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"This guide requires the following packages:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"mlflow>=3.1"}),": Core MLflow functionality with GenAI features."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"openai>=1.0.0"}),": Only required to run the ",(0,r.jsx)(n.a,{href:"#quick-start-examples",children:"Quick Start Examples"})," below (if using other LLM providers, install their respective SDKs instead)"]}),"\n",(0,r.jsx)(n.p,{children:"Install the required packages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'pip install --upgrade "mlflow>=3.1" openai>=1.0.0\n'})}),"\n",(0,r.jsx)(n.admonition,{title:"MLflow Version Recommendation",type:"note",children:(0,r.jsxs)(n.p,{children:["While tracing features are available starting in MLflow 2.15.0+, ",(0,r.jsx)(n.strong,{children:"it is strongly recommended to install MLflow 3"})," for the latest GenAI capabilities, including expanded tracing features, enhanced evaluation capabilities, and an improved UI."]})}),"\n",(0,r.jsx)(n.h2,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,r.jsx)(n.p,{children:"Before running the examples below, configure your environment:"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(o.A,{value:"local",label:"Local MLflow",default:!0,children:[(0,r.jsx)(n.p,{children:"For local development, start the MLflow tracking server:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mlflow server --host 127.0.0.1 --port 5000\n"})}),(0,r.jsx)(n.p,{children:"Then configure your tracking URI:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_tracking_uri("http://127.0.0.1:5000")\nmlflow.set_experiment("my-tracing-experiment")\n'})})]}),(0,r.jsxs)(o.A,{value:"remote",label:"Remote Server",children:[(0,r.jsx)(n.p,{children:"For remote MLflow servers, configure the tracking URI:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_tracking_uri("https://your-mlflow-server.com")\nmlflow.set_experiment("my-tracing-experiment")\n'})})]}),(0,r.jsxs)(o.A,{value:"databricks",label:"Databricks",children:[(0,r.jsx)(n.p,{children:"If you're working on tracing with Databricks, configure your authentication:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import os\n\n# Set Databricks authentication (only needed when running outside Databricks)\nos.environ["DATABRICKS_HOST"] = "https://your-workspace.databricks.com"\nos.environ["DATABRICKS_TOKEN"] = "your-databricks-token"\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"tracing-approaches",children:"Tracing Approaches"}),"\n",(0,r.jsx)(n.p,{children:"MLflow provides two complementary approaches to tracing:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"#automatic-tracing",children:"Automatic Tracing"})}),": Just add 1 line of code ",(0,r.jsx)(n.code,{children:"mlflow.<library>.autolog()"})," to automatically capture your app's logic. Automatic tracing works with 20+ ",(0,r.jsx)(n.a,{href:"/genai/tracing/integrations",children:"supported libraries and frameworks"})," out of the box"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"#manual-tracing",children:"Manual Tracing"})}),": Designed for custom logic and complex workflows, manual tracing gives you full control over what gets traced and how using ",(0,r.jsx)(n.a,{href:"manual-tracing/fluent-apis",children:"high-level APIs (decorators and fluent context managers)"})," or ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing/low-level-api",children:"low-level APIs"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Automatic and manual tracing can be used together. For example, you could use the auto-tracing for OpenAI's SDK and manual tracing to combine multiple LLM calls into a single trace that represents your application's end to end logic."})}),"\n",(0,r.jsx)(n.h2,{id:"quick-start-examples",children:"Quick Start Examples"}),"\n",(0,r.jsx)(n.h3,{id:"automatic-tracing-example",children:"Automatic Tracing Example"}),"\n",(0,r.jsx)(n.p,{children:"Enable automatic tracing for your favorite library with just one line of code:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom openai import OpenAI\nimport os\n\n# Set up environment (if not already configured)\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\n\n# Set up MLflow tracking\nmlflow.set_tracking_uri("http://127.0.0.1:5000")\nmlflow.set_experiment("auto-tracing-demo")\n\n# Enable automatic tracing for OpenAI\nmlflow.openai.autolog()\n\n# Your existing code works unchanged\nclient = OpenAI()\nresponse = client.chat.completions.create(\n    model="gpt-4o-mini",\n    messages=[{"role": "user", "content": "What is MLflow?"}],\n    max_tokens=100,\n)\n\nprint(response.choices[0].message.content)\n# Traces are automatically captured and logged!\n'})}),"\n",(0,r.jsx)(n.h3,{id:"manual-tracing-example",children:"Manual Tracing Example"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"@mlflow.trace"})," decorator to instrument your custom functions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\nfrom openai import OpenAI\nimport os\n\n# Set up environment (if not already configured)\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\n\n# Set up MLflow tracking\nmlflow.set_tracking_uri("http://127.0.0.1:5000")\nmlflow.set_experiment("manual-tracing-demo")\n\n# Enable automatic tracing for OpenAI\nmlflow.openai.autolog()\n\n\n@mlflow.trace(name="RAG Pipeline", span_type=SpanType.CHAIN)\ndef answer_question(question: str) -> str:\n    """A simple RAG pipeline with manual tracing."""\n\n    # Step 1: Retrieve context (manually traced)\n    context = retrieve_context(question)\n\n    # Step 2: Generate answer (automatically traced by OpenAI autolog)\n    client = OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=[\n            {"role": "system", "content": f"Context: {context}"},\n            {"role": "user", "content": question},\n        ],\n        max_tokens=150,\n    )\n\n    return response.choices[0].message.content\n\n\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_context(question: str) -> str:\n    """Simulate context retrieval."""\n    # Simulate retrieval logic\n    return f"Relevant context for: {question}"\n\n\n# Execute the traced pipeline\nresult = answer_question("What is MLflow Tracing?")\nprint(result)\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Generally, we recommend starting with ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"automatic tracing"})," and only moving to ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing",children:"manual tracing"})," if your application's logic is not accurately captured or you need more control."]})}),"\n",(0,r.jsx)(n.h2,{id:"automatic-tracing",children:"Automatic Tracing"}),"\n",(0,r.jsx)(n.p,{children:"Automatic tracing provides zero-code observability for supported libraries. Simply call the autolog function for your library and MLflow will automatically capture all relevant operations."}),"\n",(0,r.jsxs)(n.p,{children:["MLflow supports automatic tracing for 20+ popular GenAI libraries including LLM providers (OpenAI, Anthropic, Google Gemini, AWS Bedrock), frameworks (LangChain, LangGraph, LlamaIndex, DSPy). See the complete list at ",(0,r.jsx)(n.a,{href:"/genai/tracing/integrations",children:"Automatic Tracing Integrations"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.openai.autolog()\n"})}),"\n",(0,r.jsx)(n.p,{children:"You can enable autolog for multiple libraries simultaneously by calling each autolog function. For example, to enable autolog for OpenAI and LangChain, you can do:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.openai.autolog()\nmlflow.langchain.autolog()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"manual-tracing",children:"Manual Tracing"}),"\n",(0,r.jsx)(n.p,{children:"Manual tracing gives you fine-grained control over what gets traced and how. Use it to instrument custom logic, combine operations into logical units, or add custom metadata."}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(o.A,{value:"decorator",label:"@mlflow.trace Decorator",default:!0,children:[(0,r.jsx)(n.p,{children:"The decorator approach is ideal for instrumenting functions:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\n@mlflow.trace(name="Document Processor", span_type=SpanType.CHAIN)\ndef process_document(document: str, language: str = "en") -> dict:\n    """Process a document through multiple steps."""\n\n    # This entire function execution will be traced\n    tokens = tokenize(document)\n    entities = extract_entities(tokens, language)\n    summary = generate_summary(tokens)\n\n    return {"entities": entities, "summary": summary, "token_count": len(tokens)}\n'})})]}),(0,r.jsxs)(o.A,{value:"context-manager",label:"Context Manager",children:[(0,r.jsx)(n.p,{children:"Use context managers for instrumenting code blocks:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\ndef complex_pipeline(data):\n    with mlflow.start_span(name="Data Validation", span_type=SpanType.UNKNOWN) as span:\n        validated_data = validate_input(data)\n        span.set_attribute("validation_errors", len(validated_data.errors))\n\n    with mlflow.start_span(name="Model Prediction", span_type=SpanType.LLM) as span:\n        prediction = model.predict(validated_data)\n        span.set_attribute("confidence", prediction.confidence)\n\n    return prediction\n'})})]}),(0,r.jsxs)(o.A,{value:"combining",label:"Combining with Auto Tracing",children:[(0,r.jsx)(n.p,{children:"The most powerful approach combines both automatic and manual tracing:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\nfrom openai import OpenAI\n\n# Enable automatic tracing for OpenAI\nmlflow.openai.autolog()\n\n\n@mlflow.trace(name="RAG Pipeline", span_type=SpanType.CHAIN)\ndef rag_pipeline(question: str) -> str:\n    """A RAG pipeline with both manual and automatic tracing."""\n\n    # Manual tracing for custom retrieval logic\n    with mlflow.start_span(\n        name="Document Retrieval", span_type=SpanType.RETRIEVER\n    ) as span:\n        relevant_docs = search_documents(question)\n        span.set_attribute("documents_retrieved", len(relevant_docs))\n\n    # Automatic tracing for OpenAI call (via autolog)\n    client = OpenAI()\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=[\n            {"role": "system", "content": f"Context: {relevant_docs}"},\n            {"role": "user", "content": question},\n        ],\n    )\n\n    return response.choices[0].message.content\n'})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"span-types-and-attributes",children:"Span Types and Attributes"}),"\n",(0,r.jsxs)(n.p,{children:["Enhance your traces with proper categorization and metadata using span types like ",(0,r.jsx)(n.code,{children:"SpanType.CHAIN"}),", ",(0,r.jsx)(n.code,{children:"SpanType.LLM"}),", ",(0,r.jsx)(n.code,{children:"SpanType.RETRIEVER"}),", ",(0,r.jsx)(n.code,{children:"SpanType.EMBEDDING"}),", and others. Add custom attributes using ",(0,r.jsx)(n.code,{children:"span.set_attribute()"})," to capture important metadata about your operations."]}),"\n",(0,r.jsxs)(n.p,{children:["Learn more about manual tracing techniques, decorators, context managers, and advanced patterns in the ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing",children:"Manual Tracing Guide"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"view-logged-traces",children:"View Logged Traces"}),"\n",(0,r.jsx)(n.p,{children:"After instrumenting your application, you can view and analyze your traces in several ways:"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(o.A,{value:"mlflow-ui",label:"MLflow UI",default:!0,children:[(0,r.jsxs)(n.p,{children:["After logging your traces, you can view them in the ",(0,r.jsx)(n.a,{href:"/genai/tracing/observe-with-traces/ui",children:"MLflow UI"}),', under the "Traces" tab in the main experiment page. This tab is also available within the individual run pages, if your trace was logged within a run context.']}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"MLflow Tracking UI",src:t(76869).A+"",width:"3052",height:"1860"})}),(0,r.jsx)(n.p,{children:"This table includes high-level information about the traces, such as the trace ID, the inputs / outputs of the root span, and more. From this page, you can also perform a few actions to manage your traces:"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Search"}),": Using the search bar in the UI, you can easily filter your traces based on name, tags, or other metadata. Check out the ",(0,r.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"search docs"})," for details about the query string format."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Searching traces",src:t(17044).A+"",width:"1188",height:"720"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Delete"}),': The UI supports bulk deletion of traces. Simply select the traces you want to delete by checking the checkboxes, and then pressing the "Delete" button.']}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Deleting traces",src:t(92611).A+"",width:"3078",height:"1854"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Edit Tags"}),": You can also edit key-value tags on your traces via the UI."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Traces tag update",src:t(29225).A+"",width:"1188",height:"720"})}),(0,r.jsx)(n.p,{children:'To browse the span data of an individual trace, simply click on the link in the "Trace ID" or "Trace name" columns to open the trace viewer:'}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Trace Browser",src:t(36458).A+"",width:"1876",height:"1080"})})]}),(0,r.jsxs)(o.A,{value:"jupyter",label:"Jupyter Notebooks",children:[(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The MLflow Tracing Jupyter integration is available in ",(0,r.jsx)(n.strong,{children:"MLflow 2.20 and above"})]})}),(0,r.jsx)(n.p,{children:"You can also view the trace UI directly within Jupyter notebooks, allowing you to debug your applications without having to tab out of your development environment."}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Jupyter Trace UI",src:t(72371).A+"",width:"2440",height:"1586"})}),(0,r.jsxs)(n.p,{children:["This feature requires using an ",(0,r.jsx)(n.a,{href:"/ml/tracking/server",children:"MLflow Tracking Server"}),", as this is where the UI assets are fetched from. To get started, simply ensure that the MLflow Tracking URI is set to your tracking server (e.g. ",(0,r.jsx)(n.code,{children:'mlflow.set_tracking_uri("http://localhost:5000")'}),")."]}),(0,r.jsx)(n.p,{children:"By default, the trace UI will automatically be displayed for the following events:"}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"When the cell code generates a trace"})," (e.g. via ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"automatic tracing"}),", or by running a manually traced function)"]}),(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["When ",(0,r.jsx)(s.B,{fn:"mlflow.search_traces"})," is called"]})}),(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["When a ",(0,r.jsx)(s.B,{fn:"mlflow.entities.Trace"})," object is displayed"]})," (e.g. via IPython's ",(0,r.jsx)(n.code,{children:"display"})," function, or when it is the last value returned in a cell)"]}),(0,r.jsxs)(n.p,{children:["To disable the display, simply call ",(0,r.jsx)(s.B,{fn:"mlflow.tracing.disable_notebook_display"}),", and rerun the cell containing the UI. To enable it again, call ",(0,r.jsx)(s.B,{fn:"mlflow.tracing.enable_notebook_display"}),"."]})]}),(0,r.jsxs)(o.A,{value:"programmatic",label:"Programmatic Access",children:[(0,r.jsx)(n.p,{children:"Query and analyze traces programmatically:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Search for traces with specific criteria\ntraces = mlflow.search_traces(\n    experiment_ids=["1"],\n    filter_string="attributes.model_name = \'gpt-4o-mini\'",\n    max_results=100,\n)\n\n# Get a specific trace\ntrace = mlflow.get_trace("trace-id-here")\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Now that you understand the basics of instrumenting your app with MLflow Tracing, explore these detailed guides and resources:"}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsxs)(o.A,{value:"learn-more",label:"Learn More",default:!0,children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Deepen Your Tracing Knowledge:"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"Automatic Tracing"})}),": Explore all supported libraries and frameworks for one-line tracing integration"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing",children:"Manual Tracing"})}),": Learn advanced techniques for custom instrumentation and complex workflows"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing/fluent-apis#combining-with-auto-tracing",children:"Combining Approaches"})}),": Mix automatic and manual tracing for optimal observability"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/data-model",children:"Trace Data Model"})}),": Understand the structure of MLflow traces"]})]}),(0,r.jsxs)(o.A,{value:"integrations",label:"Integration Examples",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Library-Specific Guides:"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/integrations/listing/openai",children:"OpenAI Integration"})}),": Detailed OpenAI tracing examples and best practices"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/integrations/listing/langchain",children:"LangChain Integration"})}),": Comprehensive LangChain application tracing"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/integrations/listing/llama_index",children:"LlamaIndex Integration"})}),": Trace LlamaIndex workflows and components"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/integrations",children:"All Integrations"})}),": Browse all supported libraries and frameworks"]})]}),(0,r.jsxs)(o.A,{value:"working-with-traces",label:"Working with Traces",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Analyze and Use Your Trace Data:"})}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/observe-with-traces/query-via-sdk",children:"Query Traces"})}),": Programmatically access and analyze your traces"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Search and Filter"})}),": Advanced search techniques and filtering options"]}),(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/prod-tracing",children:"Production Monitoring"})}),": Scale tracing for production workloads"]})]})]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Recommended Learning Path:"})}),(0,r.jsx)(n.p,{children:"Start with automatic tracing for immediate value, then add manual tracing for custom logic and workflows. The combination of automatic and manual tracing gives you comprehensive observability into your GenAI applications with minimal overhead."})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},17044:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-session-id-ff53d036ab1d8fdc14b703fc5f0bc107.gif"},19365:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var a=t(34164);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function l({children:e,hidden:n,className:t}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(96540);const r={},i=a.createContext(r);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),a.createElement(i.Provider,{value:n},e.children)}},29225:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-set-tag-c0cbad6b75c04328db03a8f1eb4c3a09.gif"},36458:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/tracing-top-dcca046565ab33be6afe0447dd328c22.gif"},49374:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=t(86025),i=t(28774),l=t(74848);const o=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(a[e])return e}return null};function s({fn:e,children:n}){const t=o(e);if(!t)return(0,l.jsx)(l.Fragment,{children:n});const s=(0,r.Ay)(`/${a[t]}#${e}`);return(0,l.jsx)(i.A,{to:s,target:"_blank",children:n??(0,l.jsxs)("code",{children:[e,"()"]})})}},72371:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/jupyter-trace-ui-a11c56c439864da666540e9d501329cb.png"},76869:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-experiment-ui-1e174436e7842bab2320c79e501839a4.png"},92611:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace-delete-07f75d2aa0b7ea03c14d35fe3ec0bad3.gif"}}]);