"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3930],{4375:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/langgraph-tracing-de19faf75490081f4df76705b9a508ff.gif"},66114:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tracing/integrations/langgraph","title":"Tracing LangGraph\ud83e\udd9c\ud83d\udd78\ufe0f","description":"LangChain Tracing via autolog","source":"@site/docs/tracing/integrations/langgraph.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/langgraph","permalink":"/docs/latest/tracing/integrations/langgraph","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"LangGraph"},"sidebar":"docsSidebar","previous":{"title":"LangChain","permalink":"/docs/latest/tracing/integrations/langchain"},"next":{"title":"OpenAI Agents SDK","permalink":"/docs/latest/tracing/integrations/openai-agent"}}');var l=a(74848),o=a(28453),r=a(67756);a(86294),a(61096),a(65537),a(79329);const i={sidebar_position:3,sidebar_label:"LangGraph"},s="Tracing LangGraph\ud83e\udd9c\ud83d\udd78\ufe0f",p={},c=[{value:"Example Usage",id:"example-usage",level:3},{value:"Token Usage Tracking",id:"token-usage-tracking",level:2},{value:"Adding spans within a node or a tool",id:"adding-spans-within-a-node-or-a-tool",level:3},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tracing-langgraph\ufe0f",children:"Tracing LangGraph\ud83e\udd9c\ud83d\udd78\ufe0f"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"LangChain Tracing via autolog",src:a(4375).A+"",width:"1824",height:"1080"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://www.langchain.com/langgraph",children:"LangGraph"})," is an open-source library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/tracing/",children:"MLflow Tracing"})," provides automatic tracing capability for LangGraph, as a extension of its LangChain integration. By enabling auto-tracing for LangChain by calling the ",(0,l.jsx)(r.B,{fn:"mlflow.langchain.autolog"})," function, MLflow will\nautomatically capture the graph execution into a trace and log it to the active MLflow Experiment."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.langchain.autolog()\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"tip",children:(0,l.jsxs)(n.p,{children:["MLflow LangGraph integration is not only about tracing. MLflow offers full tracking experience for LangGraph, including model tracking, dependency management, and evaluation. Please checkout the ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/llms/langchain",children:"MLflow LangChain Flavor"})})," to learn more!"]})}),"\n",(0,l.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,l.jsx)(n.p,{children:"Running the following code will generate a trace for the graph as shown in the above video clip."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from typing import Literal\n\nimport mlflow\n\nfrom langchain_core.messages import AIMessage, ToolCall\nfrom langchain_core.outputs import ChatGeneration, ChatResult\nfrom langchain_core.tools import tool\nfrom langchain_openai import ChatOpenAI\nfrom langgraph.prebuilt import create_react_agent\n\n# Enabling tracing for LangGraph (LangChain)\nmlflow.langchain.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("LangGraph")\n\n\n@tool\ndef get_weather(city: Literal["nyc", "sf"]):\n    """Use this to get weather information."""\n    if city == "nyc":\n        return "It might be cloudy in nyc"\n    elif city == "sf":\n        return "It\'s always sunny in sf"\n\n\nllm = ChatOpenAI(model="gpt-4o-mini")\ntools = [get_weather]\ngraph = create_react_agent(llm, tools)\n\n# Invoke the graph\nresult = graph.invoke(\n    {"messages": [{"role": "user", "content": "what is the weather in sf?"}]}\n)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"token-usage-tracking",children:"Token Usage Tracking"}),"\n",(0,l.jsxs)(n.p,{children:["MLflow >= 3.1.0 supports token usage tracking for LangGraph. The token usage for each LLM call during a graph invocation will be logged in the ",(0,l.jsx)(n.code,{children:"mlflow.chat.tokenUsage"})," span attribute, and the total usage in the entire trace will be logged in the ",(0,l.jsx)(n.code,{children:"mlflow.trace.tokenUsage"})," metadata field."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'import json\nimport mlflow\n\nmlflow.langchain.autolog()\n\n# Execute the agent graph defined in the previous example\ngraph.invoke({"messages": [{"role": "user", "content": "what is the weather in sf?"}]})\n\n# Get the trace object just created\nlast_trace_id = mlflow.get_last_active_trace_id()\ntrace = mlflow.get_trace(trace_id=last_trace_id)\n\n# Print the token usage\ntotal_usage = trace.info.token_usage\nprint("== Total token usage: ==")\nprint(f"  Input tokens: {total_usage[\'input_tokens\']}")\nprint(f"  Output tokens: {total_usage[\'output_tokens\']}")\nprint(f"  Total tokens: {total_usage[\'total_tokens\']}")\n\n# Print the token usage for each LLM call\nprint("\\n== Token usage for each LLM call: ==")\nfor span in trace.data.spans:\n    if usage := span.get_attribute("mlflow.chat.tokenUsage"):\n        print(f"{span.name}:")\n        print(f"  Input tokens: {usage[\'input_tokens\']}")\n        print(f"  Output tokens: {usage[\'output_tokens\']}")\n        print(f"  Total tokens: {usage[\'total_tokens\']}")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"== Total token usage: ==\n  Input tokens: 149\n  Output tokens: 135\n  Total tokens: 284\n\n== Token usage for each LLM call: ==\nChatOpenAI_1:\n  Input tokens: 58\n  Output tokens: 87\n  Total tokens: 145\nChatOpenAI_2:\n  Input tokens: 91\n  Output tokens: 48\n  Total tokens: 139\n"})}),"\n",(0,l.jsx)(n.h3,{id:"adding-spans-within-a-node-or-a-tool",children:"Adding spans within a node or a tool"}),"\n",(0,l.jsxs)(n.p,{children:["By combining auto-tracing with the ",(0,l.jsx)(n.a,{href:"/tracing/api/manual-instrumentation/",children:"manual tracing APIs"}),", you can add child spans inside a node or tool, to get more detailed insights for the step."]}),"\n",(0,l.jsxs)(n.p,{children:["Let's take LangGraph's ",(0,l.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraph/tutorials/code_assistant/langgraph_code_assistant/#graph",children:"Code Assistant"})," tutorial for example. The ",(0,l.jsx)(n.code,{children:"check_code"})," node actually consists of two different validations for the generated code. You may want to add span for each validation to see which validation were executed. To do so, simply create manual spans inside the node function."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'def code_check(state: GraphState):\n    # State\n    messages = state["messages"]\n    code_solution = state["generation"]\n    iterations = state["iterations"]\n\n    # Get solution components\n    imports = code_solution.imports\n    code = code_solution.code\n\n    # Check imports\n    try:\n        # Create a child span manually with mlflow.start_span() API\n        with mlflow.start_span(name="import_check", span_type=SpanType.TOOL) as span:\n            span.set_inputs(imports)\n            exec(imports)\n            span.set_outputs("ok")\n    except Exception as e:\n        error_message = [("user", f"Your solution failed the import test: {e}")]\n        messages += error_message\n        return {\n            "generation": code_solution,\n            "messages": messages,\n            "iterations": iterations,\n            "error": "yes",\n        }\n\n    # Check execution\n    try:\n        code = imports + "\\n" + code\n        with mlflow.start_span(name="execution_check", span_type=SpanType.TOOL) as span:\n            span.set_inputs(code)\n            exec(code)\n            span.set_outputs("ok")\n    except Exception as e:\n        error_message = [("user", f"Your solution failed the code execution test: {e}")]\n        messages += error_message\n        return {\n            "generation": code_solution,\n            "messages": messages,\n            "iterations": iterations,\n            "error": "yes",\n        }\n\n    # No errors\n    return {\n        "generation": code_solution,\n        "messages": messages,\n        "iterations": iterations,\n        "error": "no",\n    }\n'})}),"\n",(0,l.jsxs)(n.p,{children:["This way, the span for the ",(0,l.jsx)(n.code,{children:"check_code"})," node will have child spans, which record whether the each validation fails or not, with their exception details."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.img,{alt:"LangGraph Child Span",src:a(96467).A+"",width:"2838",height:"478"})}),"\n",(0,l.jsx)(n.h3,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,l.jsxs)(n.p,{children:["Auto tracing for LangGraph can be disabled globally by calling ",(0,l.jsx)(n.code,{children:"mlflow.langchain.autolog(disable=True)"})," or ",(0,l.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},67756:(e,n,a)=>{a.d(n,{B:()=>s});a(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var l=a(29030),o=a(56289),r=a(74848);const i=e=>{const n=e.split(".");for(let a=n.length;a>0;a--){const e=n.slice(0,a).join(".");if(t[e])return e}return null};function s(e){let{fn:n,children:a}=e;const s=i(n);if(!s)return(0,r.jsx)(r.Fragment,{children:a});const p=(0,l.Ay)(`/${t[s]}#${n}`);return(0,r.jsx)(o.A,{to:p,target:"_blank",children:a??(0,r.jsxs)("code",{children:[n,"()"]})})}},86294:(e,n,a)=>{a.d(n,{Zp:()=>s,AC:()=>i,WO:()=>c,tf:()=>m,_C:()=>p,$3:()=>h,jK:()=>d});var t=a(34164);const l={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var o=a(56289),r=a(74848);const i=e=>{let{children:n,isSmall:a,cols:o}=e;return(0,r.jsx)("div",{className:(0,t.A)(l.CardGroup,a?l.AutofillColumns:o?l[`Cols${o}`]:l.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:a=""}=e;return a?(0,r.jsx)(o.A,{className:(0,t.A)(l.Link,l.Card,l.CardBordered),to:a,children:n}):(0,r.jsx)("div",{className:(0,t.A)(l.Card,l.CardBordered),children:n})},p=e=>{let{headerText:n,link:a,text:o}=e;return(0,r.jsx)(s,{link:a,children:(0,r.jsxs)("span",{children:[(0,r.jsx)("div",{className:(0,t.A)(l.CardTitle,l.BoxRoot,l.PaddingBottom4),style:{pointerEvents:"none"},children:(0,r.jsx)("div",{className:(0,t.A)(l.BoxRoot,l.FlexFlex,l.FlexAlignItemsCenter,l.FlexDirectionRow,l.FlexJustifyContentFlexStart,l.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,r.jsx)("div",{className:(0,t.A)(l.BoxRoot,l.BoxHideIfEmpty,l.MarginTop4,l.MarginLeft4),style:{pointerEvents:"auto"},children:(0,r.jsx)("span",{className:"",children:n})})})}),(0,r.jsx)("span",{className:(0,t.A)(l.TextColor,l.CardBody),children:(0,r.jsx)("p",{children:o})})]})})},c=e=>{let{description:n,children:a,link:t}=e;return(0,r.jsx)(s,{link:t,children:(0,r.jsxs)("div",{className:l.LogoCardContent,children:[(0,r.jsx)("div",{className:l.LogoCardImage,children:a}),(0,r.jsx)("p",{className:l.TextColor,children:n})]})})},h=e=>{let{children:n,link:a}=e;return(0,r.jsx)(s,{link:a,children:(0,r.jsx)("div",{className:l.SmallLogoCardContent,children:(0,r.jsx)("div",{className:(0,t.A)("max-height-img-container",l.SmallLogoCardImage),children:n})})})},m=e=>{let{children:n,description:a,name:t,releaseVersion:i,learnMoreLink:p=""}=e;return(0,r.jsx)(s,{children:(0,r.jsxs)("div",{className:l.NewFeatureCardWrapper,children:[(0,r.jsxs)("div",{className:l.NewFeatureCardContent,children:[(0,r.jsxs)("div",{className:l.NewFeatureCardHeading,children:[t,(0,r.jsx)("br",{}),(0,r.jsx)("hr",{className:l.NewFeatureCardHeadingSeparator})]}),(0,r.jsx)("div",{className:l.LogoCardImage,children:n}),(0,r.jsx)("br",{}),(0,r.jsx)("p",{children:a}),(0,r.jsx)("br",{})]}),(0,r.jsxs)("div",{className:l.NewFeatureCardTags,children:[(0,r.jsx)("div",{children:p&&(0,r.jsx)(o.A,{className:"button button--outline button--sm button--primary",to:p,children:"Learn more"})}),(0,r.jsxs)(o.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${i}`,children:["released in ",i]})]})]})})},d=e=>{let{title:n,description:a,link:o=""}=e;return(0,r.jsx)(s,{link:o,children:(0,r.jsxs)("div",{className:l.TitleCardContent,children:[(0,r.jsx)("div",{className:(0,t.A)(l.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:n}),(0,r.jsx)("hr",{className:(0,t.A)(l.TitleCardSeparator),style:{margin:"12px 0"}}),(0,r.jsx)("p",{className:(0,t.A)(l.TextColor),children:a})]})})}},96467:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/langgraph-child-span-076b0cb599aeabce965b36602d5fda82.png"}}]);