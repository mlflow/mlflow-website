"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[996],{11470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(96540),s=t(34164),r=t(23104),i=t(56347),o=t(205),l=t(57485),c=t(31682),d=t(70679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[i,l]=(0,a.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[c,p]=m({queryString:t,groupId:s}),[f,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:s}),x=(()=>{const e=c??f;return u({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var _=t(74848);function j({className:e,block:n,selectedValue:t,selectValue:a,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,s=o.indexOf(n),r=i[s].value;r!==t&&(l(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,_.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:a})=>(0,_.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find((e=>e.props.value===t));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,_.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function w(e){const n=f(e);return(0,_.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,_.jsx)(j,{...n,...e}),(0,_.jsx)(y,{...n,...e})]})}function v(e){const n=(0,g.A)();return(0,_.jsx)(w,{...e,children:p(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var a=t(34164);const s={tabItem:"tabItem_Ymn6"};var r=t(74848);function i({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},29899:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/spans_in_mlflow_ui-fb6052e2093862fc0477999a92b76f7a.png"},36924:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace_info_in_ui-ad801e1eeea03ac3004bed18a34fbf8c.png"},40135:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/span_architecture-01e1f5a3edf522f567e7eaad16f2b1d1.png"},49374:(e,n,t)=>{t.d(n,{B:()=>l});t(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var s=t(86025),r=t(28774),i=t(74848);const o=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(a[e])return e}return null};function l({fn:e,children:n}){const t=o(e);if(!t)return(0,i.jsx)(i.Fragment,{children:n});const l=(0,s.Ay)(`/${a[t]}#${e}`);return(0,i.jsx)(r.A,{to:l,target:"_blank",children:n??(0,i.jsxs)("code",{children:[e,"()"]})})}},58090:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/trace_architecture-4d7b474a12b802862207e96a40040e12.png"},68976:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"tracing/data-model","title":"Trace Data Model","description":"This document provides a detailed overview of the MLflow Trace data model. Understanding this model is key to leveraging MLflow Tracing for observability and analysis of your Generative AI applications.","source":"@site/docs/genai/tracing/data-model.mdx","sourceDirName":"tracing","slug":"/tracing/data-model","permalink":"/docs/latest/genai/tracing/data-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Tracing Concepts","permalink":"/docs/latest/genai/tracing/concepts/trace-instrumentation"},"next":{"title":"Feedback Concepts","permalink":"/docs/latest/genai/tracing/concepts/trace/feedback"}}');var s=t(74848),r=t(28453),i=t(11470),o=t(19365),l=t(49374);const c={},d="Trace Data Model",p={},h=[{value:"Structure of Traces",id:"structure-of-traces",level:2},{value:"TraceInfo: Metadata and Context",id:"traceinfo-metadata-and-context",level:2},{value:"Tags",id:"tags",level:2},{value:"Standard Tags",id:"standard-tags",level:3},{value:"Custom Tags for Advanced Use Cases",id:"custom-tags-for-advanced-use-cases",level:3},{value:"TraceData: Execution Details",id:"tracedata-execution-details",level:2},{value:"Span Schema",id:"span-schema",level:2},{value:"Core Span Properties",id:"core-span-properties",level:3},{value:"Advanced Span Attributes",id:"advanced-span-attributes",level:3},{value:"Span Types",id:"span-types",level:2},{value:"Specialized Span Schemas",id:"specialized-span-schemas",level:2},{value:"Retriever Spans",id:"retriever-spans",level:3},{value:"Example Usage",id:"example-usage",level:4},{value:"Advanced Retriever Example with Rich Metadata",id:"advanced-retriever-example-with-rich-metadata",level:4},{value:"Chat Completion Spans",id:"chat-completion-spans",level:3},{value:"Special Attributes",id:"special-attributes",level:4},{value:"Example Usage",id:"example-usage-1",level:4},{value:"Advanced Chat Model Span with Rich Context",id:"advanced-chat-model-span-with-rich-context",level:4},{value:"Working with Trace Data",id:"working-with-trace-data",level:2},{value:"Programmatic Analysis",id:"programmatic-analysis",level:3},{value:"Quality Assessment",id:"quality-assessment",level:3},{value:"Integration with Evaluation",id:"integration-with-evaluation",level:3},{value:"Advanced Analytics and Monitoring",id:"advanced-analytics-and-monitoring",level:3},{value:"Cost Analysis Example",id:"cost-analysis-example",level:4},{value:"Performance Monitoring Example",id:"performance-monitoring-example",level:4},{value:"Error Pattern Analysis",id:"error-pattern-analysis",level:4},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"trace-data-model",children:"Trace Data Model"})}),"\n",(0,s.jsx)(n.p,{children:"This document provides a detailed overview of the MLflow Trace data model. Understanding this model is key to leveraging MLflow Tracing for observability and analysis of your Generative AI applications."}),"\n",(0,s.jsxs)(n.p,{children:["MLflow Traces are designed to be ",(0,s.jsx)(n.strong,{children:"compatible with OpenTelemetry specifications"}),", a widely adopted industry standard for observability. This ensures interoperability and allows MLflow Traces to be exported and used with other OpenTelemetry-compatible systems. MLflow enhances the basic OpenTelemetry Span model by defining specific structures and attributes for Generative AI use cases, providing richer context and deeper insight into quality and performance."]}),"\n",(0,s.jsx)(n.h2,{id:"structure-of-traces",children:"Structure of Traces"}),"\n",(0,s.jsxs)(n.p,{children:["At a high level, an MLflow ",(0,s.jsx)(n.strong,{children:"Trace"})," is composed of two primary objects:"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(l.B,{fn:"mlflow.entities.TraceInfo",children:"TraceInfo"})}),": Metadata that aids in explaining the origination of the trace, the status of the trace, information about the total execution time, etc. This includes tags that provide additional context for the trace, such as the user, session, and developer-provided key",":value"," pairs. Tags can be used for searching or filtering traces."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(l.B,{fn:"mlflow.entities.TraceData",children:"TraceData"})}),": The actual payload, which contains the instrumented ",(0,s.jsx)(l.B,{fn:"mlflow.entities.Span",children:"Span"})," objects that capture your application's step-by-step execution from input to output."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Check the API documentation for helper methods on these dataclass objects for more information on how to convert or extract data from them."})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Trace Architecture",src:t(58090).A+"",width:"1204",height:"903"})}),"\n",(0,s.jsx)(n.h2,{id:"traceinfo-metadata-and-context",children:"TraceInfo: Metadata and Context"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"TraceInfo"})," within MLflow's tracing feature aims to provide a lightweight snapshot of critical data about the overall trace. ",(0,s.jsx)(n.code,{children:"TraceInfo"})," is a dataclass object that contains metadata about the trace."]}),"\n",(0,s.jsxs)(n.p,{children:["This metadata includes information about the trace's origin, status, and various other data that aids in retrieving and filtering traces when used with ",(0,s.jsx)(l.B,{fn:"mlflow.search_traces"})," and for navigation of traces within the MLflow UI."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{value:"core-fields",label:"Core Fields",default:!0,children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"trace_id"})})," (str): The primary identifier for the trace."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"trace_location"})})," (TraceLocation): The location where the trace is stored, represented as a TraceLocation object. MLflow currently supports MLflow Experiment as a trace location."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"request_time"})})," (int): Start time of the trace, in milliseconds."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"state"})})," (TraceState): State of the trace, represented as a TraceState enum. Can be one of [",(0,s.jsx)(n.code,{children:"OK"}),", ",(0,s.jsx)(n.code,{children:"ERROR"}),", ",(0,s.jsx)(n.code,{children:"IN_PROGRESS"}),", ",(0,s.jsx)(n.code,{children:"STATE_UNSPECIFIED"}),"]."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"execution_duration"})})," (Optional[int]): Duration of the trace, in milliseconds."]})]}),(0,s.jsxs)(o.A,{value:"preview-fields",label:"Request & Response",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"request_preview"})})," (Optional[str]): Request to the model/agent, equivalent to the input of the root span but JSON-encoded and can be truncated."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"response_preview"})})," (Optional[str]): Response from the model/agent, equivalent to the output of the root span but JSON-encoded and can be truncated."]}),(0,s.jsx)(n.p,{children:"These preview fields provide a quick overview of what the trace processed without needing to examine the detailed span data."})]}),(0,s.jsxs)(o.A,{value:"metadata-fields",label:"Metadata & Organization",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"client_request_id"})})," (Optional[str]): Client supplied request ID associated with the trace. This could be used to identify the trace/request from an external system that produced the trace, e.g., a session ID in a web application."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"trace_metadata"})})," (dict[str, str]): Key-value pairs associated with the trace. They are designed for immutable values like run ID associated with the trace."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"tags"})})," (dict[str, str]): Tags associated with the trace. They are designed for mutable values, that can be updated after the trace is created via MLflow UI or API."]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The data that is contained in the ",(0,s.jsx)(n.code,{children:"TraceInfo"})," object is used to populate the trace view page within the MLflow tracking UI."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"TraceInfo as it is used in the MLflow UI",src:t(36924).A+"",width:"2920",height:"918"})}),"\n",(0,s.jsx)(n.h2,{id:"tags",children:"Tags"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tags"})," property in MLflow's ",(0,s.jsx)(n.code,{children:"TraceInfo"})," object is used to provide additional context for the trace. These tags can be used for searching, filtering, or providing additional information about the trace."]}),"\n",(0,s.jsx)(n.p,{children:"The tags are key-value pairs, and they are mutable. This means that you can add, modify, or remove tags at any time, even after the trace has been logged to an experiment."}),"\n",(0,s.jsx)(n.h3,{id:"standard-tags",children:"Standard Tags"}),"\n",(0,s.jsx)(n.p,{children:"MLflow uses a set of standard tags for common contextual information about users, sessions and the environment, which enable enhanced filtering and grouping capabilities within the MLflow UI and SDK:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.trace.session"})}),": Standard tag for session ID"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.trace.user"})}),": Standard tag for user ID"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.source.name"})}),": The entry point or script that generated the trace"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.source.git.commit"})}),": If run from a Git repository, the commit hash of the source code"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.source.type"})}),": The type of source that generated the trace, commonly ",(0,s.jsx)(n.code,{children:"PROJECT"})," (for MLflow Project runs) or ",(0,s.jsx)(n.code,{children:"NOTEBOOK"})," (if run from a notebook)"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-tags-for-advanced-use-cases",children:"Custom Tags for Advanced Use Cases"}),"\n",(0,s.jsx)(n.p,{children:"For enterprise and distributed applications, custom tags enable powerful filtering and organization:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Business Context Tags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Business-specific identification\nmlflow.update_current_trace(\n    tags={\n        "business.user_id": "user123",\n        "business.tenant_id": "tenant_456",\n        "business.cost_center": "engineering",\n        "business.department": "ai_platform",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Deployment and Environment Tags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Deployment context\nmlflow.update_current_trace(\n    tags={\n        "deployment.environment": "production",\n        "deployment.region": "us-west-2",\n        "deployment.service": "recommendation_engine",\n        "deployment.version": "v2.3.1",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance and Quality Tags:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Performance monitoring\nmlflow.update_current_trace(\n    tags={\n        "performance.tier": "premium",\n        "quality.confidence_threshold": "0.8",\n        "feature.experimental": "true",\n        "monitoring.alert_level": "high",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"tracedata-execution-details",children:"TraceData: Execution Details"}),"\n",(0,s.jsxs)(n.p,{children:["The MLflow ",(0,s.jsx)(n.code,{children:"TraceData"})," object, accessible via ",(0,s.jsx)(n.code,{children:"Trace.data"}),", holds the core payload of the trace. It primarily contains the sequence of operations (spans) that occurred, along with the initial request that triggered the trace and the final response produced."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{value:"spans",label:"Spans",default:!0,children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"spans"})})," (List[",(0,s.jsx)(l.B,{fn:"mlflow.entities.Span",children:"Span"}),"]): This is a list of Span objects (conforming to OpenTelemetry specifications) that represent the individual steps, operations, or function calls within the trace. Each span details a specific unit of work."]}),(0,s.jsxs)(n.p,{children:["Spans are organized hierarchically via ",(0,s.jsx)(n.code,{children:"parent_id"})," to represent the execution flow."]}),(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"#span-schema",children:"Span Schema"})," section below for a detailed breakdown of a Span object."]})]}),(0,s.jsxs)(o.A,{value:"request-response",label:"Request & Response",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"request"})})," (str): A JSON-serialized string representing the input data for the root span of the trace. This is typically the end-user's request or the initial parameters that invoked the traced application or workflow."]}),(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.code,{children:'\'{"query": "What is MLflow Tracing?", "user_id": "user123"}\''})]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"response"})})," (str): A JSON-serialized string representing the final output data from the root span of the traced application or workflow."]}),(0,s.jsxs)(n.p,{children:["Example: ",(0,s.jsx)(n.code,{children:'\'{"answer": "MLflow Tracing provides observability...", "confidence": 0.95}\''})]}),(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"request"})," and ",(0,s.jsx)(n.code,{children:"response"})," properties are preserved for backward compatibility. Their values are looked up from the respective ",(0,s.jsx)(n.code,{children:"inputs"})," and ",(0,s.jsx)(n.code,{children:"outputs"})," attribute of the root span and are not set directly by the user on the ",(0,s.jsx)(n.code,{children:"TraceData"})," object."]})})]})]}),"\n",(0,s.jsxs)(n.p,{children:["Understanding ",(0,s.jsx)(n.code,{children:"TraceData"})," is key to programmatically analyzing the detailed execution path and the data transformations that occur throughout your GenAI application's lifecycle."]}),"\n",(0,s.jsx)(n.h2,{id:"span-schema",children:"Span Schema"}),"\n",(0,s.jsxs)(n.p,{children:["The Span object within MLflow's tracing feature provides detailed information about the individual steps of the trace. It complies with the ",(0,s.jsx)(n.a,{href:"https://opentelemetry.io/docs/concepts/signals/traces#spans",children:"OpenTelemetry Span spec"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Each Span object contains information about the step being instrumented, including the span_id, name, start_time, parent_id, status, inputs, outputs, attributes, and events."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Span Architecture",src:t(40135).A+"",width:"1880",height:"1149"})}),"\n",(0,s.jsx)(n.h3,{id:"core-span-properties",children:"Core Span Properties"}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsxs)(o.A,{value:"identity",label:"Identity & Hierarchy",default:!0,children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"span_id"})})," (str): A unique identifier that is generated for each span within a trace."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"trace_id"})})," (str): The unique identifier that links this span to its parent trace."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"parent_id"})})," (Optional[str]): The identifier that establishes the hierarchical association of a given span with its parent span."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"name"})})," (str): The name of the span, either user-defined or automatically generated based on the function or method being instrumented."]})]}),(0,s.jsxs)(o.A,{value:"timing",label:"Timing & Status",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"start_time_ns"})})," (int): The unix timestamp (in nanoseconds) when the span was started."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"end_time_ns"})})," (int): The unix timestamp (in nanoseconds) when the span was ended."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"status"})})," (SpanStatus): The status of a span with values of OK, UNSET, or ERROR. The span status object contains an optional description if the status_code is reflecting an error that occurred."]})]}),(0,s.jsxs)(o.A,{value:"data",label:"Data & Context",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"inputs"})})," (Optional[Any]): The inputs are stored as JSON-serialized data, representing the input data that is passed into the particular stage of your application."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"outputs"})})," (Optional[Any]): The outputs are stored as JSON-serialized data, representing the output data that is passed out of the particular stage of your application."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"attributes"})})," (Dict[str, Any]): Attributes are metadata that are associated with a given step within your application. These are key-value pairs that provide insight into behavioral modifications for function and method calls."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"events"})})," (List[SpanEvent]): Events are a system-level property that is optionally applied to a span only if there was an issue during the execution of the span. These events contain information about exceptions that were thrown in the instrumented call, as well as the stack trace."]})]})]}),"\n",(0,s.jsx)(n.p,{children:"When you view your traces within the MLflow UI, you're looking at a collection of spans, as shown below:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Spans within the MLflow UI",src:t(29899).A+"",width:"2684",height:"2068"})}),"\n",(0,s.jsx)(n.h3,{id:"advanced-span-attributes",children:"Advanced Span Attributes"}),"\n",(0,s.jsx)(n.p,{children:"For production and enterprise use cases, spans can include rich contextual attributes:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Model and Infrastructure Attributes:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'span.set_attributes(\n    {\n        "ai.model.name": "gpt-4",\n        "ai.model.version": "2024-01-01",\n        "ai.model.provider": "openai",\n        "ai.model.temperature": 0.7,\n        "ai.model.max_tokens": 1000,\n        "infrastructure.gpu.type": "A100",\n        "infrastructure.memory.used_mb": 2048,\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Business Logic Attributes:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'span.set_attributes(\n    {\n        "business.operation.type": "content_generation",\n        "business.user.tier": "premium",\n        "business.request.priority": "high",\n        "business.cost.estimate_usd": 0.02,\n        "business.compliance.region": "eu-west-1",\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance and Quality Attributes:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'span.set_attributes(\n    {\n        "performance.cache.hit": True,\n        "performance.retry.count": 0,\n        "quality.confidence.score": 0.95,\n        "quality.toxicity.score": 0.02,\n        "monitoring.latency.p99": 150.5,\n    }\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"span-types",children:"Span Types"}),"\n",(0,s.jsxs)(n.p,{children:["Span types are a way to categorize spans within a trace. By default, the span type is set to ",(0,s.jsx)(n.code,{children:'"UNKNOWN"'})," when using the trace decorator. MLflow provides a set of predefined span types for common use cases, while also allowing you to set custom span types."]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(o.A,{value:"built-in",label:"Built-in Types",default:!0,children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Span Type"})}),(0,s.jsx)(n.th,{children:(0,s.jsx)(n.strong,{children:"Description"})})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"CHAT_MODEL"'})}),(0,s.jsx)(n.td,{children:"Represents a query to a chat model. This is a special case of an LLM interaction."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"CHAIN"'})}),(0,s.jsx)(n.td,{children:"Represents a chain of operations."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"AGENT"'})}),(0,s.jsx)(n.td,{children:"Represents an autonomous agent operation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"TOOL"'})}),(0,s.jsx)(n.td,{children:"Represents a tool execution (typically by an agent), such as querying a search engine."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"EMBEDDING"'})}),(0,s.jsx)(n.td,{children:"Represents a text embedding operation."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"RETRIEVER"'})}),(0,s.jsx)(n.td,{children:"Represents a context retrieval operation, such as querying a vector database."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"PARSER"'})}),(0,s.jsx)(n.td,{children:"Represents a parsing operation, transforming text into a structured format."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"RERANKER"'})}),(0,s.jsx)(n.td,{children:"Represents a re-ranking operation, ordering the retrieved contexts based on relevance."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"UNKNOWN"'})}),(0,s.jsx)(n.td,{children:"A default span type that is used when no other span type is specified."})]})]})]})}),(0,s.jsxs)(o.A,{value:"usage",label:"Usage Examples",children:[(0,s.jsxs)(n.p,{children:["To set a span type, you can pass the ",(0,s.jsx)(n.code,{children:"span_type"})," parameter to the ",(0,s.jsx)(l.B,{fn:"mlflow.trace"})," decorator or ",(0,s.jsx)(l.B,{fn:"mlflow.start_span"})," context manager. When you are using ",(0,s.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"automatic tracing"}),", the span type is automatically set by MLflow."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\n\n\n# Using a built-in span type\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_documents(query: str):\n    ...\n\n\n# Setting a custom span type\nwith mlflow.start_span(name="add", span_type="MATH") as span:\n    span.set_inputs({"x": x, "y": y})\n    z = x + y\n    span.set_outputs({"z": z})\n\n    print(span.span_type)\n    # Output: MATH\n'})})]}),(0,s.jsxs)(o.A,{value:"custom",label:"Custom Span Types",children:[(0,s.jsx)(n.p,{children:"For specialized applications, you can define custom span types that reflect your domain:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Financial services\n@mlflow.trace(span_type="RISK_ASSESSMENT")\ndef assess_credit_risk(application):\n    ...\n\n\n@mlflow.trace(span_type="FRAUD_DETECTION")\ndef detect_fraud(transaction):\n    ...\n\n\n# Healthcare\n@mlflow.trace(span_type="DIAGNOSIS")\ndef generate_diagnosis(symptoms):\n    ...\n\n\n@mlflow.trace(span_type="TREATMENT_RECOMMENDATION")\ndef recommend_treatment(diagnosis):\n    ...\n\n\n# E-commerce\n@mlflow.trace(span_type="PRODUCT_RECOMMENDATION")\ndef recommend_products(user_profile):\n    ...\n\n\n@mlflow.trace(span_type="INVENTORY_CHECK")\ndef check_inventory(product_id):\n    ...\n'})})]})]}),"\n",(0,s.jsx)(n.h2,{id:"specialized-span-schemas",children:"Specialized Span Schemas"}),"\n",(0,s.jsx)(n.p,{children:"MLflow has predefined types of spans, and certain span types have properties that are required in order to enable additional functionality within the UI and downstream tasks such as evaluation."}),"\n",(0,s.jsx)(n.h3,{id:"retriever-spans",children:"Retriever Spans"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RETRIEVER"})," span type is used for operations involving retrieving data from a data store (for example, querying documents from a vector store). The output of a ",(0,s.jsx)(n.code,{children:"RETRIEVER"})," span is expected to be a list of documents."]}),"\n",(0,s.jsx)(n.p,{children:"Each document in the list should be a dictionary with the following structure:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"page_content"})})," (str): The text content of the retrieved document chunk."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"metadata"})})," (Optional[Dict[str, Any]]): A dictionary of additional metadata associated with the document. MLflow UI and evaluation metrics may specifically look for:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"doc_uri"})," (str): A string URI for the document source"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"chunk_id"})," (str): A string identifier if the document is part of a larger chunked document"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"id"})})," (Optional[str]): An optional unique identifier for the document chunk itself."]}),"\n",(0,s.jsx)(n.h4,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType, Document\n\n\ndef search_store(query: str) -> list[tuple[str, str]]:\n    # Simulate retrieving documents (e.g., from a vector database)\n    return [\n        (\n            "MLflow Tracing helps debug GenAI applications...",\n            "docs/mlflow/tracing_intro.md",\n        ),\n        (\n            "Key components of a trace include spans...",\n            "docs/mlflow/tracing_datamodel.md",\n        ),\n        ("MLflow provides automatic instrumentation...", "docs/mlflow/auto_trace.md"),\n    ]\n\n\n@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef retrieve_relevant_documents(query: str):\n    # Get documents from the search store\n    docs = search_store(query)\n\n    # Get the current active span (created by @mlflow.trace)\n    span = mlflow.get_current_active_span()\n\n    # Set the outputs of the span in accordance with the tracing schema\n    outputs = [\n        Document(page_content=doc, metadata={"doc_uri": uri}) for doc, uri in docs\n    ]\n    span.set_outputs(outputs)\n\n    # Return the original format for downstream usage\n    return docs\n\n\n# Example usage\nuser_query = "MLflow Tracing benefits"\nretrieved_docs = retrieve_relevant_documents(user_query)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"advanced-retriever-example-with-rich-metadata",children:"Advanced Retriever Example with Rich Metadata"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@mlflow.trace(span_type=SpanType.RETRIEVER)\ndef advanced_retrieval(query: str, top_k: int = 5):\n    """Advanced document retrieval with comprehensive metadata"""\n\n    # Simulate vector database query with scores and metadata\n    results = vector_db.similarity_search_with_score(\n        query=query, k=top_k, filter={"status": "active"}\n    )\n\n    span = mlflow.get_current_active_span()\n\n    # Rich document structure with comprehensive metadata\n    documents = []\n    for doc, score in results:\n        document = {\n            "page_content": doc.page_content,\n            "metadata": {\n                "doc_uri": doc.metadata.get("source_url"),\n                "chunk_id": doc.metadata.get("chunk_id"),\n                "document_title": doc.metadata.get("title"),\n                "author": doc.metadata.get("author"),\n                "creation_date": doc.metadata.get("created_at"),\n                "document_type": doc.metadata.get("type"),\n                "similarity_score": float(score),\n                "retrieval_timestamp": time.time(),\n                "chunk_position": doc.metadata.get("chunk_index"),\n                "total_chunks": doc.metadata.get("total_chunks"),\n            },\n            "id": doc.metadata.get("doc_id"),\n        }\n        documents.append(document)\n\n    # Set additional span attributes for debugging and analysis\n    span.set_attributes(\n        {\n            "retrieval.query_length": len(query),\n            "retrieval.results_count": len(documents),\n            "retrieval.avg_similarity": sum(\n                d["metadata"]["similarity_score"] for d in documents\n            )\n            / len(documents),\n            "retrieval.database": "production_vector_db",\n            "retrieval.index_name": "knowledge_base_v2",\n        }\n    )\n\n    span.set_outputs(documents)\n    return documents\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Conforming to this structure, especially including ",(0,s.jsx)(n.code,{children:"page_content"})," and relevant ",(0,s.jsx)(n.code,{children:"metadata"})," like ",(0,s.jsx)(n.code,{children:"doc_uri"}),", will ensure that ",(0,s.jsx)(n.code,{children:"RETRIEVER"})," spans are rendered informatively in the MLflow UI and that downstream evaluation tasks can correctly process the retrieved context."]}),"\n",(0,s.jsx)(n.h3,{id:"chat-completion-spans",children:"Chat Completion Spans"}),"\n",(0,s.jsxs)(n.p,{children:["Spans of type ",(0,s.jsx)(n.code,{children:"CHAT_MODEL"})," or ",(0,s.jsx)(n.code,{children:"LLM"})," are used to represent interactions with a chat completions API (for example, OpenAI's chat completions or Anthropic's messages API). These spans can also capture information about tools (functions) made available to or used by the model."]}),"\n",(0,s.jsx)(n.p,{children:"As providers can have different schemas for their API, there are no strict restrictions on the format of the span's inputs and outputs for the raw LLM call itself. However, to enable rich UI features (like conversation display and tool call visualization) and to standardize data for evaluation, MLflow defines specific attributes for chat messages and tool definitions."}),"\n",(0,s.jsx)(n.h4,{id:"special-attributes",children:"Special Attributes"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.chat.messages"})}),": This attribute represents the system/user/assistant messages involved in the conversation with the chat model. The type must be ",(0,s.jsx)(n.code,{children:"List[ChatMessage]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"mlflow.chat.tools"})}),": This attribute represents the tools that were available for the chat model to call. The type must be ",(0,s.jsx)(n.code,{children:"List[ChatTool]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["These attributes can be conveniently set using helper functions like ",(0,s.jsx)(l.B,{fn:"mlflow.tracing.set_span_chat_messages"})," and ",(0,s.jsx)(l.B,{fn:"mlflow.tracing.set_span_chat_tools"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"example-usage-1",children:"Example Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nfrom mlflow.entities import SpanType\nfrom mlflow.tracing.constant import SpanAttributeKey\nfrom mlflow.tracing import set_span_chat_messages, set_span_chat_tools\n\n# Example messages and tools\nmessages = [\n    {\n        "role": "system",\n        "content": "please use the provided tool to answer the user\'s questions",\n    },\n    {"role": "user", "content": "what is 1 + 1?"},\n]\n\ntools = [\n    {\n        "type": "function",\n        "function": {\n            "name": "add",\n            "description": "Add two numbers",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "a": {"type": "number"},\n                    "b": {"type": "number"},\n                },\n                "required": ["a", "b"],\n            },\n        },\n    }\n]\n\n\n@mlflow.trace(span_type=SpanType.CHAT_MODEL)\ndef call_chat_model(messages, tools):\n    # Mocking a response\n    response = {\n        "role": "assistant",\n        "tool_calls": [\n            {\n                "id": "123",\n                "function": {"arguments": \'{"a": 1,"b": 2}\', "name": "add"},\n                "type": "function",\n            }\n        ],\n    }\n\n    combined_messages = messages + [response]\n\n    span = mlflow.get_current_active_span()\n    set_span_chat_messages(span, combined_messages)\n    set_span_chat_tools(span, tools)\n\n    return response\n\n\ncall_chat_model(messages, tools)\n\ntrace = mlflow.get_last_active_trace()\nspan = trace.data.spans[0]\n\nprint("Messages: ", span.get_attribute(SpanAttributeKey.CHAT_MESSAGES))\nprint("Tools: ", span.get_attribute(SpanAttributeKey.CHAT_TOOLS))\n'})}),"\n",(0,s.jsx)(n.h4,{id:"advanced-chat-model-span-with-rich-context",children:"Advanced Chat Model Span with Rich Context"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@mlflow.trace(span_type=SpanType.CHAT_MODEL)\ndef advanced_chat_completion(messages, model_config, user_context):\n    """Advanced chat completion with comprehensive tracking"""\n\n    span = mlflow.get_current_active_span()\n\n    # Set rich model and request attributes\n    span.set_attributes(\n        {\n            "ai.model.name": model_config["model"],\n            "ai.model.provider": "openai",\n            "ai.model.temperature": model_config.get("temperature", 0.7),\n            "ai.model.max_tokens": model_config.get("max_tokens", 1000),\n            "ai.model.top_p": model_config.get("top_p", 1.0),\n            "ai.request.user_tier": user_context.get("tier", "standard"),\n            "ai.request.session_id": user_context.get("session_id"),\n            "ai.request.conversation_length": len(messages),\n            "ai.request.estimated_cost_usd": estimate_cost(messages, model_config),\n        }\n    )\n\n    # Make the actual API call\n    response = openai_client.chat.completions.create(messages=messages, **model_config)\n\n    # Extract response details\n    completion = response.choices[0].message\n    usage = response.usage\n\n    # Set response attributes\n    span.set_attributes(\n        {\n            "ai.response.tokens.input": usage.prompt_tokens,\n            "ai.response.tokens.output": usage.completion_tokens,\n            "ai.response.tokens.total": usage.total_tokens,\n            "ai.response.finish_reason": response.choices[0].finish_reason,\n            "ai.response.model_used": response.model,\n            "ai.response.has_tool_calls": bool(completion.tool_calls),\n            "ai.response.actual_cost_usd": calculate_actual_cost(\n                usage, model_config["model"]\n            ),\n        }\n    )\n\n    # Prepare messages for MLflow schema\n    all_messages = messages + [completion.dict()]\n    set_span_chat_messages(span, all_messages)\n\n    # Set tools if they were provided\n    if "tools" in model_config:\n        set_span_chat_tools(span, model_config["tools"])\n\n    return response\n'})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-trace-data",children:"Working with Trace Data"}),"\n",(0,s.jsx)(n.p,{children:"Understanding the trace data model enables several powerful use cases:"}),"\n",(0,s.jsx)(n.h3,{id:"programmatic-analysis",children:"Programmatic Analysis"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Query specific spans"}),": Search for spans by type, name, or attributes to analyze specific operations"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Extract metrics"}),": Calculate performance metrics like latency, success rates, and resource usage"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Data flow analysis"}),": Trace how data transforms through your application pipeline"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cost tracking"}),": Monitor AI model usage and associated costs across different user tiers"]}),"\n",(0,s.jsx)(n.h3,{id:"quality-assessment",children:"Quality Assessment"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input/output validation"}),": Verify that data is processed correctly at each step"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error analysis"}),": Examine failed spans to understand failure patterns"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Performance optimization"}),": Identify bottlenecks and optimization opportunities"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A/B testing"}),": Compare trace patterns across different model versions or configurations"]}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-evaluation",children:"Integration with Evaluation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trace-based evaluation"}),": Use trace data as input for quality assessment"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Span-level metrics"}),": Evaluate individual operations within larger workflows"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Historical comparison"}),": Compare trace patterns across different versions or configurations"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Business metrics"}),": Track custom business KPIs through span attributes and tags"]}),"\n",(0,s.jsx)(n.h3,{id:"advanced-analytics-and-monitoring",children:"Advanced Analytics and Monitoring"}),"\n",(0,s.jsx)(n.h4,{id:"cost-analysis-example",children:"Cost Analysis Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def analyze_costs_by_user_tier(traces):\n    """Analyze AI model costs by user tier"""\n    cost_by_tier = {}\n\n    for trace in traces:\n        user_tier = trace.info.tags.get("business.user.tier", "unknown")\n\n        for span in trace.data.spans:\n            if span.span_type == "CHAT_MODEL":\n                cost = span.attributes.get("ai.response.actual_cost_usd", 0)\n                if user_tier not in cost_by_tier:\n                    cost_by_tier[user_tier] = []\n                cost_by_tier[user_tier].append(cost)\n\n    return {tier: sum(costs) for tier, costs in cost_by_tier.items()}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"performance-monitoring-example",children:"Performance Monitoring Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def monitor_retrieval_performance(traces):\n    """Monitor retrieval system performance"""\n    retrieval_metrics = []\n\n    for trace in traces:\n        for span in trace.data.spans:\n            if span.span_type == "RETRIEVER":\n                metrics = {\n                    "query_time_ms": (span.end_time_ns - span.start_time_ns)\n                    / 1_000_000,\n                    "results_count": span.attributes.get("retrieval.results_count", 0),\n                    "avg_similarity": span.attributes.get(\n                        "retrieval.avg_similarity", 0\n                    ),\n                    "database": span.attributes.get("retrieval.database"),\n                    "timestamp": span.start_time_ns / 1_000_000_000,\n                }\n                retrieval_metrics.append(metrics)\n\n    return retrieval_metrics\n'})}),"\n",(0,s.jsx)(n.h4,{id:"error-pattern-analysis",children:"Error Pattern Analysis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def analyze_error_patterns(traces):\n    """Analyze common error patterns across traces"""\n    error_patterns = {}\n\n    for trace in traces:\n        if trace.info.state == "ERROR":\n            for span in trace.data.spans:\n                if span.status.status_code == "ERROR":\n                    error_type = span.attributes.get("error_type", "unknown")\n                    operation = span.name\n\n                    pattern_key = f"{operation}:{error_type}"\n                    if pattern_key not in error_patterns:\n                        error_patterns[pattern_key] = {\n                            "count": 0,\n                            "examples": [],\n                            "user_tiers": set(),\n                        }\n\n                    error_patterns[pattern_key]["count"] += 1\n                    error_patterns[pattern_key]["examples"].append(\n                        span.attributes.get("error_message", "")[:100]\n                    )\n                    error_patterns[pattern_key]["user_tiers"].add(\n                        trace.info.tags.get("business.user.tier", "unknown")\n                    )\n\n    return error_patterns\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/genai/tracing/concepts/trace-instrumentation",children:"Tracing Concepts"})}),": Understand the fundamental concepts behind tracing"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Querying Traces"})}),": Learn how to search and retrieve trace data programmatically"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"Automatic Tracing"})}),": Get started with one-line tracing for supported libraries"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing",children:"Manual Tracing"})}),": Create custom spans for detailed instrumentation"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Understanding the trace data model is essential for leveraging MLflow Tracing effectively. The hierarchical structure of traces and spans, combined with rich metadata and specialized schemas, enables comprehensive observability and analysis of your GenAI applications."})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);