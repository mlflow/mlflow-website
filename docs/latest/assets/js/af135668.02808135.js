"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[741],{180:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"projects/index","title":"MLflow Projects","description":"MLflow Projects provide a standard format for packaging and sharing reproducible data science code. Based on simple conventions, Projects enable seamless collaboration and automated execution across different environments and platforms.","source":"@site/docs/classic-ml/projects/index.mdx","sourceDirName":"projects","slug":"/projects/","permalink":"/docs/latest/ml/projects/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"Access Control \ud83d\udd10","permalink":"/docs/latest/ml/auth/"},"next":{"title":"MLflow Plugins \ud83d\udd0c","permalink":"/docs/latest/ml/plugins/"}}');var i=r(74848),a=r(28453);const o={},s="MLflow Projects",l={},c=[{value:"Quick Start",id:"quick-start",level:2},{value:"Running Your First Project",id:"running-your-first-project",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Project Components",id:"project-components",level:3},{value:"<strong>Project Name</strong>",id:"project-name",level:4},{value:"<strong>Entry Points</strong>",id:"entry-points",level:4},{value:"<strong>Environment</strong>",id:"environment",level:4},{value:"Project Structure &amp; Configuration",id:"project-structure--configuration",level:2},{value:"Convention-Based Projects",id:"convention-based-projects",level:3},{value:"MLproject File Configuration",id:"mlproject-file-configuration",level:3},{value:"Parameter Types",id:"parameter-types",level:3},{value:"Environment Management",id:"environment-management",level:2},{value:"Python Virtual Environments (Recommended)",id:"python-virtual-environments-recommended",level:3},{value:"Conda Environments",id:"conda-environments",level:3},{value:"Docker Environments",id:"docker-environments",level:3},{value:"Environment Manager Selection",id:"environment-manager-selection",level:3},{value:"Execution &amp; Deployment",id:"execution--deployment",level:2},{value:"Local Execution",id:"local-execution",level:3},{value:"Remote Execution",id:"remote-execution",level:3},{value:"Databricks Platform",id:"databricks-platform",level:4},{value:"Kubernetes Clusters",id:"kubernetes-clusters",level:4},{value:"Python API",id:"python-api",level:3},{value:"Building Workflows",id:"building-workflows",level:2},{value:"Multi-Step Pipelines",id:"multi-step-pipelines",level:3},{value:"Hyperparameter Optimization",id:"hyperparameter-optimization",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Docker Image Building",id:"docker-image-building",level:3},{value:"Git Integration",id:"git-integration",level:3},{value:"Environment Variable Propagation",id:"environment-variable-propagation",level:3},{value:"Custom Backend Development",id:"custom-backend-development",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Project Organization",id:"project-organization",level:3},{value:"Environment Management",id:"environment-management-1",level:3},{value:"Parameter Management",id:"parameter-management",level:3},{value:"Reproducibility",id:"reproducibility",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debugging Tips",id:"debugging-tips",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"mlflow-projects",children:"MLflow Projects"})}),"\n",(0,i.jsx)(e.p,{children:"MLflow Projects provide a standard format for packaging and sharing reproducible data science code. Based on simple conventions, Projects enable seamless collaboration and automated execution across different environments and platforms."}),"\n",(0,i.jsx)(e.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(e.h3,{id:"running-your-first-project",children:"Running Your First Project"}),"\n",(0,i.jsx)(e.p,{children:"Execute any Git repository or local directory as an MLflow Project:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Run a project from GitHub\nmlflow run https://github.com/mlflow/mlflow-example.git -P alpha=0.5\n\n# Run a local project\nmlflow run . -P data_file=data.csv -P regularization=0.1\n\n# Run with specific entry point\nmlflow run . -e validate -P data_file=data.csv\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Run projects programmatically\nimport mlflow\n\n# Execute remote project\nresult = mlflow.run(\n    "https://github.com/mlflow/mlflow-example.git",\n    parameters={"alpha": 0.5, "l1_ratio": 0.01},\n    experiment_name="elasticnet_experiment",\n)\n\n# Execute local project\nresult = mlflow.run(\n    ".", entry_point="train", parameters={"epochs": 100}, synchronous=True\n)\n'})}),"\n",(0,i.jsx)(e.admonition,{title:"Project Structure",type:"tip",children:(0,i.jsxs)(e.p,{children:["Any directory with a ",(0,i.jsx)(e.code,{children:"MLproject"})," file or containing ",(0,i.jsx)(e.code,{children:".py"}),"/",(0,i.jsx)(e.code,{children:".sh"})," files can be run as an MLflow Project. No complex setup required!"]})}),"\n",(0,i.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(e.h3,{id:"project-components",children:"Project Components"}),"\n",(0,i.jsx)(e.p,{children:"Every MLflow Project consists of three key elements:"}),"\n",(0,i.jsx)(e.h4,{id:"project-name",children:(0,i.jsx)(e.strong,{children:"Project Name"})}),"\n",(0,i.jsxs)(e.p,{children:["A human-readable identifier for your project, typically defined in the ",(0,i.jsx)(e.code,{children:"MLproject"})," file."]}),"\n",(0,i.jsx)(e.h4,{id:"entry-points",children:(0,i.jsx)(e.strong,{children:"Entry Points"})}),"\n",(0,i.jsx)(e.p,{children:"Commands that can be executed within the project. Entry points define:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Parameters"})," - Inputs with types and default values"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Commands"})," - What gets executed when the entry point runs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Environment"})," - The execution context and dependencies"]}),"\n"]}),"\n",(0,i.jsx)(e.h4,{id:"environment",children:(0,i.jsx)(e.strong,{children:"Environment"})}),"\n",(0,i.jsx)(e.p,{children:"The software environment containing all dependencies needed to run the project. MLflow supports multiple environment types:"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Environment"}),(0,i.jsx)(e.th,{children:"Use Case"}),(0,i.jsx)(e.th,{children:"Dependencies"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.strong,{children:"Virtualenv"})," ",(0,i.jsx)(e.em,{children:"(Recommended)"})]}),(0,i.jsx)(e.td,{children:"Python packages from PyPI"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"python_env.yaml"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"Conda"})}),(0,i.jsx)(e.td,{children:"Python + native libraries"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:"conda.yaml"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"Docker"})}),(0,i.jsx)(e.td,{children:"Complex dependencies, non-Python"}),(0,i.jsx)(e.td,{children:"Dockerfile"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"System"})}),(0,i.jsx)(e.td,{children:"Use current environment"}),(0,i.jsx)(e.td,{children:"None"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"project-structure--configuration",children:"Project Structure & Configuration"}),"\n",(0,i.jsx)(e.h3,{id:"convention-based-projects",children:"Convention-Based Projects"}),"\n",(0,i.jsxs)(e.p,{children:["Projects without an ",(0,i.jsx)(e.code,{children:"MLproject"})," file use these conventions:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"my-project/\n\u251c\u2500\u2500 train.py              # Executable entry point\n\u251c\u2500\u2500 validate.sh           # Shell script entry point\n\u251c\u2500\u2500 conda.yaml           # Optional: Conda environment\n\u251c\u2500\u2500 python_env.yaml      # Optional: Python environment\n\u2514\u2500\u2500 data/                # Project data and assets\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Default Behavior:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Name"}),": Directory name"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Entry Points"}),": Any ",(0,i.jsx)(e.code,{children:".py"})," or ",(0,i.jsx)(e.code,{children:".sh"})," file"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Environment"}),": Conda environment from ",(0,i.jsx)(e.code,{children:"conda.yaml"}),", or Python-only environment"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Parameters"}),": Passed via command line as ",(0,i.jsx)(e.code,{children:"--key value"})]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"mlproject-file-configuration",children:"MLproject File Configuration"}),"\n",(0,i.jsxs)(e.p,{children:["For advanced control, create an ",(0,i.jsx)(e.code,{children:"MLproject"})," file:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'name: My ML Project\n\n# Environment specification (choose one)\npython_env: python_env.yaml\n# conda_env: conda.yaml\n# docker_env:\n#   image: python:3.9\n\nentry_points:\n  main:\n    parameters:\n      data_file: path\n      regularization: {type: float, default: 0.1}\n      max_epochs: {type: int, default: 100}\n    command: "python train.py --reg {regularization} --epochs {max_epochs} {data_file}"\n\n  validate:\n    parameters:\n      model_path: path\n      test_data: path\n    command: "python validate.py {model_path} {test_data}"\n\n  hyperparameter_search:\n    parameters:\n      search_space: uri\n      n_trials: {type: int, default: 50}\n    command: "python hyperparam_search.py --trials {n_trials} --config {search_space}"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"parameter-types",children:"Parameter Types"}),"\n",(0,i.jsx)(e.p,{children:"MLflow supports four parameter types with automatic validation and transformation:"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Type"}),(0,i.jsx)(e.th,{children:"Description"}),(0,i.jsx)(e.th,{children:"Example"}),(0,i.jsx)(e.th,{children:"Special Handling"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"string"})}),(0,i.jsx)(e.td,{children:"Text data"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:'"hello world"'})}),(0,i.jsx)(e.td,{children:"None"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"float"})}),(0,i.jsx)(e.td,{children:"Decimal numbers"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"0.1"}),", ",(0,i.jsx)(e.code,{children:"3.14"})]}),(0,i.jsx)(e.td,{children:"Validation"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"int"})}),(0,i.jsx)(e.td,{children:"Whole numbers"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"42"}),", ",(0,i.jsx)(e.code,{children:"100"})]}),(0,i.jsx)(e.td,{children:"Validation"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"path"})}),(0,i.jsx)(e.td,{children:"Local file paths"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"data.csv"}),", ",(0,i.jsx)(e.code,{children:"s3://bucket/file"})]}),(0,i.jsx)(e.td,{children:"Downloads remote URIs to local files"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:"uri"})}),(0,i.jsx)(e.td,{children:"Any URI"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:"s3://bucket/"}),", ",(0,i.jsx)(e.code,{children:"./local/path"})]}),(0,i.jsx)(e.td,{children:"Converts relative paths to absolute"})]})]})]}),"\n",(0,i.jsx)(e.admonition,{title:"Parameter Resolution",type:"note",children:(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"path"})," parameters automatically download remote files (S3, GCS, etc.) to local storage before execution. Use ",(0,i.jsx)(e.code,{children:"uri"})," for applications that can read directly from remote storage."]})}),"\n",(0,i.jsx)(e.h2,{id:"environment-management",children:"Environment Management"}),"\n",(0,i.jsx)(e.h3,{id:"python-virtual-environments-recommended",children:"Python Virtual Environments (Recommended)"}),"\n",(0,i.jsxs)(e.p,{children:["Create a ",(0,i.jsx)(e.code,{children:"python_env.yaml"})," file for pure Python dependencies:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# python_env.yaml\npython: "3.9.16"\n\n# Optional: build dependencies\nbuild_dependencies:\n  - pip\n  - setuptools\n  - wheel==0.37.1\n\n# Runtime dependencies\ndependencies:\n  - mlflow>=2.0.0\n  - scikit-learn==1.2.0\n  - pandas>=1.5.0\n  - numpy>=1.21.0\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# MLproject\nname: Python Project\npython_env: python_env.yaml\n\nentry_points:\n  main:\n    command: "python train.py"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"conda-environments",children:"Conda Environments"}),"\n",(0,i.jsx)(e.p,{children:"For projects requiring native libraries or complex dependencies:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"# conda.yaml\nname: ml-project\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.9\n  - cudnn=8.2.1  # CUDA libraries\n  - scikit-learn\n  - pip\n  - pip:\n    - mlflow>=2.0.0\n    - tensorflow==2.10.0\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# MLproject\nname: Deep Learning Project\nconda_env: conda.yaml\n\nentry_points:\n  train:\n    parameters:\n      gpu_count: {type: int, default: 1}\n    command: "python train_model.py --gpus {gpu_count}"\n'})}),"\n",(0,i.jsx)(e.admonition,{title:"Conda Terms",type:"warning",children:(0,i.jsxs)(e.p,{children:["By using Conda, you agree to ",(0,i.jsx)(e.a,{href:"https://legal.anaconda.com/policies/en/?name=terms-of-service",children:"Anaconda's Terms of Service"}),"."]})}),"\n",(0,i.jsx)(e.h3,{id:"docker-environments",children:"Docker Environments"}),"\n",(0,i.jsx)(e.p,{children:"For maximum reproducibility and complex system dependencies:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dockerfile",children:"# Dockerfile\nFROM python:3.9-slim\n\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nWORKDIR /mlflow/projects/code\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# MLproject\nname: Containerized Project\ndocker_env:\n  image: my-ml-image:latest\n  volumes: ["/host/data:/container/data"]\n  environment:\n    - ["CUDA_VISIBLE_DEVICES", "0,1"]\n    - "AWS_PROFILE"  # Copy from host\n\nentry_points:\n  train:\n    command: "python distributed_training.py"\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Advanced Docker Options:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'docker_env:\n  image: 012345678910.dkr.ecr.us-west-2.amazonaws.com/ml-training:v1.0\n  volumes:\n    - "/local/data:/data"\n    - "/tmp:/tmp"\n  environment:\n    - ["MODEL_REGISTRY", "s3://my-bucket/models"]\n    - ["EXPERIMENT_NAME", "production-training"]\n    - "MLFLOW_TRACKING_URI"  # Copy from host\n'})}),"\n",(0,i.jsx)(e.h3,{id:"environment-manager-selection",children:"Environment Manager Selection"}),"\n",(0,i.jsx)(e.p,{children:"Control which environment manager to use:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Force virtualenv (ignores conda.yaml)\nmlflow run . --env-manager virtualenv\n\n# Use local environment (no isolation)\nmlflow run . --env-manager local\n\n# Use conda (default if conda.yaml present)\nmlflow run . --env-manager conda\n"})}),"\n",(0,i.jsx)(e.h2,{id:"execution--deployment",children:"Execution & Deployment"}),"\n",(0,i.jsx)(e.h3,{id:"local-execution",children:"Local Execution"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Basic execution\nmlflow run .\n\n# With parameters\nmlflow run . -P lr=0.01 -P batch_size=32\n\n# Specific entry point\nmlflow run . -e hyperparameter_search -P n_trials=100\n\n# Custom environment\nmlflow run . --env-manager virtualenv\n"})}),"\n",(0,i.jsx)(e.h3,{id:"remote-execution",children:"Remote Execution"}),"\n",(0,i.jsx)(e.h4,{id:"databricks-platform",children:"Databricks Platform"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Run on Databricks cluster\nmlflow run . --backend databricks --backend-config cluster-config.json\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'// cluster-config.json\n{\n  "cluster_spec": {\n    "new_cluster": {\n      "node_type_id": "i3.xlarge",\n      "num_workers": 2,\n      "spark_version": "11.3.x-scala2.12"\n    }\n  },\n  "run_name": "distributed-training"\n}\n'})}),"\n",(0,i.jsx)(e.h4,{id:"kubernetes-clusters",children:"Kubernetes Clusters"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Run on Kubernetes\nmlflow run . --backend kubernetes --backend-config k8s-config.json\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'// k8s-config.json\n{\n  "kube-context": "my-cluster",\n  "repository-uri": "gcr.io/my-project/ml-training",\n  "kube-job-template-path": "k8s-job-template.yaml"\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# k8s-job-template.yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: "{replaced-with-project-name}"\n  namespace: mlflow\nspec:\n  ttlSecondsAfterFinished: 3600\n  backoffLimit: 2\n  template:\n    spec:\n      containers:\n      - name: "{replaced-with-project-name}"\n        image: "{replaced-with-image-uri}"\n        command: ["{replaced-with-entry-point-command}"]\n        resources:\n          requests:\n            memory: "2Gi"\n            cpu: "1000m"\n          limits:\n            memory: "4Gi"\n            cpu: "2000m"\n        env:\n        - name: MLFLOW_TRACKING_URI\n          value: "https://my-mlflow-server.com"\n      restartPolicy: Never\n'})}),"\n",(0,i.jsx)(e.h3,{id:"python-api",children:"Python API"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import mlflow\nfrom mlflow.projects import run\n\n# Synchronous execution\nresult = run(\n    uri="https://github.com/mlflow/mlflow-example.git",\n    entry_point="main",\n    parameters={"alpha": 0.5},\n    backend="local",\n    synchronous=True,\n)\n\n# Asynchronous execution\nsubmitted_run = run(\n    uri=".",\n    entry_point="train",\n    parameters={"epochs": 100},\n    backend="databricks",\n    backend_config="cluster-config.json",\n    synchronous=False,\n)\n\n# Monitor progress\nif submitted_run.wait():\n    print("Training completed successfully!")\n    run_data = mlflow.get_run(submitted_run.run_id)\n    print(f"Final accuracy: {run_data.data.metrics[\'accuracy\']}")\n'})}),"\n",(0,i.jsx)(e.h2,{id:"building-workflows",children:"Building Workflows"}),"\n",(0,i.jsx)(e.h3,{id:"multi-step-pipelines",children:"Multi-Step Pipelines"}),"\n",(0,i.jsx)(e.p,{children:"Combine multiple projects into sophisticated ML workflows:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import mlflow\nfrom mlflow.tracking import MlflowClient\n\n\ndef ml_pipeline():\n    client = MlflowClient()\n\n    # Step 1: Data preprocessing\n    prep_run = mlflow.run(\n        "./preprocessing", parameters={"input_path": "s3://bucket/raw-data"}\n    )\n\n    # Wait for completion and get output\n    if prep_run.wait():\n        prep_run_data = client.get_run(prep_run.run_id)\n        processed_data_path = prep_run_data.data.params["output_path"]\n\n        # Step 2: Feature engineering\n        feature_run = mlflow.run(\n            "./feature_engineering", parameters={"data_path": processed_data_path}\n        )\n\n        if feature_run.wait():\n            feature_data = client.get_run(feature_run.run_id)\n            features_path = feature_data.data.params["features_output"]\n\n            # Step 3: Parallel model training\n            model_runs = []\n            algorithms = ["random_forest", "xgboost", "neural_network"]\n\n            for algo in algorithms:\n                run = mlflow.run(\n                    "./training",\n                    entry_point=algo,\n                    parameters={"features_path": features_path, "algorithm": algo},\n                    synchronous=False,  # Run in parallel\n                )\n                model_runs.append(run)\n\n            # Wait for all models and select best\n            best_model = None\n            best_metric = 0\n\n            for run in model_runs:\n                if run.wait():\n                    run_data = client.get_run(run.run_id)\n                    accuracy = run_data.data.metrics.get("accuracy", 0)\n                    if accuracy > best_metric:\n                        best_metric = accuracy\n                        best_model = run.run_id\n\n            # Step 4: Deploy best model\n            if best_model:\n                mlflow.run(\n                    "./deployment",\n                    parameters={"model_run_id": best_model, "stage": "production"},\n                )\n\n\n# Execute pipeline\nml_pipeline()\n'})}),"\n",(0,i.jsx)(e.h3,{id:"hyperparameter-optimization",children:"Hyperparameter Optimization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'import mlflow\nimport itertools\nfrom concurrent.futures import ThreadPoolExecutor\n\n\ndef hyperparameter_search():\n    # Define parameter grid\n    param_grid = {\n        "learning_rate": [0.01, 0.1, 0.2],\n        "n_estimators": [100, 200, 500],\n        "max_depth": [3, 6, 10],\n    }\n\n    # Generate all combinations\n    param_combinations = [\n        dict(zip(param_grid.keys(), values))\n        for values in itertools.product(*param_grid.values())\n    ]\n\n    def train_model(params):\n        return mlflow.run("./training", parameters=params, synchronous=False)\n\n    # Launch parallel training jobs\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        submitted_runs = list(executor.map(train_model, param_combinations))\n\n    # Collect results\n    results = []\n    for run in submitted_runs:\n        if run.wait():\n            run_data = mlflow.get_run(run.run_id)\n            results.append(\n                {\n                    "run_id": run.run_id,\n                    "params": run_data.data.params,\n                    "metrics": run_data.data.metrics,\n                }\n            )\n\n    # Find best model\n    best_run = max(results, key=lambda x: x["metrics"].get("f1_score", 0))\n    print(f"Best model: {best_run[\'run_id\']}")\n    print(f"Best F1 score: {best_run[\'metrics\'][\'f1_score\']}")\n\n    return best_run\n\n\n# Execute hyperparameter search\nbest_model = hyperparameter_search()\n'})}),"\n",(0,i.jsx)(e.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(e.h3,{id:"docker-image-building",children:"Docker Image Building"}),"\n",(0,i.jsx)(e.p,{children:"Build custom images during execution:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Build new image based on project's base image\nmlflow run . --backend kubernetes --build-image\n\n# Use pre-built image\nmlflow run . --backend kubernetes\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Programmatic image building\nmlflow.run(\n    ".",\n    backend="kubernetes",\n    backend_config="k8s-config.json",\n    build_image=True,  # Creates new image with project code\n    docker_auth={  # Registry authentication\n        "username": "myuser",\n        "password": "mytoken",\n    },\n)\n'})}),"\n",(0,i.jsx)(e.h3,{id:"git-integration",children:"Git Integration"}),"\n",(0,i.jsx)(e.p,{children:"MLflow automatically tracks Git information:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Run specific commit\nmlflow run https://github.com/mlflow/mlflow-example.git --version <commit hash>\n\n# Run branch\nmlflow run https://github.com/mlflow/mlflow-example.git --version feature-branch\n\n# Run from subdirectory\nmlflow run https://github.com/my-repo.git#subdirectory/my-project\n"})}),"\n",(0,i.jsx)(e.h3,{id:"environment-variable-propagation",children:"Environment Variable Propagation"}),"\n",(0,i.jsx)(e.p,{children:"Critical environment variables are automatically passed to execution environments:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:'export MLFLOW_TRACKING_URI="https://my-tracking-server.com"\nexport AWS_PROFILE="ml-experiments"\nexport CUDA_VISIBLE_DEVICES="0,1"\n\n# These variables are available in the project execution environment\nmlflow run .\n'})}),"\n",(0,i.jsx)(e.h3,{id:"custom-backend-development",children:"Custom Backend Development"}),"\n",(0,i.jsx)(e.p,{children:"Create custom execution backends:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"# custom_backend.py\nfrom mlflow.projects.backend import AbstractBackend\n\n\nclass MyCustomBackend(AbstractBackend):\n    def run(\n        self,\n        project_uri,\n        entry_point,\n        parameters,\n        version,\n        backend_config,\n        tracking_uri,\n        experiment_id,\n    ):\n        # Custom execution logic\n        # Return SubmittedRun object\n        pass\n"})}),"\n",(0,i.jsx)(e.p,{children:"Register as plugin:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# setup.py\nsetup(\n    entry_points={\n        "mlflow.project_backend": [\n            "my-backend=my_package.custom_backend:MyCustomBackend"\n        ]\n    }\n)\n'})}),"\n",(0,i.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(e.h3,{id:"project-organization",children:"Project Organization"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"ml-project/\n\u251c\u2500\u2500 MLproject              # Project configuration\n\u251c\u2500\u2500 python_env.yaml        # Environment dependencies\n\u251c\u2500\u2500 src/                   # Source code\n\u2502   \u251c\u2500\u2500 train.py\n\u2502   \u251c\u2500\u2500 evaluate.py\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 data/                  # Sample/test data\n\u251c\u2500\u2500 configs/               # Configuration files\n\u2502   \u251c\u2500\u2500 model_config.yaml\n\u2502   \u2514\u2500\u2500 hyperparams.json\n\u251c\u2500\u2500 tests/                 # Unit tests\n\u2514\u2500\u2500 README.md             # Project documentation\n"})}),"\n",(0,i.jsx)(e.h3,{id:"environment-management-1",children:"Environment Management"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Development Tips:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"virtualenv"})," for pure Python projects"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"conda"})," when you need system libraries (CUDA, Intel MKL)"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"Docker"})," for complex dependencies or production deployment"]}),"\n",(0,i.jsx)(e.li,{children:"Pin exact versions in production environments"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Performance Optimization:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# Fast iteration during development\npython_env: python_env.yaml\n\nentry_points:\n  develop:\n    command: "python train.py"\n\n  production:\n    parameters:\n      full_dataset: {type: path}\n      epochs: {type: int, default: 100}\n    command: "python train.py --data {full_dataset} --epochs {epochs}"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"parameter-management",children:"Parameter Management"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'# Good: Typed parameters with defaults\nentry_points:\n  train:\n    parameters:\n      learning_rate: {type: float, default: 0.01}\n      batch_size: {type: int, default: 32}\n      data_path: path\n      output_dir: {type: str, default: "./outputs"}\n    command: "python train.py --lr {learning_rate} --batch {batch_size} --data {data_path} --output {output_dir}"\n'})}),"\n",(0,i.jsx)(e.h3,{id:"reproducibility",children:"Reproducibility"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Include environment info in tracking\nimport mlflow\nimport platform\nimport sys\n\nwith mlflow.start_run():\n    # Log environment info\n    mlflow.log_param("python_version", sys.version)\n    mlflow.log_param("platform", platform.platform())\n\n    # Log Git commit if available\n    try:\n        import git\n\n        repo = git.Repo(".")\n        mlflow.log_param("git_commit", repo.head.commit.hexsha)\n    except:\n        pass\n'})}),"\n",(0,i.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Docker Permission Denied"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Solution: Add user to docker group or use sudo\nsudo usermod -aG docker $USER\n# Then restart shell/session\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Conda Environment Creation Fails"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Solution: Clean conda cache and retry\nconda clean --all\nmlflow run . --env-manager conda\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Git Authentication for Private Repos"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Solution: Use SSH with key authentication\nmlflow run git@github.com:private/repo.git\n# Or HTTPS with token\nmlflow run https://token:x-oauth-basic@github.com/private/repo.git\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Kubernetes Job Fails"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Debug: Check job status\nkubectl get jobs -n mlflow\nkubectl describe job <job-name> -n mlflow\nkubectl logs -n mlflow job/<job-name>\n"})}),"\n",(0,i.jsx)(e.h3,{id:"debugging-tips",children:"Debugging Tips"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Enable Verbose Logging:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"export MLFLOW_LOGGING_LEVEL=DEBUG\nmlflow run . -v\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Test Locally First:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# Test with local environment before remote deployment\nmlflow run . --env-manager local\n\n# Then test with environment isolation\nmlflow run . --env-manager virtualenv\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Validate Project Structure:"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from mlflow.projects import load_project\n\n# Load and inspect project\nproject = load_project(".")\nprint(f"Project name: {project.name}")\nprint(f"Entry points: {list(project._entry_points.keys())}")\nprint(f"Environment type: {project.env_type}")\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Ready to get started?"})," Check out our ",(0,i.jsx)(e.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples",children:"MLflow Projects Examples"})," for hands-on tutorials and real-world use cases."]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>s});var t=r(96540);const i={},a=t.createContext(i);function o(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);