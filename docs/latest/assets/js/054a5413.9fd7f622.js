"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7212],{2991:(e,n,t)=>{t.d(n,{A:()=>l});const l=t.p+"assets/images/openai-autolog-bb60103a751343c4c1fa27f464e4f333.gif"},14252:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var l=t(65195);const o={tableOfContentsInline:"tableOfContentsInline_prmo"};var a=t(74848);function i({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,a.jsx)("div",{className:o.tableOfContentsInline,children:(0,a.jsx)(l.A,{toc:e,minHeadingLevel:n,maxHeadingLevel:t,className:"table-of-contents",linkClassName:null})})}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var l=t(96540);const o={},a=l.createContext(o);function i(e){const n=l.useContext(a);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),l.createElement(a.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>r});t(96540);const l=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var o=t(86025),a=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(l[e])return e}return null};function r({fn:e,children:n,hash:t}){const r=i(e);if(!r)return(0,a.jsx)(a.Fragment,{children:n});const s=(0,o.Ay)(`/${l[r]}#${t??e}`);return(0,a.jsx)("a",{href:s,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}},65195:(e,n,t)=>{t.d(n,{A:()=>g});var l=t(96540),o=t(6342);function a(e){const n=e.map(e=>({...e,parentIndex:-1,children:[]})),t=Array(7).fill(-1);n.forEach((e,n)=>{const l=t.slice(2,e.level);e.parentIndex=Math.max(...l),t[e.level]=n});const l=[];return n.forEach(e=>{const{parentIndex:t,...o}=e;t>=0?n[t].children.push(o):l.push(o)}),l}function i({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return e.flatMap(e=>{const l=i({toc:e.children,minHeadingLevel:n,maxHeadingLevel:t});return function(e){return e.level>=n&&e.level<=t}(e)?[{...e,children:l}]:l})}function r(e){const n=e.getBoundingClientRect();return n.top===n.bottom?r(e.parentNode):n}function s(e,{anchorTopOffset:n}){const t=e.find(e=>r(e).top>=n);if(t){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(r(t))?t:e[e.indexOf(t)-1]??null}return e[e.length-1]??null}function p(){const e=(0,l.useRef)(0),{navbar:{hideOnScroll:n}}=(0,o.p)();return(0,l.useEffect)(()=>{e.current=n?0:document.querySelector(".navbar").clientHeight},[n]),e}function m(e){const n=(0,l.useRef)(void 0),t=p();(0,l.useEffect)(()=>{if(!e)return()=>{};const{linkClassName:l,linkActiveClassName:o,minHeadingLevel:a,maxHeadingLevel:i}=e;function r(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(l),r=function({minHeadingLevel:e,maxHeadingLevel:n}){const t=[];for(let l=e;l<=n;l+=1)t.push(`h${l}.anchor`);return Array.from(document.querySelectorAll(t.join()))}({minHeadingLevel:a,maxHeadingLevel:i}),p=s(r,{anchorTopOffset:t.current}),m=e.find(e=>p&&p.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e));e.forEach(e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(o),e.classList.add(o),n.current=e):e.classList.remove(o)}(e,e===m)})}return document.addEventListener("scroll",r),document.addEventListener("resize",r),r(),()=>{document.removeEventListener("scroll",r),document.removeEventListener("resize",r)}},[e,t])}var c=t(28774),f=t(74848);function h({toc:e,className:n,linkClassName:t,isChild:l}){return e.length?(0,f.jsx)("ul",{className:l?void 0:n,children:e.map(e=>(0,f.jsxs)("li",{children:[(0,f.jsx)(c.A,{to:`#${e.id}`,className:t??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,f.jsx)(h,{isChild:!0,toc:e.children,className:n,linkClassName:t})]},e.id))}):null}const d=l.memo(h);function g({toc:e,className:n="table-of-contents table-of-contents__left-border",linkClassName:t="table-of-contents__link",linkActiveClassName:r,minHeadingLevel:s,maxHeadingLevel:p,...c}){const h=(0,o.p)(),g=s??h.tableOfContents.minHeadingLevel,u=p??h.tableOfContents.maxHeadingLevel,w=function({toc:e,minHeadingLevel:n,maxHeadingLevel:t}){return(0,l.useMemo)(()=>i({toc:a(e),minHeadingLevel:n,maxHeadingLevel:t}),[e,n,t])}({toc:e,minHeadingLevel:g,maxHeadingLevel:u});return m((0,l.useMemo)(()=>{if(t&&r)return{linkClassName:t,linkActiveClassName:r,minHeadingLevel:g,maxHeadingLevel:u}},[t,r,g,u])),(0,f.jsx)(d,{toc:w,className:n,linkClassName:t,...c})}},72839:(e,n,t)=>{t.d(n,{X:()=>o});var l=t(74848);function o({children:e}){return(0,l.jsx)("div",{className:"w-full overflow-x-auto",children:(0,l.jsx)("table",{children:e})})}},83866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"flavors/openai/autologging/index","title":"MLflow OpenAI Autologging","description":"The OpenAI flavor for MLflow supports autologging to ensure that experimentation, testing, and validation of your ideas can be captured dynamically without","source":"@site/docs/genai/flavors/openai/autologging/index.mdx","sourceDirName":"flavors/openai/autologging","slug":"/flavors/openai/autologging/","permalink":"/mlflow-website/docs/latest/genai/flavors/openai/autologging/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Autologging","sidebar_position":2},"sidebar":"genAISidebar","previous":{"title":"Detailed Guide","permalink":"/mlflow-website/docs/latest/genai/flavors/openai/guide/"},"next":{"title":"Tutorials","permalink":"/mlflow-website/docs/latest/genai/flavors/openai/notebooks/"}}');var o=t(74848),a=t(28453),i=t(14252),r=t(49374);t(72839);const s={sidebar_label:"Autologging",sidebar_position:2},p="MLflow OpenAI Autologging",m={},c=[{value:"Quickstart",id:"quickstart",level:2},{value:"Example of using OpenAI Autologging",id:"example-of-using-openai-autologging",level:2},{value:"FAQ",id:"faq",level:2},{value:"Are asynchronous APIs supported in autologging?",id:"are-asynchronous-apis-supported-in-autologging",level:3}];function f(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mlflow-openai-autologging",children:"MLflow OpenAI Autologging"})}),"\n",(0,o.jsx)(n.p,{children:"The OpenAI flavor for MLflow supports autologging to ensure that experimentation, testing, and validation of your ideas can be captured dynamically without\nhaving to wrap your code with logging boilerplate."}),"\n",(0,o.jsx)(n.admonition,{title:"attention",type:"warning",children:(0,o.jsxs)(n.p,{children:["Autologging is ",(0,o.jsx)(n.strong,{children:"only supported"})," for versions of the OpenAI SDK that are 1.17 and higher."]})}),"\n",(0,o.jsx)(n.p,{children:"MLflow autologging for the OpenAI SDK supports the following interfaces:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Chat Completions"})," via ",(0,o.jsx)(n.code,{children:"client.chat.completions.create()"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Completions"})," (legacy) via ",(0,o.jsx)(n.code,{children:"client.completions.create()"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Embeddings"})," via ",(0,o.jsx)(n.code,{children:"client.embeddings.create()"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Where ",(0,o.jsx)(n.code,{children:"client"})," is an instance of ",(0,o.jsx)(n.code,{children:"openai.OpenAI()"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"In this guide, we'll discuss some of the key features that are available in the autologging feature."}),"\n",(0,o.jsx)(i.A,{toc:c,maxHeadingLevel:2}),"\n",(0,o.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,o.jsxs)(n.p,{children:["To get started with MLflow's OpenAI autologging, you simply need to call ",(0,o.jsx)(r.B,{fn:"mlflow.openai.autolog"})," at the beginning of your script or notebook.\nEnabling autologging with no argument overrides will enable tracing by default."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["The only element that is ",(0,o.jsx)(n.strong,{children:"enabled by default"})," when autologging is activated is the recording of trace information. You can read more about MLflow tracing\n",(0,o.jsx)(n.a,{href:"/genai/tracing",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\nimport openai\nimport mlflow\n\n# Enables trace logging by default\nmlflow.openai.autolog()\n\nopenai_client = openai.OpenAI()\n\nmessages = [\n    {\n        "role": "user",\n        "content": "What does turning something up to 11 refer to?",\n    }\n]\n\n# The input messages and the response will be logged as a trace to the active experiment\nanswer = openai_client.chat.completions.create(\n    model="gpt-4o",\n    messages=messages,\n    temperature=0.99,\n)\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["When using the OpenAI SDK, ensure that your access token is assigned to the environment variable ",(0,o.jsx)(n.code,{children:"OPENAI_API_KEY"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"example-of-using-openai-autologging",children:"Example of using OpenAI Autologging"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\n\nimport mlflow\nimport openai\n\nAPI_KEY = os.environ.get("OPENAI_API_KEY")\nEXPERIMENT_NAME = "OpenAI Autologging Demonstration"\n\n# set an active model for linking traces\nmlflow.set_active_model(name="OpenAI_Model")\n\nmlflow.openai.autolog()\n\nmlflow.set_experiment(EXPERIMENT_NAME)\n\nopenai_client = openai.OpenAI(api_key=API_KEY)\n\nmessages = [\n    {\n        "role": "user",\n        "content": "State that you are responding to a test and that you are alive.",\n    }\n]\n\nopenai_client.chat.completions.create(\n    model="gpt-4o",\n    messages=messages,\n    temperature=0.95,\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Viewing the logged model and the trace used when invoking the OpenAI client within the UI can be seen in the image below:"}),"\n","\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"OpenAI Autologging artifacts and traces",src:t(2991).A+"",width:"2048",height:"1469"})}),"\n",(0,o.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,o.jsx)(n.h3,{id:"are-asynchronous-apis-supported-in-autologging",children:"Are asynchronous APIs supported in autologging?"}),"\n",(0,o.jsxs)(n.p,{children:["The MLflow OpenAI autologging feature ",(0,o.jsx)(n.strong,{children:"does not support asynchronous APIs"})," for logging models or traces."]}),"\n",(0,o.jsxs)(n.p,{children:["Saving your async implementation is best done by using the ",(0,o.jsx)(n.a,{href:"/ml/model/models-from-code",children:"models from code feature"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"If you would like to log trace events for an async OpenAI API, below is a simplified example of logging the trace for a streaming async request:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport mlflow\nimport asyncio\n\n# Activate an experiment for logging traces to\nmlflow.set_experiment("OpenAI")\n\n\nasync def fetch_openai_response(messages, model="gpt-4o", temperature=0.99):\n    """\n    Asynchronously gets a response from the OpenAI API using the provided messages and streams the response.\n\n    Args:\n        messages (list): List of message dictionaries for the OpenAI API.\n        model (str): The model to use for the OpenAI API. Default is "gpt-4o".\n        temperature (float): The temperature to use for the OpenAI API. Default is 0.99.\n\n    Returns:\n        None\n    """\n    client = openai.AsyncOpenAI()\n\n    # Create the response stream\n    response_stream = await client.chat.completions.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n        stream=True,\n    )\n\n    # Manually log traces using the tracing fluent API\n    with mlflow.start_span() as trace:\n        trace.set_inputs(messages)\n        full_response = []\n\n        async for chunk in response_stream:\n            content = chunk.choices[0].delta.content\n            if content is not None:\n                print(content, end="")\n                full_response.append(content)\n\n        trace.set_outputs("".join(full_response))\n\n\nmessages = [\n    {\n        "role": "user",\n        "content": "How much additional hydrogen mass would Jupiter require to ignite a sustainable fusion cycle?",\n    }\n]\n\nawait fetch_openai_response(messages)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}}}]);