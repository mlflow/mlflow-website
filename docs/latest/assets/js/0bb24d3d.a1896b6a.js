"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2456],{19883:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/logged_models_tab-b9598f8561caa18ca28111a5cb4c2766.png"},22060:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/chatbot_prompt-c4adcf11a8289f59b736beb7aa483d87.png"},24097:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/logged_model_autolog_traces-b7d819cc102de467745069cc054c4abc.png"},28453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var n=a(96540);const i={},o=n.createContext(i);function l(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(o.Provider,{value:t},e.children)}},34225:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/evaluate_metrics-81c775cb071619221be4aa6e5512a3e5.png"},49374:(e,t,a)=>{a.d(t,{B:()=>s});a(96540);const n=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var i=a(86025),o=a(28774),l=a(74848);const r=e=>{const t=e.split(".");for(let a=t.length;a>0;a--){const e=t.slice(0,a).join(".");if(n[e])return e}return null};function s({fn:e,children:t}){const a=r(e);if(!a)return(0,l.jsx)(l.Fragment,{children:t});const s=(0,i.Ay)(`/${n[a]}#${e}`);return(0,l.jsx)(o.A,{to:s,target:"_blank",children:t??(0,l.jsxs)("code",{children:[e,"()"]})})}},61763:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"mlflow-3/genai-agent","title":"GenAI Agent with MLflow 3","description":"Prerequisites","source":"@site/docs/genai/mlflow-3/genai-agent.mdx","sourceDirName":"mlflow-3","slug":"/mlflow-3/genai-agent","permalink":"/docs/latest/genai/mlflow-3/genai-agent","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"genAISidebar","previous":{"title":"Deep Learning with MLflow 3","permalink":"/docs/latest/genai/mlflow-3/deep-learning"},"next":{"title":"Breaking Changes in MLflow 3","permalink":"/docs/latest/genai/mlflow-3/breaking-changes"}}');var i=a(74848),o=a(28453),l=a(49374);const r={sidebar_position:2},s="GenAI Agent with MLflow 3",c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Register a prompt template",id:"register-a-prompt-template",level:2},{value:"Create a chain with Langchain",id:"create-a-chain-with-langchain",level:2},{value:"Test the model with tracing observability",id:"test-the-model-with-tracing-observability",level:2},{value:"Evaluate the agent&#39;s performance",id:"evaluate-the-agents-performance",level:2}];function m(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"genai-agent-with-mlflow-3",children:"GenAI Agent with MLflow 3"})}),"\n",(0,i.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(t.p,{children:"Run the following command to install MLflow 3 and langchain-openai packages."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"pip install --upgrade 'mlflow>=3.0.0rc0' --pre\npip install langchain-openai\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Set ",(0,i.jsx)(t.code,{children:"OPENAI_API_KEY"})," environment variable in CLI to authenticate to OpenAI APIs."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"export OPENAI_API_KEY=your_api_key_here\n"})}),"\n",(0,i.jsx)(t.p,{children:"This example demonstrates how to use MLflow to trace and evaluate langchain model requests with prompt engineering.\nIt showcases how to register prompts, generate traces, and assess response performance using evaluation datasets.\nThe example also highlights the ability to track interactive traces and link them to the logged model for better observability."}),"\n",(0,i.jsx)(t.h2,{id:"register-a-prompt-template",children:"Register a prompt template"}),"\n",(0,i.jsx)(t.p,{children:"First, we register a prompt template as a prompt version in MLflow. This allows us to track and manage different versions of the prompt used during development, ensuring reproducibility and better observability."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import mlflow\n\nsystem_prompt = mlflow.genai.register_prompt(\n    name="chatbot_prompt",\n    template="You are a chatbot that can answer questions about IT. Answer this question: {{question}}",\n    commit_message="Initial version of chatbot",\n)\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Switch to the ",(0,i.jsx)(t.strong,{children:"Prompts"})," tab to view the registered prompt and its details:"]}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The MLflow UI showing a prompt version",src:a(22060).A+"",width:"3448",height:"828"})})}),"\n",(0,i.jsx)(t.h2,{id:"create-a-chain-with-langchain",children:"Create a chain with Langchain"}),"\n",(0,i.jsxs)(t.p,{children:["Next, we use ",(0,i.jsx)(t.code,{children:"ChatPromptTemplate"})," with the prompt registered in the previous step and combine it with ",(0,i.jsx)(t.code,{children:"ChatOpenAI"})," to create a simple chain that answers user questions."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'from langchain.schema.output_parser import StrOutputParser\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_openai import ChatOpenAI\n\nprompt = ChatPromptTemplate.from_template(system_prompt.to_single_brace_format())\nchain = prompt | ChatOpenAI(temperature=0.7) | StrOutputParser()\nquestion = "What is MLflow?"\nprint(chain.invoke({"question": question}))\n# MLflow is an open-source platform for managing the end-to-end machine learning lifecycle...\n'})}),"\n",(0,i.jsx)(t.h2,{id:"test-the-model-with-tracing-observability",children:"Test the model with tracing observability"}),"\n",(0,i.jsxs)(t.p,{children:["In this section, we manually test the model with example queries and leverage MLflow Tracing to analyze the outputs and debug potential issues.\n",(0,i.jsxs)(t.strong,{children:["As part of setup, set an active model with ",(0,i.jsx)(l.B,{fn:"mlflow.set_active_model"})," API to enable linking any traces generated during app development to it."]}),"\nWith autologging enabled, all generated traces will be linked to the current active model, ensuring seamless observability."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# set the active model for linking traces\nmlflow.set_active_model(name="langchain_model")\n\n# Enable autologging so that interactive traces from the client are automatically linked to a LoggedModel\nmlflow.langchain.autolog()\n\nquestions = [\n    "What is MLflow Tracking and how does it work?",\n    "What is Unity Catalog?",\n    "What are user-defined functions (UDFs)?",\n]\noutputs = []\n\nfor question in questions:\n    outputs.append(chain.invoke({"question": question}))\n\n# fetch the current active model\'s id and check traces\nactive_model_id = mlflow.get_active_model_id()\nmlflow.search_traces(model_id=active_model_id)\n#                            trace_id                                             trace  ...  assessments                        request_id\n# 0  e807ab0a020f4794989a24c84c2892ad  Trace(trace_id=e807ab0a020f4794989a24c84c2892ad)  ...           []  e807ab0a020f4794989a24c84c2892ad\n# 1  4eb83e4adb6a4f3494bc5b33aca4e970  Trace(trace_id=4eb83e4adb6a4f3494bc5b33aca4e970)  ...           []  4eb83e4adb6a4f3494bc5b33aca4e970\n# 2  42b100851f934c969c352930f699308d  Trace(trace_id=42b100851f934c969c352930f699308d)  ...           []  42b100851f934c969c352930f699308d\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Check out the ",(0,i.jsx)(t.strong,{children:"Models"})," tab in the experiment to view the new logged model with name ",(0,i.jsx)(t.code,{children:"langchain_model"}),"."]}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The MLflow UI showing the logged models in an experiment",src:a(19883).A+"",width:"3448",height:"680"})})}),"\n",(0,i.jsxs)(t.p,{children:["On the ",(0,i.jsx)(t.strong,{children:"Logged Model"})," page, you can view detailed information, including the ",(0,i.jsx)(t.code,{children:"model_id"}),"."]}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The MLflow UI showing the logged model details page",src:a(89530).A+"",width:"3436",height:"986"})})}),"\n",(0,i.jsxs)(t.p,{children:["Navigating to the ",(0,i.jsx)(t.strong,{children:"Traces"})," tab of the model's page, you can view the traces that were just generated."]}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The MLflow UI showing the logged model autolog traces lineage",src:a(24097).A+"",width:"3436",height:"1296"})})}),"\n",(0,i.jsx)(t.h2,{id:"evaluate-the-agents-performance",children:"Evaluate the agent's performance"}),"\n",(0,i.jsxs)(t.p,{children:["Finally, we use ",(0,i.jsx)(l.B,{fn:"mlflow.evaluate"})," to assess the performance of the chain on an evaluation dataset.\nThis step involves calculating additional metrics, such as answer correctness, to gain deeper insights into the model's behavior and accuracy."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# Prepare the eval dataset in a pandas DataFrame\nimport pandas as pd\n\neval_df = pd.DataFrame(\n    {\n        "messages": questions,\n        "expected_response": [\n            """MLflow Tracking is a key component of the MLflow platform designed to record and manage machine learning experiments. It enables data scientists and engineers to log parameters, code versions, metrics, and artifacts in a systematic way, facilitating experiment tracking and reproducibility.\\n\\nHow It Works:\\n\\nAt the heart of MLflow Tracking is the concept of a run, which is an execution of a machine learning code. Each run can log the following:\\n\\nParameters: Input variables or hyperparameters used in the model (e.g., learning rate, number of trees). Metrics: Quantitative measures to evaluate the model\'s performance (e.g., accuracy, loss). Artifacts: Output files like models, datasets, or images generated during the run. Source Code: The version of the code or Git commit hash used. These logs are stored in a tracking server, which can be set up locally or on a remote server. The tracking server uses a backend storage (like a database or file system) to keep a record of all runs and their associated data.\\n\\n Users interact with MLflow Tracking through its APIs available in multiple languages (Python, R, Java, etc.). By invoking these APIs in the code, you can start and end runs, and log data as the experiment progresses. Additionally, MLflow offers autologging capabilities for popular machine learning libraries, automatically capturing relevant parameters and metrics without manual code changes.\\n\\nThe logged data can be visualized using the MLflow UI, a web-based interface that displays all experiments and runs. This UI allows you to compare runs side-by-side, filter results, and analyze performance metrics over time. It aids in identifying the best models and understanding the impact of different parameters.\\n\\nBy providing a structured way to record experiments, MLflow Tracking enhances collaboration among team members, ensures transparency, and makes it easier to reproduce results. It integrates seamlessly with other MLflow components like Projects and Model Registry, offering a comprehensive solution for managing the machine learning lifecycle.""",\n            """Unity Catalog is a feature in Databricks that allows you to create a centralized inventory of your data assets, such as tables, views, and functions, and share them across different teams and projects. It enables easy discovery, collaboration, and reuse of data assets within your organization.\\n\\nWith Unity Catalog, you can:\\n\\n1. Create a single source of truth for your data assets: Unity Catalog acts as a central repository of all your data assets, making it easier to find and access the data you need.\\n2. Improve collaboration: By providing a shared inventory of data assets, Unity Catalog enables data scientists, engineers, and other stakeholders to collaborate more effectively.\\n3. Foster reuse of data assets: Unity Catalog encourages the reuse of existing data assets, reducing the need to create new assets from scratch and improving overall efficiency.\\n4. Enhance data governance: Unity Catalog provides a clear view of data assets, enabling better data governance and compliance.\\n\\nUnity Catalog is particularly useful in large organizations where data is scattered across different teams, projects, and environments. It helps create a unified view of data assets, making it easier to work with data across different teams and projects.""",\n            """User-defined functions (UDFs) in the context of Databricks and Apache Spark are custom functions that you can create to perform specific tasks on your data. These functions are written in a programming language such as Python, Java, Scala, or SQL, and can be used to extend the built-in functionality of Spark.\\n\\nUDFs can be used to perform complex data transformations, data cleaning, or to apply custom business logic to your data. Once defined, UDFs can be invoked in SQL queries or in DataFrame transformations, allowing you to reuse your custom logic across multiple queries and applications.\\n\\nTo use UDFs in Databricks, you first need to define them in a supported programming language, and then register them with the SparkSession. Once registered, UDFs can be used in SQL queries or DataFrame transformations like any other built-in function.\\n\\nHere\\\'s an example of how to define and register a UDF in Python:\\n\\n```python\\nfrom pyspark.sql.functions import udf\\nfrom pyspark.sql.types import IntegerType\\n\\n# Define the UDF function\\ndef multiply_by_two(value):\\n    return value * 2\\n\\n# Register the UDF with the SparkSession\\nmultiply_udf = udf(multiply_by_two, IntegerType())\\n\\n# Use the UDF in a DataFrame transformation\\ndata = spark.range(10)\\nresult = data.withColumn("multiplied", multiply_udf(data.id))\\nresult.show()\\n```\\n\\nIn this example, we define a UDF called `multiply_by_two` that multiplies a given value by two. We then register this UDF with the SparkSession using the `udf` function, and use it in a DataFrame transformation to multiply the `id` column of a DataFrame by two.""",\n        ],\n        "predictions": outputs,\n    }\n)\n\n# Start a run to represent the evaluation job\nwith mlflow.start_run() as evaluation_run:\n    eval_dataset = mlflow.data.from_pandas(\n        df=eval_df,\n        name="eval_dataset",\n        targets="expected_response",\n        predictions="predictions",\n    )\n    mlflow.log_input(dataset=eval_dataset)\n    # Run the evaluation based on extra metrics\n    # Current active model will be automatically used\n    result = mlflow.evaluate(\n        data=eval_dataset,\n        extra_metrics=[\n            mlflow.metrics.genai.answer_correctness("openai:/gpt-4o"),\n            mlflow.metrics.genai.answer_relevance("openai:/gpt-4o"),\n        ],\n        # This is needed since answer_correctness looks for \'inputs\' field\n        evaluator_config={"col_mapping": {"inputs": "messages"}},\n    )\n\nresult.tables["eval_results_table"]\n#                                         messages  ...                  answer_relevance/v1/justification\n# 0  What is MLflow Tracking and how does it work?  ...  The output directly addresses the input questi...\n# 1                         What is Unity Catalog?  ...  The output is completely irrelevant to the inp...\n# 2        What are user-defined functions (UDFs)?  ...  The output directly addresses the input questi...\n'})}),"\n",(0,i.jsx)(t.p,{children:"Navigating to the active model, you can see the metrics and their details displayed in the MLflow UI. This includes metrics like answer correctness and answer relevance, providing insights into the model's performance."}),"\n",(0,i.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"The MLflow UI showing the evaluate run metrics",src:a(34225).A+"",width:"3448",height:"1736"})})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},89530:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/logged_model_page-ead92fc3d0979e51c906ccbd612a6a61.png"}}]);