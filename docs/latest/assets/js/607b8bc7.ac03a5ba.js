"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6306],{43065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"tracing/integrations/crewai","title":"Tracing CrewAI","description":"CrewAI Tracing via autolog","source":"@site/docs/tracing/integrations/crewai.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/crewai","permalink":"/docs/latest/tracing/integrations/crewai","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7,"sidebar_label":"CrewAI"},"sidebar":"docsSidebar","previous":{"title":"AutoGen","permalink":"/docs/latest/tracing/integrations/autogen"},"next":{"title":"PydanticAI","permalink":"/docs/latest/tracing/integrations/pydantic_ai"}}');var a=t(74848),l=t(28453),o=t(67756);t(86294),t(61096),t(65537),t(79329);const i={sidebar_position:7,sidebar_label:"CrewAI"},s="Tracing CrewAI",c={},p=[{value:"Example Usage",id:"example-usage",level:3},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:3}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"tracing-crewai",children:"Tracing CrewAI"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"CrewAI Tracing via autolog",src:t(86017).A+"",width:"1144",height:"720"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://www.crewai.com/",children:"CrewAI"})," is an open-source framework for orchestrating role-playing, autonomous AI agent."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for ",(0,a.jsx)(n.a,{href:"https://www.crewai.com/",children:"CrewAI"}),", an open source framework for building multi-agent applications. By enabling auto tracing\nfor CrewAI by calling the ",(0,a.jsx)(o.B,{fn:"mlflow.crewai.autolog"})," function, , MLflow will capture nested traces for CrewAI workflow execution and logged them to the active MLflow Experiment."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.crewai.autolog()\n"})}),"\n",(0,a.jsx)(n.p,{children:"MLflow trace automatically captures the following information about CrewAI agents:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Tasks and Agent who executes each task"}),"\n",(0,a.jsx)(n.li,{children:"Every LLM calls with input prompts, completion responses, and various metadata"}),"\n",(0,a.jsx)(n.li,{children:"Memory load and writes operations"}),"\n",(0,a.jsx)(n.li,{children:"Latency of each operation"}),"\n",(0,a.jsx)(n.li,{children:"Any exception if raised"}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Currently, MLflow CrewAI integration only support tracing for synchronous task execution. Asynchronous task and kickoff are not supported right now."})}),"\n",(0,a.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,a.jsx)(n.p,{children:"First, enable auto-tracing for CrewAI, and optionally create an MLflow experiment to write traces to. This helps organizing your traces better."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n# Turn on auto tracing by calling mlflow.crewai.autolog()\nmlflow.crewai.autolog()\n\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("CrewAI")\n'})}),"\n",(0,a.jsx)(n.p,{children:"Next, define a multi-agent workflow using CrewAI. The following example defines a trip planner agent that uses web search capability as a tool."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from crewai import Agent, Crew, Task\nfrom crewai.knowledge.source.string_knowledge_source import StringKnowledgeSource\nfrom crewai_tools import SerperDevTool, WebsiteSearchTool\n\nfrom textwrap import dedent\n\ncontent = "Users name is John. He is 30 years old and lives in San Francisco."\nstring_source = StringKnowledgeSource(\n    content=content, metadata={"preference": "personal"}\n)\n\nsearch_tool = WebsiteSearchTool()\n\n\nclass TripAgents:\n    def city_selection_agent(self):\n        return Agent(\n            role="City Selection Expert",\n            goal="Select the best city based on weather, season, and prices",\n            backstory="An expert in analyzing travel data to pick ideal destinations",\n            tools=[\n                search_tool,\n            ],\n            verbose=True,\n        )\n\n    def local_expert(self):\n        return Agent(\n            role="Local Expert at this city",\n            goal="Provide the BEST insights about the selected city",\n            backstory="""A knowledgeable local guide with extensive information\n        about the city, it\'s attractions and customs""",\n            tools=[search_tool],\n            verbose=True,\n        )\n\n\nclass TripTasks:\n    def identify_task(self, agent, origin, cities, interests, range):\n        return Task(\n            description=dedent(\n                f"""\n                Analyze and select the best city for the trip based\n                on specific criteria such as weather patterns, seasonal\n                events, and travel costs. This task involves comparing\n                multiple cities, considering factors like current weather\n                conditions, upcoming cultural or seasonal events, and\n                overall travel expenses.\n                Your final answer must be a detailed\n                report on the chosen city, and everything you found out\n                about it, including the actual flight costs, weather\n                forecast and attractions.\n\n                Traveling from: {origin}\n                City Options: {cities}\n                Trip Date: {range}\n                Traveler Interests: {interests}\n            """\n            ),\n            agent=agent,\n            expected_output="Detailed report on the chosen city including flight costs, weather forecast, and attractions",\n        )\n\n    def gather_task(self, agent, origin, interests, range):\n        return Task(\n            description=dedent(\n                f"""\n                As a local expert on this city you must compile an\n                in-depth guide for someone traveling there and wanting\n                to have THE BEST trip ever!\n                Gather information about key attractions, local customs,\n                special events, and daily activity recommendations.\n                Find the best spots to go to, the kind of place only a\n                local would know.\n                This guide should provide a thorough overview of what\n                the city has to offer, including hidden gems, cultural\n                hotspots, must-visit landmarks, weather forecasts, and\n                high level costs.\n                The final answer must be a comprehensive city guide,\n                rich in cultural insights and practical tips,\n                tailored to enhance the travel experience.\n\n                Trip Date: {range}\n                Traveling from: {origin}\n                Traveler Interests: {interests}\n            """\n            ),\n            agent=agent,\n            expected_output="Comprehensive city guide including hidden gems, cultural hotspots, and practical travel tips",\n        )\n\n\nclass TripCrew:\n    def __init__(self, origin, cities, date_range, interests):\n        self.cities = cities\n        self.origin = origin\n        self.interests = interests\n        self.date_range = date_range\n\n    def run(self):\n        agents = TripAgents()\n        tasks = TripTasks()\n\n        city_selector_agent = agents.city_selection_agent()\n        local_expert_agent = agents.local_expert()\n\n        identify_task = tasks.identify_task(\n            city_selector_agent,\n            self.origin,\n            self.cities,\n            self.interests,\n            self.date_range,\n        )\n        gather_task = tasks.gather_task(\n            local_expert_agent, self.origin, self.interests, self.date_range\n        )\n\n        crew = Crew(\n            agents=[city_selector_agent, local_expert_agent],\n            tasks=[identify_task, gather_task],\n            verbose=True,\n            memory=True,\n            knowledge={\n                "sources": [string_source],\n                "metadata": {"preference": "personal"},\n            },\n        )\n\n        result = crew.kickoff()\n        return result\n\n\ntrip_crew = TripCrew("California", "Tokyo", "Dec 12 - Dec 20", "sports")\nresult = trip_crew.run()\n'})}),"\n",(0,a.jsx)(n.h3,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,a.jsxs)(n.p,{children:["Auto tracing for CrewAI can be disabled globally by calling ",(0,a.jsx)(n.code,{children:"mlflow.crewai.autolog(disable=True)"})," or ",(0,a.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},67756:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var a=t(29030),l=t(56289),o=t(74848);const i=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function s(e){let{fn:n,children:t}=e;const s=i(n);if(!s)return(0,o.jsx)(o.Fragment,{children:t});const c=(0,a.Ay)(`/${r[s]}#${n}`);return(0,o.jsx)(l.A,{to:c,target:"_blank",children:t??(0,o.jsxs)("code",{children:[n,"()"]})})}},86017:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/crewai-tracing-91ffc6888df3527199ebf2e25cf697d8.gif"},86294:(e,n,t)=>{t.d(n,{Zp:()=>s,AC:()=>i,WO:()=>p,tf:()=>d,_C:()=>c,$3:()=>m,jK:()=>h});var r=t(34164);const a={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var l=t(56289),o=t(74848);const i=e=>{let{children:n,isSmall:t,cols:l}=e;return(0,o.jsx)("div",{className:(0,r.A)(a.CardGroup,t?a.AutofillColumns:l?a[`Cols${l}`]:a.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:t=""}=e;return t?(0,o.jsx)(l.A,{className:(0,r.A)(a.Link,a.Card,a.CardBordered),to:t,children:n}):(0,o.jsx)("div",{className:(0,r.A)(a.Card,a.CardBordered),children:n})},c=e=>{let{headerText:n,link:t,text:l}=e;return(0,o.jsx)(s,{link:t,children:(0,o.jsxs)("span",{children:[(0,o.jsx)("div",{className:(0,r.A)(a.CardTitle,a.BoxRoot,a.PaddingBottom4),style:{pointerEvents:"none"},children:(0,o.jsx)("div",{className:(0,r.A)(a.BoxRoot,a.FlexFlex,a.FlexAlignItemsCenter,a.FlexDirectionRow,a.FlexJustifyContentFlexStart,a.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,o.jsx)("div",{className:(0,r.A)(a.BoxRoot,a.BoxHideIfEmpty,a.MarginTop4,a.MarginLeft4),style:{pointerEvents:"auto"},children:(0,o.jsx)("span",{className:"",children:n})})})}),(0,o.jsx)("span",{className:(0,r.A)(a.TextColor,a.CardBody),children:(0,o.jsx)("p",{children:l})})]})})},p=e=>{let{description:n,children:t,link:r}=e;return(0,o.jsx)(s,{link:r,children:(0,o.jsxs)("div",{className:a.LogoCardContent,children:[(0,o.jsx)("div",{className:a.LogoCardImage,children:t}),(0,o.jsx)("p",{className:a.TextColor,children:n})]})})},m=e=>{let{children:n,link:t}=e;return(0,o.jsx)(s,{link:t,children:(0,o.jsx)("div",{className:a.SmallLogoCardContent,children:(0,o.jsx)("div",{className:(0,r.A)("max-height-img-container",a.SmallLogoCardImage),children:n})})})},d=e=>{let{children:n,description:t,name:r,releaseVersion:i,learnMoreLink:c=""}=e;return(0,o.jsx)(s,{children:(0,o.jsxs)("div",{className:a.NewFeatureCardWrapper,children:[(0,o.jsxs)("div",{className:a.NewFeatureCardContent,children:[(0,o.jsxs)("div",{className:a.NewFeatureCardHeading,children:[r,(0,o.jsx)("br",{}),(0,o.jsx)("hr",{className:a.NewFeatureCardHeadingSeparator})]}),(0,o.jsx)("div",{className:a.LogoCardImage,children:n}),(0,o.jsx)("br",{}),(0,o.jsx)("p",{children:t}),(0,o.jsx)("br",{})]}),(0,o.jsxs)("div",{className:a.NewFeatureCardTags,children:[(0,o.jsx)("div",{children:c&&(0,o.jsx)(l.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,o.jsxs)(l.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${i}`,children:["released in ",i]})]})]})})},h=e=>{let{title:n,description:t,link:l=""}=e;return(0,o.jsx)(s,{link:l,children:(0,o.jsxs)("div",{className:a.TitleCardContent,children:[(0,o.jsx)("div",{className:(0,r.A)(a.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:n}),(0,o.jsx)("hr",{className:(0,r.A)(a.TitleCardSeparator),style:{margin:"12px 0"}}),(0,o.jsx)("p",{className:(0,r.A)(a.TextColor),children:t})]})})}}}]);