"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1476],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var a=t(96540);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},56810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"getting-started/logging-first-model/step5-synthetic-data/index","title":"Create a dataset about apples","description":"In order to produce some meaningful data (and a model) for us to log to MLflow, we\'ll need a dataset.","source":"@site/docs/getting-started/logging-first-model/step5-synthetic-data/index.mdx","sourceDirName":"getting-started/logging-first-model/step5-synthetic-data","slug":"/getting-started/logging-first-model/step5-synthetic-data/","permalink":"/docs/latest/getting-started/logging-first-model/step5-synthetic-data/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var o=t(74848),r=t(28453);const s={sidebar_position:5},d="Create a dataset about apples",i={},l=[{value:"Defining a dataset generator",id:"defining-a-dataset-generator",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"create-a-dataset-about-apples",children:"Create a dataset about apples"})}),"\n",(0,o.jsx)(n.p,{children:"In order to produce some meaningful data (and a model) for us to log to MLflow, we'll need a dataset.\nIn the interests of sticking with our theme of modeling demand for produce sales, this data will\nactually need to be about apples."}),"\n",(0,o.jsx)(n.p,{children:"There's a distinctly miniscule probability of finding an actual dataset on the internet about this,\nso we can just roll up our sleeves and make our own."}),"\n",(0,o.jsx)(n.h2,{id:"defining-a-dataset-generator",children:"Defining a dataset generator"}),"\n",(0,o.jsxs)(n.p,{children:["For our examples to work, we're going to need something that can actually fit, but not something that\nfits too well. We're going to be training multiple iterations in order to show the effect of modifying\nour model's hyperparameters, so there needs to be some amount of unexplained variance in the feature set.\nHowever, we need some degree of correlation between our target variable (",(0,o.jsx)(n.code,{children:"demand"}),", in the case of our\napples sales data that we want to predict) and the feature set."]}),"\n",(0,o.jsx)(n.p,{children:"We can introduce this correlation by crafting a relationship between our features and our target.\nThe random elements of some of the factors will handle the unexplained variance portion."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\n\ndef generate_apple_sales_data_with_promo_adjustment(\n    base_demand: int = 1000, n_rows: int = 5000\n):\n    """\n    Generates a synthetic dataset for predicting apple sales demand with seasonality\n    and inflation.\n\n    This function creates a pandas DataFrame with features relevant to apple sales.\n    The features include date, average_temperature, rainfall, weekend flag, holiday flag,\n    promotional flag, price_per_kg, and the previous day\'s demand. The target variable,\n    \'demand\', is generated based on a combination of these features with some added noise.\n\n    Args:\n        base_demand (int, optional): Base demand for apples. Defaults to 1000.\n        n_rows (int, optional): Number of rows (days) of data to generate. Defaults to 5000.\n\n    Returns:\n        pd.DataFrame: DataFrame with features and target variable for apple sales prediction.\n\n    Example:\n        >>> df = generate_apple_sales_data_with_seasonality(base_demand=1200, n_rows=6000)\n        >>> df.head()\n    """\n\n    # Set seed for reproducibility\n    np.random.seed(9999)\n\n    # Create date range\n    dates = [datetime.now() - timedelta(days=i) for i in range(n_rows)]\n    dates.reverse()\n\n    # Generate features\n    df = pd.DataFrame(\n        {\n            "date": dates,\n            "average_temperature": np.random.uniform(10, 35, n_rows),\n            "rainfall": np.random.exponential(5, n_rows),\n            "weekend": [(date.weekday() >= 5) * 1 for date in dates],\n            "holiday": np.random.choice([0, 1], n_rows, p=[0.97, 0.03]),\n            "price_per_kg": np.random.uniform(0.5, 3, n_rows),\n            "month": [date.month for date in dates],\n        }\n    )\n\n    # Introduce inflation over time (years)\n    df["inflation_multiplier"] = (\n        1 + (df["date"].dt.year - df["date"].dt.year.min()) * 0.03\n    )\n\n    # Incorporate seasonality due to apple harvests\n    df["harvest_effect"] = np.sin(2 * np.pi * (df["month"] - 3) / 12) + np.sin(\n        2 * np.pi * (df["month"] - 9) / 12\n    )\n\n    # Modify the price_per_kg based on harvest effect\n    df["price_per_kg"] = df["price_per_kg"] - df["harvest_effect"] * 0.5\n\n    # Adjust promo periods to coincide with periods lagging peak harvest by 1 month\n    peak_months = [4, 10]  # months following the peak availability\n    df["promo"] = np.where(\n        df["month"].isin(peak_months),\n        1,\n        np.random.choice([0, 1], n_rows, p=[0.85, 0.15]),\n    )\n\n    # Generate target variable based on features\n    base_price_effect = -df["price_per_kg"] * 50\n    seasonality_effect = df["harvest_effect"] * 50\n    promo_effect = df["promo"] * 200\n\n    df["demand"] = (\n        base_demand\n        + base_price_effect\n        + seasonality_effect\n        + promo_effect\n        + df["weekend"] * 300\n        + np.random.normal(0, 50, n_rows)\n    ) * df[\n        "inflation_multiplier"\n    ]  # adding random noise\n\n    # Add previous day\'s demand\n    df["previous_days_demand"] = df["demand"].shift(1)\n    df["previous_days_demand"].fillna(\n        method="bfill", inplace=True\n    )  # fill the first row\n\n    # Drop temporary columns\n    df.drop(columns=["inflation_multiplier", "harvest_effect", "month"], inplace=True)\n\n    return df\n'})}),"\n",(0,o.jsx)(n.p,{children:"Generate the data using the method we just prepared and save its result."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"data = generate_apple_sales_data_with_promo_adjustment(base_demand=1_000, n_rows=1_000)\n\ndata[-20:]\n"})}),"\n",(0,o.jsx)(n.p,{children:"In the next section, we'll both use this generator for its output (the data set), and as an example\nfor how to leverage MLflow Tracking as part of a prototyping phase for a project."})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);