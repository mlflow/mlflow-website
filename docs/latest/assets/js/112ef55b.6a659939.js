"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1796],{15292:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>g,frontMatter:()=>c,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"model/notebooks/signature_examples-ipynb","title":"MLflow Signature Playground Notebook","description":"Download this notebook","source":"@site/docs/model/notebooks/signature_examples-ipynb.mdx","sourceDirName":"model/notebooks","slug":"/model/notebooks/signature_examples","permalink":"/docs/latest/model/notebooks/signature_examples","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/model/notebooks/signature_examples.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/model/notebooks/signature_examples.ipynb","slug":"signature_examples"},"sidebar":"docsSidebar","previous":{"title":"Custom Python Model","permalink":"/docs/latest/model/python_model"},"next":{"title":"Overview","permalink":"/docs/latest/prompts/"}}');var a=t(74848),r=t(28453),s=t(16734),o=t(61536),d=t(86563),l=t(20723);const c={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/model/notebooks/signature_examples.ipynb",slug:"signature_examples"},u="MLflow Signature Playground Notebook",h={},p=[{value:"Why Model Signatures Matter",id:"why-model-signatures-matter",level:3},{value:"Signature Enforcement in Action",id:"signature-enforcement-in-action",level:3},{value:"Practical Examples for a Deeper Understanding",id:"practical-examples-for-a-deeper-understanding",level:3},{value:"Scalar Support in MLflow Signatures",id:"scalar-support-in-mlflow-signatures",level:3},{value:"Understanding Type Conversion: Int to Long",id:"understanding-type-conversion-int-to-long",level:3},{value:"Why Integers are Inferred as Long",id:"why-integers-are-inferred-as-long",level:4},{value:"Signature Enforcement",id:"signature-enforcement",level:3},{value:"Updating Signatures",id:"updating-signatures",level:3},{value:"The Necessity of Schema Enforcement in MLflow",id:"the-necessity-of-schema-enforcement-in-mlflow",level:3},{value:"Why Schema Enforcement Matters",id:"why-schema-enforcement-matters",level:4},{value:"Updating Model Signature for Clearer Error Messages",id:"updating-model-signature-for-clearer-error-messages",level:4},{value:"Validating that schema enforcement will not permit a flawed input",id:"validating-that-schema-enforcement-will-not-permit-a-flawed-input",level:4},{value:"Wrapping Up: Insights and Best Practices from the MLflow Signature Playground",id:"wrapping-up-insights-and-best-practices-from-the-mlflow-signature-playground",level:3}];function m(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mlflow-signature-playground-notebook",children:"MLflow Signature Playground Notebook"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/model/notebooks/signature_examples.ipynb",children:"Download this notebook"}),"\nWelcome to the MLflow Signature Playground! This interactive Jupyter notebook is designed to guide you through the foundational concepts of ",(0,a.jsx)(n.a,{href:"https://mlflow.org/docs/latest/model/signatures.html",children:"Model Signatures"})," within the MLflow ecosystem. As you progress through the notebook, you'll gain practical experience with defining, enforcing, and utilizing model signatures\u2014a critical aspect of model management that enhances reproducibility, reliability, and ease of use."]}),"\n",(0,a.jsx)(n.h3,{id:"why-model-signatures-matter",children:"Why Model Signatures Matter"}),"\n",(0,a.jsx)(n.p,{children:"In the realm of machine learning, defining the inputs and outputs of models with precision is key to ensuring smooth operations. Model signatures serve as the schema definition for the data your model expects and produces, acting as a blueprint for both model developers and users. This not only clarifies expectations but also facilitates automatic validation checks, streamlining the process from model training to deployment."}),"\n",(0,a.jsx)(n.h3,{id:"signature-enforcement-in-action",children:"Signature Enforcement in Action"}),"\n",(0,a.jsx)(n.p,{children:"By exploring the code cells in this notebook, you'll witness firsthand how model signatures can enforce data integrity, prevent common errors, and provide descriptive feedback when discrepancies occur. This is invaluable for maintaining the quality and consistency of model inputs, especially when models are served in production environments."}),"\n",(0,a.jsx)(n.h3,{id:"practical-examples-for-a-deeper-understanding",children:"Practical Examples for a Deeper Understanding"}),"\n",(0,a.jsx)(n.p,{children:"The notebook includes a range of examples showcasing different data types and structures, from simple scalars to complex nested dictionaries. These examples demonstrate how signatures are inferred, logged, and updated, providing you with a comprehensive understanding of the signature lifecycle.\nAs you interact with the provided PythonModel instances and invoke their predict methods, you'll learn how to handle various input scenarios\u2014accounting for both required and optional data fields\u2014and how to update existing models to include detailed signatures.\nWhether you're a data scientist looking to refine your model management practices or a developer integrating MLflow into your workflow, this notebook is your sandbox for mastering model signatures. Let's dive in and explore the robust capabilities of MLflow signatures!"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["NOTE: Several of the features shown in this notebook are only available in version 2.10.0 and higher of MLflow. In particular, the support for the ",(0,a.jsx)(n.code,{children:"Array"})," and ",(0,a.jsx)(n.code,{children:"Object"})," types are not available prior to version 2.10.0."]}),"\n"]}),"\n",(0,a.jsx)(s.d,{executionCount:1,children:'import numpy as np\nimport pandas as pd\n\nimport mlflow\nfrom mlflow.models.signature import infer_signature, set_signature\n\n\ndef report_signature_info(input_data, output_data=None, params=None):\n  inferred_signature = infer_signature(input_data, output_data, params)\n\n  report = f"""\nThe input data: \n\t{input_data}.\nThe data is of type: {type(input_data)}.\nThe inferred signature is:\n\n{inferred_signature}\n"""\n  print(report)'}),"\n",(0,a.jsx)(n.h3,{id:"scalar-support-in-mlflow-signatures",children:"Scalar Support in MLflow Signatures"}),"\n",(0,a.jsx)(n.p,{children:"In this segment of the tutorial, we explore the critical role of scalar data types in the context of MLflow's model signatures. Scalar types, such as strings, integers, floats, doubles, booleans, and datetimes, are fundamental to defining the schema for a model's input and output. Accurate representation of these types is essential for ensuring that models process data correctly, which directly impacts the reliability and accuracy of predictions."}),"\n",(0,a.jsx)(n.p,{children:"By examining examples of various scalar types, this section demonstrates how MLflow infers and records the structure and nature of data. We'll see how MLflow signatures cater to different scalar types, ensuring that the data fed into the model matches the expected format. This understanding is crucial for any machine learning practitioner, as it helps in preparing and validating data inputs, leading to smoother model operations and more reliable results."}),"\n",(0,a.jsxs)(n.p,{children:["Through practical examples, including lists of strings, floats, and other types, we illustrate how MLflow's ",(0,a.jsx)(n.code,{children:"infer_signature"})," function can accurately deduce the data format. This capability is a cornerstone in MLflow's ability to handle diverse data inputs and forms the basis for more complex data structures in machine learning models. By the end of this section, you'll have a clear grasp of how scalar data is represented within MLflow signatures and why this is important for your ML projects."]}),"\n",(0,a.jsx)(s.d,{executionCount:2,children:'# List of strings\n\nreport_signature_info(["a", "list", "of", "strings"])'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n['a', 'list', 'of', 'strings'].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[string (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:3,children:"# List of floats\n\nreport_signature_info([np.float32(0.117), np.float32(1.99)])"}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[0.117, 1.99].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[float (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:4,children:'# Adding a column header to a list of doubles\nmy_data = pd.DataFrame({"input_data": [np.float64(0.117), np.float64(1.99)]})\nreport_signature_info(my_data)'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n   input_data\n0       0.117\n1       1.990.\nThe data is of type: <class 'pandas.core.frame.DataFrame'>.\nThe inferred signature is:\n\ninputs: \n['input_data': double (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:5,children:'# List of Dictionaries\nreport_signature_info([{"a": "a1", "b": "b1"}, {"a": "a2", "b": "b2"}])'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[{'a': 'a1', 'b': 'b1'}, {'a': 'a2', 'b': 'b2'}].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n['a': string (required), 'b': string (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:6,children:'# List of Arrays of strings\nreport_signature_info([["a", "b", "c"], ["d", "e", "f"]])'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[['a', 'b', 'c'], ['d', 'e', 'f']].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[Array(string) (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:7,children:'# List of Arrays of Dictionaries\nreport_signature_info(\n  [[{"a": "a", "b": "b"}, {"a": "a", "b": "b"}], [{"a": "a", "b": "b"}, {"a": "a", "b": "b"}]]\n)'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[[{'a': 'a', 'b': 'b'}, {'a': 'a', 'b': 'b'}], [{'a': 'a', 'b': 'b'}, {'a': 'a', 'b': 'b'}]].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[Array({a: string (required), b: string (required)}) (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(n.h3,{id:"understanding-type-conversion-int-to-long",children:"Understanding Type Conversion: Int to Long"}),"\n",(0,a.jsxs)(n.p,{children:["In this section of the tutorial, we observe an interesting aspect of type conversion in MLflow's schema inference. When reporting the signature information for a list of integers, you might notice that the inferred data type is ",(0,a.jsx)(n.code,{children:"long"})," instead of ",(0,a.jsx)(n.code,{children:"int"}),". This conversion from int to long is not an error or bug but a valid and intentional type conversion within MLflow's schema inference mechanism."]}),"\n",(0,a.jsx)(n.h4,{id:"why-integers-are-inferred-as-long",children:"Why Integers are Inferred as Long"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Broader Compatibility:"})," The conversion to ",(0,a.jsx)(n.code,{children:"long"})," ensures compatibility across various platforms and systems. Since the size of an integer (int) can vary depending on the system architecture, using ",(0,a.jsx)(n.code,{children:"long"})," (which has a more consistent size specification) avoids potential discrepancies and data overflow issues."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Data Integrity:"})," By inferring integers as long, MLflow ensures that larger integer values, which might exceed the typical capacity of an int, are accurately represented and handled without data loss or overflow."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Consistency in Machine Learning Models:"})," In many machine learning frameworks, especially those involving larger datasets or computations, long integers are often the standard data type for numerical operations. This standardization in the inferred schema aligns with common practices in the machine learning community."]}),"\n"]}),"\n",(0,a.jsx)(s.d,{executionCount:8,children:"# List of integers\nreport_signature_info([1, 2, 3])"}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[1, 2, 3].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[long (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"/Users/benjamin.wilson/repos/mlflow-fork/mlflow/mlflow/types/utils.py:378: UserWarning: Hint: Inferred schema contains integer column(s). Integer columns in Python cannot represent missing values. If your input data contains missing values at inference time, it will be encoded as floats and will cause a schema enforcement error. The best way to avoid this problem is to infer the model schema based on a realistic data sample (training dataset) that includes missing values. Alternatively, you can declare integer columns as doubles (float64) whenever these columns may have missing values. See `Handling Integers With Missing Values <https://www.mlflow.org/docs/latest/models.html#handling-integers-with-missing-values>`_ for more details.\nwarnings.warn("}),"\n",(0,a.jsx)(s.d,{executionCount:9,children:"# List of Booleans\nreport_signature_info([True, False, False, False, True])"}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[True, False, False, False, True].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[boolean (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:10,children:'# List of Datetimes\nreport_signature_info([np.datetime64("2023-12-24 11:59:59"), np.datetime64("2023-12-25 00:00:00")])'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[numpy.datetime64('2023-12-24T11:59:59'), numpy.datetime64('2023-12-25T00:00:00')].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n[datetime (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:11,children:'# Complex list of Dictionaries\nreport_signature_info([{"a": "b", "b": [1, 2, 3], "c": {"d": [4, 5, 6]}}])'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[{'a': 'b', 'b': [1, 2, 3], 'c': {'d': [4, 5, 6]}}].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n['a': string (required), 'b': Array(long) (required), 'c': {d: Array(long) (required)} (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:12,children:'# Pandas DF input\n\ndata = [\n  {"a": "a", "b": ["a", "b", "c"], "c": {"d": 1, "e": 0.1}, "f": [{"g": "g"}, {"h": 1}]},\n  {"b": ["a", "b"], "c": {"d": 2, "f": "f"}, "f": [{"g": "g"}]},\n]\ndata = pd.DataFrame(data)\n\nreport_signature_info(data)'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n     a          b                   c                       f\n0    a  [a, b, c]  {'d': 1, 'e': 0.1}  [{'g': 'g'}, {'h': 1}]\n1  NaN     [a, b]  {'d': 2, 'f': 'f'}            [{'g': 'g'}].\nThe data is of type: <class 'pandas.core.frame.DataFrame'>.\nThe inferred signature is:\n\ninputs: \n['a': string (optional), 'b': Array(string) (required), 'c': {d: long (required), e: double (optional), f: string (optional)} (required), 'f': Array({g: string (optional), h: long (optional)}) (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(n.h3,{id:"signature-enforcement",children:"Signature Enforcement"}),"\n",(0,a.jsx)(n.p,{children:"In this part of the tutorial, we focus on the practical application of signature enforcement in MLflow. Signature enforcement is a powerful feature that ensures the data provided to a model aligns with the defined input schema. This step is crucial in preventing errors and inconsistencies that can arise from mismatched or incorrectly formatted data."}),"\n",(0,a.jsxs)(n.p,{children:["Through hands-on examples, we will observe how MLflow enforces the conformity of data to the expected signature at runtime. We'll use the ",(0,a.jsx)(n.code,{children:"MyModel"})," class, a simple Python model, to demonstrate how MLflow checks the compatibility of input data against the model's signature. This process helps in safeguarding the model against incompatible or erroneous inputs, thereby enhancing the robustness and reliability of model predictions."]}),"\n",(0,a.jsx)(n.p,{children:"This section also highlights the importance of precise data representation in MLflow and the implications it has on model performance. By testing with different types of data, including those that do not conform to the expected schema, we will see how MLflow validates data and provides informative feedback. This aspect of signature enforcement is invaluable for debugging data issues and refining model inputs, making it a key skill for anyone involved in deploying machine learning models."}),"\n",(0,a.jsx)(s.d,{executionCount:13,children:"class MyModel(mlflow.pyfunc.PythonModel):\n  def predict(self, context, model_input, params=None):\n      return model_input"}),"\n",(0,a.jsx)(s.d,{executionCount:14,children:'data = [{"a": ["a", "b", "c"], "b": "b", "c": {"d": "d"}}, {"a": ["a"], "c": {"d": "d", "e": "e"}}]\n\nreport_signature_info(data)'}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[{'a': ['a', 'b', 'c'], 'b': 'b', 'c': {'d': 'd'}}, {'a': ['a'], 'c': {'d': 'd', 'e': 'e'}}].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]\noutputs: \nNone\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:15,children:'# Generate a prediction that will serve as the model output example for signature inference\nmodel_output = MyModel().predict(context=None, model_input=data)\n\nwith mlflow.start_run():\n  model_info = mlflow.pyfunc.log_model(\n      python_model=MyModel(),\n      name="test_model",\n      signature=infer_signature(model_input=data, model_output=model_output),\n  )\n\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\nprediction = loaded_model.predict(data)\n\nprediction'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:'/Users/benjamin.wilson/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/_distutils_hack/__init__.py:30: UserWarning: Setuptools is replacing distutils.\nwarnings.warn("Setuptools is replacing distutils.")'}),"\n",(0,a.jsx)(d.Q,{children:(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:"<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<thead>\n  <tr style=\"text-align: right;\">\n    <th></th>\n    <th>a</th>\n    <th>b</th>\n    <th>c</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>[a, b, c]</td>\n    <td>b</td>\n    <td>{'d': 'd'}</td>\n  </tr>\n  <tr>\n    <th>1</th>\n    <td>[a]</td>\n    <td>NaN</td>\n    <td>{'d': 'd', 'e': 'e'}</td>\n  </tr>\n</tbody>\n</table>\n</div>"}})}),"\n",(0,a.jsxs)(n.p,{children:["We can check the inferred signature directly from the logged model information that is returned from the call to ",(0,a.jsx)(n.code,{children:"log_model()"})]}),"\n",(0,a.jsx)(s.d,{executionCount:16,children:"model_info.signature"}),"\n",(0,a.jsx)(o.p,{children:"inputs: \n['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]\noutputs: \n['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]\nparams: \nNone"}),"\n",(0,a.jsx)(n.p,{children:"We can also quickly verify that the logged input signature matches the signature inference. While we're at it, we can generate the output signature as well."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"NOTE: it is recommended to log both the input and output signatures with your models."}),"\n"]}),"\n",(0,a.jsx)(s.d,{executionCount:17,children:"report_signature_info(data, prediction)"}),"\n",(0,a.jsx)(o.p,{children:"\nThe input data: \n[{'a': ['a', 'b', 'c'], 'b': 'b', 'c': {'d': 'd'}}, {'a': ['a'], 'c': {'d': 'd', 'e': 'e'}}].\nThe data is of type: <class 'list'>.\nThe inferred signature is:\n\ninputs: \n['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]\noutputs: \n['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:18,children:'# Using the model while not providing an optional input (note the output return structure and the non existent optional columns)\n\nloaded_model.predict([{"a": ["a", "b", "c"], "c": {"d": "d"}}])'}),"\n",(0,a.jsx)(d.Q,{children:(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:'<div>\n<style scoped>\n  .dataframe tbody tr th:only-of-type {\n      vertical-align: middle;\n  }\n\n  .dataframe tbody tr th {\n      vertical-align: top;\n  }\n\n  .dataframe thead th {\n      text-align: right;\n  }\n</style>\n<table border="1" class="dataframe">\n<thead>\n  <tr style="text-align: right;">\n    <th></th>\n    <th>a</th>\n    <th>c</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <th>0</th>\n    <td>[a, b, c]</td>\n    <td>{\'d\': \'d\'}</td>\n  </tr>\n</tbody>\n</table>\n</div>'}})}),"\n",(0,a.jsx)(s.d,{executionCount:19,children:'# Using the model while omitting the input of required fields (this will raise an Exception from schema enforcement,\n# stating that the required fields "a" and "c" are missing)\n\nloaded_model.predict([{"b": "b"}])'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"---------------------------------------------------------------------------"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException                           Traceback (most recent call last)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/repos/mlflow-fork/mlflow/mlflow/pyfunc/__init__.py in predict(self, data, params)\n  469             try:\n--\x3e 470                 data = _enforce_schema(data, input_schema)\n  471             except Exception as e:"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:'~/repos/mlflow-fork/mlflow/mlflow/models/utils.py in _enforce_schema(pf_input, input_schema)\n  939                 message += f" Note that there were extra inputs: {extra_cols}"\n--\x3e 940             raise MlflowException(message)\n  941     elif not input_schema.is_tensor_spec():'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException: Model is missing inputs ['a', 'c']."}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"\nDuring handling of the above exception, another exception occurred:"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException                           Traceback (most recent call last)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:'/var/folders/cd/n8n0rm2x53l_s0xv_j_xklb00000gp/T/ipykernel_97464/1628231496.py in <cell line: 4>()\n    2 # stating that the required fields "a" and "c" are missing)\n    3 \n----\x3e 4 loaded_model.predict([{"b": "b"}])\n'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/repos/mlflow-fork/mlflow/mlflow/pyfunc/__init__.py in predict(self, data, params)\n  471             except Exception as e:\n  472                 # Include error in message for backwards compatibility\n--\x3e 473                 raise MlflowException.invalid_parameter_value(\n  474                     f\"Failed to enforce schema of data '{data}' \"\n  475                     f\"with schema '{input_schema}'. \""}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException: Failed to enforce schema of data '[{'b': 'b'}]' with schema '['a': Array(string) (required), 'b': string (optional), 'c': {d: string (required), e: string (optional)} (required)]'. Error: Model is missing inputs ['a', 'c']."}),"\n",(0,a.jsx)(n.h3,{id:"updating-signatures",children:"Updating Signatures"}),"\n",(0,a.jsx)(n.p,{children:"This section of the tutorial addresses the dynamic nature of data and models, focusing on the crucial task of updating an MLflow model's signature. As datasets evolve and requirements change, it becomes necessary to modify the signature of a model to align with the new data structure or inputs. This ability to update a signature is key to maintaining the accuracy and relevance of your model over time."}),"\n",(0,a.jsx)(n.p,{children:"We will demonstrate how to identify when a signature update is needed and walk through the process of creating and applying a new signature to an existing model. This section highlights the flexibility of MLflow in accommodating changes in data formats and structures without the need to re-save the entire model. However, for registered models in MLflow, updating the signature requires re-registering the model to reflect the changes in the registered version."}),"\n",(0,a.jsx)(n.p,{children:"By exploring the steps to update a model's signature, you will learn how to update the model signature in the event that you manually defined a signature that is invalid or if you failed to define one while logging and need to update the model with a valid signature."}),"\n",(0,a.jsx)(s.d,{executionCount:20,children:'# Updating an existing model that wasn\'t saved with a signature\n\n\nclass MyTypeCheckerModel(mlflow.pyfunc.PythonModel):\n  def predict(self, context, model_input, params=None):\n      print(type(model_input))\n      print(model_input)\n      if not isinstance(model_input, (pd.DataFrame, list)):\n          raise ValueError("The input must be a list.")\n      return "Input is valid."\n\n\nwith mlflow.start_run():\n  model_info = mlflow.pyfunc.log_model(\n      python_model=MyTypeCheckerModel(),\n      name="test_model",\n  )\n\nloaded_model = mlflow.pyfunc.load_model(model_info.model_uri)\n\nloaded_model.metadata.signature'}),"\n",(0,a.jsx)(s.d,{executionCount:21,children:'test_data = [{"a": "we are expecting strings", "b": "and only strings"}, [1, 2, 3]]\nloaded_model.predict(test_data)'}),"\n",(0,a.jsx)(o.p,{children:"<class 'list'>\n[{'a': 'we are expecting strings', 'b': 'and only strings'}, [1, 2, 3]]"}),"\n",(0,a.jsx)(o.p,{children:"'Input is valid.'"}),"\n",(0,a.jsx)(n.h3,{id:"the-necessity-of-schema-enforcement-in-mlflow",children:"The Necessity of Schema Enforcement in MLflow"}),"\n",(0,a.jsx)(n.p,{children:"In this part of the tutorial, we address a common challenge in machine learning model deployment: the clarity and interpretability of error messages. Without schema enforcement, models can often return cryptic or misleading error messages. This occurs because, in the absence of a well-defined schema, the model attempts to process inputs that may not align with its expectations, leading to ambiguous or hard-to-diagnose errors."}),"\n",(0,a.jsx)(n.h4,{id:"why-schema-enforcement-matters",children:"Why Schema Enforcement Matters"}),"\n",(0,a.jsx)(n.p,{children:"Schema enforcement acts as a gatekeeper, ensuring that the data fed into a model precisely matches the expected format. This not only reduces the likelihood of runtime errors but also makes any errors that do occur much easier to understand and rectify. Without such enforcement, diagnosing issues becomes a time-consuming and complex task, often requiring deep dives into the model's internal logic."}),"\n",(0,a.jsx)(n.h4,{id:"updating-model-signature-for-clearer-error-messages",children:"Updating Model Signature for Clearer Error Messages"}),"\n",(0,a.jsxs)(n.p,{children:["To illustrate the value of schema enforcement, we will update the signature of a saved model to match an expected data structure. This process involves defining the expected data structure, using the ",(0,a.jsx)(n.code,{children:"infer_signature"})," function to generate the appropriate signature, and then applying this signature to the model using ",(0,a.jsx)(n.code,{children:"set_signature"}),". By doing so, we ensure that any future errors are more informative and aligned with the data structure we anticipate, simplifying troubleshooting and enhancing model reliability."]}),"\n",(0,a.jsx)(s.d,{executionCount:22,children:'expected_data_structure = [{"a": "string", "b": "another string"}, {"a": "string"}]\n\nsignature = infer_signature(expected_data_structure, loaded_model.predict(expected_data_structure))\n\nset_signature(model_info.model_uri, signature)'}),"\n",(0,a.jsx)(o.p,{children:"<class 'list'>\n[{'a': 'string', 'b': 'another string'}, {'a': 'string'}]"}),"\n",(0,a.jsx)(s.d,{executionCount:23,children:"loaded_with_signature = mlflow.pyfunc.load_model(model_info.model_uri)\n\nloaded_with_signature.metadata.signature"}),"\n",(0,a.jsx)(o.p,{children:"inputs: \n['a': string (required), 'b': string (optional)]\noutputs: \n[string (required)]\nparams: \nNone"}),"\n",(0,a.jsx)(s.d,{executionCount:24,children:"loaded_with_signature.predict(expected_data_structure)"}),"\n",(0,a.jsx)(o.p,{children:"<class 'pandas.core.frame.DataFrame'>\n      a               b\n0  string  another string\n1  string             NaN"}),"\n",(0,a.jsx)(o.p,{children:"'Input is valid.'"}),"\n",(0,a.jsx)(n.h4,{id:"validating-that-schema-enforcement-will-not-permit-a-flawed-input",children:"Validating that schema enforcement will not permit a flawed input"}),"\n",(0,a.jsx)(n.p,{children:"Now that we've set our signature correctly and updated the model definition, let's ensure that the previous flawed input type will raise a useful error message!"}),"\n",(0,a.jsx)(s.d,{executionCount:25,children:"loaded_with_signature.predict(test_data)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"---------------------------------------------------------------------------"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"AttributeError                            Traceback (most recent call last)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/repos/mlflow-fork/mlflow/mlflow/pyfunc/__init__.py in predict(self, data, params)\n  469             try:\n--\x3e 470                 data = _enforce_schema(data, input_schema)\n  471             except Exception as e:"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/repos/mlflow-fork/mlflow/mlflow/models/utils.py in _enforce_schema(pf_input, input_schema)\n  907         elif isinstance(pf_input, (list, np.ndarray, pd.Series)):\n--\x3e 908             pf_input = pd.DataFrame(pf_input)\n  909 "}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:'~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/core/frame.py in __init__(self, data, index, columns, dtype, copy)\n  781                         columns = ensure_index(columns)\n--\x3e 782                     arrays, columns, index = nested_data_to_arrays(\n  783                         # error: Argument 3 to "nested_data_to_arrays" has incompatible'}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/core/internals/construction.py in nested_data_to_arrays(data, columns, index, dtype)\n  497 \n--\x3e 498     arrays, columns = to_arrays(data, columns, dtype=dtype)\n  499     columns = ensure_index(columns)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/core/internals/construction.py in to_arrays(data, columns, dtype)\n  831     elif isinstance(data[0], abc.Mapping):\n--\x3e 832         arr, columns = _list_of_dict_to_arrays(data, columns)\n  833     elif isinstance(data[0], ABCSeries):"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/core/internals/construction.py in _list_of_dict_to_arrays(data, columns)\n  911         sort = not any(isinstance(d, dict) for d in data)\n--\x3e 912         pre_cols = lib.fast_unique_multiple_list_gen(gen, sort=sort)\n  913         columns = ensure_index(pre_cols)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/_libs/lib.pyx in pandas._libs.lib.fast_unique_multiple_list_gen()"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/miniconda3/envs/mlflow-dev-env/lib/python3.8/site-packages/pandas/core/internals/construction.py in <genexpr>(.0)\n  909     if columns is None:\n--\x3e 910         gen = (list(x.keys()) for x in data)\n  911         sort = not any(isinstance(d, dict) for d in data)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"AttributeError: 'list' object has no attribute 'keys'"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"\nDuring handling of the above exception, another exception occurred:"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException                           Traceback (most recent call last)"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"/var/folders/cd/n8n0rm2x53l_s0xv_j_xklb00000gp/T/ipykernel_97464/2586525788.py in <cell line: 1>()\n----\x3e 1 loaded_with_signature.predict(test_data)\n"}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"~/repos/mlflow-fork/mlflow/mlflow/pyfunc/__init__.py in predict(self, data, params)\n  471             except Exception as e:\n  472                 # Include error in message for backwards compatibility\n--\x3e 473                 raise MlflowException.invalid_parameter_value(\n  474                     f\"Failed to enforce schema of data '{data}' \"\n  475                     f\"with schema '{input_schema}'. \""}),"\n",(0,a.jsx)(o.p,{isStderr:!0,children:"MlflowException: Failed to enforce schema of data '[{'a': 'we are expecting strings', 'b': 'and only strings'}, [1, 2, 3]]' with schema '['a': string (required), 'b': string (optional)]'. Error: 'list' object has no attribute 'keys'"}),"\n",(0,a.jsx)(n.h3,{id:""}),"\n",(0,a.jsx)(n.h3,{id:"wrapping-up-insights-and-best-practices-from-the-mlflow-signature-playground",children:"Wrapping Up: Insights and Best Practices from the MLflow Signature Playground"}),"\n",(0,a.jsx)(n.p,{children:"As we conclude our journey through the MLflow Signature Playground Notebook, we've gained invaluable insights into the intricacies of model signatures within the MLflow ecosystem. This tutorial has equipped you with the knowledge and practical skills needed to effectively manage and utilize model signatures, ensuring the robustness and accuracy of your machine learning models."}),"\n",(0,a.jsx)(n.p,{children:"Key takeaways include the importance of accurately defining scalar types, the significance of enforcing and adhering to model signatures for data integrity, and the flexibility offered by MLflow in updating an invalid model signature. These concepts are not just theoretical but are fundamental to successful model deployment and management in real-world scenarios."}),"\n",(0,a.jsx)(n.p,{children:"Whether you're a data scientist refining your models or a developer integrating machine learning into your applications, understanding and utilizing model signatures is crucial. We hope this tutorial has provided you with a solid foundation in MLflow signatures, empowering you to implement these best practices in your future ML projects."})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},16734:(e,n,t)=>{t.d(n,{d:()=>s});var i=t(58069);const a="codeBlock_oJcR";var r=t(74848);const s=e=>{let{children:n,executionCount:t}=e;return(0,r.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,r.jsx)(i.A,{className:a,language:"python",children:n})})}},20723:(e,n,t)=>{t.d(n,{O:()=>r});var i=t(96540),a=t(74848);function r(e){let{children:n,href:t}=e;const r=(0,i.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:t})}catch{}const n=await fetch(t),i=await n.blob(),a=window.URL.createObjectURL(i),r=document.createElement("a");r.style.display="none",r.href=a;const s=t.split("/").pop();r.download=s,document.body.appendChild(r),r.click(),window.URL.revokeObjectURL(a),document.body.removeChild(r)}),[t]);return(0,a.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:t,download:!0,onClick:r,children:n})}},61536:(e,n,t)=>{t.d(n,{p:()=>a});var i=t(74848);const a=e=>{let{children:n,isStderr:t}=e;return(0,i.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:n})}},86563:(e,n,t)=>{t.d(n,{Q:()=>a});var i=t(74848);const a=e=>{let{children:n}=e;return(0,i.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:n})}}}]);