"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3830],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const l={},i=o.createContext(l);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>s});t(96540);const o=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var l=t(86025),i=t(74848);const r=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(o[e])return e}return null};function s({fn:e,children:n,hash:t}){const s=r(e);if(!s)return(0,i.jsx)(i.Fragment,{children:n});const a=(0,l.Ay)(`/${o[s]}#${t??e}`);return(0,i.jsx)("a",{href:a,target:"_blank",children:n??(0,i.jsxs)("code",{children:[e,"()"]})})}},78941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"webhooks/index","title":"Webhooks","description":"- This feature is still experimental and may change in future releases.","source":"@site/docs/classic-ml/webhooks/index.mdx","sourceDirName":"webhooks","slug":"/webhooks/","permalink":"/mlflow-website/docs/latest/ml/webhooks/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"Docker","permalink":"/mlflow-website/docs/latest/ml/docker/"},"next":{"title":"Access Control","permalink":"/mlflow-website/docs/latest/ml/auth/"}}');var l=t(74848),i=t(28453),r=t(49374);const s={},a="Webhooks",d={},h=[{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Supported Events",id:"supported-events",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Creating a Webhook",id:"creating-a-webhook",level:3},{value:"Testing a Webhook",id:"testing-a-webhook",level:3},{value:"Testing Multi-Event Webhooks",id:"testing-multi-event-webhooks",level:3},{value:"Webhook Management",id:"webhook-management",level:2},{value:"Listing Webhooks",id:"listing-webhooks",level:3},{value:"Getting a Specific Webhook",id:"getting-a-specific-webhook",level:3},{value:"Updating a Webhook",id:"updating-a-webhook",level:3},{value:"Deleting a Webhook",id:"deleting-a-webhook",level:3},{value:"Security",id:"security",level:2},{value:"HMAC Signature Verification",id:"hmac-signature-verification",level:3},{value:"Timestamp Freshness Check",id:"timestamp-freshness-check",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Webhook Payload Structure",id:"webhook-payload-structure",level:2},{value:"Payload Fields",id:"payload-fields",level:3},{value:"Webhook Delivery Reliability",id:"webhook-delivery-reliability",level:2},{value:"Automatic Retry Logic",id:"automatic-retry-logic",level:3},{value:"Retry Behavior",id:"retry-behavior",level:3},{value:"Example: FastAPI Webhook Receiver",id:"example-fastapi-webhook-receiver",level:2},{value:"Running the Example",id:"running-the-example",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"API Reference",id:"api-reference",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"webhooks",children:"Webhooks"})}),"\n",(0,l.jsx)(n.admonition,{type:"warning",children:(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This feature is still experimental and may change in future releases."}),"\n",(0,l.jsx)(n.li,{children:"The file backend doesn't support webhooks. Only the SQL backend supports webhooks."}),"\n",(0,l.jsx)(n.li,{children:"Only OSS MLflow supports webhooks. Databricks or other managed MLflow services may not support this feature."}),"\n"]})}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"MLflow webhooks enable real-time notifications when specific events occur in the Model Registry. When you register a model, create a new version, or modify tags and aliases, MLflow can automatically send HTTP POST requests to your specified endpoints. This enables seamless integration with CI/CD pipelines, notification systems, and other external services."}),"\n",(0,l.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Real-time notifications"})," for Model Registry events"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"HMAC signature verification"})," for secure webhook delivery"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multiple event types"})," including model creation, versioning, and tagging"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Built-in testing"})," to verify webhook connectivity"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"supported-events",children:"Supported Events"}),"\n",(0,l.jsx)(n.p,{children:"MLflow webhooks support the following Model Registry events:"}),"\n",(0,l.jsxs)("table",{children:[(0,l.jsx)("thead",{children:(0,l.jsxs)("tr",{children:[(0,l.jsx)("th",{children:"Event"}),(0,l.jsx)("th",{children:"Description"}),(0,l.jsx)("th",{children:"Payload Schema"})]})}),(0,l.jsxs)("tbody",{children:[(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"registered_model.created"})}),(0,l.jsx)("td",{children:"Triggered when a new registered model is created"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.RegisteredModelCreatedPayload",children:(0,l.jsx)(n.code,{children:"RegisteredModelCreatedPayload"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"model_version.created"})}),(0,l.jsx)("td",{children:"Triggered when a new model version is created"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.ModelVersionCreatedPayload",children:(0,l.jsx)(n.code,{children:"ModelVersionCreatedPayload"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"model_version_tag.set"})}),(0,l.jsx)("td",{children:"Triggered when a tag is set on a model version"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.ModelVersionTagSetPayload",children:(0,l.jsx)(n.code,{children:"ModelVersionTagSetPayload"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"model_version_tag.deleted"})}),(0,l.jsx)("td",{children:"Triggered when a tag is deleted from a model version"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.ModelVersionTagDeletedPayload",children:(0,l.jsx)(n.code,{children:"ModelVersionTagDeletedPayload"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"model_version_alias.created"})}),(0,l.jsx)("td",{children:"Triggered when an alias is created for a model version"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.ModelVersionAliasCreatedPayload",children:(0,l.jsx)(n.code,{children:"ModelVersionAliasCreatedPayload"})})})]}),(0,l.jsxs)("tr",{children:[(0,l.jsx)("td",{children:(0,l.jsx)("code",{children:"model_version_alias.deleted"})}),(0,l.jsx)("td",{children:"Triggered when an alias is deleted from a model version"}),(0,l.jsx)("td",{children:(0,l.jsx)(r.B,{fn:"mlflow.webhooks.types.ModelVersionAliasDeletedPayload",children:(0,l.jsx)(n.code,{children:"ModelVersionAliasDeletedPayload"})})})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,l.jsx)(n.h3,{id:"creating-a-webhook",children:"Creating a Webhook"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient()\n\n# Create a webhook for model version creation events\nwebhook = client.create_webhook(\n    name="model-version-notifier",\n    url="https://your-app.com/webhook",\n    events=["model_version.created"],\n    description="Notifies when new model versions are created",\n    secret="your-secret-key",  # Optional: for HMAC signature verification\n)\n\nprint(f"Created webhook: {webhook.webhook_id}")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"testing-a-webhook",children:"Testing a Webhook"}),"\n",(0,l.jsxs)(n.p,{children:["Before putting your webhook into production, test it with example payloads using ",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.test_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.test_webhook()"})}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Test the webhook with an example payload\nresult = client.test_webhook(webhook.webhook_id)\n\nif result.success:\n    print(f"Webhook test successful! Status code: {result.response_status}")\nelse:\n    print(f"Webhook test failed. Status: {result.response_status}")\n    if result.error_message:\n        print(f"Error: {result.error_message}")\n'})}),"\n",(0,l.jsx)(n.p,{children:"You can also test specific event types:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Test with a specific event type\nresult = client.test_webhook(webhook.webhook_id, event="model_version.created")\n'})}),"\n",(0,l.jsxs)(n.p,{children:["When you call ",(0,l.jsx)(n.code,{children:"test_webhook()"}),", MLflow sends example payloads to your webhook URL. These test payloads have the same structure as real event payloads. Click on the payload schema links in the table above to see the exact structure and examples for each event type."]}),"\n",(0,l.jsx)(n.h3,{id:"testing-multi-event-webhooks",children:"Testing Multi-Event Webhooks"}),"\n",(0,l.jsxs)(n.p,{children:["If your webhook is subscribed to multiple events, ",(0,l.jsx)(n.code,{children:"test_webhook()"})," behavior depends on whether you specify an event:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Without specifying an event"}),": MLflow uses the ",(0,l.jsx)(n.strong,{children:"first event"})," from the webhook's event list"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"With a specific event"}),": MLflow uses the specified event (must be in the webhook's event list)"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Create webhook with multiple events\nwebhook = client.create_webhook(\n    name="multi-event-webhook",\n    url="https://your-domain.com/webhook",\n    events=[\n        "registered_model.created",\n        "model_version.created",\n        "model_version_tag.set",\n    ],\n    secret="your-secret-key",\n)\n\n# Test with first event (registered_model.created)\nresult = client.test_webhook(webhook.webhook_id)\n\n# Test with specific event\nresult = client.test_webhook(\n    webhook.webhook_id,\n    event=("model_version_tag.set"),\n)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"webhook-management",children:"Webhook Management"}),"\n",(0,l.jsx)(n.h3,{id:"listing-webhooks",children:"Listing Webhooks"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.list_webhooks",children:(0,l.jsx)(n.code,{children:"MlflowClient.list_webhooks()"})})," to retrieve webhooks. This method returns paginated results:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# List webhooks with pagination\nwebhooks = client.list_webhooks(max_results=10)\nfor webhook in webhooks:\n    print(f"{webhook.name}: {webhook.url} (Status: {webhook.status})")\n    print(f"  Events: {\', \'.join(webhook.events)}")\n\n# Continue to next page if available\nif webhooks.next_page_token:\n    next_page = client.list_webhooks(\n        max_results=10, page_token=webhooks.next_page_token\n    )\n'})}),"\n",(0,l.jsx)(n.p,{children:"To retrieve all webhooks across multiple pages:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Retrieve all webhooks across pages\nall_webhooks = []\npage_token = None\n\nwhile True:\n    page = client.list_webhooks(max_results=100, page_token=page_token)\n    all_webhooks.extend(page)\n\n    if not page.next_page_token:\n        break\n    page_token = page.next_page_token\n\nprint(f"Total webhooks: {len(all_webhooks)}")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"getting-a-specific-webhook",children:"Getting a Specific Webhook"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.get_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.get_webhook()"})})," to retrieve details of a specific webhook:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Get a specific webhook by ID\nwebhook = client.get_webhook(webhook_id)\nprint(f"Name: {webhook.name}")\nprint(f"URL: {webhook.url}")\nprint(f"Status: {webhook.status}")\nprint(f"Events: {webhook.events}")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"updating-a-webhook",children:"Updating a Webhook"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.update_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.update_webhook()"})})," to modify webhook configuration:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Update webhook configuration\nclient.update_webhook(\n    # Unspecified fields will remain unchanged\n    webhook_id=webhook.webhook_id,\n    status="DISABLED",  # Temporarily disable the webhook\n    events=[\n        "model_version.created",\n        "model_version_tag.set",\n    ],\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"deleting-a-webhook",children:"Deleting a Webhook"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.delete_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.delete_webhook()"})})," to remove a webhook:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Delete a webhook\nclient.delete_webhook(webhook.webhook_id)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,l.jsx)(n.h3,{id:"hmac-signature-verification",children:"HMAC Signature Verification"}),"\n",(0,l.jsxs)(n.p,{children:["When you create a webhook with a secret, MLflow signs each request with an HMAC-SHA256 signature. This allows your endpoint to verify that the request genuinely comes from MLflow. The signature is included in the ",(0,l.jsx)(n.code,{children:"X-MLflow-Signature"})," header with the format: ",(0,l.jsx)(n.code,{children:"v1,<base64_encoded_signature>"}),". See the FastAPI example below for a complete implementation of signature verification."]}),"\n",(0,l.jsx)(n.h3,{id:"timestamp-freshness-check",children:"Timestamp Freshness Check"}),"\n",(0,l.jsxs)(n.p,{children:["To prevent replay attacks, it's recommended to verify that webhook timestamps are recent. The ",(0,l.jsx)(n.code,{children:"X-MLflow-Timestamp"})," header contains a Unix timestamp indicating when the webhook was sent. You should reject webhooks with timestamps that are too old (e.g., older than 5 minutes)."]}),"\n",(0,l.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_SECRET_ENCRYPTION_KEY"}),": Encryption key for storing webhook secrets securely"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_REQUEST_TIMEOUT"}),": Timeout in seconds for webhook HTTP requests (default: 30)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_REQUEST_MAX_RETRIES"}),": Maximum number of retry attempts for failed webhook requests (default: 3)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_DELIVERY_MAX_WORKERS"}),": Maximum number of worker threads for webhook delivery (default: 10)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"webhook-payload-structure",children:"Webhook Payload Structure"}),"\n",(0,l.jsx)(n.p,{children:"MLflow webhooks send structured JSON payloads with the following format:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "entity": "model_version",\n  "action": "created",\n  "timestamp": "2025-07-31T08:27:32.080217+00:00",\n  "data": {\n    "name": "example_model",\n    "version": "1",\n    "source": "models:/123",\n    "run_id": "abcd1234abcd5678",\n    "tags": {"example_key": "example_value"},\n    "description": "An example model version"\n  }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"payload-fields",children:"Payload Fields"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"entity"})}),": The type of MLflow entity that triggered the webhook (e.g., ",(0,l.jsx)(n.code,{children:'"registered_model"'}),", ",(0,l.jsx)(n.code,{children:'"model_version"'}),", ",(0,l.jsx)(n.code,{children:'"model_version_tag"'}),", ",(0,l.jsx)(n.code,{children:'"model_version_alias"'}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"action"})}),": The action that was performed (e.g., ",(0,l.jsx)(n.code,{children:'"created"'}),", ",(0,l.jsx)(n.code,{children:'"updated"'}),", ",(0,l.jsx)(n.code,{children:'"deleted"'}),", ",(0,l.jsx)(n.code,{children:'"set"'}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"timestamp"})}),": ISO 8601 timestamp indicating when the webhook was sent"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"data"})}),": The actual payload data containing entity-specific information (see payload schema links in the events table above)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This structured format makes it easy to:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Filter webhooks by entity type or action"}),"\n",(0,l.jsx)(n.li,{children:"Process different event types with dedicated handlers"}),"\n",(0,l.jsx)(n.li,{children:"Extract metadata without parsing the entire payload"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"webhook-delivery-reliability",children:"Webhook Delivery Reliability"}),"\n",(0,l.jsx)(n.h3,{id:"automatic-retry-logic",children:"Automatic Retry Logic"}),"\n",(0,l.jsx)(n.p,{children:"MLflow implements automatic retry logic to ensure reliable webhook delivery. When a webhook request fails, MLflow will automatically retry the request for the following status codes. All other status codes are not retried:"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Status Code"}),(0,l.jsx)(n.th,{children:"Category"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"429"})}),(0,l.jsx)(n.td,{children:"Rate Limit"}),(0,l.jsx)(n.td,{children:"Too Many Requests - Rate limit errors"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"500"})}),(0,l.jsx)(n.td,{children:"Server Error"}),(0,l.jsx)(n.td,{children:"Internal Server Error - Server errors that may be temporary"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"502"})}),(0,l.jsx)(n.td,{children:"Server Error"}),(0,l.jsx)(n.td,{children:"Bad Gateway - Gateway errors"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"503"})}),(0,l.jsx)(n.td,{children:"Server Error"}),(0,l.jsx)(n.td,{children:"Service Unavailable - Service temporarily unavailable"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.strong,{children:"504"})}),(0,l.jsx)(n.td,{children:"Server Error"}),(0,l.jsx)(n.td,{children:"Gateway Timeout - Gateway timeout errors"})]})]})]}),"\n",(0,l.jsx)(n.h3,{id:"retry-behavior",children:"Retry Behavior"}),"\n",(0,l.jsx)(n.p,{children:"When a retryable error occurs, MLflow:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Exponential Backoff"}),": Uses exponential backoff with jitter to prevent thundering herd issues"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Base delays: 1s, 2s, 4s, 8s, etc."}),"\n",(0,l.jsx)(n.li,{children:"Maximum backoff: Capped at 60 seconds"}),"\n",(0,l.jsxs)(n.li,{children:["Jitter: Adds up to 1 second of random jitter to each delay (requires ",(0,l.jsx)(n.code,{children:"urllib3"})," >= 2.0)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Respects Rate Limits"}),": For 429 responses, MLflow checks the ",(0,l.jsx)(n.code,{children:"Retry-After"})," header and uses the larger of:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The value specified in ",(0,l.jsx)(n.code,{children:"Retry-After"})," header"]}),"\n",(0,l.jsx)(n.li,{children:"The calculated exponential backoff time"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Configurable Retries"}),": Set the maximum number of retries using the ",(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_REQUEST_MAX_RETRIES"})," environment variable"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example-fastapi-webhook-receiver",children:"Example: FastAPI Webhook Receiver"}),"\n",(0,l.jsxs)(n.p,{children:["Here's a complete example of a ",(0,l.jsx)(n.a,{href:"https://fastapi.tiangolo.com/",children:"FastAPI"})," application that receives and processes MLflow webhooks:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from fastapi import FastAPI, Request, HTTPException, Header\nfrom typing import Optional\nimport hmac\nimport hashlib\nimport base64\nimport logging\nimport time\n\napp = FastAPI()\nlogger = logging.getLogger(__name__)\n\n# Your webhook secret (keep this secure!)\nWEBHOOK_SECRET = "your-secret-key"\n\n# Maximum allowed age for webhook timestamps (in seconds)\nMAX_TIMESTAMP_AGE = 300  # 5 minutes\n\n\ndef verify_timestamp_freshness(\n    timestamp_str: str, max_age: int = MAX_TIMESTAMP_AGE\n) -> bool:\n    """Verify that the webhook timestamp is recent enough to prevent replay attacks"""\n    try:\n        webhook_timestamp = int(timestamp_str)\n        current_timestamp = int(time.time())\n        age = current_timestamp - webhook_timestamp\n        return 0 <= age <= max_age\n    except (ValueError, TypeError):\n        return False\n\n\ndef verify_mlflow_signature(\n    payload: str, signature: str, secret: str, delivery_id: str, timestamp: str\n) -> bool:\n    """Verify the HMAC signature from MLflow webhook"""\n    # Extract the base64 signature part (remove \'v1,\' prefix)\n    if not signature.startswith("v1,"):\n        return False\n\n    signature_b64 = signature.removeprefix("v1,")\n    # Reconstruct the signed content: delivery_id.timestamp.payload\n    signed_content = f"{delivery_id}.{timestamp}.{payload}"\n    # Generate expected signature\n    expected_signature = hmac.new(\n        secret.encode("utf-8"), signed_content.encode("utf-8"), hashlib.sha256\n    ).digest()\n    expected_signature_b64 = base64.b64encode(expected_signature).decode("utf-8")\n    return hmac.compare_digest(signature_b64, expected_signature_b64)\n\n\n@app.post("/webhook")\nasync def handle_webhook(\n    request: Request,\n    x_mlflow_signature: Optional[str] = Header(None),\n    x_mlflow_delivery_id: Optional[str] = Header(None),\n    x_mlflow_timestamp: Optional[str] = Header(None),\n):\n    """Handle webhook with HMAC signature verification"""\n\n    # Get raw payload for signature verification\n    payload_bytes = await request.body()\n    payload = payload_bytes.decode("utf-8")\n\n    # Verify required headers are present\n    if not x_mlflow_signature:\n        raise HTTPException(status_code=400, detail="Missing signature header")\n    if not x_mlflow_delivery_id:\n        raise HTTPException(status_code=400, detail="Missing delivery ID header")\n    if not x_mlflow_timestamp:\n        raise HTTPException(status_code=400, detail="Missing timestamp header")\n\n    # Verify timestamp freshness to prevent replay attacks\n    if not verify_timestamp_freshness(x_mlflow_timestamp):\n        raise HTTPException(\n            status_code=400,\n            detail="Timestamp is too old or invalid (possible replay attack)",\n        )\n\n    # Verify signature\n    if not verify_mlflow_signature(\n        payload,\n        x_mlflow_signature,\n        WEBHOOK_SECRET,\n        x_mlflow_delivery_id,\n        x_mlflow_timestamp,\n    ):\n        raise HTTPException(status_code=401, detail="Invalid signature")\n\n    # Parse payload\n    webhook_data = await request.json()\n\n    # Extract webhook metadata\n    entity = webhook_data.get("entity")\n    action = webhook_data.get("action")\n    timestamp = webhook_data.get("timestamp")\n    payload_data = webhook_data.get("data", {})\n\n    # Print the payload for debugging\n    print(f"Received webhook: {entity}.{action}")\n    print(f"Timestamp: {timestamp}")\n    print(f"Delivery ID: {x_mlflow_delivery_id}")\n    print(f"Payload: {payload_data}")\n\n    # Add your webhook processing logic here\n    # For example, handle different event types\n    if entity == "model_version" and action == "created":\n        model_name = payload_data.get("name")\n        version = payload_data.get("version")\n        print(f"New model version: {model_name} v{version}")\n        # Add your model version processing logic here\n    elif entity == "registered_model" and action == "created":\n        model_name = payload_data.get("name")\n        print(f"New registered model: {model_name}")\n        # Add your registered model processing logic here\n    elif entity == "model_version_tag" and action == "set":\n        model_name = payload_data.get("name")\n        version = payload_data.get("version")\n        tag_key = payload_data.get("key")\n        tag_value = payload_data.get("value")\n        print(f"Tag set on {model_name} v{version}: {tag_key}={tag_value}")\n        # Add your tag processing logic here\n\n    return {"status": "success"}\n\n\n@app.get("/health")\nasync def health():\n    """Health check endpoint"""\n    return {"status": "healthy"}\n\n\nif __name__ == "__main__":\n    import uvicorn\n\n    uvicorn.run(app, host="0.0.0.0", port=8000)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"running-the-example",children:"Running the Example"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Install dependencies:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"pip install fastapi uvicorn\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Set up MLflow server with webhook encryption:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Generate a secure encryption key for webhook secrets\nexport MLFLOW_WEBHOOK_SECRET_ENCRYPTION_KEY=$(python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())")\n\n# Start MLflow server with webhook support\nmlflow server --backend-store-uri sqlite:///mlflow.db\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Start the webhook receiver:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"python webhook_receiver.py\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Configure MLflow webhook:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\nclient = MlflowClient("http://localhost:5000")\n\n# Create webhook with HMAC verification\nwebhook = client.create_webhook(\n    name="fastapi-receiver",\n    url="https://your-domain.com/webhook",\n    events=["model_version.created"],\n    secret="your-secret-key",\n)\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Test the webhook:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# Test webhook connectivity\nresult = client.test_webhook(webhook.webhook_id)\nprint(f"Test result: {result.success}")\n\n# Create a model version to trigger the webhook\nclient.create_registered_model("test-model")\nclient.create_model_version(\n    name="test-model", source="s3://bucket/model", run_id="abc123"\n)\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Webhook not triggering:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:'Verify the webhook status is "ACTIVE"'}),"\n",(0,l.jsx)(n.li,{children:"Check that the event type matches your actions"}),"\n",(0,l.jsx)(n.li,{children:"Ensure your MLflow server has network access to the webhook URL"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature verification failing:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Ensure you're using the raw request body for verification"}),"\n",(0,l.jsx)(n.li,{children:"Check that the secret matches exactly (no extra spaces)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Connection timeouts:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["MLflow has a default timeout of 30 seconds for webhook requests (configurable via ",(0,l.jsx)(n.code,{children:"MLFLOW_WEBHOOK_REQUEST_TIMEOUT"}),")"]}),"\n",(0,l.jsx)(n.li,{children:"Ensure your endpoint responds quickly or increase the timeout if needed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,l.jsx)(n.p,{children:"For complete API documentation, see:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.create_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.create_webhook()"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.list_webhooks",children:(0,l.jsx)(n.code,{children:"MlflowClient.list_webhooks()"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.get_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.get_webhook()"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.update_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.update_webhook()"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.delete_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.delete_webhook()"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(r.B,{fn:"mlflow.client.MlflowClient.test_webhook",children:(0,l.jsx)(n.code,{children:"MlflowClient.test_webhook()"})}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);