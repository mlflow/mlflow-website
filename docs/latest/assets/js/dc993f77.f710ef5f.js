"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3723],{7653:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>f,frontMatter:()=>c,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"tracing/track-users-sessions/index","title":"Track Users & Sessions","description":"Traces with session IDs","source":"@site/docs/genai/tracing/track-users-sessions/index.mdx","sourceDirName":"tracing/track-users-sessions","slug":"/tracing/track-users-sessions/","permalink":"/docs/latest/genai/tracing/track-users-sessions/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Feedback Concepts","permalink":"/docs/latest/genai/tracing/concepts/trace/feedback"},"next":{"title":"Track App Versions and Environments","permalink":"/docs/latest/genai/tracing/track-environments-context/"}}');var r=s(74848),a=s(28453),i=s(49374),o=s(11470),l=s(19365);const c={},u="Track Users & Sessions",m={},p=[{value:"Why Track Users and Sessions?",id:"why-track-users-and-sessions",level:2},{value:"Standard MLflow metadata fields",id:"standard-mlflow-metadata-fields",level:2},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"Querying and Analysis",id:"querying-and-analysis",level:2},{value:"Best Practices and Integration",id:"best-practices-and-integration",level:2},{value:"Implementation Guidelines",id:"implementation-guidelines",level:3},{value:"Integration with MLflow Features",id:"integration-with-mlflow-features",level:3},{value:"Summary",id:"summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"track-users--sessions",children:"Track Users & Sessions"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Traces with session IDs",src:s(8038).A+"",width:"1852",height:"1080"})}),"\n",(0,r.jsx)(n.p,{children:"Tracking users and sessions in your GenAI application provides essential context for understanding user behavior, analyzing conversation flows, and improving personalization. MLflow offers built-in support for associating traces with users and grouping them into sessions."}),"\n",(0,r.jsx)(n.h2,{id:"why-track-users-and-sessions",children:"Why Track Users and Sessions?"}),"\n",(0,r.jsx)(n.p,{children:"User and session tracking enables powerful analytics and improvements for your GenAI application. Understanding how different users interact with your application helps identify usage patterns across your user base, while analyzing multi-turn conversations reveals how well your system maintains context retention across interactions."}),"\n",(0,r.jsx)(n.p,{children:"This tracking capability allows you to monitor performance metrics across different user segments, identifying areas for targeted improvements. You can also maintain session continuity across multiple interactions within the same conversation, creating better user experiences through improved context awareness."}),"\n",(0,r.jsx)(n.h2,{id:"standard-mlflow-metadata-fields",children:"Standard MLflow metadata fields"}),"\n",(0,r.jsx)(n.admonition,{title:"New in MLflow 3",type:"note",children:(0,r.jsxs)(n.p,{children:["User and session tracking is only available in MLflow 3 and above. To upgrade, please run ",(0,r.jsx)(n.code,{children:"pip install --upgrade mlflow"})]})}),"\n",(0,r.jsx)(n.p,{children:"MLflow provides two standard metadata fields for session and user tracking:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mlflow.trace.user"})," - Associates traces with specific users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"mlflow.trace.session"})," - Groups traces belonging to multi-turn conversations"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When you use these standard metadata fields, MLflow automatically enables filtering and grouping in the UI. Unlike tags, metadata cannot be updated once the trace is logged, making it ideal for immutable identifiers like user and session IDs."}),"\n",(0,r.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(l.A,{value:"basic",label:"Basic Usage",default:!0,children:[(0,r.jsx)(n.p,{children:"Here's how to add user and session tracking to your application:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\n@mlflow.trace\ndef chat_completion(user_id: str, session_id: str, message: str):\n    """Process a chat message with user and session tracking."""\n\n    # Add user and session context to the current trace\n    mlflow.update_current_trace(\n        metadata={\n            "mlflow.trace.user": user_id,  # Links trace to specific user\n            "mlflow.trace.session": session_id,  # Groups trace with conversation\n        }\n    )\n\n    # Your chat logic here\n    response = generate_response(message)\n    return response\n\n\n# Example usage\ndef handle_user_message(request):\n    return chat_completion(\n        user_id=request.user_id,  # e.g., "user-123"\n        session_id=request.session_id,  # e.g., "session-abc-456"\n        message=request.message,\n    )\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Implementation Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"@mlflow.trace"})," decorator automatically creates a trace for function execution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(i.B,{fn:"mlflow.update_current_trace"})," adds the user ID and session ID to the active trace"]}),"\n",(0,r.jsx)(n.li,{children:"Use consistent ID formats across your application for reliable analysis"}),"\n"]})]}),(0,r.jsxs)(l.A,{value:"web-app",label:"Web Application",children:[(0,r.jsx)(n.p,{children:"In production web applications, extract user and session information from request headers:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\nfrom fastapi import FastAPI, Request\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass ChatRequest(BaseModel):\n    message: str\n\n\n@app.post("/chat")  # FastAPI decorator should be outermost\n@mlflow.trace  # Ensure @mlflow.trace is the inner decorator\ndef handle_chat(request: Request, chat_request: ChatRequest):\n    # Extract context from headers\n    session_id = request.headers.get("X-Session-ID")\n    user_id = request.headers.get("X-User-ID")\n\n    # Update trace with user and session context\n    mlflow.update_current_trace(\n        metadata={\n            "mlflow.trace.session": session_id,\n            "mlflow.trace.user": user_id,\n        }\n    )\n\n    # Process the chat message\n    response_text = process_chat_message(chat_request.message, user_id, session_id)\n    return {"response": response_text}\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example request:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://127.0.0.1:8000/chat" \\\n     -H "Content-Type: application/json" \\\n     -H "X-Session-ID: session-def-456" \\\n     -H "X-User-ID: user-jane-doe-12345" \\\n     -d \'{"message": "What is my account balance?"}\'\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"querying-and-analysis",children:"Querying and Analysis"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(l.A,{value:"ui-search",label:"MLflow UI Search",default:!0,children:[(0,r.jsx)(n.p,{children:"Filter traces in the MLflow UI using these search queries:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Find all traces for a specific user\nmetadata.`mlflow.trace.user` = 'user-123'\n\n# Find all traces in a session\nmetadata.`mlflow.trace.session` = 'session-abc-456'\n\n# Find traces for a user within a specific session\nmetadata.`mlflow.trace.user` = 'user-123' AND metadata.`mlflow.trace.session` = 'session-abc-456'\n"})}),(0,r.jsx)(n.p,{children:"The MLflow UI provides powerful filtering and grouping capabilities when you use the standard user and session metadata."})]}),(0,r.jsxs)(l.A,{value:"user-analysis",label:"User Analysis",children:[(0,r.jsx)(n.p,{children:"Analyze user behavior patterns programmatically:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import mlflow\n\n\ndef analyze_user_behavior(user_id: str, experiment_id: str):\n    """Analyze a specific user\'s interaction patterns."""\n\n    # Search for all traces from a specific user\n    user_traces = mlflow.search_traces(\n        experiment_ids=[experiment_id],\n        filter_string=f"metadata.`mlflow.trace.user` = \'{user_id}\'",\n        return_type="list",\n    )\n\n    if len(user_traces) == 0:\n        return {"error": "No traces found for user"}\n\n    # Calculate key metrics\n    total_interactions = len(user_traces)\n    unique_sessions = len(\n        set(\n            t.info.request_metadata.get("mlflow.trace.session", "") for t in user_traces\n        )\n    )\n\n    successful_traces = [trace for trace in user_traces if trace.info.state == "OK"]\n    avg_response_time = (\n        sum(trace.info.execution_time_ms for trace in successful_traces)\n        / len(successful_traces)\n        if successful_traces\n        else 0\n    )\n\n    return {\n        "user_id": user_id,\n        "total_interactions": total_interactions,\n        "unique_sessions": unique_sessions,\n        "avg_response_time_ms": avg_response_time,\n    }\n\n\n# Usage\nuser_stats = analyze_user_behavior("user-123", "1")\nprint(\n    f"User has {user_stats[\'total_interactions\']} interactions across {user_stats[\'unique_sessions\']} sessions"\n)\n'})})]}),(0,r.jsxs)(l.A,{value:"session-analysis",label:"Session Analysis",children:[(0,r.jsx)(n.p,{children:"Analyze conversation flow within sessions:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def analyze_session_flow(session_id: str, experiment_id: str):\n    """Analyze conversation flow within a session."""\n\n    # Get all traces from a session, ordered chronologically\n    session_traces = mlflow.search_traces(\n        experiment_ids=[experiment_id],\n        filter_string=f"metadata.`mlflow.trace.session` = \'{session_id}\'",\n        order_by=["timestamp_ms ASC"],\n        return_type="list",\n    )\n\n    if len(session_traces) == 0:\n        return {"error": "No traces found for session"}\n\n    # Build conversation timeline\n    conversation_turns = []\n    for i, trace in enumerate(session_traces):\n        conversation_turns.append(\n            {\n                "turn": i + 1,\n                "timestamp": trace.info.timestamp_ms,\n                "duration_ms": trace.info.execution_time_ms,\n                "status": trace.info.status,\n            }\n        )\n\n    # Session-level metrics\n    session_duration = max(trace.info.timestamp_ms for trace in session_traces) - min(\n        trace.info.timestamp_ms for trace in session_traces\n    )\n    total_turns = len(conversation_turns)\n    avg_turn_duration = (\n        sum(trace.info.execution_time_ms for trace in session_traces) / total_turns\n    )\n\n    return {\n        "session_id": session_id,\n        "total_turns": total_turns,\n        "session_duration_ms": session_duration,\n        "avg_turn_duration_ms": avg_turn_duration,\n        "conversation_flow": conversation_turns,\n    }\n\n\n# Usage\nsession_analysis = analyze_session_flow(session_id, exp.experiment_id)\nprint(\n    f"Session had {session_analysis[\'total_turns\']} turns over {session_analysis[\'session_duration_ms\']}ms"\n)\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-and-integration",children:"Best Practices and Integration"}),"\n",(0,r.jsx)(n.h3,{id:"implementation-guidelines",children:"Implementation Guidelines"}),"\n",(0,r.jsx)(n.p,{children:"Successful user and session tracking requires consistent ID formats across your application to ensure reliable analysis and filtering. Define clear rules for when sessions start and end, such as after periods of inactivity or when users explicitly end conversations. Consider adding metadata enrichment with additional context like user segments or session types to enhance analysis capabilities. Combining user and session data with request IDs provides complete traceability across your system."}),"\n",(0,r.jsx)(n.h3,{id:"integration-with-mlflow-features",children:"Integration with MLflow Features"}),"\n",(0,r.jsx)(n.p,{children:"User and session tracking enhances other MLflow capabilities significantly. You can use user and session filters in trace search for targeted analysis and debugging. Quality evaluation becomes more powerful when comparing metrics across different user segments to identify improvement opportunities. Environment tracking combines well with user context for comprehensive observability, while production monitoring enables tracking performance patterns by user cohorts in live environments."}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"User and session tracking with MLflow provides powerful capabilities for understanding user behavior and optimizing user experiences. This approach delivers enhanced analytics through deep insights into user behavior patterns and session dynamics across your application. It improves debugging by providing user and session context that helps identify and resolve user-specific issues more quickly."}),"\n",(0,r.jsx)(n.p,{children:"Quality monitoring becomes more targeted when you can track performance across different user segments, enabling focused improvements where they matter most. Conversation analysis through multi-turn conversation tracking helps optimize dialogue systems and user flows for better engagement."}),"\n",(0,r.jsxs)(n.p,{children:["The combination of standard MLflow metadata (",(0,r.jsx)(n.code,{children:"mlflow.trace.user"})," and ",(0,r.jsx)(n.code,{children:"mlflow.trace.session"}),") with custom context creates a comprehensive foundation for user-centric observability in GenAI applications."]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/track-environments-context",children:"Track Environments & Context"})}),": Add deployment and version context to your traces"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Search Traces"})}),": Master advanced filtering techniques for user and session analysis"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/quality-with-traces",children:"Quality Analysis"})}),": Use user and session data to improve application quality"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/prod-tracing",children:"Production Monitoring"})}),": Set up comprehensive production observability with user context"]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8038:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/trace-filter-by-user-da0bbaf3dc284dbcf2cd92a5a0ea73bf.gif"},11470:(e,n,s)=>{s.d(n,{A:()=>b});var t=s(96540),r=s(34164),a=s(23104),i=s(56347),o=s(205),l=s(57485),c=s(31682),u=s(70679);function m(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:s}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:s,default:t}})=>({value:e,label:n,attributes:s,default:t})))}(s);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,s])}function d({value:e,tabValues:n}){return n.some((n=>n.value===e))}function f({queryString:e=!1,groupId:n}){const s=(0,i.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function h(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,a=p(e),[i,l]=(0,t.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,m]=f({queryString:s,groupId:r}),[h,_]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,r]=(0,u.Dv)(n);return[s,(0,t.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),w=(()=>{const e=c??h;return d({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{w&&l(w)}),[w]);return{selectedValue:i,selectValue:(0,t.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),_(e)}),[m,_,a]),tabValues:a}}var _=s(92303);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=s(74848);function y({className:e,block:n,selectedValue:s,selectValue:t,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const n=e.currentTarget,r=o.indexOf(n),a=i[r].value;a!==s&&(l(n),t(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=o.indexOf(e.currentTarget)+1;n=o[s]??o[0];break}case"ArrowLeft":{const s=o.indexOf(e.currentTarget)-1;n=o[s]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:t})=>(0,g.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...t,className:(0,r.A)("tabs__item",w.tabItem,t?.className,{"tabs__item--active":s===e}),children:n??e},e)))})}function x({lazy:e,children:n,selectedValue:s}){const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=a.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function v(e){const n=h(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",w.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(x,{...n,...e})]})}function b(e){const n=(0,_.A)();return(0,g.jsx)(v,{...e,children:m(e.children)},String(n))}},19365:(e,n,s)=>{s.d(n,{A:()=>i});s(96540);var t=s(34164);const r={tabItem:"tabItem_Ymn6"};var a=s(74848);function i({children:e,hidden:n,className:s}){return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,s),hidden:n,children:e})}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},49374:(e,n,s)=>{s.d(n,{B:()=>l});s(96540);const t=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=s(86025),a=s(28774),i=s(74848);const o=e=>{const n=e.split(".");for(let s=n.length;s>0;s--){const e=n.slice(0,s).join(".");if(t[e])return e}return null};function l({fn:e,children:n}){const s=o(e);if(!s)return(0,i.jsx)(i.Fragment,{children:n});const l=(0,r.Ay)(`/${t[s]}#${e}`);return(0,i.jsx)(a.A,{to:l,target:"_blank",children:n??(0,i.jsxs)("code",{children:[e,"()"]})})}}}]);