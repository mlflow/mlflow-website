"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3082],{5757:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/model-registry-ui-111bfc57063e0dd58d54597daafb1b7b.png"},12220:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"getting-started/registering-first-model/step2-explore-registered-model","title":"Explore the Registered Model","description":"Now that we\'ve logged an experiment and registered the model associated with that experiment run,","source":"@site/docs/classic-ml/getting-started/registering-first-model/step2-explore-registered-model.mdx","sourceDirName":"getting-started/registering-first-model","slug":"/getting-started/registering-first-model/step2-explore-registered-model","permalink":"/mlflow-website/docs/latest/ml/getting-started/registering-first-model/step2-explore-registered-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"Register a Model","permalink":"/mlflow-website/docs/latest/ml/getting-started/registering-first-model/step1-register-model"},"next":{"title":"Load a Registered Model","permalink":"/mlflow-website/docs/latest/ml/getting-started/registering-first-model/step3-load-model"}}');var s=r(74848),i=r(28453);const o={},l="Explore the Registered Model",a={},d=[{value:"Step 1: Explore the <code>mlruns</code> Directory",id:"step-1-explore-the-mlruns-directory",level:2},{value:"Step 2: Start the Tracking Server",id:"step-2-start-the-tracking-server",level:2},{value:"Step 3: View the Tracking Server",id:"step-3-view-the-tracking-server",level:2}];function c(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"explore-the-registered-model",children:"Explore the Registered Model"})}),"\n",(0,s.jsx)(t.p,{children:"Now that we've logged an experiment and registered the model associated with that experiment run,\nlet's observe how this information is actually stored both in the MLflow UI and in our local\ndirectory. Note that we can also get this information programmatically, but for explanatory purposes\nwe'll use the MLflow UI."}),"\n",(0,s.jsxs)(t.h2,{id:"step-1-explore-the-mlruns-directory",children:["Step 1: Explore the ",(0,s.jsx)(t.code,{children:"mlruns"})," Directory"]}),"\n",(0,s.jsx)(t.p,{children:"Given that we're using our local filesystem as our tracking server and model registry, let's observe\nthe directory structure created when running the python script in the prior step."}),"\n",(0,s.jsx)(t.p,{children:"Before diving in, it's import to note that MLflow is designed to abstract complexity from the user\nand this directory structure is just for illustration purposes. Furthermore, on remote deployments,\nwhich is recommended for production use cases, the tracking server will be\non object store (S3, ADLS, GCS, etc.) and the model registry will be on a relational database\n(PostgreSQL, MySQL, etc.)."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"mlruns/\n\u251c\u2500\u2500 0/                                    # Experiment ID\n\u2502   \u251c\u2500\u2500 bc6dc2a4f38d47b4b0c99d154bbc77ad/ # Run ID\n\u2502   \u2502   \u251c\u2500\u2500 metrics/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 mse                       # Example metric file for mean squared error\n\u2502   \u2502   \u251c\u2500\u2500 artifacts/                    # Artifacts associated with our run\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 sklearn-model/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 python_env.yaml\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 requirements.txt      # Python package requirements\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 MLmodel               # MLflow model file with model metadata\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 model.pkl             # Serialized model file\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 input_example.json\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 conda.yaml\n\u2502   \u2502   \u251c\u2500\u2500 tags/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.user\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.source.git.commit\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.runName\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.source.name\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 mlflow.log-model.history\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 mlflow.source.type\n\u2502   \u2502   \u251c\u2500\u2500 params/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 max_depth\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 random_state\n\u2502   \u2502   \u2514\u2500\u2500 meta.yaml\n\u2502   \u2514\u2500\u2500 meta.yaml\n\u251c\u2500\u2500 models/                               # Model Registry Directory\n    \u251c\u2500\u2500 sk-learn-random-forest-reg-model/ # Registered model name\n    \u2502   \u251c\u2500\u2500 version-1/                    # Model version directory\n    \u2502   \u2502   \u2514\u2500\u2500 meta.yaml\n    \u2502   \u2514\u2500\u2500 meta.yaml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The tracking server is organized by ",(0,s.jsx)(t.em,{children:"Experiment ID"})," and ",(0,s.jsx)(t.em,{children:"Run ID"})," and is responsible for storing our\nexperiment artifacts, parameters, and metrics. The model registry, on the other hand, only stores\nmetadata with pointers to our tracking server."]}),"\n",(0,s.jsxs)(t.p,{children:["As you can see, flavors that support ",(0,s.jsx)(t.a,{href:"/ml/tracking/autolog",children:"autologging"})," provide lots of additional\ninformation out-of-the-box. Also note that even if we don't have autologging for our model of\ninterest, we can easily store this information with explicit logging calls."]}),"\n",(0,s.jsxs)(t.p,{children:["One more interesting callout is that by default you get three way to manage your model's\nenvironment: ",(0,s.jsx)(t.code,{children:"python_env.yaml"})," (python virtualenv), ",(0,s.jsx)(t.code,{children:"requirements.txt"})," (PyPi requirements), and\n",(0,s.jsx)(t.code,{children:"conda.yaml"})," (conda env)."]}),"\n",(0,s.jsx)(t.p,{children:"Now that we have a very high-level understanding of what is logged, let's use the MLflow UI to\nview this information."}),"\n",(0,s.jsx)(t.h2,{id:"step-2-start-the-tracking-server",children:"Step 2: Start the Tracking Server"}),"\n",(0,s.jsxs)(t.p,{children:["In the same directory as your ",(0,s.jsx)(t.code,{children:"mlruns"})," folder, run the below command."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"mlflow server --host 127.0.0.1 --port 8080\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"INFO:     Started server process [26393]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8080 (Press CTRL+C to quit)\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-3-view-the-tracking-server",children:"Step 3: View the Tracking Server"}),"\n",(0,s.jsxs)(t.p,{children:["Assuming there are no errors, you can go to your web browser and visit ",(0,s.jsx)(t.code,{children:"http://localhost:8080"})," to\nview the MLflow UI."]}),"\n",(0,s.jsx)(t.p,{children:"First, let's leave the experiment tracking tab and visit the model registry."}),"\n",(0,s.jsx)("div",{className:"center-div",style:{width:1024,maxWidth:"100%"},children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Model information from the mlflow ui.",src:r(5757).A+"",width:"2136",height:"1168"})})}),"\n",(0,s.jsxs)(t.p,{children:["Next, let's add tags and a model version alias to\n",(0,s.jsx)(t.a,{href:"/ml/model-registry",children:"facilitate model deployment"}),".\nYou can add or edit tags and aliases by clicking on the corresponding ",(0,s.jsx)(t.code,{children:"Add"})," link or pencil icon in\nthe model version table. Let's..."]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Add a model version tag with a key of ",(0,s.jsx)(t.code,{children:"problem_type"})," and value of ",(0,s.jsx)(t.code,{children:"regression"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Add a model version alias of ",(0,s.jsx)(t.code,{children:"the_best_model_ever"}),"."]}),"\n"]}),"\n",(0,s.jsx)("div",{className:"center-div",style:{width:1024,maxWidth:"100%"},children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Model information from the mlflow ui.",src:r(52407).A+"",width:"2620",height:"956"})})}),"\n",(0,s.jsxs)(t.p,{children:["The next part of this tutorial centers on ",(0,s.jsx)(t.a,{href:"/ml/getting-started/registering-first-model/step3-load-model",children:"Loading Models from the Registry"})," within the MLflow UI."]})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>l});var n=r(96540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}},52407:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/model-alias-and-tags-0318d486b2bf16992f488de5a00ce474.png"}}]);