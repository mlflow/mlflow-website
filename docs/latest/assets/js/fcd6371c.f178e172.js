/*! For license information please see fcd6371c.f178e172.js.LICENSE.txt */
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3498],{6789:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var a=t(28774),i=t(34164);const s={tileCard:"tileCard_NHsj",tileIcon:"tileIcon_pyoR",tileLink:"tileLink_iUbu",tileImage:"tileImage_O4So"};var r=t(86025),o=t(74848);function l({icon:e,image:n,iconSize:t=32,containerHeight:l,title:c,description:d,href:p,linkText:h="Learn more \u2192",className:g}){if(!e&&!n)throw new Error("TileCard requires either an icon or image prop");const m=l?{height:`${l}px`}:{};return(0,o.jsxs)(a.A,{href:p,className:(0,i.A)(s.tileCard,g),children:[(0,o.jsx)("div",{className:s.tileIcon,style:m,children:e?(0,o.jsx)(e,{size:t}):(0,o.jsx)("img",{src:(0,r.Ay)(n),alt:c,className:s.tileImage})}),(0,o.jsx)("h3",{children:c}),(0,o.jsx)("p",{children:d}),(0,o.jsx)("div",{className:s.tileLink,children:h})]})}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(96540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},45244:(e,n,t)=>{t.d(n,{A:()=>a});const a=(0,t(84722).A)("book",[["path",{d:"M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",key:"k3hazp"}]])},48547:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>h,default:()=>f,frontMatter:()=>p,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"governance/ai-gateway/usage","title":"AI Gateway Usage","description":"Learn how to query your AI Gateway endpoints, integrate with applications, and leverage different APIs and tools.","source":"@site/docs/genai/governance/ai-gateway/usage.mdx","sourceDirName":"governance/ai-gateway","slug":"/governance/ai-gateway/usage","permalink":"/docs/latest/genai/governance/ai-gateway/usage","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Configuration","permalink":"/docs/latest/genai/governance/ai-gateway/configuration"},"next":{"title":"Integration","permalink":"/docs/latest/genai/governance/ai-gateway/integration"}}');var i=t(74848),s=t(28453),r=t(65592),o=t(6789),l=t(80964),c=t(45244);const d=(0,t(84722).A)("house",[["path",{d:"M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8",key:"5wwlr5"}],["path",{d:"M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",key:"1d0kgt"}]]),p={},h="AI Gateway Usage",g={},m=[{value:"Basic Querying",id:"basic-querying",level:2},{value:"REST API Requests",id:"rest-api-requests",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Chat Completions",id:"chat-completions",level:4},{value:"Text Completions",id:"text-completions",level:4},{value:"Embeddings",id:"embeddings",level:4},{value:"Streaming Responses",id:"streaming-responses",level:3},{value:"Python Client Integration",id:"python-client-integration",level:2},{value:"MLflow Deployments Client",id:"mlflow-deployments-client",level:3},{value:"Advanced Client Usage",id:"advanced-client-usage",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Streaming Responses",id:"streaming-responses-1",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Gateway Management",id:"gateway-management",level:3},{value:"Health Monitoring",id:"health-monitoring",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"ai-gateway-usage",children:"AI Gateway Usage"})}),"\n","\n",(0,i.jsx)(n.p,{children:"Learn how to query your AI Gateway endpoints, integrate with applications, and leverage different APIs and tools."}),"\n",(0,i.jsx)(n.h2,{id:"basic-querying",children:"Basic Querying"}),"\n",(0,i.jsx)(n.h3,{id:"rest-api-requests",children:"REST API Requests"}),"\n",(0,i.jsx)(n.p,{children:"The gateway exposes REST endpoints that follow OpenAI-compatible patterns. Each endpoint accepts JSON payloads and returns structured responses. Use these when integrating with applications that don't have MLflow client libraries:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Chat completions\ncurl -X POST http://localhost:5000/gateway/chat/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "messages": [\n      {"role": "user", "content": "Hello, how are you?"}\n    ]\n  }\'\n\n# Text completions\ncurl -X POST http://localhost:5000/gateway/completions/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "prompt": "The future of AI is",\n    "max_tokens": 100\n  }\'\n\n# Embeddings\ncurl -X POST http://localhost:5000/gateway/embeddings/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "input": "Text to embed"\n  }\'\n'})}),"\n",(0,i.jsx)(n.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,i.jsx)(n.p,{children:"These parameters control model behavior and are supported across most providers. Different models may support different subsets of these parameters:"}),"\n",(0,i.jsx)(n.h4,{id:"chat-completions",children:"Chat Completions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "messages": [\n    {"role": "system", "content": "You are a helpful assistant."},\n    {"role": "user", "content": "What is machine learning?"}\n  ],\n  "temperature": 0.7,\n  "max_tokens": 150,\n  "top_p": 0.9,\n  "frequency_penalty": 0.0,\n  "presence_penalty": 0.0,\n  "stop": ["\\n\\n"],\n  "stream": false\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"text-completions",children:"Text Completions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "prompt": "Once upon a time",\n  "temperature": 0.8,\n  "max_tokens": 100,\n  "top_p": 1.0,\n  "frequency_penalty": 0.0,\n  "presence_penalty": 0.0,\n  "stop": [".", "!"],\n  "stream": false\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"embeddings",children:"Embeddings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "input": ["Text to embed", "Another text"],\n  "encoding_format": "float"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-responses",children:"Streaming Responses"}),"\n",(0,i.jsx)(n.p,{children:"Enable streaming for real-time response generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:5000/gateway/chat/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "messages": [{"role": "user", "content": "Write a story"}],\n    "stream": true\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"python-client-integration",children:"Python Client Integration"}),"\n",(0,i.jsx)(n.h3,{id:"mlflow-deployments-client",children:"MLflow Deployments Client"}),"\n",(0,i.jsx)(n.p,{children:"The MLflow deployments client provides a Python interface that handles authentication, error handling, and response parsing. Use this when building Python applications:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from mlflow.deployments import get_deploy_client\n\n# Create a client for the gateway\nclient = get_deploy_client("http://localhost:5000")\n\n# Query a chat endpoint\nresponse = client.predict(\n    endpoint="chat",\n    inputs={"messages": [{"role": "user", "content": "What is MLflow?"}]},\n)\n\nprint(response["choices"][0]["message"]["content"])\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-client-usage",children:"Advanced Client Usage"}),"\n",(0,i.jsx)(n.p,{children:"Build reusable functions for common operations like streaming responses and batch embedding generation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from mlflow.deployments import get_deploy_client\n\n# Initialize client\nclient = get_deploy_client("http://localhost:5000")\n\n\n# Chat with streaming\ndef stream_chat(prompt):\n    response = client.predict(\n        endpoint="chat",\n        inputs={\n            "messages": [{"role": "user", "content": prompt}],\n            "stream": True,\n            "temperature": 0.7,\n        },\n    )\n\n    for chunk in response:\n        if chunk["choices"][0]["delta"].get("content"):\n            print(chunk["choices"][0]["delta"]["content"], end="")\n\n\n# Generate embeddings\ndef get_embeddings(texts):\n    response = client.predict(endpoint="embeddings", inputs={"input": texts})\n    return [item["embedding"] for item in response["data"]]\n\n\n# Example usage\nstream_chat("Explain quantum computing")\nembeddings = get_embeddings(["Hello world", "MLflow AI Gateway"])\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Proper error handling helps you distinguish between network issues, authentication problems, and model-specific errors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from mlflow.deployments import get_deploy_client\nfrom mlflow.exceptions import MlflowException\n\nclient = get_deploy_client("http://localhost:5000")\n\ntry:\n    response = client.predict(\n        endpoint="chat", inputs={"messages": [{"role": "user", "content": "Hello"}]}\n    )\n    print(response)\nexcept MlflowException as e:\n    print(f"MLflow error: {e}")\nexcept Exception as e:\n    print(f"Unexpected error: {e}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"streaming-responses-1",children:"Streaming Responses"}),"\n",(0,i.jsx)(n.p,{children:"For long-form content generation, enable streaming to receive partial responses as they're generated instead of waiting for the complete response:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:5000/gateway/chat/invocations \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "messages": [{"role": "user", "content": "Write a story"}],\n    "stream": true\n  }\'\n'})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"gateway-management",children:"Gateway Management"}),"\n",(0,i.jsx)(n.p,{children:"Query the gateway's current configuration and available endpoints programmatically:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from mlflow.deployments import get_deploy_client\n\nclient = get_deploy_client(\"http://localhost:5000\")\n\n# List available endpoints\nendpoints = client.list_endpoints()\nfor endpoint in endpoints:\n    print(f\"Endpoint: {endpoint['name']}\")\n\n# Get endpoint details\nendpoint_info = client.get_endpoint(\"chat\")\nprint(f\"Model: {endpoint_info.get('model', {}).get('name', 'N/A')}\")\nprint(f\"Provider: {endpoint_info.get('model', {}).get('provider', 'N/A')}\")\n\n# Note: Route creation, updates, and deletion are typically done\n# through configuration file changes, not programmatically\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-monitoring",children:"Health Monitoring"}),"\n",(0,i.jsx)(n.p,{children:"Monitor gateway availability and responsiveness for production deployments:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import requests\n\ntry:\n    response = requests.get("http://localhost:5000/health")\n    print(f"Status: {response.status_code}")\n    if response.status_code == 200:\n        print("Gateway is healthy")\nexcept requests.RequestException as e:\n    print(f"Health check failed: {e}")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(r.A,{children:[(0,i.jsx)(o.A,{icon:l.A,title:"Integration Guide",description:"Integrate with applications, frameworks, and production systems",href:"/genai/governance/ai-gateway/integration",linkText:"Learn integrations \u2192"}),(0,i.jsx)(o.A,{icon:c.A,title:"Tutorial",description:"Complete step-by-step walkthrough from setup to deployment",href:"/genai/governance/ai-gateway/guides",linkText:"Follow tutorial \u2192"}),(0,i.jsx)(o.A,{icon:d,title:"Configuration Guide",description:"Learn how to configure providers and advanced settings",href:"/genai/governance/ai-gateway/configuration",linkText:"Configure providers \u2192"})]})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65592:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(34164);const i={tilesGrid:"tilesGrid_hB9N"};var s=t(74848);function r({children:e,className:n}){return(0,s.jsx)("div",{className:(0,a.A)(i.tilesGrid,n),children:e})}},80964:(e,n,t)=>{t.d(n,{A:()=>a});const a=(0,t(84722).A)("settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},84722:(e,n,t)=>{t.d(n,{A:()=>c});var a=t(96540);const i=e=>{const n=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,((e,n,t)=>t?t.toUpperCase():n.toLowerCase())))(e);return n.charAt(0).toUpperCase()+n.slice(1)},s=(...e)=>e.filter(((e,n,t)=>Boolean(e)&&""!==e.trim()&&t.indexOf(e)===n)).join(" ").trim(),r=e=>{for(const n in e)if(n.startsWith("aria-")||"role"===n||"title"===n)return!0};var o={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const l=(0,a.forwardRef)((({color:e="currentColor",size:n=24,strokeWidth:t=2,absoluteStrokeWidth:i,className:l="",children:c,iconNode:d,...p},h)=>(0,a.createElement)("svg",{ref:h,...o,width:n,height:n,stroke:e,strokeWidth:i?24*Number(t)/Number(n):t,className:s("lucide",l),...!c&&!r(p)&&{"aria-hidden":"true"},...p},[...d.map((([e,n])=>(0,a.createElement)(e,n))),...Array.isArray(c)?c:[c]]))),c=(e,n)=>{const t=(0,a.forwardRef)((({className:t,...r},o)=>{return(0,a.createElement)(l,{ref:o,iconNode:n,className:s(`lucide-${c=i(e),c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,t),...r});var c}));return t.displayName=i(e),t}}}]);