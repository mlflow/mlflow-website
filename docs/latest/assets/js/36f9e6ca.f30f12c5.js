"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6146],{5136:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>m});const l=JSON.parse('{"id":"tracing/integrations/langchain","title":"Tracing LangChain\ud83e\udd9c\u26d3\ufe0f","description":"LangChain Tracing via autolog","source":"@site/docs/tracing/integrations/langchain.mdx","sourceDirName":"tracing/integrations","slug":"/tracing/integrations/langchain","permalink":"/docs/latest/tracing/integrations/langchain","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"LangChain"},"sidebar":"docsSidebar","previous":{"title":"OpenAI","permalink":"/docs/latest/tracing/integrations/openai"},"next":{"title":"LangGraph","permalink":"/docs/latest/tracing/integrations/langgraph"}}');var t=a(74848),r=a(28453),i=a(67756);a(86294),a(61096),a(65537),a(79329);const o={sidebar_position:2,sidebar_label:"LangChain"},s="Tracing LangChain\ud83e\udd9c\u26d3\ufe0f",c={},m=[{value:"Example Usage",id:"example-usage",level:3},{value:"Supported APIs",id:"supported-apis",level:3},{value:"Customize Tracing Behavior",id:"customize-tracing-behavior",level:3},{value:"Disable auto-tracing",id:"disable-auto-tracing",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tracing-langchain\ufe0f",children:"Tracing LangChain\ud83e\udd9c\u26d3\ufe0f"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"LangChain Tracing via autolog",src:a(36458).A+"",width:"1876",height:"1080"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.langchain.com/",children:"LangChain"})," is an open-source framework for building LLM-powered applications."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"../",children:"MLflow Tracing"})," provides automatic tracing capability for LangChain. You can enable tracing\nfor LangChain by calling the ",(0,t.jsx)(i.B,{fn:"mlflow.langchain.autolog"})," function, and nested traces are automatically logged to the active MLflow Experiment upon invocation of chains."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import mlflow\n\nmlflow.langchain.autolog()\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["MLflow LangChain integration is not only about tracing. MLflow offers full tracking experience for LangChain, including model tracking, prompt management, and evaluation. Please checkout the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/llms/langchain",children:"MLflow LangChain Flavor"})})," to learn more!"]})}),"\n",(0,t.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_openai import ChatOpenAI\n\n\n# Enabling autolog for LangChain will enable trace logging.\nmlflow.langchain.autolog()\n\n# Optional: Set a tracking URI and an experiment\nmlflow.set_experiment("LangChain")\nmlflow.set_tracking_uri("http://localhost:5000")\n\nllm = ChatOpenAI(model="gpt-4o-mini", temperature=0.7, max_tokens=1000)\n\nprompt_template = PromptTemplate.from_template(\n    "Answer the question as if you are {person}, fully embodying their style, wit, personality, and habits of speech. "\n    "Emulate their quirks and mannerisms to the best of your ability, embracing their traits\u2014even if they aren\'t entirely "\n    "constructive or inoffensive. The question is: {question}"\n)\n\nchain = prompt_template | llm | StrOutputParser()\n\n# Let\'s test another call\nchain.invoke(\n    {\n        "person": "Linus Torvalds",\n        "question": "Can I just set everyone\'s access to sudo to make things easier?",\n    }\n)\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsx)(n.p,{children:"This example above has been confirmed working with the following requirement versions:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"pip install openai==1.30.5 langchain==0.2.1 langchain-openai==0.1.8 langchain-community==0.2.1 mlflow==2.14.0 tiktoken==0.7.0\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"supported-apis",children:"Supported APIs"}),"\n",(0,t.jsx)(n.p,{children:"The following APIs are supported by auto tracing for LangChain."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"invoke"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"batch"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"stream"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ainvoke"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"abatch"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"astream"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"get_relevant_documents"})," (for retrievers)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"__call__"})," (for Chains and AgentExecutors)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"customize-tracing-behavior",children:"Customize Tracing Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["Sometimes you may want to customize what information is logged in the traces. You can achieve this by creating a custom callback handler that inherits from ",(0,t.jsx)(i.B,{fn:"mlflow.langchai.langchain_tracer.MlflowLangchainTracer",children:(0,t.jsx)(n.code,{children:"MlflowLangchainTracer"})}),". MlflowLangchainTracer is a callback handler that is injected into the langchain model inference process to log traces automatically. It starts a new span upon a set of actions of the chain such as on_chain_start, on_llm_start, and concludes it when the action is finished. Various metadata such as span type, action name, input, output, latency, are automatically recorded to the span."]}),"\n",(0,t.jsx)(n.p,{children:"The following example demonstrates how to record an additional attribute to the span when a chat model starts running."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from mlflow.langchain.langchain_tracer import MlflowLangchainTracer\n\n\nclass CustomLangchainTracer(MlflowLangchainTracer):\n    # Override the handler functions to customize the behavior. The method signature is defined by LangChain Callbacks.\n    def on_chat_model_start(\n        self,\n        serialized: Dict[str, Any],\n        messages: List[List[BaseMessage]],\n        *,\n        run_id: UUID,\n        tags: Optional[List[str]] = None,\n        parent_run_id: Optional[UUID] = None,\n        metadata: Optional[Dict[str, Any]] = None,\n        name: Optional[str] = None,\n        **kwargs: Any,\n    ):\n        """Run when a chat model starts running."""\n        attributes = {\n            **kwargs,\n            **metadata,\n            # Add additional attribute to the span\n            "version": "1.0.0",\n        }\n\n        # Call the _start_span method at the end of the handler function to start a new span.\n        self._start_span(\n            span_name=name or self._assign_span_name(serialized, "chat model"),\n            parent_run_id=parent_run_id,\n            span_type=SpanType.CHAT_MODEL,\n            run_id=run_id,\n            inputs=messages,\n            attributes=kwargs,\n        )\n'})}),"\n",(0,t.jsx)(n.h3,{id:"disable-auto-tracing",children:"Disable auto-tracing"}),"\n",(0,t.jsxs)(n.p,{children:["Auto tracing for LangChain can be disabled globally by calling ",(0,t.jsx)(n.code,{children:"mlflow.langchain.autolog(disable=True)"})," or ",(0,t.jsx)(n.code,{children:"mlflow.autolog(disable=True)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},36458:(e,n,a)=>{a.d(n,{A:()=>l});const l=a.p+"assets/images/tracing-top-dcca046565ab33be6afe0447dd328c22.gif"},67756:(e,n,a)=>{a.d(n,{B:()=>s});a(96540);const l=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var t=a(29030),r=a(56289),i=a(74848);const o=e=>{const n=e.split(".");for(let a=n.length;a>0;a--){const e=n.slice(0,a).join(".");if(l[e])return e}return null};function s(e){let{fn:n,children:a}=e;const s=o(n);if(!s)return(0,i.jsx)(i.Fragment,{children:a});const c=(0,t.Ay)(`/${l[s]}#${n}`);return(0,i.jsx)(r.A,{to:c,target:"_blank",children:a??(0,i.jsxs)("code",{children:[n,"()"]})})}},86294:(e,n,a)=>{a.d(n,{Zp:()=>s,AC:()=>o,WO:()=>m,tf:()=>h,_C:()=>c,$3:()=>p,jK:()=>d});var l=a(34164);const t={CardGroup:"CardGroup_P84T",MaxThreeColumns:"MaxThreeColumns_FO1r",AutofillColumns:"AutofillColumns_fKhQ",Card:"Card_aSCR",CardBordered:"CardBordered_glGF",CardBody:"CardBody_BhRs",TextColor:"TextColor_a8Tp",BoxRoot:"BoxRoot_Etgr",FlexWrapNowrap:"FlexWrapNowrap_f60k",FlexJustifyContentFlexStart:"FlexJustifyContentFlexStart_ZYv5",FlexDirectionRow:"FlexDirectionRow_T2qL",FlexAlignItemsCenter:"FlexAlignItemsCenter_EHVM",FlexFlex:"FlexFlex__JTE",Link:"Link_fVkl",MarginLeft4:"MarginLeft4_YQSJ",MarginTop4:"MarginTop4_jXKN",PaddingBottom4:"PaddingBottom4_O9gt",LogoCardContent:"LogoCardContent_kCQm",LogoCardImage:"LogoCardImage_JdcX",SmallLogoCardContent:"SmallLogoCardContent_LxhV",SmallLogoCardImage:"SmallLogoCardImage_tPZl",NewFeatureCardContent:"NewFeatureCardContent_Rq3d",NewFeatureCardHeading:"NewFeatureCardHeading_f6q3",NewFeatureCardHeadingSeparator:"NewFeatureCardHeadingSeparator_pSx8",NewFeatureCardTags:"NewFeatureCardTags_IFHO",NewFeatureCardWrapper:"NewFeatureCardWrapper_NQ0k",TitleCardContent:"TitleCardContent_l9MQ",TitleCardTitle:"TitleCardTitle__K8J",TitleCardSeparator:"TitleCardSeparator_IN2E",Cols1:"Cols1_Gr2U",Cols2:"Cols2_sRvc",Cols3:"Cols3_KjUS",Cols4:"Cols4_dKOj",Cols5:"Cols5_jDmj",Cols6:"Cols6_Q0OR"};var r=a(56289),i=a(74848);const o=e=>{let{children:n,isSmall:a,cols:r}=e;return(0,i.jsx)("div",{className:(0,l.A)(t.CardGroup,a?t.AutofillColumns:r?t[`Cols${r}`]:t.MaxThreeColumns),children:n})},s=e=>{let{children:n,link:a=""}=e;return a?(0,i.jsx)(r.A,{className:(0,l.A)(t.Link,t.Card,t.CardBordered),to:a,children:n}):(0,i.jsx)("div",{className:(0,l.A)(t.Card,t.CardBordered),children:n})},c=e=>{let{headerText:n,link:a,text:r}=e;return(0,i.jsx)(s,{link:a,children:(0,i.jsxs)("span",{children:[(0,i.jsx)("div",{className:(0,l.A)(t.CardTitle,t.BoxRoot,t.PaddingBottom4),style:{pointerEvents:"none"},children:(0,i.jsx)("div",{className:(0,l.A)(t.BoxRoot,t.FlexFlex,t.FlexAlignItemsCenter,t.FlexDirectionRow,t.FlexJustifyContentFlexStart,t.FlexWrapNowrap),style:{marginLeft:"-4px",marginTop:"-4px"},children:(0,i.jsx)("div",{className:(0,l.A)(t.BoxRoot,t.BoxHideIfEmpty,t.MarginTop4,t.MarginLeft4),style:{pointerEvents:"auto"},children:(0,i.jsx)("span",{className:"",children:n})})})}),(0,i.jsx)("span",{className:(0,l.A)(t.TextColor,t.CardBody),children:(0,i.jsx)("p",{children:r})})]})})},m=e=>{let{description:n,children:a,link:l}=e;return(0,i.jsx)(s,{link:l,children:(0,i.jsxs)("div",{className:t.LogoCardContent,children:[(0,i.jsx)("div",{className:t.LogoCardImage,children:a}),(0,i.jsx)("p",{className:t.TextColor,children:n})]})})},p=e=>{let{children:n,link:a}=e;return(0,i.jsx)(s,{link:a,children:(0,i.jsx)("div",{className:t.SmallLogoCardContent,children:(0,i.jsx)("div",{className:(0,l.A)("max-height-img-container",t.SmallLogoCardImage),children:n})})})},h=e=>{let{children:n,description:a,name:l,releaseVersion:o,learnMoreLink:c=""}=e;return(0,i.jsx)(s,{children:(0,i.jsxs)("div",{className:t.NewFeatureCardWrapper,children:[(0,i.jsxs)("div",{className:t.NewFeatureCardContent,children:[(0,i.jsxs)("div",{className:t.NewFeatureCardHeading,children:[l,(0,i.jsx)("br",{}),(0,i.jsx)("hr",{className:t.NewFeatureCardHeadingSeparator})]}),(0,i.jsx)("div",{className:t.LogoCardImage,children:n}),(0,i.jsx)("br",{}),(0,i.jsx)("p",{children:a}),(0,i.jsx)("br",{})]}),(0,i.jsxs)("div",{className:t.NewFeatureCardTags,children:[(0,i.jsx)("div",{children:c&&(0,i.jsx)(r.A,{className:"button button--outline button--sm button--primary",to:c,children:"Learn more"})}),(0,i.jsxs)(r.A,{className:"button button--outline button--sm button--primary",to:`https://github.com/mlflow/mlflow/releases/tag/v${o}`,children:["released in ",o]})]})]})})},d=e=>{let{title:n,description:a,link:r=""}=e;return(0,i.jsx)(s,{link:r,children:(0,i.jsxs)("div",{className:t.TitleCardContent,children:[(0,i.jsx)("div",{className:(0,l.A)(t.TitleCardTitle),style:{textAlign:"left",fontWeight:"bold"},children:n}),(0,i.jsx)("hr",{className:(0,l.A)(t.TitleCardSeparator),style:{margin:"12px 0"}}),(0,i.jsx)("p",{className:(0,l.A)(t.TextColor),children:a})]})})}}}]);