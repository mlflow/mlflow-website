"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7375],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},48588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"projects/index","title":"MLflow Projects","description":"An MLflow Project is a format for packaging data science code in a reusable and reproducible way,","source":"@site/docs/projects/index.mdx","sourceDirName":"projects","slug":"/projects/","permalink":"/docs/latest/projects/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"docsSidebar","previous":{"title":"Access Control","permalink":"/docs/latest/auth/"},"next":{"title":"MLflow Plugins","permalink":"/docs/latest/plugins/"}}');var o=t(74848),i=t(28453),s=t(56289),l=t(67756),a=t(61096);const c={sidebar_position:13},d="MLflow Projects",h={},p=[{value:"Overview",id:"overview",level:2},{value:"Name",id:"name",level:4},{value:"Entry Points",id:"entry-points",level:4},{value:"Environment",id:"environment",level:4},{value:"Specifying Projects",id:"specifying-projects",level:2},{value:"Project Environments",id:"project-environments",level:3},{value:"Virtualenv Environment (preferred)",id:"project-virtualenv-environments",level:4},{value:"Docker container environment",id:"project-docker-container-environments",level:4},{value:"Conda environment",id:"project-conda-environments",level:4},{value:"System environment",id:"system-environment",level:4},{value:"Project Directories",id:"project-directories",level:3},{value:"MLproject File",id:"mlproject-file",level:3},{value:"Specifying an Environment",id:"mlproject-specify-environment",level:4},{value:"Virtualenv environment",id:"virtualenv-environment",level:4},{value:"Conda environment",id:"conda-environment",level:4},{value:"Docker container environment",id:"docker-container-environment",level:4},{value:"Command Syntax",id:"mlproject-command-syntax",level:4},{value:"Specifying Parameters",id:"project_parameters",level:4},{value:"string",id:"string",level:4},{value:"float",id:"float",level:4},{value:"path",id:"path",level:4},{value:"uri",id:"uri",level:4},{value:"Running Projects",id:"running-projects",level:2},{value:"Project URI",id:"project-uri",level:4},{value:"Project Version",id:"project-version",level:4},{value:"Entry Point",id:"entry-point",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Deployment Mode",id:"deployment-mode",level:4},{value:"Environment",id:"environment-1",level:4},{value:"Run an MLflow Project on Databricks",id:"databricks_execution",level:3},{value:"Run an MLflow Project on Kubernetes",id:"kubernetes_execution",level:3},{value:"How it works",id:"how-it-works",level:4},{value:"Execution guide",id:"execution-guide",level:4},{value:"Job Templates",id:"kubernetes_execution_job_templates",level:4},{value:"Iterating Quickly",id:"iterating-quickly",level:2},{value:"Building Multistep Workflows",id:"building-multistep-workflows",level:2},{value:"Modularizing Your Data Science Code",id:"modularizing-your-data-science-code",level:4},{value:"Hyperparameter Tuning",id:"hyperparameter-tuning",level:4},{value:"Cross-validation",id:"cross-validation",level:4}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mlflow-projects",children:"MLflow Projects"})}),"\n",(0,o.jsx)(n.p,{children:"An MLflow Project is a format for packaging data science code in a reusable and reproducible way,\nbased primarily on conventions. In addition, the Projects component includes an API and command-line\ntools for running projects, making it possible to chain together projects into workflows."}),"\n",(0,o.jsx)(a.A,{toc:p,maxHeadingLevel:2,minHeadingLevel:2}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["At the core, MLflow Projects are just a convention for organizing and describing your code to let\nother data scientists (or automated tools) run it. Each project is simply a directory of files, or\na Git repository, containing your code. MLflow can run some projects based on a convention for\nplacing files in this directory (for example, a ",(0,o.jsx)(n.code,{children:"conda.yaml"})," file is treated as a\n",(0,o.jsx)(n.a,{href:"https://conda.io/docs",children:"Conda"})," environment), but you can describe your project in more detail by\nadding a ",(0,o.jsx)(n.code,{children:"MLproject"})," file, which is a ",(0,o.jsx)(n.a,{href:"https://learnxinyminutes.com/docs/yaml",children:"YAML"})," formatted\ntext file. Each project can specify several properties:"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"name",children:"Name"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"A human-readable name for the project."})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"entry-points",children:"Entry Points"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["Commands that can be run within the project, and information about their parameters.\nMost projects contain at least one entry point that you want other users to call.\nSome projects can also contain more than one entry point: for example, you might have\na single Git repository containing multiple featurization algorithms. You can also\ncall any ",(0,o.jsx)(n.code,{children:".py"})," or ",(0,o.jsx)(n.code,{children:".sh"})," file in the project as an entry point. If you list your entry\npoints in a ",(0,o.jsx)(n.code,{children:"MLproject"})," file, however, you can also specify ",(0,o.jsx)(n.em,{children:"parameters"})," for them,\nincluding datatypes and default values."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"environment",children:"Environment"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["The software environment that should be used to execute project entry points.\nThis includes all library dependencies required by the project code. See ",(0,o.jsx)(n.a,{href:"#project-environments",children:"Project Environments"}),"\nfor more information about the software environments supported by MLflow Projects, including\n",(0,o.jsx)(n.a,{href:"#project-conda-environments",children:"Conda environments"}),", ",(0,o.jsx)(n.a,{href:"#project-virtualenv-environments",children:"Virtualenv environments"}),",\nand ",(0,o.jsx)(n.a,{href:"#project-docker-container-environments",children:"Docker containers"}),"."]})})]}),"\n",(0,o.jsxs)(n.p,{children:["You can run any project from a Git URI or from a local directory using the ",(0,o.jsx)(n.code,{children:"mlflow run"}),"\ncommand-line tool, or the ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"})," Python API. These APIs also allow submitting the\nproject for remote execution on ",(0,o.jsx)(n.a,{href:"#databricks_execution",children:"Databricks"})," and\n",(0,o.jsx)(n.a,{href:"#kubernetes_execution",children:"Kubernetes"}),"."]}),"\n",(0,o.jsx)(n.admonition,{title:"important",type:"warning",children:(0,o.jsxs)(n.p,{children:["By default, MLflow uses a new, temporary working directory for Git projects.\nThis means that you should generally pass any file arguments to MLflow\nproject using absolute, not relative, paths. If your project declares its parameters, MLflow\nautomatically makes paths absolute for parameters of type ",(0,o.jsx)(n.code,{children:"path"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"specifying-projects",children:"Specifying Projects"}),"\n",(0,o.jsxs)(n.p,{children:["By default, any Git repository or local directory can be treated as an MLflow project; you can\ninvoke any bash or Python script contained in the directory as a project entry point. The\n",(0,o.jsx)(n.a,{href:"#project-directories",children:"Project Directories"})," section describes how MLflow interprets directories as projects."]}),"\n",(0,o.jsxs)(n.p,{children:["To provide additional control over a project's attributes, you can also include an ",(0,o.jsx)(n.a,{href:"#mlproject-file",children:"MLproject\nfile"})," in your project's repository or directory."]}),"\n",(0,o.jsxs)(n.p,{children:["Finally, MLflow projects allow you to specify the software ",(0,o.jsx)(n.a,{href:"#project-environments",children:"environment"}),"\nthat is used to execute project entry points."]}),"\n",(0,o.jsx)(n.h3,{id:"project-environments",children:"Project Environments"}),"\n",(0,o.jsx)(n.p,{children:"MLflow currently supports the following project environments: Virtualenv environment, conda environment,\nDocker container environment, and system environment."}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"project-virtualenv-environments",children:"Virtualenv Environment (preferred)"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:["Virtualenv environments support Python packages available on PyPI. When an MLflow Project\nspecifies a Virtualenv environment, MLflow will download the specified version of Python by using\n",(0,o.jsx)(n.code,{children:"pyenv"})," and create an isolated environment that contains the project dependencies using `virtualenv**,\nactivating it as the execution environment prior to running the project code."]}),(0,o.jsxs)(n.p,{children:["You can specify a Virtualenv environment for your MLflow Project by including a ",(0,o.jsx)(n.code,{children:"python_env"})," entry in your\n",(0,o.jsx)(n.code,{children:"MLproject"})," file. For details, see the ",(0,o.jsx)(n.a,{href:"#project-directories",children:"Project Directories"})," and ",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"Specifying an Environment"})," sections."]})]}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"project-docker-container-environments",children:"Docker container environment"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.docker.com/resources/what-container",children:"Docker containers"})," allow you to capture\nnon-Python dependencies such as Java libraries."]}),(0,o.jsxs)(n.p,{children:["When you run an MLflow project that specifies a Docker image, MLflow runs your image as is with the parameters\nspecified in your MLproject file. In this case you'll need to pre build your images with both environment\nand code to run it. To run the project with a new image that's based on your image and contains the project's\ncontents in the ",(0,o.jsx)(n.code,{children:"/mlflow/projects/code"})," directory, use the ",(0,o.jsx)(n.code,{children:"--build-image"})," flag when running ",(0,o.jsx)(n.code,{children:"mlflow run"}),"."]}),(0,o.jsxs)(n.p,{children:["Environment variables, such as ",(0,o.jsx)(n.code,{children:"MLFLOW_TRACKING_URI"}),", are propagated inside the Docker container\nduring project execution. Additionally,\n",(0,o.jsx)(n.a,{href:"/tracking/tracking-api/#organizing-runs-in-experiments",children:"runs and experiments"})," created by the project are saved to the\ntracking server specified by your ",(0,o.jsx)(n.a,{href:"/tracking/backend-stores#configure-backend-store",children:"tracking URI"}),". When running\nagainst a local tracking URI, MLflow mounts the host system's tracking directory\n(e.g., a local ",(0,o.jsx)(n.code,{children:"mlruns"})," directory) inside the container so that metrics, parameters, and\nartifacts logged during project execution are accessible afterwards."]}),(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/docker",children:"Dockerized Model Training with MLflow"})," for an example of an MLflow\nproject with a Docker environment."]}),(0,o.jsxs)(n.p,{children:["To specify a Docker container environment, you ",(0,o.jsx)(n.em,{children:"must"})," add an\n",(0,o.jsx)(n.a,{href:"#mlproject-file",children:"MLproject file"})," to your project. For information about specifying\na Docker container environment in an ",(0,o.jsx)(n.code,{children:"MLproject"})," file, see\n",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"Specifying an Environment"}),"."]})]}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"project-conda-environments",children:"Conda environment"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://conda.io/docs",children:"Conda"})," environments support\nboth Python packages and native libraries (e.g, CuDNN or Intel MKL). When an MLflow Project\nspecifies a Conda environment, it is activated before project code is run."]}),(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["By using conda, you're responsible for adhering to ",(0,o.jsx)(n.a,{href:"https://legal.anaconda.com/policies/en/?name=terms-of-service",children:"Anaconda's terms of service"}),"."]})}),(0,o.jsxs)(n.p,{children:["By default, MLflow uses the system path to find and run the ",(0,o.jsx)(n.code,{children:"conda"})," binary. You can use a\ndifferent Conda installation by setting the ",(0,o.jsx)(n.code,{children:"MLFLOW_CONDA_HOME"})," environment variable; in this\ncase, MLflow attempts to run the binary at ",(0,o.jsx)(n.code,{children:"$MLFLOW_CONDA_HOME/bin/conda"}),"."]}),(0,o.jsxs)(n.p,{children:["You can specify a Conda environment for your MLflow project by including a ",(0,o.jsx)(n.code,{children:"conda.yaml"}),"\nfile in the root of the project directory or by including a ",(0,o.jsx)(n.code,{children:"conda_env"})," entry in your\n",(0,o.jsx)(n.code,{children:"MLproject"})," file. For details, see the ",(0,o.jsx)(n.a,{href:"#project-directories",children:"Project Directories"})," and ",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"Specifying an Environment"})," sections."]}),(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"mlflow run"})," command supports running a conda environment project as a virtualenv environment project.\nTo do this, run ",(0,o.jsx)(n.code,{children:"mlflow run"})," with ",(0,o.jsx)(n.code,{children:"--env-manager virtualenv"}),":"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mlflow run /path/to/conda/project --env-manager virtualenv\n"})}),(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"When a conda environment project is executed as a virtualenv environment project,\nconda dependencies will be ignored and only pip dependencies will be installed."})})]}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"system-environment",children:"System environment"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["You can also run MLflow Projects directly in your current system environment. All of the\nproject's dependencies must be installed on your system prior to project execution. The system\nenvironment is supplied at runtime. It is not part of the MLflow Project's directory contents\nor ",(0,o.jsx)(n.code,{children:"MLproject"})," file. For information about using the system environment when running\na project, see the ",(0,o.jsx)(n.code,{children:"Environment"})," parameter description in the ",(0,o.jsx)(n.a,{href:"#running-projects",children:"Running Projects"})," section."]})})]}),"\n",(0,o.jsx)(n.h3,{id:"project-directories",children:"Project Directories"}),"\n",(0,o.jsxs)(n.p,{children:["When running an MLflow Project directory or repository that does ",(0,o.jsx)(n.em,{children:"not"})," contain an ",(0,o.jsx)(n.code,{children:"MLproject"}),"\nfile, MLflow uses the following conventions to determine the project's attributes:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"The project's name is the name of the directory."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.a,{href:"https://conda.io/docs/user-guide/tasks/manage-environments.html#create-env-file-manually",children:"Conda environment"}),"\nis specified in ",(0,o.jsx)(n.code,{children:"conda.yaml"}),", if present. If no ",(0,o.jsx)(n.code,{children:"conda.yaml"})," file is present, MLflow\nuses a Conda environment containing only Python (specifically, the latest Python available to\nConda) when running the project."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Any ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".sh"})," file in the project can be an entry point. MLflow uses Python\nto execute entry points with the ",(0,o.jsx)(n.code,{children:".py"})," extension, and it uses bash to execute entry points with\nthe ",(0,o.jsx)(n.code,{children:".sh"})," extension. For more information about specifying project entrypoints at runtime,\nsee ",(0,o.jsx)(n.a,{href:"#running-projects",children:"Running Projects"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["By default, entry points do not have any parameters when an ",(0,o.jsx)(n.code,{children:"MLproject"})," file is not included.\nParameters can be supplied at runtime via the ",(0,o.jsx)(n.code,{children:"mlflow run"})," CLI or the ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"}),"\nPython API. Runtime parameters are passed to the entry point on the command line using ",(0,o.jsx)(n.code,{children:"--key value"})," syntax.\nFor more information about running projects and with runtime parameters, see ",(0,o.jsx)(n.a,{href:"#running-projects",children:"Running Projects"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"mlproject-file",children:"MLproject File"}),"\n",(0,o.jsxs)(n.p,{children:["You can get more control over an MLflow Project by adding an ",(0,o.jsx)(n.code,{children:"MLproject"})," file, which is a text\nfile in YAML syntax, to the project's root directory. The following is an example of an\n",(0,o.jsx)(n.code,{children:"MLproject"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'name: My Project\n\npython_env: python_env.yaml\n# or\n# conda_env: my_env.yaml\n# or\n# docker_env:\n#    image:  mlflow-docker-example\n\nentry_points:\n  main:\n    parameters:\n      data_file: path\n      regularization: { type: float, default: 0.1 }\n    command: "python train.py -r {regularization} {data_file}"\n  validate:\n    parameters:\n      data_file: path\n    command: "python validate.py {data_file}"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The file can specify a name and ",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"a Conda or Docker environment"}),",\nas well as more detailed information about each entry point.\nSpecifically, each entry point defines a ",(0,o.jsx)(n.a,{href:"#mlproject-command-syntax",children:"command to run"})," and\n",(0,o.jsx)(n.a,{href:"#project_parameters",children:"parameters to pass to the command"})," (including data types)."]}),"\n",(0,o.jsx)(n.h4,{id:"mlproject-specify-environment",children:"Specifying an Environment"}),"\n",(0,o.jsxs)(n.p,{children:["This section describes how to specify Conda and Docker container environments in an ",(0,o.jsx)(n.code,{children:"MLproject"})," file.\n",(0,o.jsx)(n.code,{children:"MLproject"})," files cannot specify ",(0,o.jsx)(n.em,{children:"both"})," a Conda environment and a Docker environment."]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"virtualenv-environment",children:"Virtualenv environment"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:["Include a top-level ",(0,o.jsx)(n.code,{children:"python_env"})," entry in the ",(0,o.jsx)(n.code,{children:"MLproject"})," file.\nThe value of this entry must be a ",(0,o.jsx)(n.em,{children:"relative"})," path to a ",(0,o.jsx)(n.code,{children:"python_env"})," YAML file\nwithin the MLflow project's directory. The following is an example ",(0,o.jsx)(n.code,{children:"MLProject"}),"\nfile with a ",(0,o.jsx)(n.code,{children:"python_env"})," definition:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"python_env: files/config/python_env.yaml\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"python_env"})," refers to an environment file located at\n",(0,o.jsx)(n.code,{children:"<MLFLOW_PROJECT_DIRECTORY>/files/config/python_env.yaml"}),", where\n",(0,o.jsx)(n.code,{children:"<MLFLOW_PROJECT_DIRECTORY>"})," is the path to the MLflow project's root directory."]}),(0,o.jsxs)(n.p,{children:["The following is an example of a ",(0,o.jsx)(n.code,{children:"python_env.yaml"})," file:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Python version required to run the project.\npython: "3.8.15"\n# Dependencies required to build packages. This field is optional.\nbuild_dependencies:\n  - pip\n  - setuptools\n  - wheel==0.37.1\n# Dependencies required to run the project.\ndependencies:\n  - mlflow==2.3\n  - scikit-learn==1.0.2\n'})})]}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"conda-environment",children:"Conda environment"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:["Include a top-level ",(0,o.jsx)(n.code,{children:"conda_env"})," entry in the ",(0,o.jsx)(n.code,{children:"MLproject"})," file.\nThe value of this entry must be a ",(0,o.jsx)(n.em,{children:"relative"})," path to a\n",(0,o.jsx)(n.a,{href:"https://conda.io/docs/user-guide/tasks/manage-environments.html#create-env-file-manually",children:"Conda environment YAML file"}),"\nwithin the MLflow project's directory. In the following example:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"conda_env: files/config/conda_environment.yaml\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"conda_env"})," refers to an environment file located at\n",(0,o.jsx)(n.code,{children:"<MLFLOW_PROJECT_DIRECTORY>/files/config/conda_environment.yaml"}),", where\n",(0,o.jsx)(n.code,{children:"<MLFLOW_PROJECT_DIRECTORY>"})," is the path to the MLflow project's root directory."]})]}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"docker-container-environment",children:"Docker container environment"})}),(0,o.jsxs)("dd",{children:[(0,o.jsxs)(n.p,{children:["Include a top-level ",(0,o.jsx)(n.code,{children:"docker_env"})," entry in the ",(0,o.jsx)(n.code,{children:"MLproject"})," file. The value of this entry must be the name\nof a Docker image that is accessible on the system executing the project; this image name\nmay include a registry path and tags. Here are a couple of examples."]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 1: Image without a registry path"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"docker_env:\n  image: mlflow-docker-example-environment\n"})}),(0,o.jsxs)(n.p,{children:["In this example, ",(0,o.jsx)(n.code,{children:"docker_env"})," refers to the Docker image with name\n",(0,o.jsx)(n.code,{children:"mlflow-docker-example-environment"})," and default tag ",(0,o.jsx)(n.code,{children:"latest"}),". Because no registry path is\nspecified, Docker searches for this image on the system that runs the MLflow project. If the\nimage is not found, Docker attempts to pull it from ",(0,o.jsx)(n.a,{href:"https://hub.docker.com/",children:"DockerHub"}),"."]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 2: Mounting volumes and specifying environment variables"})}),(0,o.jsxs)(n.p,{children:["You can also specify local volumes to mount in the docker image (as you normally would with\nDocker's ",(0,o.jsx)(n.code,{children:"-v"})," option), and additional environment variables (as per Docker's ",(0,o.jsx)(n.code,{children:"-e"})," option).\nEnvironment variables can either be copied from the host system's environment variables, or\nspecified as new variables for the Docker environment. The ",(0,o.jsx)(n.code,{children:"environment"})," field should be a list.\nElements in this list can either be lists of two strings (for defining a new variable) or single\nstrings (for copying variables from the host system). For example:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'docker_env:\n  image: mlflow-docker-example-environment\n  volumes: ["/local/path:/container/mount/path"]\n  environment: [["NEW_ENV_VAR", "new_var_value"], "VAR_TO_COPY_FROM_HOST_ENVIRONMENT"]\n'})}),(0,o.jsx)(n.p,{children:"In this example our docker container will have one additional local volume mounted, and two additional\nenvironment variables: one newly-defined, and one copied from the host system."}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 3: Image in a remote registry"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"docker_env:\n  image: 012345678910.dkr.ecr.us-west-2.amazonaws.com/mlflow-docker-example-environment:7.0\n"})}),(0,o.jsxs)(n.p,{children:["In this example, ",(0,o.jsx)(n.code,{children:"docker_env"})," refers to the Docker image with name\n",(0,o.jsx)(n.code,{children:"mlflow-docker-example-environment"})," and tag ",(0,o.jsx)(n.code,{children:"7.0"})," in the Docker registry with path\n",(0,o.jsx)(n.code,{children:"012345678910.dkr.ecr.us-west-2.amazonaws.com"}),", which corresponds to an\n",(0,o.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html",children:"Amazon ECR registry"}),".\nWhen the MLflow project is run, Docker attempts to pull the image from the specified registry.\nThe system executing the MLflow project must have credentials to pull this image from  the specified registry."]}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example 4: Build a new image"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"docker_env:\n  image: python:3.8\n"})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mlflow run ... --build-image\n"})}),(0,o.jsxs)(n.p,{children:["To build a new image that's based on the specified image and files contained in\nthe project directory, use the ",(0,o.jsx)(n.code,{children:"--build-image"})," argument. In the above example, the image\n",(0,o.jsx)(n.code,{children:"python:3.8"})," is pulled from Docker Hub if it's not present locally, and a new image is built\nbased on it. The project is executed in a container created from this image."]})]})]}),"\n",(0,o.jsx)(n.h4,{id:"mlproject-command-syntax",children:"Command Syntax"}),"\n",(0,o.jsxs)(n.p,{children:["When specifying an entry point in an ",(0,o.jsx)(n.code,{children:"MLproject"})," file, the command can be any string in Python\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/2/library/string.html#formatstrings",children:"format string syntax"}),".\nAll of the parameters declared in the entry point's ",(0,o.jsx)(n.code,{children:"parameters"})," field are passed into this\nstring for substitution. If you call the project with additional parameters ",(0,o.jsx)(n.em,{children:"not"})," listed in the\n",(0,o.jsx)(n.code,{children:"parameters"})," field, MLflow passes them using ",(0,o.jsx)(n.code,{children:"--key value"})," syntax, so you can use the\n",(0,o.jsx)(n.code,{children:"MLproject"})," file to declare types and defaults for just a subset of your parameters."]}),"\n",(0,o.jsxs)(n.p,{children:["Before substituting parameters in the command, MLflow escapes them using the Python\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/shlex.html#shlex.quote",children:"shlex.quote"})," function, so you don't\nneed to worry about adding quotes inside your command field."]}),"\n",(0,o.jsx)(n.h4,{id:"project_parameters",children:"Specifying Parameters"}),"\n",(0,o.jsx)(n.p,{children:"MLflow allows specifying a data type and default value for each parameter. You can specify just the\ndata type by writing:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"parameter_name: data_type\n"})}),"\n",(0,o.jsx)(n.p,{children:"in your YAML file, or add a default value as well using one of the following syntaxes (which are\nequivalent in YAML):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"parameter_name: {type: data_type, default: value}  # Short syntax\n\nparameter_name:     # Long syntax\n  type: data_type\n  default: value\n"})}),"\n",(0,o.jsxs)(n.p,{children:["MLflow supports four parameter types, some of which it treats specially (for example, downloading\ndata to local files). Any undeclared parameters are treated as ",(0,o.jsx)(n.code,{children:"string"}),". The parameter types are:"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"string",children:"string"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"A text string."})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"float",children:"float"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"A real number. MLflow validates that the parameter is a number."})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"path",children:"path"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["A path on the local file system. MLflow converts any relative ",(0,o.jsx)(n.code,{children:"path"})," parameters to absolute paths.\nMLflow also downloads any paths passed as distributed storage URIs (",(0,o.jsx)(n.code,{children:"s3://"}),", ",(0,o.jsx)(n.code,{children:"dbfs://"}),", ",(0,o.jsx)(n.code,{children:"gs://"}),", etc.)\nto local files. Use this type for programs that can only read local files."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"uri",children:"uri"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["A URI for data either in a local or distributed storage system. MLflow converts\nrelative paths to absolute paths, as in the ",(0,o.jsx)(n.code,{children:"path"})," type. Use this type for programs\nthat know how to read from distributed storage (e.g., programs that use Spark)."]})})]}),"\n",(0,o.jsx)(n.h2,{id:"running-projects",children:"Running Projects"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow provides two ways to run projects: the ",(0,o.jsx)(n.code,{children:"mlflow run"})," ",(0,o.jsx)(s.A,{to:"/api_reference/cli.html",target:"_blank",children:"command-line tool"}),", or\nthe ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"})," Python API. Both tools take the following parameters:"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"project-uri",children:"Project URI"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["A directory on the local file system or a Git repository path,\nspecified as a URI of the form ",(0,o.jsx)(n.code,{children:"https://<repo>"})," (to use HTTPS) or ",(0,o.jsx)(n.code,{children:"user@host:path"}),"\n(to use Git over SSH). To run against an MLproject file located in a subdirectory of the project,\nadd a '#' to the end of the URI argument, followed by the relative path from the project's root directory\nto the subdirectory containing the desired project."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"project-version",children:"Project Version"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"For Git-based projects, the commit hash or branch name in the Git repository."})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"entry-point",children:"Entry Point"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["The name of the entry point, which defaults to ",(0,o.jsx)(n.code,{children:"main"}),". You can use any\nentry point named in the ",(0,o.jsx)(n.code,{children:"MLproject"})," file, or any ",(0,o.jsx)(n.code,{children:".py"})," or ",(0,o.jsx)(n.code,{children:".sh"})," file in the project,\ngiven as a path from the project root (for example, ",(0,o.jsx)(n.code,{children:"src/test.py"}),")."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"parameters",children:"Parameters"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["Key-value parameters. Any parameters with\n",(0,o.jsx)(n.a,{href:"#project_parameters",children:"declared types"})," are validated and transformed if needed."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"deployment-mode",children:"Deployment Mode"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Both the command-line and API let you ",(0,o.jsx)(n.a,{href:"#databricks_execution",children:"launch projects remotely"}),"\nin a ",(0,o.jsx)(n.a,{href:"https://databricks.com",children:"Databricks"})," environment. This includes setting cluster\nparameters such as a VM type. Of course, you can also run projects on any other computing\ninfrastructure of your choice using the local version of the ",(0,o.jsx)(n.code,{children:"mlflow run"})," command (for\nexample, submit a script that does ",(0,o.jsx)(n.code,{children:"mlflow run"})," to a standard job queueing system)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["You can also launch projects remotely on ",(0,o.jsx)(n.a,{href:"https://Kubernetes.io/",children:"Kubernetes"})," clusters\nusing the ",(0,o.jsx)(n.code,{children:"mlflow run"})," CLI (see ",(0,o.jsx)(n.a,{href:"#kubernetes_execution",children:"Run an MLflow Project on Kubernetes"}),")."]}),"\n"]}),"\n"]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"environment-1",children:"Environment"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["By default, MLflow Projects are run in the environment specified by the project directory\nor the ",(0,o.jsx)(n.code,{children:"MLproject"})," file (see ",(0,o.jsx)(n.a,{href:"#project-environments",children:"Specifying Project Environments"}),").\nYou can ignore a project's specified environment and run the project in the current\nsystem environment by supplying the ",(0,o.jsx)(n.code,{children:"--env-manager=local"})," flag, but this can lead to\nunexpected results if there are dependency mismatches between the project environment and\nthe current system environment."]})})]}),"\n",(0,o.jsxs)(n.p,{children:["For example, the tutorial creates and publishes an MLflow Project that trains a linear model. The\nproject is also published on GitHub at ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow-example",children:"https://github.com/mlflow/mlflow-example"}),". To run\nthis project:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mlflow run git@github.com:mlflow/mlflow-example.git -P alpha=0.5\n"})}),"\n",(0,o.jsx)(n.p,{children:"There are also additional options for disabling the creation of a Conda environment, which can be\nuseful if you quickly want to test a project in your existing shell environment."}),"\n",(0,o.jsx)(n.h3,{id:"databricks_execution",children:"Run an MLflow Project on Databricks"}),"\n",(0,o.jsxs)(n.p,{children:["You can run MLflow Projects remotely on Databricks. To use this feature, you must have an enterprise\nDatabricks account and you must have set up the\n",(0,o.jsx)(n.a,{href:"https://github.com/databricks/databricks-cli",children:"Databricks CLI"}),". Find detailed instructions\nin the Databricks docs (",(0,o.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/azure/databricks/applications/mlflow/projects#run-an-mlflow-project",children:"Azure Databricks"}),",\n",(0,o.jsx)(n.a,{href:"https://docs.databricks.com/applications/mlflow/projects.html",children:"Databricks on AWS"}),")."]}),"\n",(0,o.jsx)(n.h3,{id:"kubernetes_execution",children:"Run an MLflow Project on Kubernetes"}),"\n",(0,o.jsxs)(n.p,{children:["You can run MLflow Projects with ",(0,o.jsx)(n.a,{href:"#project-docker-container-environments",children:"Docker environments"}),"\non Kubernetes. The following sections provide an overview of the feature, including a simple\nProject execution guide with examples."]}),"\n",(0,o.jsxs)(n.p,{children:["To see this feature in action, you can also refer to the\n",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/docker",children:"Docker example"}),", which includes\nthe required Kubernetes backend configuration (",(0,o.jsx)(n.code,{children:"kubernetes_backend.json"}),") and\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec",children:"Kubernetes Job Spec"}),"\n(",(0,o.jsx)(n.code,{children:"kubernetes_job_template.yaml"}),") files."]}),"\n",(0,o.jsx)(n.h4,{id:"how-it-works",children:"How it works"}),"\n",(0,o.jsxs)(n.p,{children:["When you run an MLflow Project on Kubernetes, MLflow constructs a new Docker image\ncontaining the Project's contents; this image inherits from the Project's\n",(0,o.jsx)(n.a,{href:"#project-docker-container-environments",children:"Docker environment"}),". MLflow then pushes the new\nProject image to your specified Docker registry and starts a\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",children:"Kubernetes Job"}),"\non your specified Kubernetes cluster. This Kubernetes Job downloads the Project image and starts\na corresponding Docker container. Finally, the container invokes your Project's\n",(0,o.jsx)(n.a,{href:"#running-projects",children:"entry point"}),", logging parameters, tags, metrics, and artifacts to your\n",(0,o.jsx)(n.a,{href:"/tracking#tracking_server",children:"MLflow tracking server"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"execution-guide",children:"Execution guide"}),"\n",(0,o.jsx)(n.p,{children:"You can run your MLflow Project on Kubernetes by following these steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Add a Docker environment to your MLflow Project, if one does not already exist. For\nreference, see ",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"Specifying an Environment"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Create a backend configuration JSON file with the following entries:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"kube-context"}),"\nThe ",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context",children:"Kubernetes context"}),"\nwhere MLflow will run the job. If not provided, MLflow will use the current context.\nIf no context is available, MLflow will assume it is running in a Kubernetes cluster\nand it will use the Kubernetes service account running the current pod ('in-cluster' configuration)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"repository-uri"}),"\nThe URI of the docker repository where the Project execution Docker image will be uploaded\n(pushed). Your Kubernetes cluster must have access to this repository in order to run your\nMLflow Project."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"kube-job-template-path"}),"\nThe path to a YAML configuration file for your Kubernetes Job - a\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec",children:"Kubernetes Job Spec"}),".\nMLflow reads the Job Spec and replaces certain fields to facilitate job execution and\nmonitoring; MLflow does not modify the original template file. For more information about\nwriting Kubernetes Job Spec templates for use with MLflow, see the\n",(0,o.jsx)(n.a,{href:"#kubernetes_execution_job_templates",children:"Job Templates"})," section."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example Kubernetes backend configuration"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "kube-context": "docker-for-desktop",\n  "repository-uri": "username/mlflow-kubernetes-example",\n  "kube-job-template-path": "/Users/username/path/to/kubernetes_job_template.yaml"\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"If necessary, obtain credentials to access your Project's Docker and Kubernetes resources, including:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.a,{href:"#mlproject-specify-environment",children:"Docker environment image"})," specified in the MLproject\nfile."]}),"\n",(0,o.jsxs)(n.li,{children:["The Docker repository referenced by ",(0,o.jsx)(n.code,{children:"repository-uri"})," in your backend configuration file."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#context",children:"Kubernetes context"}),"\nreferenced by ",(0,o.jsx)(n.code,{children:"kube-context"})," in your backend configuration file."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["MLflow expects these resources to be accessible via the\n",(0,o.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/commandline/cli/",children:"docker"})," and\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/reference/kubectl/kubectl/",children:"kubectl"})," CLIs before running the Project."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Run the Project using the MLflow Projects CLI or ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run",children:"Python API"}),",\nspecifying your Project URI and the path to your backend configuration file. For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:" mlflow run <project_uri> --backend kubernetes --backend-config examples/docker/kubernetes_config.json\n"})}),"\n",(0,o.jsxs)(n.p,{children:["where ",(0,o.jsx)(n.code,{children:"<project_uri>"})," is a Git repository URI or a folder."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"kubernetes_execution_job_templates",children:"Job Templates"}),"\n",(0,o.jsxs)(n.p,{children:["MLflow executes Projects on Kubernetes by creating\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/",children:"Kubernetes Job resources"}),".\nMLflow creates a Kubernetes Job for an MLflow Project by reading a user-specified\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec",children:"Job Spec"}),".\nWhen MLflow reads a Job Spec, it formats the following fields:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"metadata.name"})," Replaced with a string containing the name of the MLflow Project and the time\nof Project execution"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"spec.template.spec.container[0].name"})," Replaced with the name of the MLflow Project"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"spec.template.spec.container[0].image"})," Replaced with the URI of the Docker image created during\nProject execution. This URI includes the Docker image's digest hash."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"spec.template.spec.container[0].command"})," Replaced with the Project entry point command\nspecified when executing the MLflow Project."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The following example shows a simple Kubernetes Job Spec that is compatible with MLflow Project\nexecution. Replaced fields are indicated using bracketed text."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example Kubernetes Job Spec"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: "{replaced with MLflow Project name}"\n  namespace: mlflow\nspec:\n  ttlSecondsAfterFinished: 100\n  backoffLimit: 0\n  template:\n    spec:\n      containers:\n        - name: "{replaced with MLflow Project name}"\n          image: "{replaced with URI of Docker image created during Project execution}"\n          command: ["{replaced with MLflow Project entry point command}"]\n          env: ["{appended with MLFLOW_TRACKING_URI, MLFLOW_RUN_ID and MLFLOW_EXPERIMENT_ID}"]\n          resources:\n            limits:\n              memory: 512Mi\n            requests:\n              memory: 256Mi\n      restartPolicy: Never\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"container.name"}),", ",(0,o.jsx)(n.code,{children:"container.image"}),", and ",(0,o.jsx)(n.code,{children:"container.command"})," fields are only replaced for\nthe ",(0,o.jsx)(n.em,{children:"first"})," container defined in the Job Spec. Further, the ",(0,o.jsx)(n.code,{children:"MLFLOW_TRACKING_URI"}),", ",(0,o.jsx)(n.code,{children:"MLFLOW_RUN_ID"}),"\nand ",(0,o.jsx)(n.code,{children:"MLFLOW_EXPERIMENT_ID"})," are appended to ",(0,o.jsx)(n.code,{children:"container.env"}),". Use ",(0,o.jsx)(n.code,{children:"KUBE_MLFLOW_TRACKING_URI"})," to\npass a different tracking URI to the job container from the standard ",(0,o.jsx)(n.code,{children:"MLFLOW_TRACKING_URI"}),". All\nsubsequent container definitions are applied without modification."]}),"\n",(0,o.jsx)(n.h2,{id:"iterating-quickly",children:"Iterating Quickly"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to rapidly develop a project, we recommend creating an ",(0,o.jsx)(n.code,{children:"MLproject"})," file with your\nmain program specified as the ",(0,o.jsx)(n.code,{children:"main"})," entry point, and running it with ",(0,o.jsx)(n.code,{children:"mlflow run ."}),".\nTo avoid having to write parameters repeatedly, you can add default parameters in your ",(0,o.jsx)(n.code,{children:"MLproject"})," file."]}),"\n",(0,o.jsx)(n.h2,{id:"building-multistep-workflows",children:"Building Multistep Workflows"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"})," API, combined with ",(0,o.jsx)(l.B,{fn:"mlflow.client",children:"mlflow.client"}),",\nmakes it possible to build multi-step workflows with separate projects (or entry points in the same project)\nas the individual steps. Each call to ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"})," returns a run object, that you can use\nwith ",(0,o.jsx)(l.B,{fn:"mlflow.client",children:"mlflow.client"})," to determine when the run has ended and get its output\nartifacts. These artifacts can then be passed into another step that takes ",(0,o.jsx)(n.code,{children:"path"})," or ",(0,o.jsx)(n.code,{children:"uri"})," parameters.\nYou can coordinate all of the workflow in a single Python program that looks at the results of each\nstep and decides what to submit next using custom code. Some example use cases for multi-step workflows include:"]}),"\n",(0,o.jsxs)("dl",{children:[(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"modularizing-your-data-science-code",children:"Modularizing Your Data Science Code"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"Different users can publish reusable steps for data featurization, training, validation, and so on,\nthat other users or team can run in their workflows. Because MLflow supports Git versioning,\nanother team can lock their workflow to a specific version of a project, or upgrade to a new one\non their own schedule."})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"hyperparameter-tuning",children:"Hyperparameter Tuning"})}),(0,o.jsx)("dd",{children:(0,o.jsxs)(n.p,{children:["Using ",(0,o.jsx)(l.B,{fn:"mlflow.projects.run"})," you can launch multiple runs in parallel either on the\nlocal machine or on a cloud platform like Databricks. Your driver program can then inspect the\nmetrics from each run in real time to cancel runs, launch new ones, or select the best performing\nrun on a target metric."]})}),(0,o.jsx)("dt",{children:(0,o.jsx)(n.h4,{id:"cross-validation",children:"Cross-validation"})}),(0,o.jsx)("dd",{children:(0,o.jsx)(n.p,{children:"Sometimes you want to run the same training code on different random splits of training and validation\ndata. With MLflow Projects, you can package the project in a way that allows this, for example, by\ntaking a random seed for the train/validation split as a parameter, or by calling another project\nfirst that can split the input data."})})]}),"\n",(0,o.jsxs)(n.p,{children:["For an example of how to construct such a multistep workflow, see the MLflow ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/tree/master/examples/multistep_workflow",children:"Multistep Workflow Example project"}),"."]})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},61096:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(71021);const o={tableOfContentsInline:"tableOfContentsInline_prmo"};var i=t(74848);function s(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:s}=e;return(0,i.jsx)("div",{className:o.tableOfContentsInline,children:(0,i.jsx)(r.A,{toc:n,minHeadingLevel:t,maxHeadingLevel:s,className:"table-of-contents",linkClassName:null})})}},67756:(e,n,t)=>{t.d(n,{B:()=>a});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(29030),i=t(56289),s=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(r[e])return e}return null};function a(e){let{fn:n,children:t}=e;const a=l(n);if(!a)return(0,s.jsx)(s.Fragment,{children:t});const c=(0,o.Ay)(`/${r[a]}#${n}`);return(0,s.jsx)(i.A,{to:c,target:"_blank",children:t??(0,s.jsxs)("code",{children:[n,"()"]})})}},71021:(e,n,t)=>{t.d(n,{A:()=>u});var r=t(96540),o=t(53115);function i(e){const n=e.map((e=>({...e,parentIndex:-1,children:[]}))),t=Array(7).fill(-1);n.forEach(((e,n)=>{const r=t.slice(2,e.level);e.parentIndex=Math.max(...r),t[e.level]=n}));const r=[];return n.forEach((e=>{const{parentIndex:t,...o}=e;t>=0?n[t].children.push(o):r.push(o)})),r}function s(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:r}=e;return n.flatMap((e=>{const n=s({toc:e.children,minHeadingLevel:t,maxHeadingLevel:r});return function(e){return e.level>=t&&e.level<=r}(e)?[{...e,children:n}]:n}))}function l(e){const n=e.getBoundingClientRect();return n.top===n.bottom?l(e.parentNode):n}function a(e,n){let{anchorTopOffset:t}=n;const r=e.find((e=>l(e).top>=t));if(r){return function(e){return e.top>0&&e.bottom<window.innerHeight/2}(l(r))?r:e[e.indexOf(r)-1]??null}return e[e.length-1]??null}function c(){const e=(0,r.useRef)(0),{navbar:{hideOnScroll:n}}=(0,o.p)();return(0,r.useEffect)((()=>{e.current=n?0:document.querySelector(".navbar").clientHeight}),[n]),e}function d(e){const n=(0,r.useRef)(void 0),t=c();(0,r.useEffect)((()=>{if(!e)return()=>{};const{linkClassName:r,linkActiveClassName:o,minHeadingLevel:i,maxHeadingLevel:s}=e;function l(){const e=function(e){return Array.from(document.getElementsByClassName(e))}(r),l=function(e){let{minHeadingLevel:n,maxHeadingLevel:t}=e;const r=[];for(let o=n;o<=t;o+=1)r.push(`h${o}.anchor`);return Array.from(document.querySelectorAll(r.join()))}({minHeadingLevel:i,maxHeadingLevel:s}),c=a(l,{anchorTopOffset:t.current}),d=e.find((e=>c&&c.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)));e.forEach((e=>{!function(e,t){t?(n.current&&n.current!==e&&n.current.classList.remove(o),e.classList.add(o),n.current=e):e.classList.remove(o)}(e,e===d)}))}return document.addEventListener("scroll",l),document.addEventListener("resize",l),l(),()=>{document.removeEventListener("scroll",l),document.removeEventListener("resize",l)}}),[e,t])}var h=t(56289),p=t(74848);function m(e){let{toc:n,className:t,linkClassName:r,isChild:o}=e;return n.length?(0,p.jsx)("ul",{className:o?void 0:t,children:n.map((e=>(0,p.jsxs)("li",{children:[(0,p.jsx)(h.A,{to:`#${e.id}`,className:r??void 0,dangerouslySetInnerHTML:{__html:e.value}}),(0,p.jsx)(m,{isChild:!0,toc:e.children,className:t,linkClassName:r})]},e.id)))}):null}const f=r.memo(m);function u(e){let{toc:n,className:t="table-of-contents table-of-contents__left-border",linkClassName:l="table-of-contents__link",linkActiveClassName:a,minHeadingLevel:c,maxHeadingLevel:h,...m}=e;const u=(0,o.p)(),j=c??u.tableOfContents.minHeadingLevel,x=h??u.tableOfContents.maxHeadingLevel,y=function(e){let{toc:n,minHeadingLevel:t,maxHeadingLevel:o}=e;return(0,r.useMemo)((()=>s({toc:i(n),minHeadingLevel:t,maxHeadingLevel:o})),[n,t,o])}({toc:n,minHeadingLevel:j,maxHeadingLevel:x});return d((0,r.useMemo)((()=>{if(l&&a)return{linkClassName:l,linkActiveClassName:a,minHeadingLevel:j,maxHeadingLevel:x}}),[l,a,j,x])),(0,p.jsx)(f,{toc:y,className:t,linkClassName:l,...m})}}}]);