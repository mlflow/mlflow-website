"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9833],{24097:(e,n,i)=>{i.d(n,{A:()=>o});const o=i.p+"assets/images/logged_model_autolog_traces-b7d819cc102de467745069cc054c4abc.png"},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var o=i(96540);const t={},l=o.createContext(t);function a(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(l.Provider,{value:n},e.children)}},35792:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"prompt-version-mgmt/version-tracking/index","title":"Version Tracking for GenAI Applications","description":"Understand how MLflow enables version tracking for your complete GenAI applications using LoggedModels, linking code, configurations, evaluations, and traces.","source":"@site/docs/genai/prompt-version-mgmt/version-tracking/index.mdx","sourceDirName":"prompt-version-mgmt/version-tracking","slug":"/prompt-version-mgmt/version-tracking/","permalink":"/docs/latest/genai/prompt-version-mgmt/version-tracking/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Version Tracking for GenAI Applications","description":"Understand how MLflow enables version tracking for your complete GenAI applications using LoggedModels, linking code, configurations, evaluations, and traces.","last_update":{"date":"2025-05-23T00:00:00.000Z"}},"sidebar":"genAISidebar","previous":{"title":"LLM RAG Evaluation with MLflow using llama2-as-judge Example Notebook","permalink":"/docs/latest/genai/eval-monitor/notebooks/rag-evaluation-llama2"},"next":{"title":"Quickstart","permalink":"/docs/latest/genai/prompt-version-mgmt/version-tracking/quickstart"}}');var t=i(74848),l=i(28453),a=i(49374);const r={title:"Version Tracking for GenAI Applications",description:"Understand how MLflow enables version tracking for your complete GenAI applications using LoggedModels, linking code, configurations, evaluations, and traces.",last_update:{date:new Date("2025-05-23T00:00:00.000Z")}},s="Version Tracking for GenAI Applications",c={},p=[{value:"Why Version Your GenAI Application?",id:"why-version-your-genai-application",level:2},{value:"How <APILink>LoggedModel</APILink> Works for Versioning",id:"how-loggedmodel-works-for-versioning",level:2},{value:"Quick Start Example: Versioning an Agent&#39;s Configuration",id:"quick-start-example-versioning-an-agents-configuration",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"version-tracking-for-genai-applications",children:"Version Tracking for GenAI Applications"})}),"\n",(0,t.jsxs)(n.p,{children:["MLflow's ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(a.B,{fn:"mlflow.entities.LoggedModel",children:"LoggedModel"})})," provides a central, versioned representation of your entire GenAI application, including its code, configurations, and associated artifacts like evaluation results and traces. This enables you to effectively manage the lifecycle of complex GenAI systems, ensuring reproducibility, facilitating debugging, and enabling confident deployment of the best-performing application versions."]}),"\n",(0,t.jsxs)(n.p,{children:["This page introduces the core concepts of version tracking with ",(0,t.jsx)(n.code,{children:"LoggedModel"}),". Subsequent pages in this section will detail specific methods for creating, managing, and utilizing these application versions."]}),"\n",(0,t.jsx)(n.h2,{id:"why-version-your-genai-application",children:"Why Version Your GenAI Application?"}),"\n",(0,t.jsxs)(n.p,{children:["GenAI applications are composite systems with many moving parts: code (agent logic, tools), configurations (LLM parameters, retrieval settings), and data. Iterating on these components without systematic versioning leads to significant challenges. MLflow ",(0,t.jsx)(n.code,{children:"LoggedModel"})," helps you overcome these by addressing:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Reproducibility"}),": Ensures you can recreate any previous application state."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Challenge"}),": Without versioning, it's hard to know which combination of code and configurations produced a specific result, making it difficult to reproduce successes or failures."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": ",(0,t.jsx)(n.code,{children:"LoggedModel"})," captures or links to the exact code (e.g., Git commit hash) and configurations used for a specific version, ensuring you can always reconstruct it."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Debugging Regressions"}),": Simplifies pinpointing changes that cause issues."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Challenge"}),": When application quality drops, identifying which change (in code, configurations, etc.) caused the regression can be a time-consuming and frustrating process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": By tracking ",(0,t.jsx)(n.code,{children:"LoggedModel"})," versions, you can easily compare a problematic version against a known good version. This involves examining differences in their linked code (via commit hashes), configurations, evaluation results, and traces to isolate the changes that led to the regression."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Objective Comparison and Deployment"}),": Enables data-driven decisions for selecting the best version."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Challenge"}),": Choosing which application version to deploy can be subjective without a clear way to compare performance based on consistent metrics."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": ",(0,t.jsx)(n.code,{children:"LoggedModel"})," versions can be systematically evaluated (e.g., using ",(0,t.jsx)(n.code,{children:"mlflow.genai.evaluate()"}),"). This allows you to compare metrics like quality scores, cost, and latency side-by-side, ensuring you deploy the objectively best version."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Auditability and Governance"}),": Provides a clear record of what was deployed and when."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Challenge"}),": For compliance or when investigating production incidents, you need to know the exact state of the application that was running at a specific time."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Solution"}),": Each ",(0,t.jsx)(n.code,{children:"LoggedModel"})," version serves as an auditable record, linking to the specific code and configurations, and can be associated with traces from its execution."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"how-loggedmodel-works-for-versioning",children:["How ",(0,t.jsx)(a.B,{fn:"mlflow.entities.LoggedModel",children:"LoggedModel"})," Works for Versioning"]}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"LoggedModel"})," in MLflow is not just for traditional machine learning models; it's adapted to be the core of GenAI application versioning. Each distinct state of your application that you want to evaluate, deploy, or refer back to can be captured as a new version of a ",(0,t.jsx)(n.code,{children:"LoggedModel"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Characteristics"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Central Versioned Entity"}),": Represents a specific version of your GenAI application or a significant, independently versionable component."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Captures Application State"}),": A ",(0,t.jsx)(n.code,{children:"LoggedModel"})," version records a particular configuration of code, parameters, and other dependencies."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flexible Code Management"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metadata Hub (Primary)"}),": Most commonly, ",(0,t.jsx)(n.code,{children:"LoggedModel"})," links to externally managed code (e.g., via a Git commit hash), acting as a metadata record for that code version along with its associated configurations and MLflow entities (evaluations, traces)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Packaged Artifacts (Optional)"}),": For specific deployment needs (like Databricks Model Serving), ",(0,t.jsx)(n.code,{children:"LoggedModel"})," can also bundle the application code and dependencies directly."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lifecycle Tracking"}),": The history of ",(0,t.jsx)(n.code,{children:"LoggedModel"})," versions allows you to track the application's evolution, compare performance, and manage its lifecycle from development to production."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start-example-versioning-an-agents-configuration",children:"Quick Start Example: Versioning an Agent's Configuration"}),"\n",(0,t.jsxs)(n.admonition,{title:"MLflow Version Requirement",type:"important",children:[(0,t.jsxs)(n.p,{children:["To use the ",(0,t.jsx)(n.code,{children:"mlflow.set_active_model()"})," functionality demonstrated below for version tracking, ",(0,t.jsx)(n.strong,{children:"MLflow 3 is required."})," You can install it using:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'pip install --upgrade "mlflow>=3.1"\n'})}),(0,t.jsxs)(n.p,{children:["To connect for logging to Databricks-hosted MLflow Tracking, use ",(0,t.jsx)(n.code,{children:'pip install --upgrade "mlflow[databricks]>=3.1"'})," instead."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Here's how to quickly version your GenAI agent and link its traces, which might be generated during interactive development or ",(0,t.jsx)(n.a,{href:"/genai/eval-monitor",children:"evaluation"}),". This example uses ",(0,t.jsx)(n.code,{children:"mlflow.set_active_model()"})," with the current git commit hash to establish a unique version context, ensuring that any generated traces are automatically associated with this specific code version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport openai\nimport subprocess\n\n# Configure OpenAI API Key (replace with your actual key)\nos.environ["OPENAI_API_KEY"] = "your-api-key-here"\n\n# Configure MLflow Tracking\nmlflow.set_experiment("my-genai-app")\n\n# Get current git commit hash\ngit_commit = (\n    subprocess.check_output(["git", "rev-parse", "HEAD"]).decode("ascii").strip()[:8]\n)\n\n# Define your application version using the git commit\napp_name = "customer_support_agent"\nlogged_model_name = f"{app_name}-{git_commit}"\n\n# Set the active model context - traces will be linked to this\nmlflow.set_active_model(name=logged_model_name)\n\n# Enable autologging for OpenAI, which automatically logs traces\nmlflow.openai.autolog()\n\n# Define and test your agent code - traces are automatically linked\nclient = openai.OpenAI()\nquestions = [\n    "How do I reset my password?",\n    "What are your business hours?",\n    "Can I get a refund for my last order?",\n    "Where can I find the user manual for product model number 15869?",\n    "I\'m having trouble with the payment page, can you help?",\n]\nfor question in questions:\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=[{"role": "user", "content": question}],\n        temperature=0.7,\n        max_tokens=1000,\n    )\n'})}),"\n",(0,t.jsx)(n.p,{children:"In this example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mlflow.openai.autolog()"})," captures traces from OpenAI calls and automatically associates them with the active model context."]}),"\n",(0,t.jsx)(n.li,{children:"The git commit hash is used as part of the model name to uniquely identify this version of the application."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mlflow.set_active_model()"})," establishes that subsequent traces should be linked to this specific version."]}),"\n",(0,t.jsxs)(n.li,{children:["Any OpenAI calls made after setting the active model will have their traces automatically linked to this ",(0,t.jsx)(n.code,{children:"LoggedModel"})," version."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This provides a lightweight way to version your application and link traces to specific code commits."}),"\n",(0,t.jsx)("div",{className:"center-div",style:{width:"100%"},children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"The MLflow UI showing the logged model autolog traces\nlineage",src:i(24097).A+"",width:"3436",height:"1296"})})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.p,{children:["Now that you understand why versioning your GenAI application is crucial and how ",(0,t.jsx)(n.code,{children:"LoggedModel"})," facilitates this, you can explore how to implement it:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/genai/prompt-version-mgmt/version-tracking/track-application-versions-with-mlflow",children:"Track Application Versions with MLflow"})}),": Learn the primary method for creating and managing ",(0,t.jsx)(n.code,{children:"LoggedModel"})," versions when your application code is managed externally."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},49374:(e,n,i)=>{i.d(n,{B:()=>s});i(96540);const o=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var t=i(86025),l=i(28774),a=i(74848);const r=e=>{const n=e.split(".");for(let i=n.length;i>0;i--){const e=n.slice(0,i).join(".");if(o[e])return e}return null};function s({fn:e,children:n}){const i=r(e);if(!i)return(0,a.jsx)(a.Fragment,{children:n});const s=(0,t.Ay)(`/${o[i]}#${e}`);return(0,a.jsx)(l.A,{to:s,target:"_blank",children:n??(0,a.jsxs)("code",{children:[e,"()"]})})}}}]);