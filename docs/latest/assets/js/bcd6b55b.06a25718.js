"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3450],{11470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(96540),r=t(34164),s=t(23104),i=t(56347),l=t(205),o=t(57485),c=t(31682),d=t(70679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function _(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=u(e),[i,o]=(0,a.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[c,p]=m({queryString:t,groupId:r}),[_,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,r]=(0,d.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:r}),g=(()=>{const e=c??_;return h({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),f(e)}),[p,f,s]),tabValues:s}}var f=t(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(74848);function w({className:e,block:n,selectedValue:t,selectValue:a,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:o}=(0,s.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),s=i[r].value;s!==t&&(o(n),a(s))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:i.map((({value:e,label:n,attributes:a})=>(0,x.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,r.A)("tabs__item",g.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function y({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function j(e){const n=_(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,x.jsx)(w,{...n,...e}),(0,x.jsx)(y,{...n,...e})]})}function v(e){const n=(0,f.A)();return(0,x.jsx)(j,{...e,children:p(e.children)},String(n))}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var a=t(34164);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function i({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,t),hidden:n,children:e})}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},49374:(e,n,t)=>{t.d(n,{B:()=>o});t(96540);const a=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var r=t(86025),s=t(28774),i=t(74848);const l=e=>{const n=e.split(".");for(let t=n.length;t>0;t--){const e=n.slice(0,t).join(".");if(a[e])return e}return null};function o({fn:e,children:n}){const t=l(e);if(!t)return(0,i.jsx)(i.Fragment,{children:n});const o=(0,r.Ay)(`/${a[t]}#${e}`);return(0,i.jsx)(s.A,{to:o,target:"_blank",children:n??(0,i.jsxs)("code",{children:[e,"()"]})})}},90304:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"tracing/app-instrumentation/manual-tracing/low-level-api","title":"Low-level Client APIs (Advanced)","description":"The MLflow Client APIs provide direct, fine-grained control over trace lifecycle management. While the high-level APIs handle most use cases elegantly, client APIs are essential for advanced scenarios requiring explicit control over trace creation, custom trace IDs, or integration with existing observability systems.","source":"@site/docs/genai/tracing/app-instrumentation/manual-tracing/low-level-api.mdx","sourceDirName":"tracing/app-instrumentation/manual-tracing","slug":"/tracing/app-instrumentation/manual-tracing/low-level-api","permalink":"/docs/latest/genai/tracing/app-instrumentation/manual-tracing/low-level-api","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Decorators & Context Managers (Recommended)","permalink":"/docs/latest/genai/tracing/app-instrumentation/manual-tracing/fluent-apis"},"next":{"title":"Auto Tracing Integrations","permalink":"/docs/latest/genai/tracing/integrations/"}}');var r=t(74848),s=t(28453),i=t(11470),l=t(19365);t(49374);const o={},c="Low-level Client APIs (Advanced)",d={},p=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Trace Lifecycle",id:"trace-lifecycle",level:3},{value:"Key Identifiers",id:"key-identifiers",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Initialize the Client",id:"initialize-the-client",level:3},{value:"Starting a Trace",id:"starting-a-trace",level:3},{value:"Adding Child Spans",id:"adding-child-spans",level:3},{value:"Ending Spans",id:"ending-spans",level:3},{value:"Ending a Trace",id:"ending-a-trace",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"low-level-client-apis-advanced",children:"Low-level Client APIs (Advanced)"})}),"\n",(0,r.jsxs)(n.p,{children:["The MLflow Client APIs provide direct, fine-grained control over trace lifecycle management. While the ",(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing/fluent-apis",children:"high-level APIs"})," handle most use cases elegantly, client APIs are essential for advanced scenarios requiring explicit control over trace creation, custom trace IDs, or integration with existing observability systems."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Use With Caution",type:"warning",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Before You Begin"}),": We recommend using client APIs ",(0,r.jsx)(n.strong,{children:"only when high-level APIs don't meet your requirements"}),":"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c No automatic parent-child relationship detection"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udee0\ufe0f Manual exception handling required"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udeab Incompatible with auto-tracing integrations"}),"\n",(0,r.jsx)(n.li,{children:"\ud83c\udf9b\ufe0f Full control over trace lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"\ud83c\udd94 Custom trace ID management"}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"trace-lifecycle",children:"Trace Lifecycle"}),"\n",(0,r.jsx)(n.p,{children:"Every trace follows a strict lifecycle that must be managed explicitly:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\ude80 ",(0,r.jsx)(n.strong,{children:"Start Trace"})," - Create the root span"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcca ",(0,r.jsx)(n.strong,{children:"Start Span(s)"})," - Add child spans as needed"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd1a ",(0,r.jsx)(n.strong,{children:"End Span(s)"})," - Close spans in reverse order (LIFO)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"End Trace"})," - Complete the root span"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Golden Rule"}),": Every ",(0,r.jsx)(n.code,{children:"start_trace"})," or ",(0,r.jsx)(n.code,{children:"start_span"})," call must have a corresponding ",(0,r.jsx)(n.code,{children:"end_trace"})," or ",(0,r.jsx)(n.code,{children:"end_span"})," call. Failing to close spans will result in incomplete traces."]})}),"\n",(0,r.jsx)(n.h3,{id:"key-identifiers",children:"Key Identifiers"}),"\n",(0,r.jsx)(n.p,{children:"Understanding these identifiers is crucial for client API usage:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Identifier"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Usage"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"request_id"})}),(0,r.jsx)(n.td,{children:"Unique trace identifier"}),(0,r.jsx)(n.td,{children:"Links all spans in a trace"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"span_id"})}),(0,r.jsx)(n.td,{children:"Unique span identifier"}),(0,r.jsx)(n.td,{children:"Identifies specific span to end"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"parent_id"})}),(0,r.jsx)(n.td,{children:"Parent span's ID"}),(0,r.jsx)(n.td,{children:"Creates span hierarchy"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.h3,{id:"initialize-the-client",children:"Initialize the Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mlflow import MlflowClient\n\n# Initialize client with default tracking URI\nclient = MlflowClient()\n\n# Or specify a custom tracking URI\nclient = MlflowClient(tracking_uri="http://localhost:5000")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"starting-a-trace",children:"Starting a Trace"}),"\n",(0,r.jsx)(n.p,{children:"Unlike high-level APIs, you must explicitly start a trace before adding spans:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Start a new trace - this creates the root span\nroot_span = client.start_trace(\n    name="my_application_flow",\n    inputs={"user_id": "123", "action": "generate_report"},\n    attributes={"environment": "production", "version": "1.0.0"},\n)\n\n# Extract the request_id for subsequent operations\nrequest_id = root_span.request_id\nprint(f"Started trace with ID: {request_id}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"adding-child-spans",children:"Adding Child Spans"}),"\n",(0,r.jsx)(n.p,{children:"Create a hierarchy of spans to represent your application's workflow:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Create a child span for data retrieval\ndata_span = client.start_span(\n    name="fetch_user_data",\n    request_id=request_id,  # Links to the trace\n    parent_id=root_span.span_id,  # Creates parent-child relationship\n    inputs={"user_id": "123"},\n    attributes={"database": "users_db", "query_type": "select"},\n)\n\n# Create a sibling span for processing\nprocess_span = client.start_span(\n    name="process_data",\n    request_id=request_id,\n    parent_id=root_span.span_id,  # Same parent as data_span\n    inputs={"data_size": "1024KB"},\n    attributes={"processor": "gpu", "batch_size": 32},\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ending-spans",children:"Ending Spans"}),"\n",(0,r.jsx)(n.p,{children:"End spans in reverse order of creation (LIFO - Last In, First Out):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# End the data retrieval span\nclient.end_span(\n    request_id=data_span.request_id,\n    span_id=data_span.span_id,\n    outputs={"record_count": 42, "cache_hit": True},\n    attributes={"duration_ms": 150},\n)\n\n# End the processing span\nclient.end_span(\n    request_id=process_span.request_id,\n    span_id=process_span.span_id,\n    outputs={"processed_records": 42, "errors": 0},\n    status="OK",\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ending-a-trace",children:"Ending a Trace"}),"\n",(0,r.jsx)(n.p,{children:"Complete the trace by ending the root span:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# End the root span (completes the trace)\nclient.end_trace(\n    request_id=request_id,\n    outputs={"report_url": "https://example.com/report/123"},\n    attributes={"total_duration_ms": 1250, "status": "success"},\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(l.A,{value:"error-handling",label:"Error Handling",default:!0,children:[(0,r.jsx)(n.p,{children:"Proper error handling ensures traces are completed even when exceptions occur:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def traced_operation():\n    client = MlflowClient()\n    root_span = None\n\n    try:\n        # Start trace\n        root_span = client.start_trace("risky_operation")\n\n        # Start child span\n        child_span = client.start_span(\n            name="database_query",\n            request_id=root_span.request_id,\n            parent_id=root_span.span_id,\n        )\n\n        try:\n            # Risky operation\n            result = perform_database_query()\n\n            # End child span on success\n            client.end_span(\n                request_id=child_span.request_id,\n                span_id=child_span.span_id,\n                outputs={"result": result},\n                status="OK",\n            )\n        except Exception as e:\n            # End child span on error\n            client.end_span(\n                request_id=child_span.request_id,\n                span_id=child_span.span_id,\n                status="ERROR",\n                attributes={"error": str(e)},\n            )\n            raise\n\n    except Exception as e:\n        # Log error to trace\n        if root_span:\n            client.end_trace(\n                request_id=root_span.request_id,\n                status="ERROR",\n                attributes={"error_type": type(e).__name__, "error_message": str(e)},\n            )\n        raise\n    else:\n        # End trace on success\n        client.end_trace(\n            request_id=root_span.request_id,\n            outputs={"status": "completed"},\n            status="OK",\n        )\n'})})]}),(0,r.jsxs)(l.A,{value:"custom-management",label:"Custom Trace Management",children:[(0,r.jsx)(n.p,{children:"Implement custom trace ID generation and management for integration with existing systems:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import uuid\nfrom datetime import datetime\n\n\nclass CustomTraceManager:\n    """Custom trace manager with business-specific trace IDs"""\n\n    def __init__(self):\n        self.client = MlflowClient()\n        self.active_traces = {}\n\n    def generate_trace_id(self, user_id: str, operation: str) -> str:\n        """Generate custom trace ID based on business logic"""\n        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")\n        return f"{user_id}_{operation}_{timestamp}_{uuid.uuid4().hex[:8]}"\n\n    def start_custom_trace(self, user_id: str, operation: str, **kwargs):\n        """Start trace with custom ID format"""\n        trace_name = self.generate_trace_id(user_id, operation)\n\n        root_span = self.client.start_trace(\n            name=trace_name,\n            attributes={\n                "user_id": user_id,\n                "operation": operation,\n                "custom_trace_id": trace_name,\n                **kwargs,\n            },\n        )\n\n        self.active_traces[trace_name] = root_span\n        return root_span\n\n    def get_active_trace(self, trace_name: str):\n        """Retrieve active trace by custom name"""\n        return self.active_traces.get(trace_name)\n\n\n# Usage\nmanager = CustomTraceManager()\ntrace = manager.start_custom_trace(\n    user_id="user123", operation="report_generation", report_type="quarterly"\n)\n'})})]}),(0,r.jsxs)(l.A,{value:"batch-processing",label:"Batch Processing",children:[(0,r.jsx)(n.p,{children:"Track complex workflows with multiple levels of nesting:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def batch_processor(items):\n    client = MlflowClient()\n\n    # Start main trace\n    root = client.start_trace(\n        name="batch_processing", inputs={"batch_size": len(items)}\n    )\n\n    results = []\n\n    # Process each item\n    for i, item in enumerate(items):\n        # Create span for each item\n        item_span = client.start_span(\n            name=f"process_item_{i}",\n            request_id=root.request_id,\n            parent_id=root.span_id,\n            inputs={"item_id": item["id"]},\n        )\n\n        try:\n            # Validation span\n            validation_span = client.start_span(\n                name="validate", request_id=root.request_id, parent_id=item_span.span_id\n            )\n\n            is_valid = validate_item(item)\n\n            client.end_span(\n                request_id=validation_span.request_id,\n                span_id=validation_span.span_id,\n                outputs={"is_valid": is_valid},\n            )\n\n            if is_valid:\n                # Processing span\n                process_span = client.start_span(\n                    name="transform",\n                    request_id=root.request_id,\n                    parent_id=item_span.span_id,\n                )\n\n                result = transform_item(item)\n                results.append(result)\n\n                client.end_span(\n                    request_id=process_span.request_id,\n                    span_id=process_span.span_id,\n                    outputs={"transformed": result},\n                )\n\n            # End item span\n            client.end_span(\n                request_id=item_span.request_id, span_id=item_span.span_id, status="OK"\n            )\n\n        except Exception as e:\n            # Handle errors gracefully\n            client.end_span(\n                request_id=item_span.request_id,\n                span_id=item_span.span_id,\n                status="ERROR",\n                attributes={"error": str(e)},\n            )\n\n    # End main trace\n    client.end_trace(\n        request_id=root.request_id,\n        outputs={\n            "processed_count": len(results),\n            "success_rate": len(results) / len(items),\n        },\n    )\n\n    return results\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(l.A,{value:"context-managers",label:"Context Managers",default:!0,children:[(0,r.jsx)(n.p,{children:"Create custom context managers to ensure spans are always closed:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from contextlib import contextmanager\n\n\n@contextmanager\ndef traced_span(client, name, request_id, parent_id=None, **kwargs):\n    """Context manager for safe span management"""\n    span = client.start_span(\n        name=name, request_id=request_id, parent_id=parent_id, **kwargs\n    )\n    try:\n        yield span\n    except Exception as e:\n        client.end_span(\n            request_id=span.request_id,\n            span_id=span.span_id,\n            status="ERROR",\n            attributes={"error": str(e)},\n        )\n        raise\n    else:\n        client.end_span(request_id=span.request_id, span_id=span.span_id, status="OK")\n\n\n# Usage\nwith traced_span(client, "my_operation", request_id, parent_id) as span:\n    # Your code here\n    result = perform_operation()\n'})})]}),(0,r.jsxs)(l.A,{value:"state-management",label:"State Management",children:[(0,r.jsx)(n.p,{children:"Manage trace state for complex applications:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class TraceStateManager:\n    """Manage trace state across application components"""\n\n    def __init__(self):\n        self.client = MlflowClient()\n        self._trace_stack = []\n\n    @property\n    def current_trace(self):\n        """Get current active trace"""\n        return self._trace_stack[-1] if self._trace_stack else None\n\n    def push_trace(self, name: str, **kwargs):\n        """Start a new trace and push to stack"""\n        if self.current_trace:\n            # Create child span if trace exists\n            span = self.client.start_span(\n                name=name,\n                request_id=self.current_trace.request_id,\n                parent_id=self.current_trace.span_id,\n                **kwargs\n            )\n        else:\n            # Create new trace\n            span = self.client.start_trace(name=name, **kwargs)\n\n        self._trace_stack.append(span)\n        return span\n\n    def pop_trace(self, **kwargs):\n        """End current trace and pop from stack"""\n        if not self._trace_stack:\n            return\n\n        span = self._trace_stack.pop()\n\n        if self._trace_stack:\n            # End child span\n            self.client.end_span(\n                request_id=span.request_id, span_id=span.span_id, **kwargs\n            )\n        else:\n            # End root trace\n            self.client.end_trace(request_id=span.request_id, **kwargs)\n'})})]}),(0,r.jsxs)(l.A,{value:"attributes",label:"Meaningful Attributes",children:[(0,r.jsx)(n.p,{children:"Enrich your traces with context that aids debugging:"}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Good Examples:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Good: Specific, actionable attributes\nclient.start_span(\n    name="llm_call",\n    request_id=request_id,\n    parent_id=parent_id,\n    attributes={\n        "model": "gpt-4",\n        "temperature": 0.7,\n        "max_tokens": 1000,\n        "prompt_template": "rag_v2",\n        "user_tier": "premium",\n    },\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Bad Examples:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Bad: Generic, unhelpful attributes\nclient.start_span(\n    name="process",\n    request_id=request_id,\n    parent_id=parent_id,\n    attributes={"step": 1, "data": "some data"},\n)\n'})})]})]}),"\n",(0,r.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,r.jsxs)(n.admonition,{title:"Important Considerations",type:"warning",children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Avoid these common mistakes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udeab ",(0,r.jsx)(n.strong,{children:"Forgetting to end spans"})," - Always use try/finally or context managers"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd17 ",(0,r.jsx)(n.strong,{children:"Incorrect parent-child relationships"})," - Double-check span IDs"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd00 ",(0,r.jsx)(n.strong,{children:"Mixing high-level and low-level APIs"})," - They don't interoperate"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udd10 ",(0,r.jsx)(n.strong,{children:"Hardcoding trace IDs"})," - Always generate unique IDs"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83e\uddf5 ",(0,r.jsx)(n.strong,{children:"Ignoring thread safety"})," - Client APIs are not thread-safe by default"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce6 ",(0,r.jsx)(n.strong,{children:"Batch Operations"}),": When creating many spans, consider batching operations to reduce overhead."]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83e\udde0 ",(0,r.jsx)(n.strong,{children:"Memory Management"}),": Be mindful of keeping references to span objects - clean them up when done."]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83c\udf10 ",(0,r.jsx)(n.strong,{children:"Network Calls"}),": Each start/end operation may result in network calls to the tracking server."]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83e\uddf5 ",(0,r.jsx)(n.strong,{children:"Thread Safety"}),": Use locks or thread-local storage when using client APIs in multi-threaded environments."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/manual-tracing/fluent-apis",children:"High-Level APIs"})})," - Simpler alternative for most use cases"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/app-instrumentation/automatic",children:"Automatic Tracing"})})," - One-line tracing for supported frameworks"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/data-model",children:"Trace Data Model"})})," - Understanding trace structure and components"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/genai/tracing/search-traces",children:"Querying Traces"})})," - Programmatically search and analyze your traces"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);