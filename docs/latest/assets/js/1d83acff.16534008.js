"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8475],{28453:(e,l,t)=>{t.d(l,{R:()=>i,x:()=>a});var r=t(96540);const o={},n=r.createContext(o);function i(e){const l=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function a(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(n.Provider,{value:l},e.children)}},49374:(e,l,t)=>{t.d(l,{B:()=>s});t(96540);const r=JSON.parse('{"mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html"}');var o=t(86025),n=t(28774),i=t(74848);const a=e=>{const l=e.split(".");for(let t=l.length;t>0;t--){const e=l.slice(0,t).join(".");if(r[e])return e}return null};function s({fn:e,children:l}){const t=a(e);if(!t)return(0,i.jsx)(i.Fragment,{children:l});const s=(0,o.Ay)(`/${r[t]}#${e}`);return(0,i.jsx)(n.A,{to:s,target:"_blank",children:l??(0,i.jsxs)("code",{children:[e,"()"]})})}},71243:(e,l,t)=>{t.r(l),t.d(l,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"getting-started/registering-first-model/step1-register-model","title":"Register a Model","description":"Throughout this tutorial we will leverage a local tracking server and model registry for simplicity.","source":"@site/docs/classic-ml/getting-started/registering-first-model/step1-register-model.mdx","sourceDirName":"getting-started/registering-first-model","slug":"/getting-started/registering-first-model/step1-register-model","permalink":"/docs/latest/ml/getting-started/registering-first-model/step1-register-model","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"classicMLSidebar","previous":{"title":"Model Registry Quickstart","permalink":"/docs/latest/ml/getting-started/registering-first-model/"},"next":{"title":"Explore the Registered Model","permalink":"/docs/latest/ml/getting-started/registering-first-model/step2-explore-registered-model"}}');var o=t(74848),n=t(28453),i=t(49374);const a={},s="Register a Model",m={},p=[{value:"Step 0: Install Dependencies",id:"step-0-install-dependencies",level:2},{value:"Step 1: Register a Model",id:"step-1-register-a-model",level:2}];function f(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.header,{children:(0,o.jsx)(l.h1,{id:"register-a-model",children:"Register a Model"})}),"\n",(0,o.jsxs)(l.p,{children:["Throughout this tutorial we will leverage a local tracking server and model registry for simplicity.\nHowever, for production use cases we recommend using a\n",(0,o.jsx)(l.a,{href:"/ml/tracking/tutorials/remote-server",children:"remote tracking server"}),"."]}),"\n",(0,o.jsx)(l.h2,{id:"step-0-install-dependencies",children:"Step 0: Install Dependencies"}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-bash",children:"pip install --upgrade mlflow\n"})}),"\n",(0,o.jsx)(l.h2,{id:"step-1-register-a-model",children:"Step 1: Register a Model"}),"\n",(0,o.jsx)(l.p,{children:"To use the MLflow model registry, you need to add your MLflow models to it. This is done through\nregistering a given model via one of the below commands:"}),"\n",(0,o.jsxs)(l.ul,{children:["\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.code,{children:"mlflow.<model_flavor>.log_model(registered_model_name=<model_name>)"}),": register the model\n",(0,o.jsx)(l.strong,{children:"while"})," logging it to the tracking server."]}),"\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.code,{children:"mlflow.register_model(<model_uri>, <model_name>)"}),": register the model ",(0,o.jsx)(l.strong,{children:"after"})," logging it to\nthe tracking server. Note that you'll have to log the model before running this command to get a\nmodel URI."]}),"\n"]}),"\n",(0,o.jsxs)(l.p,{children:["MLflow has lots of model flavors. In the below example, we'll leverage scikit-learn's\nRandomForestRegressor to demonstrate the simplest way to register a model, but note that you\ncan leverage any ",(0,o.jsx)(l.a,{href:"/ml/model#models_built-in-model-flavors",children:"supported model flavor"}),".\nIn the code snippet below, we start an mlflow run and train a random forest model. We then log some\nrelevant hyper-parameters, the model mean-squared-error (MSE), and finally log and register the\nmodel itself."]}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-python",children:'from sklearn.datasets import make_regression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\n\nwith mlflow.start_run() as run:\n    X, y = make_regression(n_features=4, n_informative=2, random_state=0, shuffle=False)\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42\n    )\n\n    params = {"max_depth": 2, "random_state": 42}\n    model = RandomForestRegressor(**params)\n    model.fit(X_train, y_train)\n\n    # Log parameters and metrics using the MLflow APIs\n    mlflow.log_params(params)\n\n    y_pred = model.predict(X_test)\n    mlflow.log_metrics({"mse": mean_squared_error(y_test, y_pred)})\n\n    # Log the sklearn model and register as version 1\n    mlflow.sklearn.log_model(\n        sk_model=model,\n        name="sklearn-model",\n        input_example=X_train,\n        registered_model_name="sk-learn-random-forest-reg-model",\n    )\n'})}),"\n",(0,o.jsx)(l.pre,{children:(0,o.jsx)(l.code,{className:"language-bash",metastring:'title="Example Output"',children:"Successfully registered model 'sk-learn-random-forest-reg-model'.\nCreated version '1' of model 'sk-learn-random-forest-reg-model'.\n"})}),"\n",(0,o.jsx)(l.p,{children:"Great! We've registered a model."}),"\n",(0,o.jsx)(l.p,{children:"Before moving on, let's highlight some important implementation notes."}),"\n",(0,o.jsxs)(l.ul,{children:["\n",(0,o.jsxs)(l.li,{children:["To register a model, you can leverage the ",(0,o.jsx)(l.code,{children:"registered_model_name"})," parameter in the ",(0,o.jsx)(i.B,{fn:"mlflow.sklearn.log_model"}),"\nor call ",(0,o.jsx)(i.B,{fn:"mlflow.register_model"})," after logging the model. Generally, we suggest the former because it's more\nconcise."]}),"\n",(0,o.jsxs)(l.li,{children:[(0,o.jsx)(l.a,{href:"/ml/model/signatures",children:"Model Signatures"}),"\nprovide validation for our model inputs and outputs. The ",(0,o.jsx)(l.code,{children:"input_example"})," in ",(0,o.jsx)(l.code,{children:"log_model()"}),"\nautomatically infers and logs a signature. Again, we suggest using this implementation because\nit's concise."]}),"\n"]}),"\n",(0,o.jsxs)(l.p,{children:["The next part of this tutorial centers on ",(0,o.jsx)(l.a,{href:"/ml/getting-started/registering-first-model/step2-explore-registered-model",children:"Understanding Registered Models"})," within the MLflow UI."]})]})}function d(e={}){const{wrapper:l}={...(0,n.R)(),...e.components};return l?(0,o.jsx)(l,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}}}]);