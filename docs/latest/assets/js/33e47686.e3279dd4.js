"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[4151],{28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var s=n(96540);const i={},t=s.createContext(i);function o(e){const r=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:r},e.children)}},41514:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"eval-monitor/scorers/versioning","title":"Registering and Versioning Scorers","description":"Scorers can be registered to MLflow experiments for version control and team collaboration.","source":"@site/docs/genai/eval-monitor/scorers/versioning.mdx","sourceDirName":"eval-monitor/scorers","slug":"/eval-monitor/scorers/versioning","permalink":"/mlflow-website/docs/latest/genai/eval-monitor/scorers/versioning","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Align with Human Feedback","permalink":"/mlflow-website/docs/latest/genai/eval-monitor/scorers/llm-judge/alignment"},"next":{"title":"Evaluation Datasets","permalink":"/mlflow-website/docs/latest/genai/datasets/"}}');var i=n(74848),t=n(28453);const o={},a="Registering and Versioning Scorers",d={},l=[{value:"Supported Scorers",id:"supported-scorers",level:2},{value:"Usage",id:"usage",level:2},{value:"Prerequisite",id:"prerequisite",level:3},{value:"Registering a Scorer",id:"registering-a-scorer",level:3},{value:"Updating a Scorer",id:"updating-a-scorer",level:3},{value:"Loading a Scorer",id:"loading-a-scorer",level:3},{value:"Listing Scorers",id:"listing-scorers",level:3},{value:"UI Support",id:"ui-support",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"registering-and-versioning-scorers",children:"Registering and Versioning Scorers"})}),"\n",(0,i.jsx)(r.p,{children:"Scorers can be registered to MLflow experiments for version control and team collaboration."}),"\n",(0,i.jsx)(r.h2,{id:"supported-scorers",children:"Supported Scorers"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Scorer Type"}),(0,i.jsx)(r.th,{children:"Supported"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"/genai/eval-monitor/scorers/llm-judge/agentic-overview",children:"Agent-as-a-Judge"})}),(0,i.jsx)(r.td,{children:"\u2705"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"/genai/eval-monitor/scorers/llm-judge/make-judge",children:"Template-based LLM Scorers"})}),(0,i.jsx)(r.td,{children:"\u2705"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"/genai/eval-monitor/scorers/custom",children:"Code-based Scorers"})}),(0,i.jsx)(r.td,{children:"\u2705"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"/genai/eval-monitor/scorers/llm-judge/guidelines",children:"Guidelines-based LLM Scorers"})}),(0,i.jsxs)(r.td,{children:["\u274c (Use ",(0,i.jsx)(r.a,{href:"/genai/prompt-registry",children:"MLflow Prompt Registry"})," instead)"]})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.a,{href:"/genai/eval-monitor/scorers/llm-judge/predefined",children:"Predefined Scorers"})}),(0,i.jsx)(r.td,{children:"\u274c (Prompts are hard-coded in MLflow)"})]})]})]}),"\n",(0,i.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(r.h3,{id:"prerequisite",children:"Prerequisite"}),"\n",(0,i.jsxs)(r.p,{children:["Judges are registered to an ",(0,i.jsx)(r.strong,{children:"MLflow Experiment"})," (not Run-level)."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'import mlflow\n\nmlflow.set_tracking_uri("your-tracking-uri")\nmlflow.create_experiment("evaluation-judges")\n'})}),"\n",(0,i.jsx)(r.p,{children:"Define a sample template-based LLM scorer:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'from mlflow.genai.judges import make_judge\n\nquality_judge = make_judge(\n    name="response_quality",\n    instructions=("Evaluate if {{ outputs }} is high quality for {{ inputs }}."),\n    model="anthropic:/claude-opus-4-1-20250805",\n)\n'})}),"\n",(0,i.jsx)(r.h3,{id:"registering-a-scorer",children:"Registering a Scorer"}),"\n",(0,i.jsxs)(r.p,{children:["To register a judge to the experiment, call the ",(0,i.jsx)(r.code,{children:"register"})," method on the judge instance."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"# Register the judge\nregistered = quality_judge.register()\n# You can pass experiment_id to register the judge to a specific experiment\n# registered = quality_judge.register(experiment_id=experiment_id)\n"})}),"\n",(0,i.jsx)(r.h3,{id:"updating-a-scorer",children:"Updating a Scorer"}),"\n",(0,i.jsx)(r.p,{children:"Registering a new scorer with the same name will create a new version."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'# Update and register a new version of the judge\nquality_judge_v2 = make_judge(\n    name="response_quality",  # Same name\n    instructions=(\n        "Evaluate if {{ outputs }} is high quality, accurate, and complete "\n        "for the question in {{ inputs }}."\n    ),\n    model="anthropic:/claude-3.5-sonnet-20241022",  # Updated model\n)\n\n# Register the updated judge\nregistered_v2 = quality_judge_v2.register(experiment_id=experiment_id)\n'})}),"\n",(0,i.jsx)(r.h3,{id:"loading-a-scorer",children:"Loading a Scorer"}),"\n",(0,i.jsxs)(r.p,{children:["To load a registered scorer, use the ",(0,i.jsx)(r.code,{children:"get_scorer"})," function."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'from mlflow.genai.scorers import get_scorer\n\n# Get the latest version\nlatest_judge = get_scorer(name="response_quality")\n# or specify experiment_id to get a scorer from a specific experiment\n# latest_judge = get_scorer(name="response_quality", experiment_id=experiment_id)\n'})}),"\n",(0,i.jsx)(r.h3,{id:"listing-scorers",children:"Listing Scorers"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"list_scorers"})," function returns a list of the scorers registered in the experiment."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:'from mlflow.genai.scorers import list_scorers\n\nall_scorers = list_scorers(experiment_id=experiment_id)\nfor scorer in all_scorers:\n    print(f"Scorer: {scorer.name}, Model: {scorer.model}")\n'})}),"\n",(0,i.jsx)(r.h2,{id:"ui-support",children:"UI Support"}),"\n",(0,i.jsx)(r.p,{children:"Coming soon!"})]})}function g(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);