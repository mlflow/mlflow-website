/*! For license information please see 21ba023e.e0a62689.js.LICENSE.txt */
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3965],{6789:(e,t,i)=>{i.d(t,{A:()=>c});i(96540);var n=i(28774),o=i(34164);const a={tileCard:"tileCard_NHsj",tileIcon:"tileIcon_pyoR",tileLink:"tileLink_iUbu",tileImage:"tileImage_O4So"};var l=i(86025),r=i(21122),s=i(74848);function c({icon:e,image:t,imageDark:i,imageWidth:c,imageHeight:p,iconSize:h=32,containerHeight:m,title:d,description:f,href:g,linkText:w="Learn more \u2192",className:u}){if(!e&&!t)throw new Error("TileCard requires either an icon or image prop");const y=m?{height:`${m}px`}:{},_={};return c&&(_.width=`${c}px`),p&&(_.height=`${p}px`),(0,s.jsxs)(n.A,{href:g,className:(0,o.A)(a.tileCard,u),children:[(0,s.jsx)("div",{className:a.tileIcon,style:y,children:e?(0,s.jsx)(e,{size:h}):i?(0,s.jsx)(r.A,{sources:{light:(0,l.Ay)(t),dark:(0,l.Ay)(i)},alt:d,className:a.tileImage,style:_}):(0,s.jsx)("img",{src:(0,l.Ay)(t),alt:d,className:a.tileImage,style:_})}),(0,s.jsx)("h3",{children:d}),(0,s.jsx)("p",{children:f}),(0,s.jsx)("div",{className:a.tileLink,children:w})]})}},11889:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>j,contentTitle:()=>k,default:()=>G,frontMatter:()=>v,metadata:()=>n,toc:()=>b});const n=JSON.parse('{"id":"version-tracking/track-application-versions-with-mlflow","title":"Track versions of Git-based applications with MLflow","description":"Learn how to track versions of your GenAI application when your app\'s code resides in Git, using MLflow\'s automatic Git versioning capabilities.","source":"@site/docs/genai/version-tracking/track-application-versions-with-mlflow.mdx","sourceDirName":"version-tracking","slug":"/version-tracking/track-application-versions-with-mlflow","permalink":"/mlflow-website/docs/latest/genai/version-tracking/track-application-versions-with-mlflow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Track versions of Git-based applications with MLflow","description":"Learn how to track versions of your GenAI application when your app\'s code resides in Git, using MLflow\'s automatic Git versioning capabilities."},"sidebar":"genAISidebar","previous":{"title":"Quickstart","permalink":"/mlflow-website/docs/latest/genai/version-tracking/quickstart"},"next":{"title":"Compare App Versions","permalink":"/mlflow-website/docs/latest/genai/version-tracking/compare-app-versions"}}');var o=i(74848),a=i(28453),l=i(82238),r=i(79206),s=i(65592),c=i(6789),p=i(49374);const h=(0,i(84722).A)("git-commit-horizontal",[["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}],["line",{x1:"3",x2:"9",y1:"12",y2:"12",key:"1dyftd"}],["line",{x1:"15",x2:"21",y1:"12",y2:"12",key:"oup4p8"}]]);var m=i(61878),d=i(22492),f=i(51004),g=i(93672),w=i(80964),u=i(22864),y=i(56808),_=i(66927);const x=i.p+"assets/images/git-versioning-9f4cec5218edc37fcf578c340a2a1a75.png",v={title:"Track versions of Git-based applications with MLflow",description:"Learn how to track versions of your GenAI application when your app's code resides in Git, using MLflow's automatic Git versioning capabilities."},k="Track versions of Git-based applications with MLflow",j={},b=[{value:"Git State Tracked by MLflow",id:"git-state-tracked-by-mlflow",level:3},{value:"Why Git-Based Versioning Works for GenAI",id:"why-git-based-versioning-works-for-genai",level:2},{value:"How MLflow Captures Git Context",id:"how-mlflow-captures-git-context",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Enable Git-based version tracking",id:"step-1-enable-git-based-version-tracking",level:2},{value:"Step 2: Create your application",id:"step-2-create-your-application",level:2},{value:"Step 3: Test version tracking with code changes",id:"step-3-test-version-tracking-with-code-changes",level:2},{value:"Step 5: View traces linked to the LoggedModel",id:"step-5-view-traces-linked-to-the-loggedmodel",level:2},{value:"Use the UI",id:"use-the-ui",level:3},{value:"Use the SDK",id:"use-the-sdk",level:3},{value:"Next Steps",id:"next-steps",level:2}];function A(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"track-versions-of-git-based-applications-with-mlflow",children:"Track versions of Git-based applications with MLflow"})}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"This feature is experimental and may change in future releases."}),"\n",(0,o.jsxs)(t.li,{children:["This feature is not supported in ",(0,o.jsx)(t.a,{href:"https://docs.databricks.com/aws/en/repos/",children:"Databricks Git Folders"})," yet due to limitations in accessing Git metadata."]}),"\n",(0,o.jsx)(t.li,{children:"MLflow >= 3.4 is required for this feature."}),"\n"]})}),"\n",(0,o.jsxs)(t.p,{children:["This guide demonstrates how to track versions of your GenAI application when your app's code resides in Git or a similar version control system. MLflow provides automatic Git-based versioning through the ",(0,o.jsx)(p.B,{fn:"mlflow.genai.enable_git_model_versioning"})," API, which seamlessly tracks your application versions based on Git state."]}),"\n",(0,o.jsx)(t.p,{children:"When enabled, MLflow automatically:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Creates or reuses a LoggedModel based on your current ",(0,o.jsx)(t.a,{href:".#git-state-tracked-by-mlflow",children:"git state"})]}),"\n",(0,o.jsxs)(t.li,{children:["Links all traces to this ",(0,o.jsx)(t.code,{children:"LoggedModel"})," version"]}),"\n",(0,o.jsx)(t.li,{children:"Captures Git metadata including diffs for uncommitted changes"}),"\n",(0,o.jsx)(t.li,{children:"Manages version transitions as your code evolves"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"git-state-tracked-by-mlflow",children:"Git State Tracked by MLflow"}),"\n",(0,o.jsx)(t.p,{children:"MLflow tracks three key components of your Git state:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Branch"}),": The Git branch name (e.g., ",(0,o.jsx)(t.code,{children:"main"}),", ",(0,o.jsx)(t.code,{children:"feature-xyz"}),")"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Commit"}),": The Git commit hash uniquely identifying the code version"]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Dirty State"}),': Whether your working directory has uncommitted changes. A "dirty" repository means there are modifications that haven\'t been committed yet. MLflow captures these changes as a diff to ensure complete reproducibility']}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"why-git-based-versioning-works-for-genai",children:"Why Git-Based Versioning Works for GenAI"}),"\n",(0,o.jsx)(t.p,{children:"Git-based versioning transforms your version control system into a powerful application lifecycle management tool. Every commit becomes a potential application version, with complete code history and change tracking built-in."}),"\n",(0,o.jsx)(l.A,{features:[{icon:h,title:"Commit-Based Versioning",description:"Use Git commit hashes as unique version identifiers. Each commit represents a complete application state with full reproducibility."},{icon:m.A,title:"Branch-Based Development",description:"Leverage Git branches for parallel development. Feature branches become isolated version streams that can be merged systematically."},{icon:d.A,title:"Automatic Metadata Capture",description:"MLflow automatically captures Git commit, branch, and repository URL during runs. No manual version tracking required."},{icon:f.A,title:"Seamless Integration",description:"Works naturally with your existing Git workflow. No changes to development process or additional tooling required."}]}),"\n",(0,o.jsx)(t.h2,{id:"how-mlflow-captures-git-context",children:"How MLflow Captures Git Context"}),"\n",(0,o.jsxs)(t.p,{children:["With ",(0,o.jsx)(p.B,{fn:"mlflow.genai.enable_git_model_versioning"}),", MLflow automatically manages version tracking based on your Git state. Each unique combination of branch, commit, and dirty state creates or reuses a LoggedModel version."]}),"\n",(0,o.jsx)(r.A,{concepts:[{icon:g.A,title:"Automatic Git Detection",description:"MLflow detects Git repositories and automatically captures commit hash, branch name, repository URL, and uncommitted changes."},{icon:w.A,title:"Zero-Configuration Versioning",description:"Simply call enable_git_model_versioning() once\u2014MLflow handles all version management and trace linking automatically."},{icon:f.A,title:"Smart Version Deduplication",description:"MLflow intelligently reuses existing LoggedModels when Git state matches, avoiding version proliferation."}]}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Install MLflow and required packages:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'pip install "mlflow>=3.4" openai\n'})}),"\n",(0,o.jsx)(t.p,{children:"Set your OpenAI API key:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'export OPENAI_API_KEY="your-api-key-here"\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Create an MLflow experiment by following the ",(0,o.jsx)(t.a,{href:"/ml/getting-started",children:"getting started guide"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"step-1-enable-git-based-version-tracking",children:"Step 1: Enable Git-based version tracking"}),"\n",(0,o.jsxs)(t.p,{children:["The simplest way to enable Git-based version tracking is to call ",(0,o.jsx)(p.B,{fn:"mlflow.genai.enable_git_model_versioning"})," at the start of your application:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import mlflow\n\n# Enable Git-based version tracking\n# This automatically creates/reuses a LoggedModel based on your Git state\ncontext = mlflow.genai.enable_git_model_versioning()\n\n# Check which version is active\nprint(\n    f"Active version - Branch: {context.info.branch}, Commit: {context.info.commit[:8]}"\n)\nprint(f"Repository dirty: {context.info.dirty}")\n'})}),"\n",(0,o.jsx)(t.p,{children:"You can also use it as a context manager for scoped versioning:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"with mlflow.genai.enable_git_model_versioning() as context:\n    # All traces within this block are linked to the Git-based version\n    # Your application code here\n    ...\n\n# Version tracking is automatically disabled when exiting the context\n"})}),"\n",(0,o.jsx)(t.h2,{id:"step-2-create-your-application",children:"Step 2: Create your application"}),"\n",(0,o.jsx)(t.p,{children:"Now let's create a simple application that will be automatically versioned:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import mlflow\nimport openai\n\n# Enable Git-based version tracking\ncontext = mlflow.genai.enable_git_model_versioning()\n\n# Enable MLflow\'s autologging to instrument your application with Tracing\nmlflow.openai.autolog()\n\n# Set up OpenAI client\nclient = openai.OpenAI()\n\n\n# Use the trace decorator to capture the application\'s entry point\n@mlflow.trace\ndef my_app(input: str) -> str:\n    """Customer support agent application"""\n    # This call is automatically instrumented by `mlflow.openai.autolog()`\n    response = client.chat.completions.create(\n        model="gpt-4o-mini",\n        messages=[\n            {"role": "system", "content": "You are a helpful customer support agent."},\n            {"role": "user", "content": input},\n        ],\n        temperature=0.7,\n        max_tokens=150,\n    )\n    return response.choices[0].message.content\n\n\n# Test the application - traces are automatically linked to the Git version\nresult = my_app(input="What is MLflow?")\nprint(result)\n'})}),"\n",(0,o.jsxs)(t.admonition,{type:"note",children:[(0,o.jsx)(t.p,{children:"When you run this code, MLflow automatically:"}),(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Detects your Git repository state (branch, commit, dirty status)"}),"\n",(0,o.jsx)(t.li,{children:"Creates or reuses a LoggedModel matching this state"}),"\n",(0,o.jsx)(t.li,{children:"Links all traces to this version"}),"\n",(0,o.jsx)(t.li,{children:"Captures uncommitted changes as diffs if the repository is dirty"}),"\n"]})]}),"\n",(0,o.jsx)(t.h2,{id:"step-3-test-version-tracking-with-code-changes",children:"Step 3: Test version tracking with code changes"}),"\n",(0,o.jsx)(t.p,{children:"Run your application and observe how versions are tracked:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Initial run - creates a LoggedModel for current Git state\nresult = my_app(input="What is MLflow?")\nprint(result)\n\nresult = my_app(input="What is Databricks?")\nprint(result)\n# Both traces are linked to the same version since Git state hasn\'t changed\n'})}),"\n",(0,o.jsx)(t.p,{children:"To see how MLflow tracks changes, modify your code (without committing) and run again:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'# Make a change to your application code (e.g., modify temperature)\n# The repository is now "dirty" with uncommitted changes\n\n# Re-enable versioning - MLflow will detect the dirty state\ncontext = mlflow.genai.enable_git_model_versioning()\nprint(f"Repository dirty: {context.info.dirty}")  # Will show True\n\n# This trace will be linked to a different version (same commit but dirty=True)\nresult = my_app(input="What is GenAI?")\nprint(result)\n'})}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsx)(t.p,{children:"MLflow creates distinct versions for:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Different Git branches"}),"\n",(0,o.jsx)(t.li,{children:"Different commits"}),"\n",(0,o.jsx)(t.li,{children:"Clean vs. dirty repository states"}),"\n"]}),(0,o.jsx)(t.p,{children:"This ensures complete reproducibility of your application versions."})]}),"\n",(0,o.jsx)(t.h2,{id:"step-5-view-traces-linked-to-the-loggedmodel",children:"Step 5: View traces linked to the LoggedModel"}),"\n",(0,o.jsx)(t.h3,{id:"use-the-ui",children:"Use the UI"}),"\n",(0,o.jsxs)(t.p,{children:["Go to the MLflow Experiment UI. In the ",(0,o.jsx)(t.strong,{children:"Traces"})," tab, you can see the version of the app that generated each trace. In the ",(0,o.jsx)(t.strong,{children:"Models"})," tab, you can see each LoggedModel alongside its parameters and linked traces."]}),"\n",(0,o.jsx)(_.A,{src:x,altText:"Git Versioning",width:"80%"}),"\n",(0,o.jsx)(t.h3,{id:"use-the-sdk",children:"Use the SDK"}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(p.B,{fn:"mlflow.search_traces"})," to query for traces from a LoggedModel:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import mlflow\n\n# Using the context from enable_git_model_versioning()\ncontext = mlflow.genai.enable_git_model_versioning()\n\ntraces = mlflow.search_traces(model_id=context.active_model.model_id)\nprint(traces)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can use ",(0,o.jsx)(p.B,{fn:"mlflow.get_logged_model"})," to get details of the LoggedModel including Git metadata:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'import mlflow\nimport datetime\n\n# Get the active Git-based version\ncontext = mlflow.genai.enable_git_model_versioning()\n\n# Get LoggedModel metadata\nlogged_model = mlflow.get_logged_model(model_id=context.active_model.model_id)\n\n# Inspect basic properties\nprint(f"\\n=== LoggedModel Information ===")\nprint(logged_model)\n\n# Access Git metadata from tags\nprint(f"\\n=== Git Information ===")\ngit_tags = {k: v for k, v in logged_model.tags.items() if k.startswith("mlflow.git")}\nfor tag_key, tag_value in git_tags.items():\n    if tag_key == "mlflow.git.diff" and len(tag_value) > 100:\n        print(f"{tag_key}: <diff with {len(tag_value)} characters>")\n    else:\n        print(f"{tag_key}: {tag_value}")\n'})}),"\n",(0,o.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(t.p,{children:"Now that you understand the basics of Git-based application versioning with MLflow, you can explore these related topics:"}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(c.A,{href:"/genai/version-tracking/compare-app-versions",title:"Compare App Versions",description:"Learn systematic approaches to evaluate different versions using trace-based comparison",icon:u.A}),(0,o.jsx)(c.A,{href:"/genai/version-tracking/quickstart",title:"Version Tracking Quickstart",description:"Get started quickly with a hands-on guide to version tracking in MLflow",icon:y.A})]})]})}function G(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(A,{...e})}):A(e)}},22492:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("shield",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}]])},22864:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("chart-column",[["path",{d:"M3 3v16a2 2 0 0 0 2 2h16",key:"c24i48"}],["path",{d:"M18 17V9",key:"2bz60n"}],["path",{d:"M13 17V5",key:"1frdt8"}],["path",{d:"M8 17v-3",key:"17ska0"}]])},28453:(e,t,i)=>{i.d(t,{R:()=>l,x:()=>r});var n=i(96540);const o={},a=n.createContext(o);function l(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(a.Provider,{value:t},e.children)}},49374:(e,t,i)=>{i.d(t,{B:()=>r});i(96540);const n=JSON.parse('{"mlflow.ag2":"api_reference/python_api/mlflow.ag2.html","mlflow.agno":"api_reference/python_api/mlflow.agno.html","mlflow.anthropic":"api_reference/python_api/mlflow.anthropic.html","mlflow.artifacts":"api_reference/python_api/mlflow.artifacts.html","mlflow.autogen":"api_reference/python_api/mlflow.autogen.html","mlflow.bedrock":"api_reference/python_api/mlflow.bedrock.html","mlflow.catboost":"api_reference/python_api/mlflow.catboost.html","mlflow.client":"api_reference/python_api/mlflow.client.html","mlflow.config":"api_reference/python_api/mlflow.config.html","mlflow.crewai":"api_reference/python_api/mlflow.crewai.html","mlflow.data":"api_reference/python_api/mlflow.data.html","mlflow.deployments":"api_reference/python_api/mlflow.deployments.html","mlflow.diviner":"api_reference/python_api/mlflow.diviner.html","mlflow.dspy":"api_reference/python_api/mlflow.dspy.html","mlflow.entities":"api_reference/python_api/mlflow.entities.html","mlflow.environment_variables":"api_reference/python_api/mlflow.environment_variables.html","mlflow.gateway":"api_reference/python_api/mlflow.gateway.html","mlflow.gemini":"api_reference/python_api/mlflow.gemini.html","mlflow.genai":"api_reference/python_api/mlflow.genai.html","mlflow.groq":"api_reference/python_api/mlflow.groq.html","mlflow.h2o":"api_reference/python_api/mlflow.h2o.html","mlflow.johnsnowlabs":"api_reference/python_api/mlflow.johnsnowlabs.html","mlflow.keras":"api_reference/python_api/mlflow.keras.html","mlflow.langchain":"api_reference/python_api/mlflow.langchain.html","mlflow.lightgbm":"api_reference/python_api/mlflow.lightgbm.html","mlflow.litellm":"api_reference/python_api/mlflow.litellm.html","mlflow.llama_index":"api_reference/python_api/mlflow.llama_index.html","mlflow.metrics":"api_reference/python_api/mlflow.metrics.html","mlflow.mistral":"api_reference/python_api/mlflow.mistral.html","mlflow.models":"api_reference/python_api/mlflow.models.html","mlflow.onnx":"api_reference/python_api/mlflow.onnx.html","mlflow.openai":"api_reference/python_api/mlflow.openai.html","mlflow.paddle":"api_reference/python_api/mlflow.paddle.html","mlflow.pmdarima":"api_reference/python_api/mlflow.pmdarima.html","mlflow.projects":"api_reference/python_api/mlflow.projects.html","mlflow.promptflow":"api_reference/python_api/mlflow.promptflow.html","mlflow.prophet":"api_reference/python_api/mlflow.prophet.html","mlflow.pydantic_ai":"api_reference/python_api/mlflow.pydantic_ai.html","mlflow.pyfunc":"api_reference/python_api/mlflow.pyfunc.html","mlflow.pyspark.ml":"api_reference/python_api/mlflow.pyspark.ml.html","mlflow.pytorch":"api_reference/python_api/mlflow.pytorch.html","mlflow":"api_reference/python_api/mlflow.html","mlflow.sagemaker":"api_reference/python_api/mlflow.sagemaker.html","mlflow.sentence_transformers":"api_reference/python_api/mlflow.sentence_transformers.html","mlflow.server":"api_reference/python_api/mlflow.server.html","mlflow.shap":"api_reference/python_api/mlflow.shap.html","mlflow.sklearn":"api_reference/python_api/mlflow.sklearn.html","mlflow.smolagents":"api_reference/python_api/mlflow.smolagents.html","mlflow.spacy":"api_reference/python_api/mlflow.spacy.html","mlflow.spark":"api_reference/python_api/mlflow.spark.html","mlflow.statsmodels":"api_reference/python_api/mlflow.statsmodels.html","mlflow.system_metrics":"api_reference/python_api/mlflow.system_metrics.html","mlflow.tensorflow":"api_reference/python_api/mlflow.tensorflow.html","mlflow.tracing":"api_reference/python_api/mlflow.tracing.html","mlflow.transformers":"api_reference/python_api/mlflow.transformers.html","mlflow.types":"api_reference/python_api/mlflow.types.html","mlflow.utils":"api_reference/python_api/mlflow.utils.html","mlflow.webhooks":"api_reference/python_api/mlflow.webhooks.html","mlflow.xgboost":"api_reference/python_api/mlflow.xgboost.html","mlflow.server.auth":"api_reference/auth/python-api.html","mlflow.server.cli":"api_reference/cli.html","mlflow.r":"api_reference/R-api.html","mlflow.java":"api_reference/java_api/index.html","mlflow.python":"api_reference/python_api/index.html","mlflow.rest":"api_reference/rest-api.html","mlflow.typescript":"api_reference/typescript_api/index.html","mlflow.llms.deployments.api":"api_reference/llms/deployments/api.html"}');var o=i(86025),a=i(74848);const l=e=>{const t=e.split(".");for(let i=t.length;i>0;i--){const e=t.slice(0,i).join(".");if(n[e])return e}return null};function r({fn:e,children:t,hash:i}){const r=l(e);if(!r)return(0,a.jsx)(a.Fragment,{children:t});const s=(0,o.Ay)(`/${n[r]}#${i??e}`);return(0,a.jsx)("a",{href:s,target:"_blank",children:t??(0,a.jsxs)("code",{children:[e,"()"]})})}},51004:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]])},56808:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("circle-play",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["polygon",{points:"10 8 16 12 10 16 10 8",key:"1cimsy"}]])},61878:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("git-branch",[["line",{x1:"6",x2:"6",y1:"3",y2:"15",key:"17qcm7"}],["circle",{cx:"18",cy:"6",r:"3",key:"1h7g24"}],["circle",{cx:"6",cy:"18",r:"3",key:"fqmcym"}],["path",{d:"M18 9a9 9 0 0 1-9 9",key:"n2h4wq"}]])},65592:(e,t,i)=>{i.d(t,{A:()=>l});i(96540);var n=i(34164);const o={tilesGrid:"tilesGrid_hB9N"};var a=i(74848);function l({children:e,className:t}){return(0,a.jsx)("div",{className:(0,n.A)(o.tilesGrid,t),children:e})}},66927:(e,t,i)=>{i.d(t,{A:()=>l});i(96540);const n={container:"container_JwLF",imageWrapper:"imageWrapper_RfGN",image:"image_bwOA",caption:"caption_jo2G"};var o=i(86025),a=i(74848);function l({src:e,alt:t,width:i,caption:l,className:r}){return(0,a.jsxs)("div",{className:`${n.container} ${r||""}`,children:[(0,a.jsx)("div",{className:n.imageWrapper,style:i?{width:i}:{},children:(0,a.jsx)("img",{src:(0,o.Ay)(e),alt:t,className:n.image})}),l&&(0,a.jsx)("p",{className:n.caption,children:l})]})}},79206:(e,t,i)=>{i.d(t,{A:()=>a});i(96540);const n={conceptOverview:"conceptOverview_x8T_",overviewTitle:"overviewTitle_HyAI",conceptGrid:"conceptGrid_uJNV",conceptCard:"conceptCard_oday",conceptHeader:"conceptHeader_HCk5",conceptIcon:"conceptIcon_gejw",conceptTitle:"conceptTitle_TGMM",conceptDescription:"conceptDescription_ZyDn"};var o=i(74848);function a({concepts:e,title:t}){return(0,o.jsxs)("div",{className:n.conceptOverview,children:[t&&(0,o.jsx)("h3",{className:n.overviewTitle,children:t}),(0,o.jsx)("div",{className:n.conceptGrid,children:e.map((e,t)=>(0,o.jsxs)("div",{className:n.conceptCard,children:[(0,o.jsxs)("div",{className:n.conceptHeader,children:[e.icon&&(0,o.jsx)("div",{className:n.conceptIcon,children:(0,o.jsx)(e.icon,{size:20})}),(0,o.jsx)("h4",{className:n.conceptTitle,children:e.title})]}),(0,o.jsx)("p",{className:n.conceptDescription,children:e.description})]},t))})]})}},80964:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},82238:(e,t,i)=>{i.d(t,{A:()=>a});i(96540);const n={featureHighlights:"featureHighlights_Ardf",highlightItem:"highlightItem_XPnN",highlightIcon:"highlightIcon_SUR8",highlightContent:"highlightContent_d0XP"};var o=i(74848);function a({features:e}){return(0,o.jsx)("div",{className:n.featureHighlights,children:e.map((e,t)=>(0,o.jsxs)("div",{className:n.highlightItem,children:[e.icon&&(0,o.jsx)("div",{className:n.highlightIcon,children:(0,o.jsx)(e.icon,{size:24})}),(0,o.jsxs)("div",{className:n.highlightContent,children:[(0,o.jsx)("h4",{children:e.title}),(0,o.jsx)("p",{children:e.description})]})]},t))})}},84722:(e,t,i)=>{i.d(t,{A:()=>c});var n=i(96540);const o=e=>{const t=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,t,i)=>i?i.toUpperCase():t.toLowerCase()))(e);return t.charAt(0).toUpperCase()+t.slice(1)},a=(...e)=>e.filter((e,t,i)=>Boolean(e)&&""!==e.trim()&&i.indexOf(e)===t).join(" ").trim(),l=e=>{for(const t in e)if(t.startsWith("aria-")||"role"===t||"title"===t)return!0};var r={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const s=(0,n.forwardRef)(({color:e="currentColor",size:t=24,strokeWidth:i=2,absoluteStrokeWidth:o,className:s="",children:c,iconNode:p,...h},m)=>(0,n.createElement)("svg",{ref:m,...r,width:t,height:t,stroke:e,strokeWidth:o?24*Number(i)/Number(t):i,className:a("lucide",s),...!c&&!l(h)&&{"aria-hidden":"true"},...h},[...p.map(([e,t])=>(0,n.createElement)(e,t)),...Array.isArray(c)?c:[c]])),c=(e,t)=>{const i=(0,n.forwardRef)(({className:i,...l},r)=>{return(0,n.createElement)(s,{ref:r,iconNode:t,className:a(`lucide-${c=o(e),c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,i),...l});var c});return i.displayName=o(e),i}},93672:(e,t,i)=>{i.d(t,{A:()=>n});const n=(0,i(84722).A)("code-xml",[["path",{d:"m18 16 4-4-4-4",key:"1inbqp"}],["path",{d:"m6 8-4 4 4 4",key:"15zrgr"}],["path",{d:"m14.5 4-5 16",key:"e7oirm"}]])}}]);