"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5863],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(96540);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},60491:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"governance/unity-catalog","title":"Unity Catalog Integration","description":"This example illustrates the use of the Unity Catalog (UC) integration with the MLflow AI Gateway.","source":"@site/docs/genai/governance/unity-catalog.mdx","sourceDirName":"governance","slug":"/governance/unity-catalog","permalink":"/docs/latest/genai/governance/unity-catalog","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Use the AI Gateway","permalink":"/docs/latest/genai/governance/ai-gateway/guides/step2-query-deployments/"},"next":{"title":"MLflow Data Model","permalink":"/docs/latest/genai/data-model/"}}');var o=t(74848),s=t(28453);const r={},i="Unity Catalog Integration",c={},l=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Running the gateway server",id:"running-the-gateway-server",level:2},{value:"Query the Endpoint with UC Function",id:"query-the-endpoint-with-uc-function",level:2},{value:"What&#39;s happening under the hood?",id:"whats-happening-under-the-hood",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"unity-catalog-integration",children:"Unity Catalog Integration"})}),"\n",(0,o.jsxs)(n.p,{children:["This example illustrates the use of the ",(0,o.jsx)(n.a,{href:"https://docs.databricks.com/en/data-governance/unity-catalog/index.html",children:"Unity Catalog (UC)"})," integration with the MLflow AI Gateway.\nThis integration enables you to leverage functions registered in Unity Catalog as tools for enhancing your chat application."]}),"\n",(0,o.jsx)(n.h2,{id:"pre-requisites",children:"Pre-requisites"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Clone the MLflow repository:"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To download the files required for this example, clone the MLflow repository:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone --depth=1 https://github.com/mlflow/mlflow.git\ncd mlflow\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you don't have ",(0,o.jsx)(n.code,{children:"git"}),", you can download the repository as a zip file from ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/archive/refs/heads/master.zip",children:"https://github.com/mlflow/mlflow/archive/refs/heads/master.zip"}),"."]}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Install the required packages:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install mlflow>=2.14.0 openai databricks-sdk\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:["Create the UC function used in ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/blob/master/examples/gateway/uc_functions/run.py",children:"the example script"})," in your Databricks workspace by running the following SQL command:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"CREATE OR REPLACE FUNCTION\nmy.uc_func.add (\n  x INTEGER COMMENT 'The first number to add.',\n  y INTEGER COMMENT 'The second number to add.'\n)\nRETURNS INTEGER\nLANGUAGE SQL\nRETURN x + y\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To define your own function, see ",(0,o.jsx)(n.a,{href:"https://docs.databricks.com/en/sql/language-manual/sql-ref-syntax-ddl-create-sql-function.html#create-function-sql-and-python",children:"https://docs.databricks.com/en/sql/language-manual/sql-ref-syntax-ddl-create-sql-function.html#create-function-sql-and-python"}),"."]}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:["Create a SQL warehouse by following the instructions at ",(0,o.jsx)(n.a,{href:"https://docs.databricks.com/en/compute/sql-warehouse/create.html",children:"https://docs.databricks.com/en/compute/sql-warehouse/create.html"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"running-the-gateway-server",children:"Running the gateway server"}),"\n",(0,o.jsx)(n.p,{children:"Once you have completed the pre-requisites, you can start the gateway server:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Required to authenticate with Databricks. See https://docs.databricks.com/en/dev-tools/auth/index.html#supported-authentication-types-by-databricks-tool-or-sdk for other authentication methods.\nexport DATABRICKS_HOST="..."\nexport DATABRICKS_TOKEN="..."\n\n# Required to execute UC functions. See https://docs.databricks.com/en/integrations/compute-details.html#get-connection-details-for-a-databricks-compute-resource for how to get the http path of your warehouse.\n# The last part of the http path is the warehouse ID.\n#\n# /sql/1.0/warehouses/1234567890123456\n#                     ^^^^^^^^^^^^^^^^\nexport DATABRICKS_WAREHOUSE_ID="..."\n\n# Required to authenticate with OpenAI.\n# See https://platform.openai.com/docs/guides/authentication for how to get your API key.\nexport OPENAI_API_KEY="..."\n\n# Enable Unity Catalog integration\nexport MLFLOW_ENABLE_UC_FUNCTIONS=true\n\n# Run the server\nmlflow gateway start --config-path examples/gateway/deployments_server/openai/config.yaml --port 7000\n'})}),"\n",(0,o.jsx)(n.h2,{id:"query-the-endpoint-with-uc-function",children:"Query the Endpoint with UC Function"}),"\n",(0,o.jsx)(n.p,{children:"Once the server is running, you can run the example script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# `run.py` uses the `openai.OpenAI` client to query the gateway server,\n# but it throws an error if the `OPENAI_API_KEY` environment variable is not set.\n# To avoid this error, use a dummy API key.\nexport OPENAI_API_KEY="test"\n\n# Replace `my.uc_func.add` if your UC function has a different name\npython examples/gateway/uc_functions/run.py  --uc-function-name my.uc_func.add\n'})}),"\n",(0,o.jsx)(n.h2,{id:"whats-happening-under-the-hood",children:"What's happening under the hood?"}),"\n",(0,o.jsxs)(n.p,{children:["When MLflow AI Gateway receives a request with ",(0,o.jsx)(n.code,{children:"tools"})," containing ",(0,o.jsx)(n.code,{children:"uc_function"}),", it automatically fetches the UC function metadata to construct the function schema,\nquery the chat API to figure out the parameters required to call the function, and then call the function with the provided parameters."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'uc_function = {\n    "type": "uc_function",\n    "uc_function": {\n        "name": args.uc_function_name,\n    },\n}\n\nresp = client.chat.completions.create(\n    model="chat",\n    messages=[\n        {\n            "role": "user",\n            "content": "What is the result of 1 + 2?",\n        }\n    ],\n    tools=[uc_function],\n)\n\nprint(resp.choices[0].message.content)  # -> The result of 1 + 2 is 3\n'})}),"\n",(0,o.jsx)(n.p,{children:"The code above is equivalent to the following:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# Function tool schema:\n# https://platform.openai.com/docs/api-reference/chat/create#chat-create-tools\nfunction = {\n    "type": "function",\n    "function": {\n        "description": None,\n        "name": "my.uc_func.add",\n        "parameters": {\n            "type": "object",\n            "properties": {\n                "x": {\n                    "type": "integer",\n                    "name": "x",\n                    "description": "The first number to add.",\n                },\n                "y": {\n                    "type": "integer",\n                    "name": "y",\n                    "description": "The second number to add.",\n                },\n            },\n            "required": ["x", "y"],\n        },\n    },\n}\n\nmessages = [\n    {\n        "role": "user",\n        "content": "What is the result of 1 + 2?",\n    }\n]\n\nresp = client.chat.completions.create(\n    model="chat",\n    tools=[function],\n)\n\nresp_message = resp.choices[0].message\nmessages.append(resp_message)\ntool_call = tool_calls[0]\narguments = json.loads(tool_call.function.arguments)\nresult = arguments["x"] + arguments["y"]\nmessages.append(\n    {\n        "tool_call_id": tool_call.id,\n        "role": "tool",\n        "name": "my.uc_func.add",\n        "content": str(result),\n    }\n)\n\nfinal_resp = client.chat.messages.create(\n    model="chat",\n    messages=messages,\n)\n\nprint(final_resp.choices[0].message.content)  # -> The result of 1 + 2 is 3\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);