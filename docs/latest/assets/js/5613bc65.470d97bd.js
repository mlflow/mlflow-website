"use strict";(globalThis.webpackChunkdocs=globalThis.webpackChunkdocs||[]).push([[2188],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},74963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"security/custom","title":"Custom Authentication","description":"MLflow\'s authentication system is designed to be extensible. You can use custom authentication methods through plugins or pluggable functions.","source":"@site/docs/self-hosting/security/custom.md","sourceDirName":"security","slug":"/security/custom","permalink":"/mlflow-website/docs/latest/self-hosting/security/custom","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"selfHostingSidebar","previous":{"title":"SSO (Single Sign-On)","permalink":"/mlflow-website/docs/latest/self-hosting/security/sso"},"next":{"title":"Upgrade","permalink":"/mlflow-website/docs/latest/self-hosting/migration"}}');var o=t(74848),s=t(28453);const a={},r="Custom Authentication",l={},c=[{value:"Using a Plugin",id:"using-a-plugin",level:3},{value:"Using a Function",id:"using-a-function",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"custom-authentication",children:"Custom Authentication"})}),"\n",(0,o.jsx)(n.p,{children:"MLflow's authentication system is designed to be extensible. You can use custom authentication methods through plugins or pluggable functions."}),"\n",(0,o.jsx)(n.h3,{id:"using-a-plugin",children:"Using a Plugin"}),"\n",(0,o.jsxs)(n.p,{children:["If your organization desires more advanced authentication logic\n(e.g., token-based authentication), it is possible to install a third party plugin or to create your own plugin. For example, you can install the ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow-oidc/mlflow-oidc-auth",children:"mlflow-oidc-auth"})," plugin to enable OIDC-based SSO."]}),"\n",(0,o.jsxs)(n.p,{children:["Your plugin should be an installable Python package. It should include an app factory that extends the MLflow app and, optionally, implement a client to manage permissions.\nThe app factory function name will be passed to the ",(0,o.jsx)(n.code,{children:"--app"})," argument in Flask CLI.\nSee ",(0,o.jsx)(n.a,{href:"https://flask.palletsprojects.com/en/latest/cli/#application-discovery",children:"https://flask.palletsprojects.com/en/latest/cli/#application-discovery"})," for more information."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="Example: my_auth/__init__.py"',children:'from flask import Flask, Response, request\nfrom werkzeug.datastructures import Authorization\n\nfrom mlflow.server import app\nfrom mlflow.server.handlers import catch_mlflow_exception\n\n\ndef authenticate_request_custom() -> Authorization | Response:\n    """Custom auth logic for your organization."""\n    ...\n\n\n@catch_mlflow_exception\ndef _before_request():\n    if request.path.startswith("/public"):\n        return\n\n    authorization = authenticate_request_custom()\n    if isinstance(authorization, Response):\n        return authorization\n\n    # Perform additional authorization checks with the Authorization object as needed.\n\n\ndef create_app(app: Flask = app):\n    app.add_url_rule("/api/custom-auth/login", view_func=..., methods=["POST"])\n    app.before_request(_before_request)\n    return app\n\n\nclass MyAuthClient:\n    ...\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then, the plugin should be installed in your Python environment:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install my_auth\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, register your plugin in ",(0,o.jsx)(n.code,{children:"mlflow/setup.py"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'setup(\n    ...,\n    entry_points="""\n        ...\n\n        [mlflow.app]\n        my-auth=my_auth:create_app\n\n        [mlflow.app.client]\n        my-auth=my_auth:MyAuthClient\n    """,\n)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then, you can start the MLflow server:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mlflow server --app-name my-auth\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-a-function",children:"Using a Function"}),"\n",(0,o.jsx)(n.p,{children:"You can configure the server to use a custom authentication function extending MLflow's authentication system."}),"\n",(0,o.jsx)(n.p,{children:"First, install the auth extension:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"pip install mlflow[auth]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Create a custom authentication function. The function should return a ",(0,o.jsx)(n.code,{children:"werkzeug.datastructures.Authorization"})," object if\nthe request is authenticated, or a ",(0,o.jsx)(n.code,{children:"Response"})," object (typically\n",(0,o.jsx)(n.code,{children:"401: Unauthorized"}),") if the request is not authenticated. See ",(0,o.jsx)(n.a,{href:"https://github.com/mlflow/mlflow/blob/master/examples/jwt_auth/jwt_auth.py",children:"this example"})," for the reference implementation."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"# custom_auth.py\nfrom werkzeug.datastructures import Authorization\nfrom flask import Response\n\n\ndef custom_authenticate() -> Union[Authorization, Response]:\n    # Your custom authentication logic\n    # Return Authorization object if authenticated\n    # Return Response object (401) if not authenticated\n    pass\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, update the auth configuration to use your custom function. The config file is located at ",(0,o.jsx)(n.code,{children:"mlflow/server/auth/basic_auth.ini"})," by default. Alternatively, assign the environment variable ",(0,o.jsx)(n.code,{children:"MLFLOW_AUTH_CONFIG_PATH"})," to point to your custom configuration file. Set the ",(0,o.jsx)(n.code,{children:"authorization_function"})," setting with the value specifies ",(0,o.jsx)(n.code,{children:"module_name:function_name"}),". The function has the following signature:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ini",children:"# /path/to/auth_config.ini\n[mlflow]\nauthorization_function = mlflow.server.auth:custom_authenticate\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Finally, start the MLflow server with the ",(0,o.jsx)(n.code,{children:"--app-name"})," flag to enable authentication."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mlflow server --app-name basic-auth\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);