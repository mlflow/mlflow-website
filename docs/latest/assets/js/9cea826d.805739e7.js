"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7393],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},79944:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"data-model/model-registry","title":"MLflow Model Registry Data Model for GenAI","description":"MLflow Model Registry provides a centralized model store, set of APIs, and UI for managing the full lifecycle of AI models. For GenAI applications, the Model Registry serves as the system of record for production-ready models, agents, and AI applications, enabling collaborative model management and deployment workflows.","source":"@site/docs/genai/data-model/model-registry.mdx","sourceDirName":"data-model","slug":"/data-model/model-registry","permalink":"/docs/latest/genai/data-model/model-registry","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"genAISidebar","previous":{"title":"Version Tracking","permalink":"/docs/latest/genai/data-model/app-versions"}}');var s=o(74848),r=o(28453);const i={},l="MLflow Model Registry Data Model for GenAI",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Model Registry Core Concepts",id:"model-registry-core-concepts",level:2},{value:"Registered Model",id:"registered-model",level:3},{value:"Model Version",id:"model-version",level:3},{value:"Stage Transitions",id:"stage-transitions",level:3},{value:"Model Registry Data Model",id:"model-registry-data-model",level:2},{value:"Registry Entity Relationships",id:"registry-entity-relationships",level:3},{value:"GenAI Model Registration Workflow",id:"genai-model-registration-workflow",level:2},{value:"From Development to Production",id:"from-development-to-production",level:3},{value:"Code Example: Registering a GenAI Model",id:"code-example-registering-a-genai-model",level:2},{value:"Model Registry API for GenAI",id:"model-registry-api-for-genai",level:2},{value:"Key API Operations",id:"key-api-operations",level:3},{value:"Deployment Integration",id:"deployment-integration",level:2},{value:"From Registry to Production",id:"from-registry-to-production",level:3},{value:"Best Practices for GenAI Models",id:"best-practices-for-genai-models",level:2},{value:"Model Organization",id:"model-organization",level:3},{value:"Stage Management",id:"stage-management",level:3},{value:"Collaboration Workflows",id:"collaboration-workflows",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Model Lineage Tracking",id:"model-lineage-tracking",level:3},{value:"Integration with MLflow Ecosystem",id:"integration-with-mlflow-ecosystem",level:2},{value:"Comprehensive Platform Integration",id:"comprehensive-platform-integration",level:3},{value:"Summary",id:"summary",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mlflow-model-registry-data-model-for-genai",children:"MLflow Model Registry Data Model for GenAI"})}),"\n",(0,s.jsxs)(n.p,{children:["MLflow ",(0,s.jsx)(n.strong,{children:"Model Registry"})," provides a centralized model store, set of APIs, and UI for managing the full lifecycle of AI models. For GenAI applications, the Model Registry serves as the system of record for production-ready models, agents, and AI applications, enabling collaborative model management and deployment workflows."]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Model Registry acts as a centralized hub for model lifecycle management, providing versioning, stage transitions, and deployment coordination for GenAI applications."}),"\n",(0,s.jsx)(n.h2,{id:"model-registry-core-concepts",children:"Model Registry Core Concepts"}),"\n",(0,s.jsx)(n.h3,{id:"registered-model",children:"Registered Model"}),"\n",(0,s.jsx)(n.p,{children:"A Registered Model represents a unique model in the registry, which can have multiple versions:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    RM[\ud83d\udce6 Registered Model: chat-agent]\n\n    PROPERTIES[<strong>Model Properties</strong><br/>\ud83d\udcdd Name: chat-agent<br/>\ud83d\udcc4 Description: Customer service chatbot<br/>\ud83c\udff7\ufe0f Tags: genai, langchain, gpt-4<br/>\ud83d\udcc5 Created: 2024-03-15]\n\n    VERSIONS[<strong>Model Versions</strong><br/>\u2022 Version 1: Initial deployment<br/>\u2022 Version 2: Prompt optimization<br/>\u2022 Version 3: RAG integration<br/>\u2022 Version 4: Multi-agent support]\n\n    METADATA[<strong>Model Metadata</strong><br/>\ud83d\udc64 Owner: ai-team<br/>\ud83d\udd10 Permissions<br/>\ud83d\udd04 Source Experiments]\n\n    RM --\x3e PROPERTIES\n    RM --\x3e VERSIONS\n    RM --\x3e METADATA\n\n    classDef main fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px\n    classDef box fill:#f0f8ff,stroke:#4682b4,stroke-width:2px\n\n    class RM main\n    class PROPERTIES,VERSIONS,METADATA box"}),"\n",(0,s.jsx)(n.h3,{id:"model-version",children:"Model Version"}),"\n",(0,s.jsx)(n.p,{children:"Each version of a Registered Model contains specific artifacts and metadata:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    MV[Model Version: chat-agent v3]\n\n    INFO[<strong>Version Info</strong><br/>\u2022 Version: 3<br/>\u2022 Created: 2024-04-20<br/>\u2022 Status: READY]\n\n    ARTIFACTS[<strong>Artifacts</strong><br/>\u2022 Model Files<br/>\u2022 Dependencies<br/>\u2022 Signature<br/>\u2022 Examples]\n\n    DEPLOY[<strong>Deployment</strong><br/>\u2022 Stage: Production<br/>\u2022 Endpoint<br/>\u2022 Aliases: latest, stable]\n\n    MV --\x3e INFO\n    MV --\x3e ARTIFACTS\n    MV --\x3e DEPLOY\n\n    classDef main fill:#e8f5e8,stroke:#2e7d32,stroke-width:3px\n    classDef box fill:#f0f8ff,stroke:#4682b4,stroke-width:2px\n\n    class MV main\n    class INFO,ARTIFACTS,DEPLOY box"}),"\n",(0,s.jsx)(n.h3,{id:"stage-transitions",children:"Stage Transitions"}),"\n",(0,s.jsx)(n.p,{children:"Model versions move through defined stages in their lifecycle:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n    subgraph LIFECYCLE[\ud83d\udd04 Model Version Lifecycle]\n        direction TB\n\n        NONE[\ud83d\udcdd None]\n        STAGING[\ud83e\uddea Staging]\n        PROD[\u2705 Production]\n        ARCHIVED[\ud83d\udce6 Archived]\n\n        NONE --\x3e|Promote| STAGING\n        STAGING --\x3e|Validate & Promote| PROD\n        STAGING --\x3e|Reject| ARCHIVED\n        PROD --\x3e|Retire| ARCHIVED\n        ARCHIVED --\x3e|Reactivate| STAGING\n    end\n\n    classDef noneStyle fill:#f5f5f5,stroke:#424242,stroke-width:2px,color:#000\n    classDef stagingStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef prodStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000\n    classDef archivedStyle fill:#ffebee,stroke:#d32f2f,stroke-width:2px,color:#000\n\n    class NONE noneStyle\n    class STAGING stagingStyle\n    class PROD prodStyle\n    class ARCHIVED archivedStyle"}),"\n",(0,s.jsx)(n.h2,{id:"model-registry-data-model",children:"Model Registry Data Model"}),"\n",(0,s.jsx)(n.h3,{id:"registry-entity-relationships",children:"Registry Entity Relationships"}),"\n",(0,s.jsx)(n.p,{children:"The Model Registry maintains relationships between models, versions, and deployment stages:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    subgraph DATA_MODEL[\ud83d\udcca Registry Data Model]\n        direction TB\n\n        subgraph ENTITIES[\ud83c\udfdb\ufe0f Core Entities]\n            REG_MODEL[\ud83d\udce6 RegisteredModel]\n            MODEL_VER[\ud83d\udcca ModelVersion]\n            MODEL_ALIAS[\ud83c\udff7\ufe0f ModelAlias]\n        end\n\n        subgraph RELATIONSHIPS[\ud83d\udd17 Relationships]\n            ONE_TO_MANY[1:N Model to Versions]\n            VERSION_STAGES[Version to Stage Mapping]\n            ALIAS_MAPPING[Alias to Version Mapping]\n        end\n\n        subgraph ATTRIBUTES[\ud83d\udccb Key Attributes]\n            MODEL_ATTRS[Model: name, tags, description]\n            VERSION_ATTRS[Version: number, stage, run_id]\n            ALIAS_ATTRS[Alias: name, version]\n        end\n\n        REG_MODEL --\x3e|has many| MODEL_VER\n        MODEL_VER --\x3e|has stage| VERSION_STAGES\n        REG_MODEL --\x3e|has aliases| MODEL_ALIAS\n        MODEL_ALIAS --\x3e|points to| MODEL_VER\n    end\n\n    classDef entityStyle fill:#e3f2fd,stroke:#0277bd,stroke-width:2px,color:#000\n    classDef relationStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef attrStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000\n\n    class ENTITIES,REG_MODEL,MODEL_VER,MODEL_ALIAS entityStyle\n    class RELATIONSHIPS,ONE_TO_MANY,VERSION_STAGES,ALIAS_MAPPING relationStyle\n    class ATTRIBUTES,MODEL_ATTRS,VERSION_ATTRS,ALIAS_ATTRS attrStyle"}),"\n",(0,s.jsx)(n.h2,{id:"genai-model-registration-workflow",children:"GenAI Model Registration Workflow"}),"\n",(0,s.jsx)(n.h3,{id:"from-development-to-production",children:"From Development to Production"}),"\n",(0,s.jsx)(n.p,{children:"The typical workflow for registering GenAI models:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    subgraph REGISTRATION_FLOW[\ud83d\udcdd Registration Workflow]\n        direction TB\n\n        subgraph DEVELOPMENT[\ud83d\udd27 Development Phase]\n            CREATE[Create GenAI Model]\n            TEST[Test & Validate]\n            LOG[Log Model with MLflow]\n        end\n\n        subgraph REGISTRATION[\ud83d\udce6 Registration Phase]\n            REGISTER[Register Model]\n            VERSION[Create Version]\n            METADATA[Add Metadata & Tags]\n        end\n\n        subgraph VALIDATION[\ud83e\uddea Validation Phase]\n            STAGE_TEST[Deploy to Staging]\n            EVALUATE[Run Evaluations]\n            APPROVE[Approval Process]\n        end\n\n        subgraph PRODUCTION[\ud83d\ude80 Production Phase]\n            PROMOTE[Promote to Production]\n            DEPLOY[Deploy to Endpoints]\n            MONITOR[Monitor Performance]\n        end\n\n        DEVELOPMENT --\x3e REGISTRATION\n        REGISTRATION --\x3e VALIDATION\n        VALIDATION --\x3e PRODUCTION\n    end\n\n    classDef devStyle fill:#e3f2fd,stroke:#0277bd,stroke-width:2px,color:#000\n    classDef regStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef valStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000\n    classDef prodStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000\n\n    class DEVELOPMENT,CREATE,TEST,LOG devStyle\n    class REGISTRATION,REGISTER,VERSION,METADATA regStyle\n    class VALIDATION,STAGE_TEST,EVALUATE,APPROVE valStyle\n    class PRODUCTION,PROMOTE,DEPLOY,MONITOR prodStyle"}),"\n",(0,s.jsx)(n.h2,{id:"code-example-registering-a-genai-model",children:"Code Example: Registering a GenAI Model"}),"\n",(0,s.jsx)(n.p,{children:"Here's a practical example of registering a LangChain-based chatbot in the Model Registry:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import mlflow\nimport os\n\n# Set up MLflow tracking\nmlflow.set_tracking_uri("http://localhost:5000")\nmlflow.set_experiment("chatbot-development")\n\n# Create the chatbot model script\n# %%writefile "./chatbot_model.py"  # Uncomment if running in Jupyter\n\nfrom langchain_openai import ChatOpenAI\nfrom langchain.chains import ConversationChain\nfrom langchain.memory import ConversationBufferMemory\nfrom mlflow.models import set_model\nimport os\n\n\nclass ChatbotModel:\n    def __init__(self):\n        # Initialize LangChain components\n        self.llm = ChatOpenAI(\n            model="gpt-4",\n            temperature=0.7,\n            max_tokens=1000,\n            api_key=os.getenv("OPENAI_API_KEY"),  # Use environment variable\n        )\n\n        self.memory = ConversationBufferMemory()\n\n        self.chatbot = ConversationChain(llm=self.llm, memory=self.memory, verbose=True)\n\n    def invoke(self, input_data):\n        """Handle both direct string input and structured input"""\n        if isinstance(input_data, dict):\n            query = input_data.get("query", input_data.get("input", ""))\n        else:\n            query = str(input_data)\n\n        return self.chatbot.predict(input=query)\n\n\n# Set the model for MLflow\nset_model(ChatbotModel())\n\n# Log the model using Models from Code\nwith mlflow.start_run() as run:\n    # Log model parameters\n    mlflow.log_params(\n        {\n            "model_type": "conversational",\n            "base_model": "gpt-4",\n            "temperature": 0.7,\n            "max_tokens": 1000,\n            "memory_type": "buffer",\n        }\n    )\n\n    # Define input example\n    input_example = {"query": "Hello, how can you help me?"}\n\n    # Log the model using Models from Code\n    model_info = mlflow.langchain.log_model(\n        lc_model="chatbot_model.py",  # Path to the script file\n        name="chatbot",\n        input_example=input_example,\n        registered_model_name="customer-support-chatbot",\n        extra_pip_requirements=["langchain-openai", "langchain"],\n    )\n\n    # Add model metadata\n    client = mlflow.tracking.MlflowClient()\n\n    # Tag the registered model\n    client.set_registered_model_tag(\n        name="customer-support-chatbot", key="team", value="ai-support"\n    )\n\n    client.set_registered_model_tag(\n        name="customer-support-chatbot", key="use_case", value="customer_service"\n    )\n\n    # Update model description\n    client.update_registered_model(\n        name="customer-support-chatbot",\n        description="GPT-4 based chatbot for customer support with conversation memory",\n    )\n\n    # Add version-specific tags\n    client.set_model_version_tag(\n        name="customer-support-chatbot",\n        version=model_info.registered_model_version,\n        key="validation_status",\n        value="pending",\n    )\n\n    print(f"Model registered with version: {model_info.registered_model_version}")\n\n# Create an alias for easy reference\nclient.set_registered_model_alias(\n    name="customer-support-chatbot",\n    alias="champion",\n    version=model_info.registered_model_version,\n)\n\n# Load model from registry for serving using alias\nmodel_uri_alias = "models:/customer-support-chatbot@champion"\nloaded_model = mlflow.langchain.load_model(model_uri_alias)\n\n# Test the loaded model\ntest_query = {"query": "What\'s the weather like?"}\nresponse = loaded_model.invoke(test_query)\nprint(f"Response: {response}")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"model-registry-api-for-genai",children:"Model Registry API for GenAI"}),"\n",(0,s.jsx)(n.h3,{id:"key-api-operations",children:"Key API Operations"}),"\n",(0,s.jsx)(n.p,{children:"The Model Registry provides comprehensive APIs for managing GenAI models:"}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart TB\n    subgraph MODELS[" \ud83d\udce6 Model Operations "]\n        direction TB\n        A1["\ud83c\udd95 create_registered_model<br/><small>Register new model</small>"]\n        A2["\u270f\ufe0f update_registered_model<br/><small>Update metadata</small>"]\n        A3["\ud83d\uddd1\ufe0f delete_registered_model<br/><small>Remove model</small>"]\n        A4["\ud83d\udd0d search_registered_models<br/><small>Find models</small>"]\n    end\n\n    subgraph VERSIONS[" \ud83d\udcca Version Operations "]\n        direction TB\n        B1["\ud83d\udcc8 create_model_version<br/><small>Add new version</small>"]\n        B2["\ud83d\udd27 update_model_version<br/><small>Modify version</small>"]\n        B3["\ud83d\ude80 transition_model_version_stage<br/><small>Change stage</small>"]\n        B4["\ud83d\udccb get_model_version<br/><small>Retrieve version</small>"]\n    end\n\n    subgraph ALIASES[" \ud83c\udff7\ufe0f Alias Operations "]\n        direction TB\n        C1["\ud83d\udd16 set_registered_model_alias<br/><small>Create alias</small>"]\n        C2["\u274c delete_registered_model_alias<br/><small>Remove alias</small>"]\n        C3["\ud83c\udfaf get_model_version_by_alias<br/><small>Load by alias</small>"]\n    end\n\n    MODELS -.-> VERSIONS\n    VERSIONS -.-> ALIASES\n\n    classDef modelBox fill:#e8f4fd,stroke:#1976d2,stroke-width:3px,color:#000\n    classDef versionBox fill:#fff8e1,stroke:#f57c00,stroke-width:3px,color:#000\n    classDef aliasBox fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px,color:#000\n    classDef apiCall fill:#ffffff,stroke:#666,stroke-width:2px,color:#333,font-size:12px\n\n    class MODELS modelBox\n    class VERSIONS versionBox\n    class ALIASES aliasBox\n    class A1,A2,A3,A4,B1,B2,B3,B4,C1,C2,C3 apiCall'}),"\n",(0,s.jsx)(n.h2,{id:"deployment-integration",children:"Deployment Integration"}),"\n",(0,s.jsx)(n.h3,{id:"from-registry-to-production",children:"From Registry to Production"}),"\n",(0,s.jsx)(n.p,{children:"The Model Registry seamlessly integrates with deployment platforms:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph LR\n    subgraph DEPLOYMENT_INTEGRATION[\ud83d\ude80 Deployment Integration]\n        direction TB\n\n        subgraph REGISTRY[\ud83d\udce6 Model Registry]\n            PROD_MODEL[Production Model]\n            MODEL_URI[Model URI]\n            SERVING_INFO[Serving Metadata]\n        end\n\n        subgraph SERVING[\ud83c\udf10 Serving Platforms]\n            MLFLOW_SERVE[MLflow Model Serving]\n            SAGEMAKER[AWS SageMaker]\n            AZURE_ML[Azure ML]\n            VERTEX_AI[Google Vertex AI]\n        end\n\n        subgraph MONITORING[\ud83d\udcca Production Monitoring]\n            PERFORMANCE[Performance Metrics]\n            DRIFT[Model Drift Detection]\n            USAGE[Usage Analytics]\n        end\n\n        REGISTRY --\x3e SERVING\n        SERVING --\x3e MONITORING\n        MONITORING -.->|Feedback| REGISTRY\n    end\n\n    classDef registryStyle fill:#e3f2fd,stroke:#0277bd,stroke-width:2px,color:#000\n    classDef servingStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef monitoringStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000\n\n    class REGISTRY,PROD_MODEL,MODEL_URI,SERVING_INFO registryStyle\n    class SERVING,MLFLOW_SERVE,SAGEMAKER,AZURE_ML,VERTEX_AI servingStyle\n    class MONITORING,PERFORMANCE,DRIFT,USAGE monitoringStyle"}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-for-genai-models",children:"Best Practices for GenAI Models"}),"\n",(0,s.jsx)(n.h3,{id:"model-organization",children:"Model Organization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Naming Conventions"}),": Use descriptive, hierarchical names that indicate the model's purpose and type (e.g., ",(0,s.jsx)(n.code,{children:"nlp/chat/customer-support-v2"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Version Documentation"}),": Document significant changes between versions, including prompt modifications, model upgrades, and performance improvements."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Metadata Standards"}),": Establish consistent metadata schemas for GenAI models, including base model information, context windows, and tool integrations."]}),"\n",(0,s.jsx)(n.h3,{id:"stage-management",children:"Stage Management"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Staging Validation"}),": Always validate GenAI models in staging with representative workloads before production promotion."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"A/B Testing"}),": Use model aliases to enable smooth A/B testing between model versions in production."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rollback Strategy"}),": Maintain previous production versions in an accessible state for quick rollbacks if issues arise."]}),"\n",(0,s.jsx)(n.h3,{id:"collaboration-workflows",children:"Collaboration Workflows"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Access Control"}),": Define clear permissions for model registration, stage transitions, and production deployments."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Review Process"}),": Implement approval workflows for production promotions, especially for customer-facing GenAI applications."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Change Tracking"}),": Use tags and descriptions to track why models were promoted or archived."]}),"\n",(0,s.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,s.jsx)(n.h3,{id:"model-lineage-tracking",children:"Model Lineage Tracking"}),"\n",(0,s.jsx)(n.p,{children:"The Registry maintains complete lineage from experiments to production:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    subgraph LINEAGE_TRACKING[\ud83d\udd04 Model Lineage]\n        direction TB\n\n        EXP[\ud83e\uddea Experiment Run]\n        LOG[\ud83d\udcdd Logged Model]\n        REG[\ud83d\udce6 Registered Model]\n        VER[\ud83d\udcca Model Version]\n        PROD[\ud83d\ude80 Production Deployment]\n\n        EXP --\x3e|Creates| LOG\n        LOG --\x3e|Registers| REG\n        REG --\x3e|Versions| VER\n        VER --\x3e|Deploys| PROD\n\n        PROD -.->|Traces back to| EXP\n    end\n\n    classDef expStyle fill:#e3f2fd,stroke:#0277bd,stroke-width:2px,color:#000\n    classDef logStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef regStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000\n    classDef prodStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000\n\n    class EXP expStyle\n    class LOG logStyle\n    class REG,VER regStyle\n    class PROD prodStyle"}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-mlflow-ecosystem",children:"Integration with MLflow Ecosystem"}),"\n",(0,s.jsx)(n.h3,{id:"comprehensive-platform-integration",children:"Comprehensive Platform Integration"}),"\n",(0,s.jsx)(n.p,{children:"The Model Registry integrates seamlessly with other MLflow components:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TB\n    subgraph ECOSYSTEM[\ud83c\udf10 MLflow Ecosystem Integration]\n        direction TB\n\n        TRACKING[\ud83d\udcca MLflow Tracking]\n        REGISTRY[\ud83d\udce6 Model Registry]\n        SERVING[\ud83d\ude80 Model Serving]\n        EVALUATION[\ud83e\uddea Model Evaluation]\n\n        TRACKING --\x3e|Logs Models| REGISTRY\n        REGISTRY --\x3e|Deploys Models| SERVING\n        SERVING --\x3e|Monitors Performance| EVALUATION\n        EVALUATION --\x3e|Informs Updates| TRACKING\n    end\n\n    classDef trackingStyle fill:#e3f2fd,stroke:#0277bd,stroke-width:2px,color:#000\n    classDef registryStyle fill:#fff3e0,stroke:#ef6c00,stroke-width:2px,color:#000\n    classDef servingStyle fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px,color:#000\n    classDef evalStyle fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#000\n\n    class TRACKING trackingStyle\n    class REGISTRY registryStyle\n    class SERVING servingStyle\n    class EVALUATION evalStyle"}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"The MLflow Model Registry provides a robust foundation for managing GenAI models throughout their lifecycle. By centralizing model management, versioning, and deployment workflows, it enables teams to develop, validate, and deploy AI applications with confidence. The Registry's integration with MLflow's broader ecosystem ensures comprehensive tracking, evaluation, and monitoring capabilities for production GenAI systems."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);