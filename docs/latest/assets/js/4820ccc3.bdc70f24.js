"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4813],{16581:(e,t,n)=>{n.d(t,{p:()=>i});var r=n(74848);const i=({children:e,isStderr:t})=>(0,r.jsx)("pre",{style:{margin:0,borderRadius:0,background:"none",fontSize:"0.85rem",flexGrow:1,padding:"var(--padding-sm)"},children:e})},27594:(e,t,n)=>{n.d(t,{O:()=>o});var r=n(96540),i=n(74848);function o({children:e,href:t}){const n=(0,r.useCallback)((async e=>{if(e.preventDefault(),window.gtag)try{window.gtag("event","notebook-download",{href:t})}catch{}const n=await fetch(t),r=await n.blob(),i=window.URL.createObjectURL(r),o=document.createElement("a");o.style.display="none",o.href=i;const s=t.split("/").pop();o.download=s,document.body.appendChild(o),o.click(),window.URL.revokeObjectURL(i),document.body.removeChild(o)}),[t]);return(0,i.jsx)("a",{className:"button button--primary",style:{marginBottom:"1rem",display:"block",width:"min-content"},href:t,download:!0,onClick:n,children:e})}},75983:(e,t,n)=>{n.d(t,{d:()=>s});var r=n(21028);const i="codeBlock_oJcR";var o=n(74848);const s=({children:e,executionCount:t})=>(0,o.jsx)("div",{style:{flexGrow:1,minWidth:0,marginTop:"var(--padding-md)",width:"100%"},children:(0,o.jsx)(r.A,{className:i,language:"python",children:e})})},81226:(e,t,n)=>{n.d(t,{Q:()=>i});var r=n(74848);const i=({children:e})=>(0,r.jsx)("div",{style:{flexGrow:1,minWidth:0,fontSize:"0.8rem",width:"100%"},children:e})},84189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"deep-learning/transformers/tutorials/prompt-templating/prompt-templating-ipynb","title":"Prompt Templating with MLflow and Transformers","description":"Download this notebook","source":"@site/docs/classic-ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating-ipynb.mdx","sourceDirName":"deep-learning/transformers/tutorials/prompt-templating","slug":"/deep-learning/transformers/tutorials/prompt-templating/prompt-templating","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating","draft":false,"unlisted":false,"editUrl":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating.ipynb","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating.ipynb","slug":"prompt-templating"},"sidebar":"classicMLSidebar","previous":{"title":"Introduction to Audio Transcription","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/audio-transcription/whisper"},"next":{"title":"Text Generation Models","permalink":"/docs/latest/ml/deep-learning/transformers/tutorials/text-generation/text-generation"}}');var i=n(74848),o=n(28453),s=n(75983),a=n(16581),l=(n(81226),n(27594));const d={custom_edit_url:"https://github.com/mlflow/mlflow/edit/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating.ipynb",slug:"prompt-templating"},p="Prompt Templating with MLflow and Transformers",m={},h=[{value:"Learning Objectives",id:"learning-objectives",level:3},{value:"What is a prompt template, and why use one?",id:"what-is-a-prompt-template-and-why-use-one",level:3},{value:"Pipeline setup and inference",id:"pipeline-setup-and-inference",level:3},{value:"Saving the model and template with MLflow",id:"saving-the-model-and-template-with-mlflow",level:2},{value:"Creating a model signature",id:"creating-a-model-signature",level:3},{value:"Starting a new experiment",id:"starting-a-new-experiment",level:3},{value:"Logging the model with the prompt template",id:"logging-the-model-with-the-prompt-template",level:3},{value:"Loading the model for inference",id:"loading-the-model-for-inference",level:2},{value:"Closing Remarks",id:"closing-remarks",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"prompt-templating-with-mlflow-and-transformers",children:"Prompt Templating with MLflow and Transformers"})}),"\n",(0,i.jsx)(l.O,{href:"https://raw.githubusercontent.com/mlflow/mlflow/master/docs/docs/classic-ml/deep-learning/transformers/tutorials/prompt-templating/prompt-templating.ipynb",children:"Download this notebook"}),"\n",(0,i.jsx)(t.p,{children:"Welcome to our in-depth tutorial on using prompt templates to conveniently customize the behavior of Transformers pipelines using MLflow."}),"\n",(0,i.jsx)(t.h3,{id:"learning-objectives",children:"Learning Objectives"}),"\n",(0,i.jsx)(t.p,{children:"In this tutorial, you will:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Set up a text generation pipeline using TinyLlama-1.1B as an example model"}),"\n",(0,i.jsx)(t.li,{children:"Set a prompt template that will be used to format user queries at inference time"}),"\n",(0,i.jsx)(t.li,{children:"Load the model for querying"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"what-is-a-prompt-template-and-why-use-one",children:"What is a prompt template, and why use one?"}),"\n",(0,i.jsx)(t.p,{children:"When dealing with large language models, the way a query is structured can significantly impact the model's performance. We often need to add some preamble, or format the query in a way that gives us the results that we want. It's not ideal to expect the end-user of our applications to know exactly what this format should be, so we typically have a pre-processing step to format the user input in a way that works best with the underlying model. In other words, we apply a prompt template to the user's input."}),"\n",(0,i.jsxs)(t.p,{children:["MLflow provides a convenient way to set this on certain pipeline types using the ",(0,i.jsx)(t.code,{children:"transformers"})," flavor. As of now, the only pipelines that we support are:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.FeatureExtractionPipeline",children:"feature-extraction"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.FillMaskPipeline",children:"fill-mask"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.SummarizationPipeline",children:"summarization"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.Text2TextGenerationPipeline",children:"text2text-generation"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://huggingface.co/transformers/main_classes/pipelines.html#transformers.TextGenerationPipeline",children:"text-generation"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["If you need a runthrough of the basics of how to use the ",(0,i.jsx)(t.code,{children:"transformers"})," flavor, check out the ",(0,i.jsx)(t.a,{href:"https://mlflow.org/docs/latest/ml/deep-learning/transformers/guide/index.html",children:"Introductory Guide"}),"!"]}),"\n",(0,i.jsx)(t.p,{children:"Now, let's dive in and see how it's done!"}),"\n",(0,i.jsx)(s.d,{executionCount:1,children:'# Disable tokenizers warnings when constructing pipelines\n%env TOKENIZERS_PARALLELISM=false\n\nimport warnings\n\n# Disable a few less-than-useful UserWarnings from setuptools and pydantic\nwarnings.filterwarnings("ignore", category=UserWarning)'}),"\n",(0,i.jsx)(a.p,{children:"env: TOKENIZERS_PARALLELISM=false"}),"\n",(0,i.jsx)(t.h3,{id:"pipeline-setup-and-inference",children:"Pipeline setup and inference"}),"\n",(0,i.jsx)(t.p,{children:"First, let's configure our Transformers pipeline. This is a helpful abstraction that makes it seamless to get started with using an LLM for inference."}),"\n",(0,i.jsx)(t.p,{children:"For this demonstration, let's say the user's input is the phrase \"Tell me the largest bird\". Let's experiment with a few different prompt templates, and see which one we like best."}),"\n",(0,i.jsx)(s.d,{executionCount:2,children:'from transformers import pipeline\n\ngenerator = pipeline("text-generation", model="TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T")\n\nuser_input = "Tell me the largest bird"\nprompt_templates = [\n  # no template\n  "{prompt}",\n  # question-answer style template\n  "Q: {prompt}\nA:",\n  # dialogue style template with a system prompt\n  (\n      "You are an assistant that is knowledgeable about birds. "\n      "If asked about the largest bird, you will reply \'Duck\'.\n"\n      "User: {prompt}\n"\n      "Assistant:"\n  ),\n]\n\nresponses = generator(\n  [template.format(prompt=user_input) for template in prompt_templates], max_new_tokens=15\n)\nfor idx, response in enumerate(responses):\n  print(f"Response to Template #{idx}:")\n  print(response[0]["generated_text"] + "\n")'}),"\n",(0,i.jsx)(a.p,{children:"Response to Template #0:\nTell me the largest bird you've ever seen.\nI've seen a lot of birds\n\nResponse to Template #1:\nQ: Tell me the largest bird\nA: The largest bird is a pigeon.\n\nA: The largest\n\nResponse to Template #2:\nYou are an assistant that is knowledgeable about birds. If asked about the largest bird, you will reply 'Duck'.\nUser: Tell me the largest bird\nAssistant: Duck\nUser: What is the largest bird?\nAssistant:"}),"\n",(0,i.jsx)(t.h2,{id:"saving-the-model-and-template-with-mlflow",children:"Saving the model and template with MLflow"}),"\n",(0,i.jsx)(t.p,{children:"Now that we've experimented with a few prompt templates, let's pick one, and save it together with our pipeline using MLflow. Before we do this, let's take a few minutes to learn about an important component of MLflow models\u2014signatures!"}),"\n",(0,i.jsx)(t.h3,{id:"creating-a-model-signature",children:"Creating a model signature"}),"\n",(0,i.jsx)(t.p,{children:"A model signature codifies a model's expected inputs, outputs, and inference params. MLflow enforces this signature at inference time, and will raise a helpful exception if the user input does not match up with the expected format."}),"\n",(0,i.jsxs)(t.p,{children:["Creating a signature can be done simply by calling ",(0,i.jsx)(t.code,{children:"mlflow.models.infer_signature()"}),", and providing a sample input and output value. We can use ",(0,i.jsx)(t.code,{children:"mlflow.transformers.generate_signature_output()"})," to easily generate a sample output. If we want to pass any additional arguments to the pipeline at inference time (e.g. ",(0,i.jsx)(t.code,{children:"max_new_tokens"})," above), we can do so via ",(0,i.jsx)(t.code,{children:"params"}),"."]}),"\n",(0,i.jsx)(s.d,{executionCount:3,children:'import mlflow\n\nsample_input = "Tell me the largest bird"\nparams = {"max_new_tokens": 15}\nsignature = mlflow.models.infer_signature(\n  sample_input,\n  mlflow.transformers.generate_signature_output(generator, sample_input, params=params),\n  params=params,\n)\n\n# visualize the signature\nsignature'}),"\n",(0,i.jsx)(a.p,{isStderr:!0,children:"2024/01/16 17:28:42 WARNING mlflow.transformers: params provided to the `predict` method will override the inference configuration saved with the model. If the params provided are not valid for the pipeline, MlflowException will be raised."}),"\n",(0,i.jsx)(a.p,{children:"inputs: \n[string (required)]\noutputs: \n[string (required)]\nparams: \n['max_new_tokens': long (default: 15)]"}),"\n",(0,i.jsx)(t.h3,{id:"starting-a-new-experiment",children:"Starting a new experiment"}),"\n",(0,i.jsxs)(t.p,{children:["We create a new ",(0,i.jsx)(t.a,{href:"https://mlflow.org/docs/latest/ml/tracking.html#experiments",children:"MLflow Experiment"})," so that the run we're going to log our model to does not log to the default experiment and instead has its own contextually relevant entry."]}),"\n",(0,i.jsx)(t.h3,{id:"logging-the-model-with-the-prompt-template",children:"Logging the model with the prompt template"}),"\n",(0,i.jsxs)(t.p,{children:["Logging the model using MLflow saves the model and its essential metadata so it can be efficiently tracked and versioned. We'll use ",(0,i.jsx)(t.code,{children:"mlflow.transformers.log_model()"}),", which is tailored to make this process as seamless as possible. To save the prompt template, all we have to do is pass it in using the ",(0,i.jsx)(t.code,{children:"prompt_template"})," keyword argument."]}),"\n",(0,i.jsx)(t.p,{children:"Two important thing to take note of:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["A prompt template must be a string with exactly one named placeholder ",(0,i.jsx)(t.code,{children:"{prompt}"}),". MLflow will raise an error if a prompt template is provided that does not conform to this format."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"text-generation"})," pipelines with a prompt template will have the ",(0,i.jsx)(t.a,{href:"https://huggingface.co/docs/huggingface_hub/main/en/package_reference/inference_client#huggingface_hub.inference._text_generation.TextGenerationParameters.return_full_text",children:"return_full_text pipeline argument"})," set to ",(0,i.jsx)(t.code,{children:"False"})," by default. This is to prevent the template from being shown to the users, which could potentially cause confusion as it was not part of their original input. To override this behaviour, either set ",(0,i.jsx)(t.code,{children:"return_full_text"})," to ",(0,i.jsx)(t.code,{children:"True"})," via ",(0,i.jsx)(t.code,{children:"params"}),", or by including it in a ",(0,i.jsx)(t.code,{children:"model_config"})," dict in ",(0,i.jsx)(t.code,{children:"log_model()"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.d,{executionCount:4,children:'# If you are running this tutorial in local mode, leave the next line commented out.\n# Otherwise, uncomment the following line and set your tracking uri to your local or remote tracking server.\n\nmlflow.set_tracking_uri("http://127.0.0.1:5000")\n\n# Set a name for the experiment that is indicative of what the runs being created within it are in regards to\nmlflow.set_experiment("prompt-templating")\n\nprompt_template = "Q: {prompt}\nA:"\nwith mlflow.start_run():\n  model_info = mlflow.transformers.log_model(\n      transformers_model=generator,\n      name="model",\n      task="text-generation",\n      signature=signature,\n      input_example="Tell me the largest bird",\n      prompt_template=prompt_template,\n      # Since MLflow 2.11.0, you can save the model in \'reference-only\' mode to reduce storage usage by not saving\n      # the base model weights but only the reference to the HuggingFace model hub. To enable this, uncomment the\n      # following line:\n      # save_pretrained=False,\n  )'}),"\n",(0,i.jsx)(a.p,{isStderr:!0,children:"2024/01/16 17:28:45 INFO mlflow.tracking.fluent: Experiment with name 'prompt-templating' does not exist. Creating a new experiment.\n2024/01/16 17:28:52 INFO mlflow.transformers: text-generation pipelines saved with prompt templates have the `return_full_text` pipeline kwarg set to False by default. To override this behavior, provide a `model_config` dict with `return_full_text` set to `True` when saving the model.\n2024/01/16 17:32:57 WARNING mlflow.utils.environment: Encountered an unexpected error while inferring pip requirements (model URI: /var/folders/qd/9rwd0_gd0qs65g4sdqlm51hr0000gp/T/tmpbs0poq1a/model, flavor: transformers), fall back to return ['transformers==4.34.1', 'torch==2.1.1', 'torchvision==0.16.1', 'accelerate==0.25.0']. Set logging level to DEBUG to see the full traceback."}),"\n",(0,i.jsx)(t.h2,{id:"loading-the-model-for-inference",children:"Loading the model for inference"}),"\n",(0,i.jsxs)(t.p,{children:["Next, we can load the model using ",(0,i.jsx)(t.code,{children:"mlflow.pyfunc.load_model()"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"pyfunc"})," module in MLflow serves as a generic wrapper for Python functions. It gives us a standard interface for loading and querying models as python functions, without having to worry about the specifics of the underlying models."]}),"\n",(0,i.jsxs)(t.p,{children:["Utilizing ",(0,i.jsx)(t.a,{href:"https://www.mlflow.org/docs/latest/python_api/mlflow.pyfunc.html#mlflow.pyfunc.load_model",children:"mlflow.pyfunc.load_model"}),", our previously logged text generation model is loaded using its unique model URI. This URI is a reference to the stored model artifacts. MLflow efficiently handles the model's deserialization, along with any associated dependencies, preparing it for immediate use."]}),"\n",(0,i.jsxs)(t.p,{children:["Now, when we call the ",(0,i.jsx)(t.code,{children:"predict()"})," method on our loaded model, the user's input should be formatted with our chosen prompt template prior to inference!"]}),"\n",(0,i.jsx)(s.d,{executionCount:5,children:'loaded_generator = mlflow.pyfunc.load_model(model_uri=model_info.model_uri)\n\nloaded_generator.predict("Tell me the largest bird")'}),"\n",(0,i.jsx)(a.p,{children:"Downloading artifacts:   0%|          | 0/23 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(a.p,{isStderr:!0,children:"2024/01/16 17:33:16 INFO mlflow.store.artifact.artifact_repo: The progress bar can be disabled by setting the environment variable MLFLOW_ENABLE_ARTIFACTS_PROGRESS_BAR to false"}),"\n",(0,i.jsx)(a.p,{children:"Loading checkpoint shards:   0%|          | 0/10 [00:00<?, ?it/s]"}),"\n",(0,i.jsx)(a.p,{isStderr:!0,children:"2024/01/16 17:33:56 WARNING mlflow.transformers: params provided to the `predict` method will override the inference configuration saved with the model. If the params provided are not valid for the pipeline, MlflowException will be raised."}),"\n",(0,i.jsx)(a.p,{children:"['The largest bird is a pigeon.\n\nA: The largest']"}),"\n",(0,i.jsx)(t.h2,{id:"closing-remarks",children:"Closing Remarks"}),"\n",(0,i.jsxs)(t.p,{children:["This demonstration showcased a simple way to format user queries using prompt templates. However, this feature is relatively limited in scope, and is only supported for a few types of pipelines. If your use-case is more complex, you might want to check out our ",(0,i.jsx)(t.a,{href:"https://www.mlflow.org/docs/latest/llms/custom-pyfunc-for-llms/notebooks/custom-pyfunc-advanced-llm.html",children:"guide for creating a custom PyFunc"}),"!"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);